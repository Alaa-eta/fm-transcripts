[00:00:04]
>> Scott Moss: I promised that I was going to walk through how GraphQL resolves different levels, I forgot I was supposed to do that. So let's do that first, I think that'll be very helpful. Because I know when I first saw that, I was just like, ooh, man, that is awesome, so let's start with that.

[00:00:25]

>> Scott Moss: So many branches, okay, I've got to write all of that over again.
>> Scott Moss: Let's start as a user.
>> Scott Moss: Wait, there we go, okay, so user one more time.
>> Scott Moss: Getting user, getting playlists.
>> Scott Moss: And then getting songs.
>> Scott Moss: And then on the song, test, String.
>> Scott Moss: And, down here, Song.

[00:01:06]

>> Scott Moss: Test.
>> Scott Moss: Return test.
>> Scott Moss: And, getting test. Okay, now we can try it.
>> Scott Moss: All right, so if we come back in GraphiQL, and if we run this query again, I should just refresh to make sure GraphiQL is up to date. We can check the query of the song and we should see test, also.

[00:01:34]
So now let's come down here and I'll say I also want to get the test, if I run this, everything looks good. Then we can look at the logs, and we can see right here, it's getting the user, then it was getting the playlist. Then it was getting the songs and then it was getting the test.

[00:01:51]
So let's undo all these queries and see what keeps logging, so I'm going to get rid of test, and now I'm going to run this again. Notice it does not say getting tests, we didn't ask for it, so it didn't try to get it. Now we're going to get rid of songs, let me refresh that.

[00:02:07]
I'm going to get rid of songs, notice it's not saying, getting songs, I didn't ask for it, right? Kill that, and then if I get rid of playlists, it's not asking for playlists, because I didn't ask for it. It only resolves what you ask for, and that's the power, that's the thing that I wanted to show you.

[00:02:29]
So you have to create the resolvers if someone asks for it, but you don't know if they will or not. Which is why you want to have nested resolvers versus putting everything in one flat resolver. That gets every possible combination of everything and you would never know what someone was asking for.

[00:02:44]
And if you did, you'd probably have a very restrictive API that you probably wouldn't need GraphQL for. You should just use REST or something, most likely, or just your own interpretation or whatever.
>> Scott Moss: Any questions on that, how that's working? Or, I know some people, if you think like me, you might be thinking like, well, how do I break that?

[00:03:07]
Because that's how I learn, I'm like, how do I break that? Anybody thinking like that? Like what are some questions around like, what are the fallacies of that, or anything like that?
>> Scott Moss: Nope, all right, cool, okay. So now back to the test, if you're on lesson 14, go ahead, and write some.

