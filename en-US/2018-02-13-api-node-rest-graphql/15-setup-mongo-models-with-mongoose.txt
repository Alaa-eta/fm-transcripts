[00:00:02]
>> Scott Moss: All right, so let's hop in and talk about some of this stuff. I'm going to go into,
>> Scott Moss: Let's go into use or song.model, we'll go to song.model. So if you go to song.model you'll see something like this, you see a schema that's completely empty. And then, you see all this other stuff underneath it.

[00:00:21]
Let's take a note of what's going on here. First, we're importing Mongoose. Which is an ODM. We make a object called schema, that's empty. We'll do some work here, in a minute. And then what we do is we make something called a songSchema, which is a instance of a new mongoose.Schema.

[00:00:37]
And that's basically just, I'm taking this object. I'm gonna create a Mongoose schema from this object using the new schema method. And then what you do is you take that schema and you create a model from it. Very similar to what you do in most databases, you create a schema that gives you a table.

[00:00:53]
So you can think of it like this, several model, this is a table now. So I'm creating a schema based off of these rules that we have yet to define. And then with that schema, I'm going to create a model in the database by this name called song.

[00:01:07]
I'm gonna reference it here, so I can use it to do things in my application.
>> Scott Moss: So this pattern you'll see in almost every single model file, this is the same pattern. Create a schema, Create a Model, Export the model. This model right here on line nine is the thing that you'll be using in your code.

[00:01:25]
So create, find, delete, remove, update, that's what you'll be using for that resource. Populate, all that's here. Now the important part is this part right here. Data modeling with schema. So we have a lot of people who's used Mongo. Who here has used Mongoose schemas? A few people?

[00:01:43]
Okay so you pretty much know how powerful they are. We aren't going to get into really advanced stuff like custom validators and all that crazy stuff. But we are going to model some data here. So there are some tests associated with this so you can't just... Whatever you want.

[00:02:01]
Like I write check assess every field donor. And required to know that stuff. Well let's just walk through how we can do some of this stuff with the schema. And how it works with monty. So the way it works you have an object free scale. And then what you do is the properties on that object are the names of the field that the object's going to have.

[00:02:17]
So for instance for Let's just not worry about song right now. We're just gonna make a completely different one. So let's just call this one a dogSchema, all right. So this is a dogSchema and basically the way Mongoose needs it. Like I said the keys are the names of the fields you want.

[00:02:36]
So, what's something a dog would have.
>> Speaker 2: A name.
>> Scott Moss: Name, okay. Now we have to tell Mongoose what type this is. So we can say String. Mongoose uses the built in natives inside of JavaScript for the types. So String, capital S, is a native in JavaScript, it's a native primitive type We can also do a little bit more here.

[00:03:00]
We can say, hey let's type a string, which is the same thing I had before. But the reason I expanded on an object is because I wanna do something, I wanna make this required. So, I can say, required true. So, this allows me to say, hey a dog has a name, his type and string and it is also required.

[00:03:16]
That's what that's saying. I can also take it a step further and say, you know, this name also has to be unique for the entire database, so unique true. So, now no two dogs can have the same name. So, let's move on to another one. Let's say we wanted to know if this dog was, I don't know,

[00:03:41]

>> Scott Moss: Older now, I don't know, is old. Is it an old dog? So we say this is a type Boolean because it's true or false. So, we'll put that. We can also say this type if Boolean, it is also required But we're not going to make this unique.

[00:03:59]
Cuz it's a boolean that doesn't make any sense. But we will give it a default of false. By default all dogs are not old unless you specifically say that it's old.
>> Speaker 3: Do the types have to be primitives or can you define complex subjects for the type?
>> Scott Moss: The types have to be primitives.

[00:04:17]
Actually, you know what? Maybe, you might be able to pass in. Depending on what version of Mongoose you're on. I'll look it up after this, but I would say it's safe to use permits for now. But if you're asking me, if you can do things, like this. Or, I'm sorry, that's a bad example.

[00:04:31]
Carr?
>> Speaker 3: Yeah.
>> Scott Moss: I would imagine, no. And if you could, I would say you probably stay away from it. Because now you're referencing some class that's in the code. When really you should be referencing some other model, right? So if that's what you wanna do, that's what we're about to get to next.

[00:04:46]
So if you wanna reference another type, that type should be a model, not something that's code level. It's on the database level, right? So if you wanna do that, so you can be like I wanna reference the dog's owner. Right, that would be some other shape. So the way we would do that is, let's say.

[00:05:00]
This type is actually gonna be mongoose.Schema, with a capital S, .Types, with a capital T, .ObjectId, it's really long. Basically, every ID in Mongoose, or in Mongo, really, is called ObjectId. It's technically an object But, at a read time it's really a stream. That's how they treat their IDs.

[00:05:23]
We're saying this owner, this type, is an ID. But that alone is not good enough. So what we do is we say ref the- Imagine we had some owner model somewhere, reference the owner model. So this tell the Mongoose is, when we tell populate. I'm like, hey, I wanna get a pet whose name is Gary.

[00:05:44]
And I want to also get their owner and populate the owner. So it'll go get Gary, it'll get us the same, the isold. And then for owner, instead of giving us back an ID. It'll take this ID, go to the owner's model, and get the owner with that ID, and put it here.

[00:05:57]
So this owner would no longer be an ID, or be an object, of the owner. That would populate it at run time. So that's how you would reference other shapes in the database, it's also a reference. So you got that, you can also do things like, you could say faveFoods and this is an array of strings.

[00:06:20]
So you got favorite foods. I mean there's a lot of things you can do here, you can do geospatial indexes. You can do custom validators, there's a lot of stuff. We really won't get into all of that, but yeah, this is the basics of creating a schema with Mongoose.

[00:06:38]
So you would take that schema and then you would pass it into Mongoose.schema, and you'll get back a Mongoose schema. Mongoose has to validate that this is real. Like, yeah, cool, we like that, we like that, here you go. And then you take that schema and you exchange it for a model.

[00:06:51]
This method right here, Mongoose.model, if you just pass it in like this with a schema, I'm sorry, if you just pass it in without a schema. It will try to retrieve a model called song. If you pass it in with a schema, it will set a model call song.

[00:07:04]
So it's a getter and a setter. So without the schema, it will try to retrieve it. With a schema, it will try to set it. So remember that. There's also stuff we can do here, like we can do hooks. We can do custom methods and stuff like that.

[00:07:21]
Like, for instance, if I wanted to say you know what, I want to do something before, every time before this song schema is validated. So, I can say song schema. prevalidate and this function will run every time.
>> Scott Moss: Before very time the schema is validated. So before any error's thrown, because you didn't pass in the right type.

[00:07:44]
Or you didn't meet the validations, I could run this function. You can also do pre-save, post-save, pre-find one and update. There's a lot of different trade-offs between what you're doing, but yeah, these are hooks. So this is really great to do things like Subscribing to data via web hooks.

[00:07:58]
Like the data changed, send an update to everybody subscribed from this web hook, or something like that. So it's really cool. Send off an email notification or whatever you wanna do. A lot of different stuff you can do inside here, it's really cool.

