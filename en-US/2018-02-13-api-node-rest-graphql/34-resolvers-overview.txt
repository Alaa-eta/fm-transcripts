[00:00:02]
>> Scott Moss: Resolvers, once you learn this part you can pretty much do everything with GraphQL, other than mutations. So we'll go over Resolvers, we'll cut to the challenge, then we'll eat lunch, and we'll come back and talk about it. So Resolvers, looks like I was about to put something here.

[00:00:20]
[LAUGH] I don't know what happened I did save or I don't know. But I'll just talk about resolvers. Functions to resolve data for your schema. So again, let's look at this example right here. I'm just gonna walk through. I think it's better if I just walk through it as I talk.

[00:00:36]
So again we have this, this is a resolver. I want to talk about this argument syntax here. So resolver takes in four arguments. The first argument is gonna be the root value. Root value is optional because it's up to you to pass on the root value. Most of the time you won't have anything here.

[00:01:00]
On a top level resolver. On a Nesta resolver when we get there, this will always be something. It will be the thing that is being resolved before it. [LAUGH] It will be, Okay, so a Nesta resolver is another branch. Its root value will be the branch that it branched from, right?

[00:01:17]
But because this is a top level resolver, as in it is a branch from the root. There's nothing above it, there is no rootValue, unless we supply it. You can supply a rootValue
>> Scott Moss: Here if you want. I'm sorry here, you could put a rootValue here.
>> Scott Moss: And you could put whatever you want.

[00:01:40]
And that rootValue will be passed down to your top level. Top level resolvers. What that's mostly gonna be used for that I've seen is for pervert quest caching. So there's something called a data loader. We're not gonna be using the data loader today. But allows you to like cache things per request.

[00:01:56]
Cuz if you did the math and you kinda thought about this for a minute. You, somebody could query your GraphQL API. And recursively make it query the database and kill your API, it could kill it. For instance, if your user type had a song, and your song type had a user.

[00:02:12]
You can ask the user for the song, ask the song for the user, the user for the song. You can do that over and over and over again. And every time you have a resolve, it will create a database for that, right. It's gonna go on and on and on.

[00:02:22]
So you can stop that, you can a root value that caches it. So it's like, I've already this user once, cache it here, so if he asks for it again, just get it from the cache, per request So, there's a lot of advanced stuff you could do there.

[00:02:33]
But yeah, you could have like a recursive GraphiQL that gets pooped on so, gotta be careful. So the first ones the root value which is normally empty unless you pass in something or if you're on the nested resolver. The second one is going to be Any arguments that are parsed in.

[00:02:51]
So when we parse in arguments permutations, that's what this second one is gonna be. It's gonna be an object of those arguments, with the same name as they are in your graph QL. So if we went to here, and let's say I don't know, let's say getme took an argument of hello which type of spring, right, inside that resolver.

[00:03:09]
We don't have an object and we call this like args. There will be an args.string, or I'm sorry, args.hello on there. That's how this works. This is an object for all the arguments for this vserksolver. Normally what you would see, especially in my code, all this d structure like this.

[00:03:26]
So I would just be like, hello. I'll just get it right there, d structuring. Isn't it a six or is it the same thing as
>> Scott Moss: rs.hello. It's the same thing as saying
>> Scott Moss: The same thing. I just the structure in there. Another pattern that I follow was to always put arguments on a property called input.

[00:03:49]
So when you see me do input we start writing inputs. I always use the variable name input which has nothing to do with the input type in graghic. I just name it input that way I know in some of our resolver there is always input argument. The only time I wouldn't use input if it was just one argument like an id, I'll just put ID.

[00:04:06]
But it's like, you're doing an update, cool, here's an input. So, I know it's always called input. It helps you a lot when you start writing. Otherwise you have to remember every signature of every single mutation that you wrote. And that can be tedious, it's better to just give them all the same name, it's like there's an input.

[00:04:24]
So, that's the second argument. The third argument is gonna be called the context. Context is, remember when we did this down here, this context object? That's what context is. It's kind of like a root value, except for it's more like, it's not just values you can pass functions down here.

[00:04:42]
Pretty much anything that needs to be shared for all your resolvers. So in this case, the context is the request that was coming. So we passed the request down, we passed the user down. So that's the context. You'll use this one a lot. And then the last one which you will probably almost never use unless you're going to advance is info.

[00:05:01]
And this is going to be the native AST for the graph QO cree that came in. If you're going to log this you'll see some crazy stuff. But it's very helpful to do optimizations for the data base created. First you can take this AST. You can feed it to Mongo and for instance if I did a query where I only asked

[00:05:23]

>> Scott Moss: Let's go back here. So let's say I did a query where I only asked for the id. That ast that comes in, that object that's gonna represent this query, is only gonna have an id property on it. So they're not gonna tell Mongo to only query for the id field and not query for all the fields.

[00:05:38]
And then give it to GraphQL, have GraphQL only pop off the ID, because that's what would happen. So by saving the database queries, I can use that AST to tone my database to only query for these fields that were asked for. So that is like an optimization you could do, at least the problems with caching, especially if you're doing a.

[00:05:55]
So you gotta figure that out. But yeah you can do that. But you will almost never use info, but I mean I'll log it for you so you can see what it'd look like. But If you want to see raw graph gill looks like I'll just log this for you here so you can run this.

[00:06:18]
Run our query, we'll go back and here you go, here is the ast for that query. Here is the field name, that's called gitny, all the notes. This is the raw graphical query associated with that, the schema, any directives we've not talked about directives. Pretty much everything associated with that, so you could take this.

[00:06:38]
And you can see that you can use this information to associate to your database. What you actually need to query and what you don't need to query. So like I said you probably almost never use this. This is for very, very advanced cases. And you'll probably just will never use it.

[00:06:55]
But it's there. Most of the time what you are gonna be using It's going to be are's in context, probably never even filled this in. This will be just a place holder until you get to the next step resolvers. Then you have to use this one but most likely just these two in context.

[00:07:14]
That's the signature for a resolver. Now for an actual resolver Here's how you would hook it up. So we're using graphql-tools, which allows us to hook it up in a specific way. Depending on what implementation you use, you hook up your resolvers differently. We're using graphql-tools, I prefer this method, it makes so much more sense to me.

[00:07:30]
So the way it works is, if we go look at the graphql file, we have a type called Query here, right, on this user.
>> Scott Moss: Guess what that's doing?
>> Speaker 2: Queries the user?
>> Scott Moss: GetMe queries the user, but what do you think this is doing? We know what this is doing, right, type User?

[00:07:52]
That creates a user type, what is this doing?
>> Speaker 3: Creating [INAUDIBLE] type.
>> Scott Moss: Yeah, it's creating a Query type, yep. It creates a Query type, and that Query type gets associated And,
>> Scott Moss: Here, there's our queryType. It gets associated to this query here. I just put in the user file.

[00:08:09]
You only make the queryType one time and the mutationType one time. So we made a queryType, and inside that queryType we made a query called getMe. I'm gonna get rid of this because we don't need these right? So we made another one called getme notice the name, getme, camel case right.

[00:08:25]
I'm gonna pull the resolvers, look at that it is also called getme. Inside here the function name these have to match. If they dont match it will break and in fact everything has to match. So I have user resolvers, I defined for the Query with a capital Q.

[00:08:45]
Ehich is exactly the same over here, Query. That I want to make a Query called getMe. And I don't have to put it twice, cuz it's ES6, right? It just looks it up.
>> Scott Moss: And it's called getMe. If I change the name of this, this will break. If I say, getMeee, you know it's getMe, now I'm going to get an error mostly likely.

[00:09:07]
Right here. Says it right here, Cannot apply update. Query dot getMeee defined in resolvers, but not in schema. You need to restart your application, all right? That's because they're saying, Hey you defined a resolver called getMe with three E's. But inside your schema you don't have that. So that's why it's freaking out.

[00:09:28]
So they have to match.
>> Scott Moss: You can turn that error off if you want, but I do not recommend it. So if you go back to our resolver and we replace. We go back, it didn't match it. So those have to match.
>> Scott Moss: Any questions on that? So we have our query here, if we have more queries like for instance we had get all users.

[00:09:49]
Then we have to go inside of here and do get all. Like now we're gonna make another one called get all, and that returns an array of users.
>> Scott Moss: Then now we have the make a get all over here. The same would happen if I put in a schema Don't put in the resolver.

[00:10:05]
Also get an error.
>> Scott Moss: Or maybe not, maybe doesn't give me an error. Maybe it doesn't give me an error unless I run it.
>> Scott Moss: Get.
>> Scott Moss: All right, it didn't even show it. Did I not save it?
>> Scott Moss: Get all.
>> Scott Moss: I gotta refresh GraphICL yeah sometimes you've gotta refresh GraphICL because the introspection query is old.

[00:10:35]
So make sure you do that.
>> Scott Moss: There is get all and then I'm like cool give me ID, and then it's like no. You try to do a user that is non-known but we don't even know how to resolve this. you didn't tell us how to resolve it.

[00:10:52]
So, it's just null. So, yeah you gonna get an error either way if you don't match this stuff up. So make sure they match. Matched up, that's the first rule.
>> Scott Moss: And we do have them matched up here.

