WEBVTT

1
00:00:02.760 --> 00:00:06.195
&gt;&gt; Scott Moss: Okay cool, so
just hop right into some codes then.

2
00:00:06.195 --> 00:00:13.882
I'm gonna check out to,
&gt;&gt; Scott Moss: Lesson-6.

3
00:00:16.950 --> 00:00:18.339
&gt;&gt; Scott Moss: Oops,

4
00:00:21.410 --> 00:00:22.714
&gt;&gt; Scott Moss: There we go [COUGH]

5
00:00:22.714 --> 00:00:28.400
the side of here, if you go to modules,
create JS, back into this file.

6
00:00:29.940 --> 00:00:31.994
Basically, what you're gonna be doing, so

7
00:00:31.994 --> 00:00:34.990
we're gonna be trying to get
the test the pass for the query.

8
00:00:34.990 --> 00:00:39.526
if you run the test right now,
you should get some failing tests for

9
00:00:39.526 --> 00:00:43.120
the query, that are uncommented now.

10
00:00:43.120 --> 00:00:46.231
It should be four of them,
two of them are already passing,

11
00:00:46.231 --> 00:00:50.130
cuz they're like very naive tests,
but four of them are failing.

12
00:00:50.130 --> 00:00:53.074
And we need to get them to pass, and then
we also need to make sure the ones that

13
00:00:53.074 --> 00:00:55.945
are passing are not falsely passing,
which I'm sure they are right now.

14
00:00:55.945 --> 00:00:58.295
So basically what were gonna do
is you're gonna come in here,

15
00:00:58.295 --> 00:00:59.390
inside of this controller.

16
00:01:01.610 --> 00:01:03.285
The controller object and

17
00:01:03.285 --> 00:01:07.940
you're gonna creates the appropriate
database calls for each action.

18
00:01:07.940 --> 00:01:09.854
I didn't show you how to do this yet, so

19
00:01:09.854 --> 00:01:13.972
we're gonna walk through some examples of
each single one, to show you how to do it,

20
00:01:13.972 --> 00:01:17.280
how to use it with monitors, so
let's talk about that for a minute.

21
00:01:17.280 --> 00:01:20.710
Let's just go, let me see,
that's a document.

22
00:01:20.710 --> 00:01:25.240
That's a documents,
that's a documents, its a model.

23
00:01:25.240 --> 00:01:28.240
Okay cool, let's do this, I'm just
gonna come down here, blank canvas.

24
00:01:30.920 --> 00:01:35.188
And let's talk about using a model and
getting a document, from the database and

25
00:01:35.188 --> 00:01:38.222
all the different ways you can do that,
using Mongoose.

26
00:01:38.222 --> 00:01:42.842
So let's say I have a model, a Mongoose
and in our case a model is a song,

27
00:01:42.842 --> 00:01:44.230
a user or a playlist.

28
00:01:44.230 --> 00:01:45.681
Was the only models we have.

29
00:01:45.681 --> 00:01:50.880
All right,
let's just say we have a song, okay?

30
00:01:50.880 --> 00:01:51.990
I can use that song model.

31
00:01:53.300 --> 00:01:55.270
And let's say, I have an ID,

32
00:01:55.270 --> 00:01:59.848
I have an ID from the parameter and
I wanna find the song with that given ID.

33
00:01:59.848 --> 00:02:05.667
Using Mongoose, I can say Song findById
and I can pass in an ID like that.

34
00:02:05.667 --> 00:02:08.085
This is gonna return a Promise,

35
00:02:08.085 --> 00:02:13.580
by default Mongoose uses like their
own implementation of promises.

36
00:02:13.580 --> 00:02:15.270
I converted it to use the native promises.

37
00:02:15.270 --> 00:02:18.487
So, whatever the native promise
has you have here, right?

38
00:02:18.487 --> 00:02:23.326
But actually, actually what happens is
this thing actually returns a query

39
00:02:23.326 --> 00:02:25.680
what's called a mongo, come back.

40
00:02:25.680 --> 00:02:31.825
It actually returns a, mongo query
object which has a promise on it.

41
00:02:31.825 --> 00:02:34.578
A query object will get to,
we'll talk about it briefly level but

42
00:02:34.578 --> 00:02:37.350
we gonna really use it here,
this allows you to drill down your query.

43
00:02:37.350 --> 00:02:40.566
Kinda like SQL, were you can like,
I wanna find my ID really,

44
00:02:40.566 --> 00:02:43.680
you wouldn't need a query but
let's see do the generic find.

45
00:02:43.680 --> 00:02:47.390
So I wanna find all songs
where created at was this.

46
00:02:47.390 --> 00:02:52.210
If this rejects is true,
exact text match this,

47
00:02:52.210 --> 00:02:54.380
that's the query objects
you wanna drill down on it.

48
00:02:54.380 --> 00:02:55.900
We're not gonna do that right now.

49
00:02:55.900 --> 00:02:57.610
So finding by ID's pretty simple.

50
00:02:57.610 --> 00:02:59.690
But if you just want the pure premise,
you can just go ahead and

51
00:02:59.690 --> 00:03:02.460
call that exec, I recommend doing that.

52
00:03:02.460 --> 00:03:04.920
This means execute the query
that's what that means.

53
00:03:04.920 --> 00:03:08.595
So if you put that exec,
on anything that starts with find, so

54
00:03:08.595 --> 00:03:11.645
if its song.findById and
then put that exec ever.

55
00:03:11.645 --> 00:03:16.080
That means, there's no,
there's no more query coming out there.

56
00:03:16.080 --> 00:03:23.480
Like, for instance, so I can come here
like say .where(), .limit(), .whatever.

57
00:03:23.480 --> 00:03:25.720
When I do that .exec() that means
there's nothing else coming out there.

58
00:03:25.720 --> 00:03:27.360
That's what that means.

59
00:03:27.360 --> 00:03:29.461
It means execute this query,
give me the promise.

60
00:03:29.461 --> 00:03:35.120
Because, I'm not doing any query here I'm
just gonna jump straight to execute.exec.

61
00:03:35.120 --> 00:03:39.220
This returns a promise, and you could
probably just go ahead async/await it.

62
00:03:39.220 --> 00:03:41.000
So, I have a song here.

63
00:03:41.000 --> 00:03:42.525
There you go, so that would be a song.

64
00:03:42.525 --> 00:03:47.790
Did you never use async/await don't
worry about it, just use a premise.

65
00:03:47.790 --> 00:03:50.360
If you're just like what is that?

66
00:03:50.360 --> 00:03:54.460
It's cool, you could just use premises,
it's told us the same thing.

67
00:03:54.460 --> 00:03:56.690
I just like to use a single weight,
cause it's legit.

68
00:03:58.230 --> 00:03:59.130
So that's how you find one by ID.

69
00:03:59.130 --> 00:04:04.560
Lets say we wanted to,
find one not by an ID but by a name.

70
00:04:04.560 --> 00:04:08.402
So we'd say Song.findOne(), and

71
00:04:08.402 --> 00:04:12.680
then we pass in the query that we want.

72
00:04:12.680 --> 00:04:16.411
So we wanna find one who's
name equals like, thisname,

73
00:04:16.411 --> 00:04:20.308
that'll give us that and
then we can also call .exec().

74
00:04:20.308 --> 00:04:23.000
And that's how you would
find one by a name.

75
00:04:23.000 --> 00:04:26.560
Or whatever property you wanna pass in
here, whatever thing you wanna search by.

76
00:04:27.640 --> 00:04:31.620
But note, when you created your schema.

77
00:04:31.620 --> 00:04:34.580
You didn't create any indexes by default.

78
00:04:34.580 --> 00:04:37.849
So, when you start thinking about
how you wanna search for data,

79
00:04:37.849 --> 00:04:40.080
this is just a data modelling thing.

80
00:04:40.080 --> 00:04:42.170
Make sure you're creating indexes
on things you wanna search,

81
00:04:42.170 --> 00:04:43.070
to keep your queries fast.

82
00:04:43.070 --> 00:04:46.536
If you don't know anything
about indexes and databases,

83
00:04:46.536 --> 00:04:50.993
it's basically just like a place,
a place where the databases references

84
00:04:50.993 --> 00:04:54.900
properties and values, so
they can look them up faster, right?

85
00:04:54.900 --> 00:04:56.740
It's like a constant time lookup almost,
like,

86
00:04:56.740 --> 00:04:59.180
it's the difference between like
having an array or an object.

87
00:04:59.180 --> 00:05:01.210
An object is constant time, right?

88
00:05:01.210 --> 00:05:02.190
You can go straight there.

89
00:05:02.190 --> 00:05:05.031
Whereas an array's linear,
so the bigger the array,

90
00:05:05.031 --> 00:05:07.420
the longer it's gonna take to search.

91
00:05:07.420 --> 00:05:08.757
Constant time is you know, alter in, so

92
00:05:08.757 --> 00:05:11.790
though I mean 0 1 so
it'll get it instantly.

93
00:05:11.790 --> 00:05:16.279
So
&gt;&gt; Scott Moss: So

94
00:05:16.279 --> 00:05:20.180
you got that,
let's say you wanted to create a song.

95
00:05:20.180 --> 00:05:24.185
There's so many ways you can do that, but
my preferred way is use song.create and

96
00:05:24.185 --> 00:05:27.450
then pass it in the object that
satisfies the song schema, right?

97
00:05:27.450 --> 00:05:30.349
So you just do that,
you can also do something like this.

98
00:05:32.670 --> 00:05:36.700
It's a new song, and then you'll
pass that in, and then afterwards,

99
00:05:36.700 --> 00:05:39.510
you would have to call safe to save it.

100
00:05:42.570 --> 00:05:46.640
That's how you create, and then,
let's say you wanted to update.

101
00:05:46.640 --> 00:05:51.970
You can say Song.findoneAndUpdate().

102
00:05:54.840 --> 00:05:59.412
You pass in the thing you wanna find by,
I wanna find the one with this name, and

103
00:05:59.412 --> 00:06:03.720
I wanna update it with a new
name called other name.

104
00:06:05.170 --> 00:06:07.950
And I'm gonna pass in these options,
called new: true.

105
00:06:09.060 --> 00:06:12.510
New: true's important,
it just means return the new updated.

106
00:06:12.510 --> 00:06:16.350
Document from this query and
not the one before I updated it.

107
00:06:16.350 --> 00:06:18.467
If you don't put new: true it'll give
you the old one before you updated.

108
00:06:18.467 --> 00:06:21.270
If you put new: true it'll give
it to you after you updated it.

109
00:06:21.270 --> 00:06:22.440
That's probably what you want.

110
00:06:22.440 --> 00:06:23.810
You probably wanna get
it after you update it.

111
00:06:23.810 --> 00:06:24.700
So you had the new: true.

112
00:06:24.700 --> 00:06:26.092
I dunno why that's not default.

113
00:06:26.092 --> 00:06:28.900
I dunno why you would never not want that,
but yeah.

114
00:06:28.900 --> 00:06:31.430
So that's how you find one and update.

115
00:06:31.430 --> 00:06:36.420
You can also do,
as you probably guessed, findByID and

116
00:06:36.420 --> 00:06:38.970
update, and
you just pass in an ID in here,

117
00:06:38.970 --> 00:06:45.769
instead of an object.
&gt;&gt; Speaker 2: If

118
00:06:45.769 --> 00:06:48.611
we're using the find by paramo,
we always just be finding and

119
00:06:48.611 --> 00:06:51.900
then updating later?
&gt;&gt; Scott Moss: Right.

120
00:06:51.900 --> 00:06:55.360
So, the next one is because, like you
said, you're gonna be finding by params.

121
00:06:55.360 --> 00:06:57.169
So, the params gonna find it and

122
00:06:57.169 --> 00:07:00.620
it's gonna pass the document
along to the request objects.

123
00:07:00.620 --> 00:07:02.390
So, you need to wait to update it, right?

124
00:07:02.390 --> 00:07:05.950
So, the way you would do that is if you-
Now, all this was model level stuff.

125
00:07:05.950 --> 00:07:07.840
Why don't we just label that?

126
00:07:07.840 --> 00:07:12.340
This is all model level stuff by
also you can do it on a model.

127
00:07:13.770 --> 00:07:16.330
The updating stuff like you're
talking about, that's document level.

128
00:07:16.330 --> 00:07:17.740
That's what we're gonna talk about next.

129
00:07:17.740 --> 00:07:23.230
So once you already have a document, as
in from the params, then you can do this.

130
00:07:23.230 --> 00:07:25.580
So once you already have a document,
we have song.

131
00:07:25.580 --> 00:07:27.750
Song is a document, here it is right here.

132
00:07:27.750 --> 00:07:32.670
What we can do, as you can call .save on
that, if you want and that will save it.

133
00:07:32.670 --> 00:07:35.800
So, for instance, if you had a song,
you already have this song right here, and

134
00:07:35.800 --> 00:07:37.500
he's like you know what,
your name is now this.

135
00:07:37.500 --> 00:07:39.940
Your name equals whatever this is now.

136
00:07:39.940 --> 00:07:43.010
And I'm gonna call song .save,
and it's gonna save in database.

137
00:07:43.010 --> 00:07:44.800
And this is async, so you can await this.

138
00:07:46.690 --> 00:07:49.761
This also returns a premise.
&gt;&gt; Scott Moss: So

139
00:07:49.761 --> 00:07:51.130
that'll give you the newSong.

140
00:07:51.130 --> 00:07:53.700
So you basically just,
attach the properties you want to it.

141
00:07:53.700 --> 00:07:55.280
You can do merge.
You can do whatever you want.

142
00:07:55.280 --> 00:07:59.560
And then whenever you call .save, that's
gonna issue the right to the database.

143
00:07:59.560 --> 00:08:02.690
Because this actual object you get back,
is not just a regular object.

144
00:08:02.690 --> 00:08:05.030
It's a reference to
a document that is live.

145
00:08:05.030 --> 00:08:06.100
It's a live reference.

146
00:08:06.100 --> 00:08:07.390
It's not a JSON thing.

147
00:08:07.390 --> 00:08:13.170
If you want this to be JSON, you have
to call .lean, which turns it to JSON.

148
00:08:13.170 --> 00:08:19.120
Or when you get it back, you don't have to
say song.ToJSON or ToObject to convert it.

149
00:08:19.120 --> 00:08:24.050
By default, it's gonna be an actual live
document that has a save method on it,

150
00:08:24.050 --> 00:08:27.100
a remove method on it,
a populate method on it.

151
00:08:27.100 --> 00:08:30.130
It'll have all those methods
on it that it can use to

152
00:08:30.130 --> 00:08:33.439
act on itself.
&gt;&gt; Scott Moss: So

153
00:08:33.439 --> 00:08:38.260
that's how you would save,
an already gathered document.

154
00:08:38.260 --> 00:08:39.210
You would just call .save on it.

155
00:08:39.210 --> 00:08:41.200
So that's a document level thing.

156
00:08:41.200 --> 00:08:50.203
So you have a song.save.
&gt;&gt; Scott Moss: All right,

157
00:08:50.203 --> 00:08:56.930
so you're gonna use Season that
you also might be using there.

158
00:08:56.930 --> 00:09:01.860
I mean you also have like find one and
remove, find by ID and remove.

159
00:09:01.860 --> 00:09:06.740
And yeah, that's pretty much it.

160
00:09:06.740 --> 00:09:08.460
And this works for
every single model database, right?

161
00:09:08.460 --> 00:09:09.620
It's all the same, so
it doesn't really matter.

162
00:09:09.620 --> 00:09:11.599
So you're gonna take this.

163
00:09:13.220 --> 00:09:17.308
What we learned here about finding one,
creating, finding on an update, removing,

164
00:09:17.308 --> 00:09:17.988
populating.

165
00:09:17.988 --> 00:09:22.230
And we're gonna fill out, this stuff.

166
00:09:23.830 --> 00:09:26.380
So for instance, let's just walk through,
create one together.

167
00:09:26.380 --> 00:09:28.700
So create one,
takes some model, takes a body.

168
00:09:29.740 --> 00:09:31.532
Judging by those two things,
what do you think we need to do?

169
00:09:31.532 --> 00:09:34.127
&gt;&gt; Speaker 2: Model.create model.create,

170
00:09:34.127 --> 00:09:36.810
return.
&gt;&gt; Scott Moss: Right, exactly, so, we're

171
00:09:36.810 --> 00:09:42.200
gonna return model.create which returns
the promise, and we don't wanna create?

172
00:09:42.200 --> 00:09:43.260
The body?

173
00:09:43.260 --> 00:09:46.939
Exactly, that's it.
You don't have to call it .exec on create.

174
00:09:46.939 --> 00:09:48.820
.Exec is for
anything that starts off with find.

175
00:09:48.820 --> 00:09:50.082
So, that's how you would create one.

176
00:09:50.082 --> 00:09:53.210
You just call up model.create and
you pass to the body, done.

177
00:09:54.610 --> 00:09:57.500
So, updateOne,
notice the name of the arguments.

178
00:09:57.500 --> 00:10:01.730
UpdateOne has a document, does not
have a model, cuz' it's a document.

179
00:10:01.730 --> 00:10:03.250
We talk about how to update documents,

180
00:10:04.390 --> 00:10:08.820
down here, you put the properties on,
you hit save, right?

181
00:10:08.820 --> 00:10:11.735
You can do a mixing, whatever you want,
put those properties on there and

182
00:10:11.735 --> 00:10:12.600
you save it.

183
00:10:12.600 --> 00:10:15.690
So notice that deleteOne
is also a document.

184
00:10:15.690 --> 00:10:19.590
Documents know how to remove themselves,
remember that.

185
00:10:19.590 --> 00:10:23.980
But I don't think
the .remove returns itself.

186
00:10:23.980 --> 00:10:24.850
I dunno, I can't remember.

187
00:10:24.850 --> 00:10:27.846
I'll have to figure that out.

188
00:10:27.846 --> 00:10:32.730
Document to get, this one's actually like,
we're just gonna do this one right now

189
00:10:32.730 --> 00:10:37.090
because it's like, a trick question,
usually they just return the same thing.

190
00:10:37.090 --> 00:10:39.900
And a Promise, so
we can satisfy the Promise API.

191
00:10:39.900 --> 00:10:42.960
It's cuz' the document's already there,
it's literally already there.

192
00:10:42.960 --> 00:10:44.724
This is just here just in case,
like I said,

193
00:10:44.724 --> 00:10:47.990
you wanted to do something extra like,
I need to populate this thing first.

194
00:10:47.990 --> 00:10:50.210
Or I wanna get rid of the ID.

195
00:10:50.210 --> 00:10:52.690
Like, if you wanted to do something
with the properties on it, but,

196
00:10:52.690 --> 00:10:56.170
at the end of the day,
the param's middle were already found it.

197
00:10:56.170 --> 00:10:57.160
So we're just returning what it found.

198
00:10:57.160 --> 00:10:59.690
So, lets just patch this straight through.

199
00:11:00.970 --> 00:11:03.810
To get all, that takes a model, so
imagine what we have to do here.

200
00:11:03.810 --> 00:11:07.140
We need to find every
single thing on this model.

201
00:11:07.140 --> 00:11:11.560
No parameters passed, and then to find
my param takes a model, and then an ID.

202
00:11:11.560 --> 00:11:13.460
So you can imagine what
it needs to do with that.

203
00:11:15.144 --> 00:11:16.579
&gt;&gt; Scott Moss: So once you get all those,

204
00:11:16.579 --> 00:11:18.732
you should be able to hit your test, and

205
00:11:18.732 --> 00:11:23.006
they should all pass.
&gt;&gt; Scott Moss: So

206
00:11:23.006 --> 00:11:26.650
I'm gonna leave, this up right here.

207
00:11:26.650 --> 00:11:29.470
Basically, your goal is to
get all the tests to pass.

208
00:11:29.470 --> 00:11:31.350
At this exercise,
all your tests should be passing.

209
00:11:32.440 --> 00:11:34.060
So follow the test, read the test.

210
00:11:34.060 --> 00:11:38.689
You're gonna be working with these
five functions right here, or

211
00:11:38.689 --> 00:11:43.567
six I'm sorry six functions and
all your test should be passing unless

212
00:11:43.567 --> 00:11:48.293
I wrote that test and that may well
be possible [LAUGH] hopefully not.

