WEBVTT

1
00:00:03.406 --> 00:00:05.930
&gt;&gt; Scott Moss: All right,
let's get back into this.

2
00:00:05.930 --> 00:00:09.160
I'm gonna try some La Crow
with some Chipotle.

3
00:00:11.620 --> 00:00:14.390
So was everybody able to see
their docs written on the page?

4
00:00:14.390 --> 00:00:15.410
All right.

5
00:00:16.600 --> 00:00:21.754
It's actually really confusing because
they decide to call it GraphiQL,

6
00:00:21.754 --> 00:00:24.140
with an I very similar to GraphQL.

7
00:00:24.140 --> 00:00:27.290
Literally the only difference
between it is the I after the H.

8
00:00:27.290 --> 00:00:30.370
That's the only difference, so
I'm sorry it could be confusing, but

9
00:00:30.370 --> 00:00:32.910
they couldn't resist the pun
on the word graphical.

10
00:00:32.910 --> 00:00:34.640
I mean, you had to do it, right?

11
00:00:34.640 --> 00:00:36.640
What else are you gonna call it?

12
00:00:36.640 --> 00:00:37.840
So it's really good.

13
00:00:37.840 --> 00:00:41.130
But let's just walk through what that
would look like just in case anyone

14
00:00:41.130 --> 00:00:43.730
didn't get to it and
did not look at the branch.

15
00:00:43.730 --> 00:00:48.520
So if you were to go to the index file
of the API, you would see that we're

16
00:00:48.520 --> 00:00:51.350
exporting out that GraphQL router
that was already created for you.

17
00:00:51.350 --> 00:00:58.310
And then inside the server.js,
you would import that GraphQL router,

18
00:00:58.310 --> 00:01:04.810
then you would mount that at /graphql,
not graphical, no I there, /graphql and

19
00:01:04.810 --> 00:01:08.320
you would just place that router exactly
the same you would do the rest router.

20
00:01:09.930 --> 00:01:14.910
And then the other directions were
to mount the GraphiQL with an I

21
00:01:14.910 --> 00:01:16.330
on the path of docs.

22
00:01:17.480 --> 00:01:24.310
At the last minute I showed you
that there was a GraphiQL Express.

23
00:01:24.310 --> 00:01:29.000
Package from the apollo server express
module, and then if you did some digging,

24
00:01:29.000 --> 00:01:33.670
you would find out that you need
it to supply it with a input URL

25
00:01:33.670 --> 00:01:37.460
pointing to the relative
path of your GraphiQL api.

26
00:01:37.460 --> 00:01:40.670
The way this works is,

27
00:01:40.670 --> 00:01:45.110
this GraphiQL express,
when invoked returns a router.

28
00:01:45.110 --> 00:01:46.500
It returns an express router.

29
00:01:46.500 --> 00:01:48.410
So you have to invoke it first of all.

30
00:01:48.410 --> 00:01:52.020
If you don't invoke this, if you just
pass it in like this, it'll just hang.

31
00:01:52.020 --> 00:01:52.970
You won't get anything.

32
00:01:52.970 --> 00:01:55.080
So if you did that and
it didn't do anything, that's because,

33
00:01:55.080 --> 00:01:59.490
by default, you have to actually invoke it
for it to return the router that you want.

34
00:01:59.490 --> 00:02:01.470
And then it takes an option.

35
00:02:01.470 --> 00:02:05.050
This option makes sense because what
graphical does is it actually returns

36
00:02:05.050 --> 00:02:05.680
a react app.

37
00:02:05.680 --> 00:02:07.740
If you're gonna look at the source
cord as just a react app,

38
00:02:09.550 --> 00:02:12.010
your doc's just a react app,
it returns that.

39
00:02:12.010 --> 00:02:16.670
And then that app needs to know what
if your GraphQL API that I need to hit

40
00:02:16.670 --> 00:02:18.950
to actually do the documentation?

41
00:02:19.950 --> 00:02:21.290
So that's what the end point is, and

42
00:02:21.290 --> 00:02:25.310
it could be relative because it's from
the same server, so it could be relative.

43
00:02:26.580 --> 00:02:29.030
It does this thing called introspection.

44
00:02:29.030 --> 00:02:32.630
Introspection is, it's a query.

45
00:02:32.630 --> 00:02:37.530
It's basically like a query that
you can send to your graphical API

46
00:02:37.530 --> 00:02:42.720
that will convince your GraphQL to
return everything associated with it,

47
00:02:42.720 --> 00:02:44.460
every single thing associated
with your GraphQL.

48
00:02:44.460 --> 00:02:48.820
All the types, the names, the craze,
the mutations, every single thing.

49
00:02:48.820 --> 00:02:52.100
One query hit your graph to API and
it gives you everything, and

50
00:02:52.100 --> 00:02:54.920
GraphQL takes advantage of that,
and builds an app around it.

51
00:02:55.990 --> 00:02:57.330
That's why,
that's how you get all the complete,

52
00:02:57.330 --> 00:02:58.990
that's how you see all your docs.

53
00:02:58.990 --> 00:03:01.630
It does one query and
I can show you what that will look like.

54
00:03:01.630 --> 00:03:05.787
So let's save this.
&gt;&gt; Scott Moss: Start this

55
00:03:05.787 --> 00:03:09.765
up.
&gt;&gt; Scott Moss: And

56
00:03:09.765 --> 00:03:14.895
then if we go to my docs here,
you can see what

57
00:03:14.895 --> 00:03:19.760
you should get back is you would see this.

58
00:03:19.760 --> 00:03:21.070
This is GraphiQL.

59
00:03:21.070 --> 00:03:28.240
With I, and it's just a react app,
and then if you did it successfully.

60
00:03:28.240 --> 00:03:31.630
And this would render,
even if you didn't give it.

61
00:03:31.630 --> 00:03:35.530
If you just invoke the graphical
express app, this will render.

62
00:03:35.530 --> 00:03:37.710
If you didn't get it an endpoint URL,
it would still render.

63
00:03:37.710 --> 00:03:39.690
You just wouldn't have any docs over here.

64
00:03:39.690 --> 00:03:40.980
This would just be blank.

65
00:03:40.980 --> 00:03:43.590
So this is a confirmation that it's
pointing to the correct GraphQL and

66
00:03:43.590 --> 00:03:45.160
we can verify that by
clicking on query and

67
00:03:45.160 --> 00:03:49.070
we see the one query that we do have which
is in the user GraphQL file which gets me.

68
00:03:49.070 --> 00:03:51.430
That's the only query
that we have right now.

69
00:03:51.430 --> 00:03:52.400
So you'll see that.

70
00:03:52.400 --> 00:03:53.270
So that's the verification.

71
00:03:53.270 --> 00:03:59.800
Now, the whole intraspectrum thing if you
open up the network tab, click on network.

72
00:04:01.000 --> 00:04:05.080
You refresh this, and
then if we go look at

73
00:04:08.060 --> 00:04:11.770
graphical, SHR is it this one?

74
00:04:14.870 --> 00:04:17.350
Here we go, so
if we go look at the GraphiQL call here,

75
00:04:17.350 --> 00:04:20.570
you can see this query
being called introspection.

76
00:04:20.570 --> 00:04:24.760
We can just go look at this query
right quick, it's a pretty big query.

77
00:04:24.760 --> 00:04:26.910
Actually this one's not that big,
because our stuff is pretty small.

78
00:04:26.910 --> 00:04:32.120
But you could think of it like a recursive
query that hits our GraphQL and

79
00:04:32.120 --> 00:04:37.000
it returns back every single thing
associated with our graph quo API,

80
00:04:37.000 --> 00:04:38.470
which right now is almost nothing.

81
00:04:38.470 --> 00:04:40.600
We only have like,
three types and one query.

82
00:04:40.600 --> 00:04:41.129
So it's like nothing.

83
00:04:42.890 --> 00:04:44.585
This introspection can be used for
a lot of things.

84
00:04:44.585 --> 00:04:48.930
There's tools out there that will use this
introspection query and have you ever used

85
00:04:48.930 --> 00:04:53.450
one of those gooey's where you can build
database tables instead of relations?

86
00:04:53.450 --> 00:04:54.350
One of those table builders,

87
00:04:54.350 --> 00:04:57.420
or schema builders, it'll generate that
based off this, which is really cool.

88
00:04:57.420 --> 00:05:00.960
So you can see the interrelations of how
your graph interacts with each other,

89
00:05:00.960 --> 00:05:02.590
it's really cool.

90
00:05:02.590 --> 00:05:04.730
I mean we can actually attempt to find it.

91
00:05:04.730 --> 00:05:05.330
Let me see.

92
00:05:05.330 --> 00:05:14.979
Introspection GraphQL.
&gt;&gt; Scott Moss: Okay,

93
00:05:14.979 --> 00:05:16.296
I don't know the name.

94
00:05:16.296 --> 00:05:16.900
Is it Absonant?

95
00:05:19.030 --> 00:05:21.620
Okay that is totally not it well,

96
00:05:21.620 --> 00:05:26.770
there's a tool that will do introspection
and like do some really cool stuff.

97
00:05:28.160 --> 00:05:29.910
Maybe I'll find it later.

98
00:05:29.910 --> 00:05:31.270
But it will put it together for

99
00:05:31.270 --> 00:05:33.100
you so you can see how your
stuff relates to each other.

100
00:05:33.100 --> 00:05:36.040
So using this introspection you
can build some pretty good tools.

101
00:05:36.040 --> 00:05:37.576
There's tools out there that will use this
introspection query and have you ever used

102
00:05:37.576 --> 00:05:39.340
one of those gooey's where you can build
database tables instead of relations?

103
00:05:39.340 --> 00:05:41.380
I know Graph Cool has a really good one,
that they have.

104
00:05:41.380 --> 00:05:44.680
They call it the GraphQL Playground
which is a better version of graphical.

105
00:05:44.680 --> 00:05:46.780
So you can build a lot of stuff
from introspection query.

106
00:05:46.780 --> 00:05:51.016
I mean, you could imagine the types
of interactive documentation or

107
00:05:51.016 --> 00:05:55.981
visualizations you can build to explore
your API, using this query that returns

108
00:05:55.981 --> 00:05:59.718
pretty much every single thing
that you need about your API.

109
00:05:59.718 --> 00:06:02.261
You could see,
it returns this JSON right here,

110
00:06:02.261 --> 00:06:06.850
that is all the information about every
single thing that you can do in your API.

111
00:06:06.850 --> 00:06:11.383
And then you can use this information to
build an application that allows you to

112
00:06:11.383 --> 00:06:16.323
explore it, pretty cool.
&gt;&gt; Scott Moss: Any questions about

113
00:06:16.323 --> 00:06:18.966
this?
&gt;&gt; Scott Moss: Now if you took the step

114
00:06:18.966 --> 00:06:22.510
further and you actually tried to query
getMe, we'll try to do that, right?

115
00:06:22.510 --> 00:06:23.690
It broke, right?

116
00:06:23.690 --> 00:06:24.410
Do you know why it broke?

117
00:06:26.470 --> 00:06:27.500
Because it's there.

118
00:06:27.500 --> 00:06:28.660
We didn't talk about resolvers, but

119
00:06:28.660 --> 00:06:30.860
if you went to go look at the resolver
file, that function's there.

120
00:06:30.860 --> 00:06:33.800
And it actually is returning something,
so like why did it break?

121
00:06:36.210 --> 00:06:40.980
This is so meta, that if you get it,
it's awesome, but you do

122
00:06:40.980 --> 00:06:46.040
have the information to know why it didn't
break because we built it yesterday.

123
00:06:46.040 --> 00:06:47.820
But basically let's see if
anybody can figure it out.

124
00:06:47.820 --> 00:06:52.480
So if I do getMe, and
I say give me the ID of Me and

125
00:06:52.480 --> 00:06:56.690
the username, before I run this
notice I did not pass in an ID here.

126
00:06:56.690 --> 00:06:58.290
The getMe doesn't take an ID.

127
00:06:58.290 --> 00:07:01.260
So how does it know who Me is, right?

128
00:07:01.260 --> 00:07:03.570
JSON web tokens,
we have JSON web tokens, right?

129
00:07:03.570 --> 00:07:06.780
But I didn't pass any JSON web token
anywhere that's the problem, I also didn't

130
00:07:06.780 --> 00:07:11.330
set up JSON web token to coding anywhere
inside the GraphQL that we mounted.

131
00:07:12.710 --> 00:07:17.150
This resolver if you were to go look at it
is expecting the user to already be there

132
00:07:17.150 --> 00:07:21.510
and if you did some more digging you
would see that in the GraphQL router.

133
00:07:21.510 --> 00:07:24.090
It's expecting the user to
be on the request object,

134
00:07:25.150 --> 00:07:29.010
which is put there by the Middleware for
a JSON web token.

135
00:07:29.010 --> 00:07:31.356
Which you did not add here.

136
00:07:31.356 --> 00:07:33.341
So therefore,

137
00:07:33.341 --> 00:07:37.600
rec.user is undefined inside this
resolver that I did not teach you about.

138
00:07:38.880 --> 00:07:41.510
This is undefined, this user is undefined.

139
00:07:41.510 --> 00:07:47.910
And because user from getMe cannot be
null, it breaks, because that's null.

140
00:07:47.910 --> 00:07:53.938
So that's why you get that error of.
&gt;&gt; Scott Moss: Cannot return null for

141
00:07:53.938 --> 00:07:59.048
non-nullable field Query.getMe.
&gt;&gt; Scott Moss: It's basically saying,

142
00:07:59.048 --> 00:08:01.021
whatever getMe returned was null, and

143
00:08:01.021 --> 00:08:06.183
it can't be null.
&gt;&gt; Scott Moss: A larger font,

144
00:08:06.183 --> 00:08:08.330
okay, that's what that means, all right.

145
00:08:08.330 --> 00:08:09.050
That's the hand [LAUGH] okay.

146
00:08:09.050 --> 00:08:11.675
I thought you wanted me to clap,
I was like, I'll clap.

147
00:08:11.675 --> 00:08:18.888
[LAUGH]
&gt;&gt; Scott Moss: So

148
00:08:18.888 --> 00:08:21.886
yeah, it's a very hard thing to follow,
very meta, but

149
00:08:21.886 --> 00:08:23.890
that's what that means right there.

150
00:08:23.890 --> 00:08:27.730
It's like, that's a nominal error,
you are supposed to put no there.

151
00:08:27.730 --> 00:08:31.770
Just to show you that we can satisfy
it right quick by those resolver and

152
00:08:31.770 --> 00:08:34.000
ask to return a fake user right quick.

153
00:08:34.000 --> 00:08:35.100
A user has what?

154
00:08:35.100 --> 00:08:37.990
An ID, user name, it has all this so

155
00:08:37.990 --> 00:08:41.070
I'm just going to return a fake one and
you will see that it will totally be fine.

156
00:08:41.070 --> 00:08:47.604
So ID is whatever, username is hello,

157
00:08:47.604 --> 00:08:51.630
createdAt is sure yes.

158
00:08:51.630 --> 00:08:56.280
So I'll save that and
now if I go back and I rerun this query,

159
00:08:56.280 --> 00:08:58.421
and I refresh it actually.

160
00:09:08.625 --> 00:09:10.267
&gt;&gt; Scott Moss: I guess I need commas.

161
00:09:13.744 --> 00:09:15.770
&gt;&gt; Scott Moss: There we go.

162
00:09:15.770 --> 00:09:19.205
Now if I refresh this.
&gt;&gt; Scott Moss: I run that,

163
00:09:19.205 --> 00:09:20.770
I get back the User, right?

164
00:09:22.080 --> 00:09:23.210
So that's how that works.

165
00:09:23.210 --> 00:09:29.454
And just to play with this a little more,
if we were to look at the User,

166
00:09:29.454 --> 00:09:32.200
the ID has to be non-null, right?

167
00:09:32.200 --> 00:09:33.940
It has to be the ID there, right?

168
00:09:33.940 --> 00:09:39.300
So let's say I took away the ID,
we expect to see an error, right?

169
00:09:39.300 --> 00:09:46.610
Because, I'm running this and it's like
cannot return non-nullable field user.id.

170
00:09:46.610 --> 00:09:51.510
But, if I don't ask for the ID and I'm
not returning an ID, it's totally fine.

171
00:09:51.510 --> 00:09:52.370
I didn't ask for it.

172
00:09:52.370 --> 00:09:53.340
So it didn't even try to give it.

173
00:09:55.650 --> 00:09:57.513
That make sense?
It's only going to validate and

174
00:09:57.513 --> 00:10:00.310
so, we're going to try to retrieve
something that you ask for.

175
00:10:00.310 --> 00:10:02.710
It doesn't try to retrieve everything,
if I didn't ask for

176
00:10:02.710 --> 00:10:04.260
an ID it doesn't try to get an ID.

177
00:10:04.260 --> 00:10:07.090
Therefore, it didn't know it wasn't null,
but

178
00:10:07.090 --> 00:10:10.540
as soon as I ask for the ID,
it tried to get the ID and then it's like,

179
00:10:10.540 --> 00:10:15.116
wait, that's not actually, no, it's right
there, because I got rid of it back here.

180
00:10:16.890 --> 00:10:19.170
The other magical thing that's happening
right now that we did not talk about,

181
00:10:20.360 --> 00:10:23.650
is that, and we're going to get to this
in resolvers, which is coming up next,

182
00:10:23.650 --> 00:10:26.760
but I'm just going to talk about
it now because I have the context,

183
00:10:26.760 --> 00:10:31.840
is when you return an object
from your resolvers, and

184
00:10:31.840 --> 00:10:36.370
the properties match up with
the types in your GraphQL.

185
00:10:36.370 --> 00:10:36.940
See, for instance,

186
00:10:36.940 --> 00:10:39.310
we have a property called ID,
we have a property called username,

187
00:10:39.310 --> 00:10:43.072
createdAt, updatedAt in my resolver,
they have this same property names.

188
00:10:43.072 --> 00:10:44.430
GraphQL just takes it from there.

189
00:10:45.490 --> 00:10:47.050
If you don't have property
names that line up,

190
00:10:47.050 --> 00:10:50.290
you need to write another
resolver to resolve that field.

191
00:10:50.290 --> 00:10:52.710
By default, it will take
the object that you gave it and

192
00:10:52.710 --> 00:10:54.360
just match the property names one by one.

193
00:10:54.360 --> 00:10:57.650
Like here is an ID, here is an ID,
username, username.

194
00:10:57.650 --> 00:11:02.789
But let's say, let's say user also takes

195
00:11:02.789 --> 00:11:07.570
in an other name, which is a string.

196
00:11:07.570 --> 00:11:11.210
But I don't have another name here.

197
00:11:11.210 --> 00:11:13.630
And then the client asks for other name.

198
00:11:13.630 --> 00:11:16.840
How do we tell GraphQL
to resolve other name?

199
00:11:16.840 --> 00:11:19.620
You write a resolver for that, and
that's where we're about to get into.

200
00:11:19.620 --> 00:11:21.940
So that's a nested resolver,
property level resolver.

201
00:11:23.400 --> 00:11:26.700
So basically,
that's why I was saying your GraphQL types

202
00:11:26.700 --> 00:11:28.570
start off the same as
your Mongoose schemas.

203
00:11:28.570 --> 00:11:30.810
But then they branch off to
stuff completely different.

204
00:11:30.810 --> 00:11:32.250
They can do whatever they want.

205
00:11:32.250 --> 00:11:33.700
But they usually start off that way.

206
00:11:33.700 --> 00:11:37.130
But you can resolve I
can put GitHub here and

207
00:11:37.130 --> 00:11:39.470
have a function that goes to GitHub and
fetches a GitHub thing.

208
00:11:39.470 --> 00:11:41.220
I can do whatever I want.

209
00:11:41.220 --> 00:11:43.630
And only for that one property,
and only when you ask for it.

210
00:11:43.630 --> 00:11:44.750
If you don't ask for it, it doesn't do it.

211
00:11:44.750 --> 00:11:45.940
It doesn't make the call.

212
00:11:45.940 --> 00:11:52.015
When you ask for it you have to go do it.
&gt;&gt; Scott Moss: Okay.

