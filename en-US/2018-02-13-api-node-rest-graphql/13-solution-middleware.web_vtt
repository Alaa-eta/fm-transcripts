WEBVTT

1
00:00:02.480 --> 00:00:05.280
&gt;&gt; Scott Moss: Let's hop
into the solution of this.

2
00:00:05.280 --> 00:00:08.840
So first thing let's talk,
am I in the solution branch?

3
00:00:08.840 --> 00:00:09.770
Yeah, okay.

4
00:00:09.770 --> 00:00:12.520
So let's talk about the global middleware.

5
00:00:12.520 --> 00:00:15.790
So inside this middleware file,
if you used the bodyParser,

6
00:00:15.790 --> 00:00:17.770
you can use them in any order you want.

7
00:00:17.770 --> 00:00:21.410
But basically using the bodyParser,
You can say app.use, and

8
00:00:21.410 --> 00:00:25.360
you can set up that bodyParser middleware
like this, urlencoded, extended true.

9
00:00:25.360 --> 00:00:30.074
Basically what this is allowing us to do,
this is middleware where

10
00:00:30.074 --> 00:00:35.049
this middleware is going to format
the query string for us basically.

11
00:00:35.049 --> 00:00:39.997
If you pass in the query string like this,
&gt;&gt; Scott Moss: So

12
00:00:39.997 --> 00:00:46.682
your API,
&gt;&gt; Scott Moss: Like this, right?

13
00:00:46.682 --> 00:00:52.650
thing=1, other=2, stuff like that.

14
00:00:52.650 --> 00:00:56.430
It'll format that so
we can access it on request.params.

15
00:00:59.097 --> 00:00:59.940
&gt;&gt; Scott Moss: That's what it's doing.

16
00:00:59.940 --> 00:01:01.710
So you wanna be able to do that.

17
00:01:01.710 --> 00:01:04.875
Extended just means some extra
rules that they'll add for free.

18
00:01:04.875 --> 00:01:10.150
bodyParser.json is basically
anything that's posted or put to

19
00:01:10.150 --> 00:01:15.430
the API gets treated like JSON,
parsed, and given to us at req.body.

20
00:01:15.430 --> 00:01:16.790
This is where req.body comes from.

21
00:01:16.790 --> 00:01:19.470
WIthout this we don't have req.body,
this is very important.

22
00:01:19.470 --> 00:01:24.020
So that's the GlobalMiddleware,
it is already attached globally here, so

23
00:01:24.020 --> 00:01:27.550
I put setupMiddleware, I passed the app
in and it's like a mix in, right?

24
00:01:27.550 --> 00:01:30.040
It just mixes the middleware in,
doesn't need to return anything.

25
00:01:30.040 --> 00:01:33.332
I mean, you can return the app if you
want but it doesn't really matter,

26
00:01:33.332 --> 00:01:37.730
app.use just mixes it in,
so it's up to you.

27
00:01:37.730 --> 00:01:42.720
And then down here for
the API I used, yeah,

28
00:01:42.720 --> 00:01:47.710
so I didn't go in and
specifically said you could do this,

29
00:01:47.710 --> 00:01:50.770
but if you experimented you
could have attempted to do it.

30
00:01:50.770 --> 00:01:55.750
But basically if we go look at the,
where we at?

31
00:01:55.750 --> 00:01:56.830
There we go, modules/auth.

32
00:01:56.830 --> 00:01:59.194
So we're going to use the auth stuff here.

33
00:01:59.194 --> 00:02:02.856
I have an array down here,
that has two middleware inside of them.

34
00:02:02.856 --> 00:02:07.020
One is called decodeToken,
one is called getFreshUser.

35
00:02:07.020 --> 00:02:09.190
You don't have to use getFreshUser,
all you have to use is decodeToken.

36
00:02:09.190 --> 00:02:12.782
This is for later, when we get into
models, which I think is next.

37
00:02:12.782 --> 00:02:15.450
Because in order to understand what
getFreshUser is doing you need to

38
00:02:15.450 --> 00:02:17.895
understand how models work, so
I left it out on this exercise.

39
00:02:17.895 --> 00:02:20.910
But if you just put the protect array
in there you're totally fine, but

40
00:02:20.910 --> 00:02:23.740
then that's hat I'm saying is,
middleware can also be an array.

41
00:02:23.740 --> 00:02:28.735
Because we can come inside of here and
we can pass an endless amount of functions

42
00:02:28.735 --> 00:02:32.030
doesn't matter they're
all gonna run serially.

43
00:02:32.030 --> 00:02:37.520
So, if I wanted to run this function,
if I can type.

44
00:02:37.520 --> 00:02:39.495
There we go, I got so
much adrenaline from that bar fight.

45
00:02:39.495 --> 00:02:42.024
[LAUGH] And I run this function.

46
00:02:42.024 --> 00:02:46.736
You can run as many functions you want or
you can just pass in an array which

47
00:02:46.736 --> 00:02:50.690
is exactly what protect was,
it was an array of middleware.

48
00:02:52.416 --> 00:02:54.444
&gt;&gt; Scott Moss: So you can pass in
an array, which cleans things up so

49
00:02:54.444 --> 00:02:57.490
if you need to share middleware stacks
across different route definitions you

50
00:02:57.490 --> 00:02:58.450
can do that.

51
00:02:58.450 --> 00:03:02.720
So I want this chain of middleware
shared across multiple routes.

52
00:03:02.720 --> 00:03:05.430
I'm gonna put them in an array so I can
just put that array in different places

53
00:03:05.430 --> 00:03:08.800
versus writing them all over again,
over and over and over again.

54
00:03:08.800 --> 00:03:12.800
You can also compose your middleware,
so you can have your middleware

55
00:03:12.800 --> 00:03:16.210
compose themselves, which is something
different, but what that will look like.

56
00:03:16.210 --> 00:03:19.450
It's basically, instead of
returning an array of middleware,

57
00:03:19.450 --> 00:03:22.270
I would have a middleware that
calls another middleware,

58
00:03:22.270 --> 00:03:24.800
that calls another middleware,
that calls another middleware, and

59
00:03:24.800 --> 00:03:28.310
I would just place that one entry
middleware as my main middleware.

60
00:03:28.310 --> 00:03:30.740
It's kind of crazy, but
yeah, you can do that.

61
00:03:30.740 --> 00:03:32.320
It depends on how you want to do it.

62
00:03:32.320 --> 00:03:32.940
You want an array?

63
00:03:32.940 --> 00:03:34.660
You want to pass them in line?

64
00:03:34.660 --> 00:03:37.970
You wanna do anonymous functions?

65
00:03:37.970 --> 00:03:40.301
You want composer middleware,
express doesn't care,

66
00:03:40.301 --> 00:03:41.960
you can do whatever you want.

67
00:03:41.960 --> 00:03:44.740
I chose to be slightly explicit and
use the arrays.

68
00:03:44.740 --> 00:03:47.850
Composer middleware is a little advanced,
but basically

69
00:03:48.910 --> 00:03:53.910
you're taking middleware and you're
calling next and you're extending it to

70
00:03:53.910 --> 00:03:56.960
another middleware right inside
the middleware, which is kinda crazy.

71
00:03:56.960 --> 00:03:58.920
If we just take a quick look
at what's going on here.

72
00:04:00.100 --> 00:04:01.810
Who here has used JSON web tokens?

73
00:04:03.360 --> 00:04:04.940
Okay, JSON web tokens,

74
00:04:04.940 --> 00:04:10.690
at the end of the day it's a unique
string that's signed on your server.

75
00:04:10.690 --> 00:04:13.882
It's a unique string that
basically when decoded

76
00:04:13.882 --> 00:04:16.851
turns back into the object
that was signed on.

77
00:04:16.851 --> 00:04:22.496
So basically if I have an object
like I have a user who's id is 1,

78
00:04:22.496 --> 00:04:29.523
if I get a JSON from this I might get back
some crazy looking string here, right?

79
00:04:29.523 --> 00:04:33.094
That string the client would use
to send requests to the API,

80
00:04:33.094 --> 00:04:37.224
the API would then take that string
decode the token and verify it, and

81
00:04:37.224 --> 00:04:39.062
it would get back this object.

82
00:04:39.062 --> 00:04:41.370
Right, it'll get this object back.

83
00:04:41.370 --> 00:04:42.220
And then with that object back,

84
00:04:42.220 --> 00:04:44.190
I'm like, let me go see if
there's a user id of 1 in here.

85
00:04:44.190 --> 00:04:48.010
And that's how we do authentication,
it's a stateless way to do authentication.

86
00:04:48.010 --> 00:04:49.320
So that's what we're doing here.

87
00:04:49.320 --> 00:04:54.600
And basically this decode token,
what it's doing,

88
00:04:54.600 --> 00:05:00.832
it is checking for the token in
the headers or the query string.

89
00:05:00.832 --> 00:05:03.277
And then it runs this
checkToken middleware,

90
00:05:03.277 --> 00:05:07.614
which is something we have not created
because it's given to us by express-jwt.

91
00:05:07.614 --> 00:05:10.578
You pass in the secret,
the secret is how you sign the token and

92
00:05:10.578 --> 00:05:12.009
also how to decode the token.

93
00:05:14.102 --> 00:05:18.627
&gt;&gt; Scott Moss: And then refresh user,
all it does is, after decode token runs,

94
00:05:18.627 --> 00:05:23.237
at the decode token runs this
function checkToken it attaches that

95
00:05:23.237 --> 00:05:25.090
object to The req.user.

96
00:05:25.090 --> 00:05:31.620
Whatever the value of this token is,
its going to attach it to req.user.

97
00:05:31.620 --> 00:05:34.690
So inside of getFreshUser,
I can get req.user.id.

98
00:05:34.690 --> 00:05:38.620
Look in the database and see if
there's a user with the id in there,

99
00:05:38.620 --> 00:05:40.520
if its not, you're unauthorized.

100
00:05:40.520 --> 00:05:43.620
If it is, continue to test that's
a req.user and then call next.

101
00:05:43.620 --> 00:05:46.328
So it's a little complicated because we
haven't talked about database queries and

102
00:05:46.328 --> 00:05:47.889
that's why I don't want
to talk about this, but

103
00:05:47.889 --> 00:05:50.050
that's what's happening
inside of getFreshUser.

104
00:05:50.050 --> 00:05:53.350
This will make more sense when we go
back over databases in the next one and

105
00:05:53.350 --> 00:05:56.310
you can also look at the comments
of exactly what's happening here.

106
00:05:56.310 --> 00:05:59.720
It seems complicated, but
it's not as complicated as it looks.

107
00:05:59.720 --> 00:06:02.400
It's just a lot of comments here that
makes it look really big, but it's not.

108
00:06:04.430 --> 00:06:05.590
So that's what that's doing.

109
00:06:05.590 --> 00:06:09.640
So to verify that, now that I have protect
in front of here, if I try to hit the API,

110
00:06:09.640 --> 00:06:13.420
if anybody's tried this so far,
you'll probably run into a problem, right?

111
00:06:14.810 --> 00:06:17.377
Has anybody got to this point?

112
00:06:17.377 --> 00:06:18.449
And what's the error that you see?

113
00:06:18.449 --> 00:06:21.504
&gt;&gt; Speaker 2: Unauthorized.

114
00:06:21.504 --> 00:06:23.590
&gt;&gt; Scott Moss: All right,
you'll see unauthorized error.

115
00:06:23.590 --> 00:06:26.240
And it'll say no authorization
token was found, right?

116
00:06:26.240 --> 00:06:27.660
Yep, that's exactly what
it's supposed to do.

117
00:06:27.660 --> 00:06:29.410
There was no authorization token found.

118
00:06:29.410 --> 00:06:31.278
It completely-
&gt;&gt; Speaker 3: Should that error be

119
00:06:31.278 --> 00:06:33.455
handled by an error handler, though?

120
00:06:33.455 --> 00:06:35.400
&gt;&gt; Scott Moss: Should that error
be handled by error handler?

121
00:06:35.400 --> 00:06:36.950
Well it depends on where
you put your error handler.

122
00:06:36.950 --> 00:06:39.760
For me, no, my error handler is not here.

123
00:06:39.760 --> 00:06:40.940
I don't have a global error handler.

124
00:06:42.230 --> 00:06:44.350
But if you set up a global error handler,

125
00:06:44.350 --> 00:06:46.460
cuz we'll see where I
put my error handler.

126
00:06:46.460 --> 00:06:50.656
But if you set up one here,
app.use a global, let's make one here.

127
00:06:50.656 --> 00:06:55.261
Error, request, response, and then next,

128
00:06:55.261 --> 00:06:59.760
even though we'll probably never use next.

129
00:07:00.830 --> 00:07:04.216
Then I can console.error the error.

130
00:07:04.216 --> 00:07:09.512
Let's just say error.stack,
and then res.send,

131
00:07:09.512 --> 00:07:15.591
or status(401).send,
&gt;&gt; Scott Moss: Nope.

132
00:07:19.230 --> 00:07:22.102
&gt;&gt; Scott Moss: So you could do that,
and let's try it again.

133
00:07:25.504 --> 00:07:29.710
&gt;&gt; Scott Moss: So now if I run this,
yeah, now it will.

134
00:07:29.710 --> 00:07:34.290
This is like, nope, not gonna happen and
you can see a console.log.error.stack

135
00:07:34.290 --> 00:07:36.700
just to get the stack of it for
my login purposes.

136
00:07:36.700 --> 00:07:37.960
But yeah, it totally got handled here.

137
00:07:39.760 --> 00:07:42.245
But where I put my error handling,

138
00:07:42.245 --> 00:07:46.285
I made error handling specifically for
the API router.

139
00:07:46.285 --> 00:07:49.103
I think you would probably
handle errors differently for

140
00:07:49.103 --> 00:07:51.696
your API routes than you would for
any other routes.

141
00:07:51.696 --> 00:07:56.984
So the error handler that I made was
specifically for API error handler.

142
00:07:56.984 --> 00:08:00.909
So, I mean it does the same thing,
claws the stack, 500.

143
00:08:00.909 --> 00:08:05.294
But the difference is where I placed it,
because I wanted to log for

144
00:08:05.294 --> 00:08:09.699
the API, I placed on the rest router,
here at the end, all right?

145
00:08:09.699 --> 00:08:12.930
Another thing to mention about error
handlers is they have to go at the end.

146
00:08:12.930 --> 00:08:16.040
If I did this, it would never run, right?

147
00:08:16.040 --> 00:08:17.760
Because the errors bubble up.

148
00:08:17.760 --> 00:08:20.224
When the error is thrown in here,
it's gonna be like, cool,

149
00:08:20.224 --> 00:08:22.930
it's basically gonna call it,
cuz you called next, right?

150
00:08:22.930 --> 00:08:26.490
When you called next you threw an error
in, you've sent it to the next thing.

151
00:08:26.490 --> 00:08:29.900
But if this is before it,
that means it's not after it,

152
00:08:29.900 --> 00:08:33.080
therefore you can not go next to it,
it's previous, right?

153
00:08:33.080 --> 00:08:36.730
So, it needs to be next in order for
you to bubble the error up.

154
00:08:36.730 --> 00:08:39.370
So, you need to make sure
ErrorHandler's always at the bottom,

155
00:08:39.370 --> 00:08:40.479
otherwise it won't work.

156
00:08:40.479 --> 00:08:42.684
So if you did that and you're like,
why is this not working,

157
00:08:42.684 --> 00:08:44.338
it 's probably because
you put it at the top.

158
00:08:47.387 --> 00:08:48.402
&gt;&gt; Scott Moss: Any questions on that?

159
00:08:52.950 --> 00:08:53.744
&gt;&gt; Scott Moss: Nope, okay,

160
00:08:53.744 --> 00:08:57.270
let me see if there's any
opportunity to cover anything else.

161
00:08:57.270 --> 00:09:01.180
I know people are probably looking
at the author and are like, what?

162
00:09:01.180 --> 00:09:04.162
What is this, this seems cool,
let's go over this.

163
00:09:04.162 --> 00:09:06.341
When we get time tomorrow,
we can go over this,

164
00:09:06.341 --> 00:09:10.425
cuz,
&gt;&gt; Scott Moss: In fact, depending on how

165
00:09:10.425 --> 00:09:15.630
we do it with GraphQL tomorrow,
we may or may not use it this way.

166
00:09:15.630 --> 00:09:17.360
This is kinda hard to
explain with GraphQL,

167
00:09:17.360 --> 00:09:20.540
but yeah,
we can get into this in more detail.

168
00:09:20.540 --> 00:09:23.530
There's some features here like, disable
all that I'm not talking about, but

169
00:09:23.530 --> 00:09:25.520
we'll get into that later today as well.

170
00:09:25.520 --> 00:09:28.280
But yeah, auth is not as hard as it seems.

171
00:09:28.280 --> 00:09:30.260
I mean, at the end of the day,
nobody's stuff is safe.

172
00:09:30.260 --> 00:09:34.270
[LAUGH]
Nobody is safe at the end of the day,

173
00:09:34.270 --> 00:09:34.780
let's be real.

174
00:09:36.520 --> 00:09:38.450
We can only make it harder, so

