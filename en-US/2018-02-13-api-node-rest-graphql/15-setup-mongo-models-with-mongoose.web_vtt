WEBVTT

1
00:00:02.635 --> 00:00:06.335
&gt;&gt; Scott Moss: All right, so let's hop
in and talk about some of this stuff.

2
00:00:06.335 --> 00:00:11.807
I'm going to go into,
&gt;&gt; Scott Moss: Let's go into use or

3
00:00:11.807 --> 00:00:15.120
song.model, we'll go to song.model.

4
00:00:15.120 --> 00:00:17.270
So if you go to song.model
you'll see something like this,

5
00:00:17.270 --> 00:00:19.600
you see a schema that's completely empty.

6
00:00:19.600 --> 00:00:21.630
And then, you see all this
other stuff underneath it.

7
00:00:21.630 --> 00:00:22.760
Let's take a note of what's going on here.

8
00:00:22.760 --> 00:00:25.140
First, we're importing Mongoose.

9
00:00:25.140 --> 00:00:26.740
Which is an ODM.

10
00:00:26.740 --> 00:00:29.180
We make a object called schema,
that's empty.

11
00:00:29.180 --> 00:00:30.660
We'll do some work here, in a minute.

12
00:00:32.100 --> 00:00:35.200
And then what we do is we make
something called a songSchema,

13
00:00:35.200 --> 00:00:37.720
which is a instance of
a new mongoose.Schema.

14
00:00:37.720 --> 00:00:41.170
And that's basically just,
I'm taking this object.

15
00:00:41.170 --> 00:00:45.610
I'm gonna create a Mongoose schema from
this object using the new schema method.

16
00:00:46.710 --> 00:00:50.010
And then what you do is you take that
schema and you create a model from it.

17
00:00:50.010 --> 00:00:51.420
Very similar to what you
do in most databases,

18
00:00:51.420 --> 00:00:53.790
you create a schema
that gives you a table.

19
00:00:53.790 --> 00:00:57.230
So you can think of it like this,
several model, this is a table now.

20
00:00:57.230 --> 00:01:01.270
So I'm creating a schema based off of
these rules that we have yet to define.

21
00:01:01.270 --> 00:01:03.400
And then with that schema,

22
00:01:03.400 --> 00:01:07.220
I'm going to create a model in
the database by this name called song.

23
00:01:07.220 --> 00:01:10.152
I'm gonna reference it here, so
I can use it to do things in my

24
00:01:10.152 --> 00:01:16.012
application.
&gt;&gt; Scott Moss: So this

25
00:01:16.012 --> 00:01:19.520
pattern you'll see in almost every single
model file, this is the same pattern.

26
00:01:19.520 --> 00:01:22.860
Create a schema, Create a Model,
Export the model.

27
00:01:22.860 --> 00:01:25.720
This model right here on line nine is the
thing that you'll be using in your code.

28
00:01:25.720 --> 00:01:29.860
So create, find, delete, remove,
update, that's what you'll be using for

29
00:01:29.860 --> 00:01:30.810
that resource.

30
00:01:30.810 --> 00:01:32.290
Populate, all that's here.

31
00:01:33.640 --> 00:01:35.670
Now the important part
is this part right here.

32
00:01:35.670 --> 00:01:36.890
Data modeling with schema.

33
00:01:36.890 --> 00:01:40.510
So we have a lot of
people who's used Mongo.

34
00:01:40.510 --> 00:01:42.225
Who here has used Mongoose schemas?

35
00:01:42.225 --> 00:01:43.880
A few people?

36
00:01:43.880 --> 00:01:46.730
Okay so you pretty much
know how powerful they are.

37
00:01:46.730 --> 00:01:52.237
We aren't going to get into really
advanced stuff like custom validators and

38
00:01:52.237 --> 00:01:53.855
all that crazy stuff.

39
00:01:53.855 --> 00:01:57.350
But we are going to model some data here.

40
00:01:57.350 --> 00:02:00.470
So there are some tests associated
with this so you can't just...

41
00:02:00.470 --> 00:02:01.910
Whatever you want.

42
00:02:01.910 --> 00:02:03.860
Like I write check assess
every field donor.

43
00:02:03.860 --> 00:02:05.670
And required to know that stuff.

44
00:02:05.670 --> 00:02:08.170
Well let's just walk through how we can
do some of this stuff with the schema.

45
00:02:08.170 --> 00:02:09.330
And how it works with monty.

46
00:02:09.330 --> 00:02:11.520
So the way it works you
have an object free scale.

47
00:02:11.520 --> 00:02:15.160
And then what you do is
the properties on that object

48
00:02:15.160 --> 00:02:17.650
are the names of the field that
the object's going to have.

49
00:02:17.650 --> 00:02:22.020
So for instance for
Let's just not worry about song right now.

50
00:02:22.020 --> 00:02:24.710
We're just gonna make
a completely different one.

51
00:02:24.710 --> 00:02:30.510
So let's just call this one a dogSchema,
all right.

52
00:02:30.510 --> 00:02:34.290
So this is a dogSchema and
basically the way Mongoose needs it.

53
00:02:34.290 --> 00:02:36.750
Like I said the keys are the names
of the fields you want.

54
00:02:36.750 --> 00:02:40.581
So, what's something a dog would have.
&gt;&gt; Speaker 2: A name.

55
00:02:40.581 --> 00:02:42.400
&gt;&gt; Scott Moss: Name, okay.

56
00:02:42.400 --> 00:02:45.690
Now we have to tell
Mongoose what type this is.

57
00:02:45.690 --> 00:02:48.020
So we can say String.

58
00:02:48.020 --> 00:02:52.080
Mongoose uses the built in natives
inside of JavaScript for the types.

59
00:02:52.080 --> 00:02:54.710
So String, capital S,
is a native in JavaScript,

60
00:02:54.710 --> 00:03:00.830
it's a native primitive type We can
also do a little bit more here.

61
00:03:00.830 --> 00:03:04.364
We can say, hey let's type a string,
which is the same thing I had before.

62
00:03:04.364 --> 00:03:07.373
But the reason I expanded on an object
is because I wanna do something,

63
00:03:07.373 --> 00:03:08.840
I wanna make this required.

64
00:03:08.840 --> 00:03:10.020
So, I can say, required true.

65
00:03:11.040 --> 00:03:14.420
So, this allows me to say, hey a dog
has a name, his type and string and

66
00:03:14.420 --> 00:03:15.480
it is also required.

67
00:03:16.720 --> 00:03:17.349
That's what that's saying.

68
00:03:19.320 --> 00:03:21.010
I can also take it a step further and
say, you know,

69
00:03:21.010 --> 00:03:24.260
this name also has to be unique for
the entire database, so unique true.

70
00:03:26.410 --> 00:03:28.030
So, now no two dogs can
have the same name.

71
00:03:31.740 --> 00:03:32.810
So, let's move on to another one.

72
00:03:32.810 --> 00:03:37.089
Let's say we wanted to
know if this dog was,

73
00:03:37.089 --> 00:03:42.208
I don't know,
&gt;&gt; Scott Moss: Older now,

74
00:03:42.208 --> 00:03:43.970
I don't know, is old.

75
00:03:43.970 --> 00:03:45.590
Is it an old dog?

76
00:03:45.590 --> 00:03:49.450
So we say this is a type Boolean
because it's true or false.

77
00:03:49.450 --> 00:03:50.730
So, we'll put that.

78
00:03:50.730 --> 00:03:56.058
We can also say this type if Boolean,
it is also required But

79
00:03:56.058 --> 00:03:59.478
we're not going to make this unique.

80
00:03:59.478 --> 00:04:01.230
Cuz it's a boolean that
doesn't make any sense.

81
00:04:01.230 --> 00:04:04.340
But we will give it a default of false.

82
00:04:04.340 --> 00:04:08.960
By default all dogs are not old unless
you specifically say that it's old.

83
00:04:08.960 --> 00:04:09.690
&gt;&gt; Speaker 3: Do the types have

84
00:04:09.690 --> 00:04:13.100
to be primitives or can you define
complex subjects for the type?

85
00:04:13.100 --> 00:04:13.980
&gt;&gt; Scott Moss: The types have to be

86
00:04:13.980 --> 00:04:14.570
primitives.

87
00:04:17.130 --> 00:04:18.090
Actually, you know what?

88
00:04:18.090 --> 00:04:19.120
Maybe, you might be able to pass in.

89
00:04:19.120 --> 00:04:21.880
Depending on what version
of Mongoose you're on.

90
00:04:21.880 --> 00:04:25.100
I'll look it up after this, but I would
say it's safe to use permits for now.

91
00:04:25.100 --> 00:04:28.630
But if you're asking me,
if you can do things, like this.

92
00:04:28.630 --> 00:04:31.020
Or, I'm sorry, that's a bad example.

93
00:04:31.020 --> 00:04:31.790
Carr?
&gt;&gt; Speaker 3: Yeah.

94
00:04:31.790 --> 00:04:33.830
&gt;&gt; Scott Moss: I would imagine, no.

95
00:04:33.830 --> 00:04:36.590
And if you could, I would say
you probably stay away from it.

96
00:04:36.590 --> 00:04:40.530
Because now you're referencing
some class that's in the code.

97
00:04:40.530 --> 00:04:44.040
When really you should be
referencing some other model, right?

98
00:04:44.040 --> 00:04:46.830
So if that's what you wanna do,
that's what we're about to get to next.

99
00:04:46.830 --> 00:04:50.590
So if you wanna reference another type,
that type should be a model,

100
00:04:50.590 --> 00:04:52.210
not something that's code level.

101
00:04:52.210 --> 00:04:53.400
It's on the database level, right?

102
00:04:53.400 --> 00:04:56.830
So if you wanna do that, so you can be
like I wanna reference the dog's owner.

103
00:04:56.830 --> 00:04:58.550
Right, that would be some other shape.

104
00:04:58.550 --> 00:05:00.080
So the way we would do that is, let's say.

105
00:05:00.080 --> 00:05:05.165
This type is actually gonna be
mongoose.Schema, with a capital S,

106
00:05:05.165 --> 00:05:12.390
.Types, with a capital T,
.ObjectId, it's really long.

107
00:05:12.390 --> 00:05:18.550
Basically, every ID in Mongoose, or
in Mongo, really, is called ObjectId.

108
00:05:18.550 --> 00:05:22.100
It's technically an object But,
at a read time it's really a stream.

109
00:05:22.100 --> 00:05:23.980
That's how they treat their IDs.

110
00:05:23.980 --> 00:05:27.240
We're saying this owner,
this type, is an ID.

111
00:05:27.240 --> 00:05:29.140
But that alone is not good enough.

112
00:05:29.140 --> 00:05:34.510
So what we do is we say ref the- Imagine
we had some owner model somewhere,

113
00:05:34.510 --> 00:05:36.380
reference the owner model.

114
00:05:36.380 --> 00:05:39.160
So this tell the Mongoose is,
when we tell populate.

115
00:05:39.160 --> 00:05:42.950
I'm like, hey,
I wanna get a pet whose name is Gary.

116
00:05:44.040 --> 00:05:46.940
And I want to also get their owner and
populate the owner.

117
00:05:46.940 --> 00:05:49.740
So it'll go get Gary,
it'll get us the same, the isold.

118
00:05:49.740 --> 00:05:51.670
And then for owner,
instead of giving us back an ID.

119
00:05:51.670 --> 00:05:55.400
It'll take this ID,
go to the owner's model, and

120
00:05:55.400 --> 00:05:57.720
get the owner with that ID,
and put it here.

121
00:05:57.720 --> 00:06:00.660
So this owner would no longer be an ID,
or be an object, of the owner.

122
00:06:00.660 --> 00:06:02.857
That would populate it at run time.

123
00:06:02.857 --> 00:06:05.366
So that's how you would reference
other shapes in the database,

124
00:06:05.366 --> 00:06:06.330
it's also a reference.

125
00:06:06.330 --> 00:06:12.284
So you got that,
you can also do things like, you could

126
00:06:12.284 --> 00:06:19.279
say faveFoods and
this is an array of strings.

127
00:06:20.330 --> 00:06:21.440
So you got favorite foods.

128
00:06:21.440 --> 00:06:26.661
I mean there's a lot of things you can
do here, you can do geospatial indexes.

129
00:06:26.661 --> 00:06:30.300
You can do custom validators,
there's a lot of stuff.

130
00:06:30.300 --> 00:06:33.790
We really won't get into all of that,
but yeah,

131
00:06:33.790 --> 00:06:38.180
this is the basics of creating
a schema with Mongoose.

132
00:06:38.180 --> 00:06:41.430
So you would take that schema and then
you would pass it into Mongoose.schema,

133
00:06:41.430 --> 00:06:42.950
and you'll get back a Mongoose schema.

134
00:06:42.950 --> 00:06:45.690
Mongoose has to validate
that this is real.

135
00:06:45.690 --> 00:06:47.640
Like, yeah, cool, we like that,
we like that, here you go.

136
00:06:47.640 --> 00:06:50.100
And then you take that schema and
you exchange it for a model.

137
00:06:51.160 --> 00:06:55.720
This method right here, Mongoose.model,
if you just pass it in like this with

138
00:06:55.720 --> 00:06:59.070
a schema, I'm sorry,
if you just pass it in without a schema.

139
00:06:59.070 --> 00:07:02.300
It will try to retrieve
a model called song.

140
00:07:02.300 --> 00:07:04.900
If you pass it in with a schema,
it will set a model call song.

141
00:07:04.900 --> 00:07:06.530
So it's a getter and a setter.

142
00:07:06.530 --> 00:07:09.120
So without the schema,
it will try to retrieve it.

143
00:07:09.120 --> 00:07:10.370
With a schema, it will try to set it.

144
00:07:13.870 --> 00:07:16.000
So remember that.

145
00:07:16.000 --> 00:07:18.610
There's also stuff we can do here,
like we can do hooks.

146
00:07:18.610 --> 00:07:21.300
We can do custom methods and
stuff like that.

147
00:07:21.300 --> 00:07:23.980
Like, for instance,
if I wanted to say you know what,

148
00:07:23.980 --> 00:07:29.230
I want to do something before, every time
before this song schema is validated.

149
00:07:29.230 --> 00:07:30.590
So, I can say song schema.

150
00:07:34.020 --> 00:07:35.300
prevalidate and

151
00:07:35.300 --> 00:07:40.278
this function will run every time.
&gt;&gt; Scott Moss: Before very time

152
00:07:40.278 --> 00:07:41.450
the schema is validated.

153
00:07:41.450 --> 00:07:44.141
So before any error's thrown,
because you didn't pass in the right type.

154
00:07:44.141 --> 00:07:47.000
Or you didn't meet the validations,
I could run this function.

155
00:07:47.000 --> 00:07:50.280
You can also do pre-save,
post-save, pre-find one and update.

156
00:07:50.280 --> 00:07:53.100
There's a lot of different trade-offs
between what you're doing, but yeah,

157
00:07:53.100 --> 00:07:53.680
these are hooks.

158
00:07:53.680 --> 00:07:58.610
So this is really great to do things
like Subscribing to data via web hooks.

159
00:07:58.610 --> 00:08:01.130
Like the data changed, send an update to
everybody subscribed from this web hook,

160
00:08:01.130 --> 00:08:02.340
or something like that.

161
00:08:02.340 --> 00:08:03.150
So it's really cool.

162
00:08:03.150 --> 00:08:05.860
Send off an email notification or
whatever you wanna do.

163
00:08:05.860 --> 00:08:08.280
A lot of different stuff you can
do inside here, it's really cool.

