[00:00:03]
>> Scott Moss: We got one more thing today, this one is not so much of a lesson, but just an exercise. And in fact, there really is no solution to it, it's just something that you should do. You could probably do it for homework if you want. I could go over the solution, but like I said it's not really a solution.

[00:00:21]
I guess it is but not really. Anyways, what we're going to do now is write more tests. Remember when I said for the API we're only testing if it gets all for get in post? And there's like four of the methods for each resource and we're not writing tests for that.

[00:00:34]
This is where you write tests for that. So these tests right here are generated tests. You can see we're doing some. Metaprograms here where these tests take in a model, a resource name. And what a new resource of that will look like, and it generates a test. It's generates the getAll test, it generates the post test.

[00:00:53]
It generates all that stuff for every single model. So these tests are generic enough to work for all the models and resources. That's how Well, our code is right now. We can generalize our text and it still works. And you might say, well if that's the case, and I wrote test for one of them, why do I need to test for all of them?

[00:01:09]
Well just to make sure nobody changed or added anything extra in between your meta programming and the result.
>> Scott Moss: So we would need to write tests for, as you can see for now, we're getting tests for get and post. But forget we're only testing if you can get all.

[00:01:22]
We need to test if you can get one. Which means you need to create one first. And then for post we're only testing if you can create one which is all post can do. But we also need to test for put and delete.
>> Scott Moss: So, let's just write one right now.

[00:01:37]
Let's just write the one for get one cuz this one's kinda hard. Cuz you need to create one before you can get one. So use a it should get one whatever the resource name is. And this is going to be async. You can also return a promise if you don't want to use async.

[00:01:57]
Oops, let's do that. And then basically this is testing that we can actually use the API call to actually get one from the database right? So what we need to do is first we need to create something in a database. So we'll just go ahead and create a new resource.

[00:02:11]
And we'll say new doc is going to be whatever that model is that was passed in. Right here model so model.create and we'll say.
>> [SOUND]
>> Scott Moss: Bless you. You could take it as new resource object which will be what you need to create that new resource. So model.create that new resource.

[00:02:33]
And we'll await that. And then now that we have that we can go ahead and issue our API request. I'm just gonna copy this, paste through here. So, we can use, whoever has used chai before outside of mocha, awesome. So, they have chai.request, which is basically a wrapper around super test.

[00:02:52]
Ever hear of super test or super agent? Okay, all it is just a mocking suite, thatâ€™s all it is. Super test is like It basically allows you to make assertions against a HTP. So you can make HTP call comeback and do assertions against it's headers, it's status codes, it's response and with [INAUDIBLE].

[00:03:11]
Chi is an assertion library for Java Script, they make a wrap around it, so that you can hook Chi right into. So we're using to test so we're using chai for insertions. So chai.request is just a wrapper around super test, which is just a wrapper around making insertions around HTTP request.

[00:03:31]
So it's a lot of abstractions tied into each other, but at the end of the day we're able to make a request. And we can run assertions on that request. Like for instance I made the request, storing to the result, and I can check that that result has a status of 200.

[00:03:46]
I can check that the result is Jason, stuff like that. So we're gonna do the same thing, so I'm gonna say, okay, wait try that request. API resource name for get, but this is get one so I need to put an ID here. The ID is gonna be whatever new doc dot ID is.

[00:04:06]
And then I need to set authorization because authorization is on by default. So this JWT, right here is generated for you above, so you don't have to worry about it. And now that that's there I'll grab the result, and then I'm gonna do some assertions on it. So if I did an update, I'm sorry, I'm doing a get 1.

[00:04:24]
I expect the results to be very similar to this newDoc right here because this newDoc is a creation. And now I'm doing a get 1 to actually get that newDoc so they should be very similar. So we will run these I'm going to console log all the results, so I can see what the body looks like.

[00:04:41]
We will put a dot only here to only run this block and then we'll test our code.
>> Scott Moss: Cool, so looks like it worked. Wow, it logged on for every single one. So we get a response, which is this huge thing, really all I want is the body.

[00:05:11]
Where's it at? It spots the header, server request, Jesus. Let's just do that response, result.body.
>> Scott Moss: I think that's what it is, result.body.
>> Scott Moss: Okay, so all this was up there already. Maybe it's result dot, I don't know what it is. I'll go look it up, I don't wanna waste time.

[00:05:44]
But basically that's gonna be our test. This one should be passing. We need to write more granular tests to check to make sure the thing that's coming back is actually the thing. All right so the property of it right now, but you can see that's passing. That one test that I wrote right here generated three tests, cuz it made it for each model.

[00:06:00]
Each model is using this, so you can see it generated a get playlist, get song, get user for each one. And it's actually going to be called, yeah get resource name, yeah. So you could see it's working pretty good, should get one song, should get one user, should get one playlist

[00:06:20]

>> Scott Moss: And then you would do the same thing for updating one and deleting one
>> Scott Moss: And you would do that down here.

