[00:00:03]
>> Scott Moss: All right, let's get back into this. I'm gonna try some La Crow with some Chipotle. So was everybody able to see their docs written on the page? All right. It's actually really confusing because they decide to call it GraphiQL, with an I very similar to GraphQL. Literally the only difference between it is the I after the H.

[00:00:27]
That's the only difference, so I'm sorry it could be confusing, but they couldn't resist the pun on the word graphical. I mean, you had to do it, right? What else are you gonna call it? So it's really good. But let's just walk through what that would look like just in case anyone didn't get to it and did not look at the branch.

[00:00:43]
So if you were to go to the index file of the API, you would see that we're exporting out that GraphQL router that was already created for you. And then inside the server.js, you would import that GraphQL router, then you would mount that at /graphql, not graphical, no I there, /graphql and you would just place that router exactly the same you would do the rest router.

[00:01:09]
And then the other directions were to mount the GraphiQL with an I on the path of docs. At the last minute I showed you that there was a GraphiQL Express. Package from the apollo server express module, and then if you did some digging, you would find out that you need it to supply it with a input URL pointing to the relative path of your GraphiQL api.

[00:01:37]
The way this works is, this GraphiQL express, when invoked returns a router. It returns an express router. So you have to invoke it first of all. If you don't invoke this, if you just pass it in like this, it'll just hang. You won't get anything. So if you did that and it didn't do anything, that's because, by default, you have to actually invoke it for it to return the router that you want.

[00:01:59]
And then it takes an option. This option makes sense because what graphical does is it actually returns a react app. If you're gonna look at the source cord as just a react app, your doc's just a react app, it returns that. And then that app needs to know what if your GraphQL API that I need to hit to actually do the documentation?

[00:02:19]
So that's what the end point is, and it could be relative because it's from the same server, so it could be relative. It does this thing called introspection. Introspection is, it's a query. It's basically like a query that you can send to your graphical API that will convince your GraphQL to return everything associated with it, every single thing associated with your GraphQL.

[00:02:44]
All the types, the names, the craze, the mutations, every single thing. One query hit your graph to API and it gives you everything, and GraphQL takes advantage of that, and builds an app around it. That's why, that's how you get all the complete, that's how you see all your docs.

[00:02:58]
It does one query and I can show you what that will look like. So let's save this.
>> Scott Moss: Start this up.
>> Scott Moss: And then if we go to my docs here, you can see what you should get back is you would see this. This is GraphiQL. With I, and it's just a react app, and then if you did it successfully.

[00:03:28]
And this would render, even if you didn't give it. If you just invoke the graphical express app, this will render. If you didn't get it an endpoint URL, it would still render. You just wouldn't have any docs over here. This would just be blank. So this is a confirmation that it's pointing to the correct GraphQL and we can verify that by clicking on query and we see the one query that we do have which is in the user GraphQL file which gets me.

[00:03:49]
That's the only query that we have right now. So you'll see that. So that's the verification. Now, the whole intraspectrum thing if you open up the network tab, click on network. You refresh this, and then if we go look at graphical, SHR is it this one? Here we go, so if we go look at the GraphiQL call here, you can see this query being called introspection.

[00:04:20]
We can just go look at this query right quick, it's a pretty big query. Actually this one's not that big, because our stuff is pretty small. But you could think of it like a recursive query that hits our GraphQL and it returns back every single thing associated with our graph quo API, which right now is almost nothing.

[00:04:38]
We only have like, three types and one query. So it's like nothing. This introspection can be used for a lot of things. There's tools out there that will use this introspection query and have you ever used one of those gooey's where you can build database tables instead of relations?

[00:04:53]
One of those table builders, or schema builders, it'll generate that based off this, which is really cool. So you can see the interrelations of how your graph interacts with each other, it's really cool. I mean we can actually attempt to find it. Let me see. Introspection GraphQL.
>> Scott Moss: Okay, I don't know the name.

[00:05:16]
Is it Absonant? Okay that is totally not it well, there's a tool that will do introspection and like do some really cool stuff. Maybe I'll find it later. But it will put it together for you so you can see how your stuff relates to each other. So using this introspection you can build some pretty good tools.

[00:05:36]
There's tools out there that will use this introspection query and have you ever used one of those gooey's where you can build database tables instead of relations? I know Graph Cool has a really good one, that they have. They call it the GraphQL Playground which is a better version of graphical.

[00:05:44]
So you can build a lot of stuff from introspection query. I mean, you could imagine the types of interactive documentation or visualizations you can build to explore your API, using this query that returns pretty much every single thing that you need about your API. You could see, it returns this JSON right here, that is all the information about every single thing that you can do in your API.

[00:06:06]
And then you can use this information to build an application that allows you to explore it, pretty cool.
>> Scott Moss: Any questions about this?
>> Scott Moss: Now if you took the step further and you actually tried to query getMe, we'll try to do that, right? It broke, right? Do you know why it broke?

[00:06:26]
Because it's there. We didn't talk about resolvers, but if you went to go look at the resolver file, that function's there. And it actually is returning something, so like why did it break? This is so meta, that if you get it, it's awesome, but you do have the information to know why it didn't break because we built it yesterday.

[00:06:46]
But basically let's see if anybody can figure it out. So if I do getMe, and I say give me the ID of Me and the username, before I run this notice I did not pass in an ID here. The getMe doesn't take an ID. So how does it know who Me is, right?

[00:07:01]
JSON web tokens, we have JSON web tokens, right? But I didn't pass any JSON web token anywhere that's the problem, I also didn't set up JSON web token to coding anywhere inside the GraphQL that we mounted. This resolver if you were to go look at it is expecting the user to already be there and if you did some more digging you would see that in the GraphQL router.

[00:07:21]
It's expecting the user to be on the request object, which is put there by the Middleware for a JSON web token. Which you did not add here. So therefore, rec.user is undefined inside this resolver that I did not teach you about. This is undefined, this user is undefined.

[00:07:41]
And because user from getMe cannot be null, it breaks, because that's null. So that's why you get that error of.
>> Scott Moss: Cannot return null for non-nullable field Query.getMe.
>> Scott Moss: It's basically saying, whatever getMe returned was null, and it can't be null.
>> Scott Moss: A larger font, okay, that's what that means, all right.

[00:08:08]
That's the hand [LAUGH] okay. I thought you wanted me to clap, I was like, I'll clap. [LAUGH]
>> Scott Moss: So yeah, it's a very hard thing to follow, very meta, but that's what that means right there. It's like, that's a nominal error, you are supposed to put no there.

[00:08:27]
Just to show you that we can satisfy it right quick by those resolver and ask to return a fake user right quick. A user has what? An ID, user name, it has all this so I'm just going to return a fake one and you will see that it will totally be fine.

[00:08:41]
So ID is whatever, username is hello, createdAt is sure yes. So I'll save that and now if I go back and I rerun this query, and I refresh it actually.
>> Scott Moss: I guess I need commas.
>> Scott Moss: There we go. Now if I refresh this.
>> Scott Moss: I run that, I get back the User, right?

[00:09:22]
So that's how that works. And just to play with this a little more, if we were to look at the User, the ID has to be non-null, right? It has to be the ID there, right? So let's say I took away the ID, we expect to see an error, right?

[00:09:39]
Because, I'm running this and it's like cannot return non-nullable field user.id. But, if I don't ask for the ID and I'm not returning an ID, it's totally fine. I didn't ask for it. So it didn't even try to give it. That make sense? It's only going to validate and so, we're going to try to retrieve something that you ask for.

[00:10:00]
It doesn't try to retrieve everything, if I didn't ask for an ID it doesn't try to get an ID. Therefore, it didn't know it wasn't null, but as soon as I ask for the ID, it tried to get the ID and then it's like, wait, that's not actually, no, it's right there, because I got rid of it back here.

[00:10:16]
The other magical thing that's happening right now that we did not talk about, is that, and we're going to get to this in resolvers, which is coming up next, but I'm just going to talk about it now because I have the context, is when you return an object from your resolvers, and the properties match up with the types in your GraphQL.

[00:10:36]
See, for instance, we have a property called ID, we have a property called username, createdAt, updatedAt in my resolver, they have this same property names. GraphQL just takes it from there. If you don't have property names that line up, you need to write another resolver to resolve that field.

[00:10:50]
By default, it will take the object that you gave it and just match the property names one by one. Like here is an ID, here is an ID, username, username. But let's say, let's say user also takes in an other name, which is a string. But I don't have another name here.

[00:11:11]
And then the client asks for other name. How do we tell GraphQL to resolve other name? You write a resolver for that, and that's where we're about to get into. So that's a nested resolver, property level resolver. So basically, that's why I was saying your GraphQL types start off the same as your Mongoose schemas.

[00:11:28]
But then they branch off to stuff completely different. They can do whatever they want. But they usually start off that way. But you can resolve I can put GitHub here and have a function that goes to GitHub and fetches a GitHub thing. I can do whatever I want.

[00:11:41]
And only for that one property, and only when you ask for it. If you don't ask for it, it doesn't do it. It doesn't make the call. When you ask for it you have to go do it.
>> Scott Moss: Okay.

