[00:00:02]
>> Scott Moss: Cool, and we're back. Hopefully everybody had a good lunch because we sure did. Had some really good pizza here, pretty dope. And hopefully you had enough time to work through this challenge and get some of those tests to pass. So remember, ignore the model specs and also you should ignore the Query specs, the text you're gonna be looking for to pass are gonna be the route based specs.

[00:00:25]
And we'll see what those look like in a minute. Let's just hop right on to it. So, you were tested with filling out these functions down here. So again, these functions right here, because we're doing meta programming. Meta programming as in we're making code that makes code, right?

[00:00:46]
These functions are gonna be used to generate controllers for all of our resources, all of models. So they're pretty generic which is why they are functions that return functions and take in a model. So note that these functions are gonna be used in every single resource and that's why they're so generic.

[00:01:01]
The other approach is what I did on V1 is where I went ahead and I wrote these controllers in individually for every single resource, but, ultimately, they're probably going to be the same. To get around the fact that where maybe we don't need this one controller to be so generic, for this one resource, I allow you to extend it with overrides, so you can override it per model, if you want, it's totally fine.

[00:01:21]
But let's just hop right into it. So for the createOne, basically I told you, go ahead and assume that the controller methods are like flashed out, they're already there. I mocked them all out to return promises so they should be fine. They all just return test data, right, that's all they do, they don't call the database, we're not getting to databases yet.

[00:01:38]
So for create one what we wanna do is we wanna say control is our create one. We satisfy the arguments if we go look at the methods, takes in the model, takes in the body. Right, the model is passed in, the body is on the request our body.

[00:01:52]
It's the adjacent body that's passed in from the request, right? So we get that, it's already then adjacent part. It's just not, we let this controller do its thing. We don’t really care what it’s doing. And then because we’re creating one, that means this is probably happening on a post request.

[00:02:07]
And on a post request, I’m assuming you want the resource back that you are requesting to create, right. So let’s send back that resource, which in this case is gonna be doc. The reason I put doc, because in Mongo a doc is short for a document, and a document is like a thing you can save in a database.

[00:02:24]
So if you go back to relational databases you have tables, right. A table in Mongo is a model, basically, or a collection. And then a document is just an instance of that. So if we have a song model, then each song is a document. Does that make sense?

[00:02:41]
So this document is an instance of whatever model was passed in. So we take that document, we set the status to 201, because technically, rest http status 201 for a successful post, and the test is checking for that if you don't change it. And then, I just JSON to dock, right?

[00:03:00]
And then I'm just handling an error right here. I'm doing this next thing that we have not talked about. So if you did it, great, if you didn't don't worry about it. We're gonna talk about that next. [LAUGH] UpdateOne. There's two ways you can do this, and if you follow the clues you would've did it one way.

[00:03:20]
If you didn't you would've just recreated it your own way. So if you were to follow the clues, you'd have realized that update one is probably going to be bound to a route that looks like this. So we'll have some like, let's not use song slash ID. I want to do a put request to that.

[00:03:35]
That's basically an update right there, right? It's a put request to some resource and then ID of the thing that you want to update. And then in the body is the thing, the stuff that you're trying to update. Like, I want to update the name to be new name, right?

[00:03:49]
That's what that request looks like. So, because it has a parameter on it and we know, if we go back to what we did before on the routers We know that we have a handler that handles params. We can assume, and I told you this thing is eventually going to find the associated resource by that given idea and attach it to the request and send it along, we can assume that aside its update one, that resource is going to be attached to the request.

[00:04:19]
So if you put the clues together, you would have landed there. It's kind of hard to follow, but it's there. We'll talk about why it's called dot from id and how you can change that. Basically you get that resource that's attached to the request from the params function.

[00:04:34]
You get the update from the body. You pass it in to controllers update one to satisfy it. If you look takes the document to update and then the actual update, then it does nothing. So it does that and then again, this is also a 201, send that back, catch the error and next it.

[00:04:52]
DeleteOne is very similar because deleteOne also is the DELETE Followed by the resource, followed by the ID of the thing you want to delete. There's no payload here, you just need the ID, and you do the same thing. So that means that param's function is going to attach the file and the document for the given resource and attach it to the request.

[00:05:14]
So because I already have that I can just pass that in as well and it will do its thing and it will also delete. Get one is pretty simple, because we know get is a request that looks like this. And because we're getting one, it also has an ID.

[00:05:32]
Get this one with this ID, right? That's what that is, so that means it's also going to pass through our find by parameters function. And it's going to grab that document and attach it to the request, and so forth, and so forth.
>> Speaker 2: Why does it update?
>> Scott Moss: Yeah, I guess it should just be just like everyone else.

[00:05:52]
Let's just say docFromId. There we go. So getOne does that, passes it in, and I mean, you already have it at this point so you really could just return it with JSON here. But I'm just trying to pass everything through the controllers just in case we do something else there, which we may or may not.

[00:06:08]
But I mean it's literally already here you can just respond unless you're gonna do something extra which like I said we might like for instance if you wanted to joint tables which Mago doesn't support the Magoose uses thing called population which is Mox join tables on the fly, then you would do it there, that's why it's great just send it through here, just in case.

[00:06:28]
At the end of day, this thing's just going to return this, it's going to return the same thing by default. Then get all, literally gets all the stuff on this model. Give me all the documents on this model, you can back an array of documents and you've got the same thing.

[00:06:42]
And then the one that's pretty much been used everywhere is this find by params. So this one takes in a request, response, next and it takes in a fourth argument and that argument is going to be whatever was on the parameter that you subscribed for. For instance, if I go back to Rest router, I say hey look for this parameter.

[00:07:00]
If I look for a parameter called id. It's gonna pass it in as a forward argument, right? And I could register over any parameter, and how does it know there's a parameter called id? Well, because I called it id down here. See that, I say, hey, I'm making a route for /:id, which is a parameter.

[00:07:16]
When you get that id, run this function, and then that function's gonna do whatever it needs to do, and then pass it down To wherever it needs to go. So if I did a request to, this is Playlist, so if I said, I wanna do a GET to /playlist/:id, right, if I did a request there?

[00:07:34]
What's gonna happen is, the first thing's gonna happen, it's going to execute this one right here. So it's gonna get the param
>> Scott Moss: Or get playlist by id, so it's gonna do that first, which is up here. That function's gonna do it, and that's because it actually came down here and was like, there's a /:id, ID, I know what I'm supposed to do with ID.

[00:08:02]
I'm supposed to do this. It's the same name. If I change this to something else it's not gonna do it. It has to be the same name, right? If I had another parameter here, this is still only gonna run for id. The id that's passed in as a fourth argument is still only gonna be id, it's not gonna be thing.

[00:08:17]
I'm gonna have to make another one for thing, to say this is what I wanna do with thing.
>> Scott Moss: So then once it does that it gets a playlist by id, then that param function right here is going to send the control over to the original function that was going to run, in this case a GET /playlist/:id would be this one, so they never execute this function.

[00:08:40]
But by the time it executes this function, it already attached the document to the request. Before it passed the control over to this function, this function right here already attached the document to the request. Which is whatever that playlist is by the ID. Or if didn't find it, maybe it threw an error.

[00:08:59]
Whatever you want to do. So by the time we get here, we already have it. And that's true for all these methods here. So any get, put, or delete for this route, whenever they execute, this function already attached the document to the request automatically for you. So that's what this function is right here, that's what it's doing.

[00:09:17]
So you can see it takes a model, takes an ID. It finds that document on that model with a given ID. Here's the document, for some reason it didn't find the document, that means the ID number you got was wrong, so you figure out what you want to do, but I'm just going to throw an error here, like we just didn't find anything with that ID.

[00:09:33]
If you did find it, you attach it to the request, so request.doc for my ID, you can pick whatever you want, it doesn't have to be that, it doesn't matter as long as you don't override. So I'm going to start you there, like you know, body or something like that.

[00:09:45]
I picked the generic name because it's the document from the ID. If you were writing these controllers and each single resource individually, then you might put like rec.user or rec.song or rec.playlist. But because this is a generic controller for every single resource, I picked a generic name. Document from ID, so that's how I can reference document from ID up here, because it's being passed down from this function.

[00:10:09]
This function runs first, and then when it calls next, which we'll learn about next, it sends control over to the next thing. And then you catch the error, and you throw an error. That's it, so if you run this test.
>> Scott Moss: You should definitely see some files, and you come those, models, but all the routes should be passing.

[00:10:39]
So over here, /playlist, should get post playlist. /user GitPost ,/song GitPost. Notice we're only doing Git and Post for these resources. We're not doing put and delete and get all. And that's because we're gonna be writing tests later, and that's what I'm going to have you all do.

[00:10:56]
But yeah, those are tests we want to see that are passing. Ignore the model ones, definitely ignore the. These right here because it's X'ed out. When you see something like this in Moca or Jasmine, that means the test was skipped. They didn't fail, they didn't pass, they were skipped.

[00:11:12]
These tests got skipped. I should have skipped these too, but it's all good. Any questions?
>> Scott Moss: No. So if you're gonna learn how to skip a test, if anybody wants to figure that out, you can put an x next to describe. It'll skip it. You can put it next to an it, it'll skip it.

[00:11:32]
If you wanna run only just one test only, you can do. Where is it at?
>> Scott Moss: If you just want to run one test, you can just do dot only. So you can come in here and say I only want to run these. You can do dot only and you run it again.

[00:11:57]
It will only run that test and all of its children, see and then you're good. So that's very helpful for development. So you can be like, I only wanna run that and then I wanna watch it and then now this test is always evaluating. So whenever you save your code, it's always watching it.

[00:12:13]
I guess I just didn't wanna watch it at all. Let's try that.
>> Speaker 3: Watch is a Mocha feature?
>> Scott Moss: Yeah, it's a Mocha feature. I guess it just doesn't wanna watch. Well, I'm using Web Pack Mocha, which is like a modified version of it, so it just doesn't wanna do that right now for some reason.

[00:12:31]
But yeah, you would watch it like that. Really good for development. Just keep the test running as you're writing your feature, to make sure you didn't break anything. That way you don't have to roll out this huge feature, now I'm going to go back and test it, and everything broke.

[00:12:43]
And you're just like, dang, where did it break, where did it break. Just keep it open, keep your test executing. I know some of you all keep it running in your dock inside of your IDE of using like a web service, stuff like that. That's a good idea you can do that in and VS code too.

