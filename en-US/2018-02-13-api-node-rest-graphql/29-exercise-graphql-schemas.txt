[00:00:03]
>> Scott Moss: So let's do that. Let's go ahead and build something. So our challenge for next that we're gonna do is we're gonna create some type definitions for a song. And we're gonna create some type definitions for a playlist. So when I say type definitions I'm referring to,
>> Scott Moss: These.

[00:00:26]
So this is a type definition for the song. It's describing the shape and the fields and what those field types are. Same thing with playlists. Now I'm not gonna leave you to hanging out to dry, because I only want you to do this song and the playlist because the user's already done for you.

[00:00:42]
So user's there for an example. So look at the user, and actually we'll do that right now together. Let me check out to the appropriate branch. I believe we're gonna be on lesson 9.
>> Scott Moss: Let's see, yeah, I think we left off on lesson 8 yesterday, right? Yeah, let's see here.

[00:01:12]

>> Scott Moss: Go away, Atom. Okay, so,
>> Scott Moss: Are we on lesson 10?
>> Speaker 2: We ended with 8 yesterday.
>> Scott Moss: We ended with 8 yesterday? Okay, nevermind, yeah, okay, cool. So we're on lesson 9. And what we're gonna do here is we're just gonna create some types for the,
>> Scott Moss: Song and then the playlist.

[00:01:43]
And actually, what I wanted to do, I remember now. I wanted to walk through creating the user one together. That way, you can all see how it works. And then we'll create the song one. So the way we're gonna create it with the user is, and you can follow along with me here.

[00:01:56]
Is we're just gonna go to the user resource. We're gonna make a new file, and we're going to call it user.graphqo, one word, all lowercase. If you don't have like a GraphQL syntax highlighter, this is the perfect time to download one. Otherwise, it's just gonna look like text.

[00:02:20]

>> Scott Moss: And basically this file, this is where we're gonna describe our user type. So the first thing you wanna do, is you want to say type User.
>> Scott Moss: And, by using a type keyword, in GraphQL schema, it's telling GraphQL that you wanna make a type. That's basically what it's saying.

[00:02:39]
And remember a type is anything that we can resolve to. We have the scholar types, and then now we're creating a non-scholar type which is basically an object. So we're gonna make a User type, and what I'm gonna do is I'm gonna pull up the user model side-by-side.

[00:02:53]
And when I say the user model I'm talking about the thing we created in Mongo yesterday. Because most of the time, initially, your types and GraphQL are gonna be very similar to your schemas in your database, most of the time. At first, and then you'll start adding stuff and taking away stuff and expanding how you can query your graph.

[00:03:14]
But it's a good baseline to start off with what you have in the database and start from there. So User, for right now, based on what we have in the database, there's really only two things that I wanna expose. The first is the id. You obviously don't see id on the right because id is generated from Mongo, so we don't have to declare it.

[00:03:33]
But it is gonna be an id, so I wanna say a user has an id and its type is ID. And I'm gonna put an exclamation there, because id's always gonna be there. If I ask for an id from GraphQL for a user id, I should always get back an id.

[00:03:48]
If I don't, that should be a problem. I would expect that to break. The other thing is a username. This is gonna be String type, just like it is in Mongo. And I'm gonna say, this is also non-null. I can feel safe to do that because in Mongo it is required.

[00:04:08]
So I can feel pretty safe that there's always gonna be a username on this User type, because you can't create a user in the database without a username, according to our schema in Mongo. So I feel pretty safe that if I ask for a username, it should be non-null as well.

[00:04:21]
I'm not gonna put the password hash there. Because you don't wanna be sending back the password on GraphQL. So we're gonna just not do that. And that's a problem thing right there, so that's pretty cool.
>> Scott Moss: So that's basically how easy it is to create a type. So we're gonna do the same thing for the song model and the playlist model.

[00:04:45]
So you would go into the song resource folder, make a song.graphql. Go into the playlist resource folder and make a playlist.graphql. Pull up the schema next to it, and there is no right or wrong. You decide on how you want to do it. I did not show you how to do one thing.

[00:05:03]
Well I didn't directly show you, but you can put the clues together. And that's adding another non-scholar type to a scholar type or another non-scholar type. But if you think about it, it actually would probably be your first thought. It's actually pretty intuitive. So you can attempt that.

[00:05:20]
And basically that's gonna come down to the playlist model. Cuz the playlist model has songs, so it's like how do you describe that in GraphQL? How do I tell GraphQL that a Playlist type has an array of songs? So I'll let you attempt that. That's pretty fine. None of this code you're writing right now is gonna be executed.

[00:05:37]
So you can't check it, so there's no right or wrong. I just want you to write some types.

