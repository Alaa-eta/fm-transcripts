WEBVTT

1
00:00:03.942 --> 00:00:05.270
&gt;&gt; Scott Moss: So let's do that.

2
00:00:05.270 --> 00:00:06.640
Let's go ahead and build something.

3
00:00:06.640 --> 00:00:12.218
So our challenge for
next that we're gonna do is we're

4
00:00:12.218 --> 00:00:17.540
gonna create some type definitions for
a song.

5
00:00:17.540 --> 00:00:20.050
And we're gonna create some type
definitions for a playlist.

6
00:00:20.050 --> 00:00:22.709
So when I say type
definitions I'm referring to,

7
00:00:25.601 --> 00:00:26.436
&gt;&gt; Scott Moss: These.

8
00:00:26.436 --> 00:00:28.750
So this is a type definition for the song.

9
00:00:28.750 --> 00:00:35.420
It's describing the shape and
the fields and what those field types are.

10
00:00:35.420 --> 00:00:36.900
Same thing with playlists.

11
00:00:36.900 --> 00:00:40.780
Now I'm not gonna leave you to hanging out
to dry, because I only want you to do this

12
00:00:40.780 --> 00:00:42.900
song and the playlist because
the user's already done for you.

13
00:00:42.900 --> 00:00:44.720
So user's there for an example.

14
00:00:44.720 --> 00:00:48.340
So look at the user, and
actually we'll do that right now together.

15
00:00:48.340 --> 00:00:50.340
Let me check out to
the appropriate branch.

16
00:00:50.340 --> 00:00:54.749
I believe we're gonna be on lesson 9.

17
00:01:00.105 --> 00:01:03.380
&gt;&gt; Scott Moss: Let's see, yeah, I think
we left off on lesson 8 yesterday, right?

18
00:01:03.380 --> 00:01:06.654
Yeah, let's see here.

19
00:01:12.344 --> 00:01:15.200
&gt;&gt; Scott Moss: Go away, Atom.

20
00:01:15.200 --> 00:01:21.271
Okay, so,
&gt;&gt; Scott Moss: Are we on lesson 10?

21
00:01:24.698 --> 00:01:26.880
&gt;&gt; Speaker 2: We ended with 8 yesterday.

22
00:01:26.880 --> 00:01:27.750
&gt;&gt; Scott Moss: We ended with 8 yesterday?

23
00:01:27.750 --> 00:01:29.350
Okay, nevermind, yeah, okay, cool.

24
00:01:29.350 --> 00:01:30.270
So we're on lesson 9.

25
00:01:31.640 --> 00:01:38.086
And what we're gonna do here is we're
just gonna create some types for

26
00:01:38.086 --> 00:01:43.350
the,
&gt;&gt; Scott Moss: Song and then the playlist.

27
00:01:43.350 --> 00:01:45.040
And actually, what I wanted to do,
I remember now.

28
00:01:45.040 --> 00:01:47.970
I wanted to walk through
creating the user one together.

29
00:01:47.970 --> 00:01:49.370
That way, you can all see how it works.

30
00:01:49.370 --> 00:01:50.850
And then we'll create the song one.

31
00:01:50.850 --> 00:01:54.200
So the way we're gonna create
it with the user is, and

32
00:01:54.200 --> 00:01:56.220
you can follow along with me here.

33
00:01:56.220 --> 00:01:58.650
Is we're just gonna go
to the user resource.

34
00:01:58.650 --> 00:02:00.790
We're gonna make a new file, and

35
00:02:00.790 --> 00:02:05.780
we're going to call it user.graphqo,
one word, all lowercase.

36
00:02:08.990 --> 00:02:11.140
If you don't have like
a GraphQL syntax highlighter,

37
00:02:11.140 --> 00:02:12.800
this is the perfect time to download one.

38
00:02:12.800 --> 00:02:15.520
Otherwise, it's just gonna look like text.

39
00:02:20.863 --> 00:02:22.530
&gt;&gt; Scott Moss: And basically this file,

40
00:02:22.530 --> 00:02:25.800
this is where we're gonna
describe our user type.

41
00:02:27.820 --> 00:02:30.524
So the first thing you wanna do,
is you want to say type User.

42
00:02:32.879 --> 00:02:35.653
&gt;&gt; Scott Moss: And, by using
a type keyword, in GraphQL schema,

43
00:02:35.653 --> 00:02:38.374
it's telling GraphQL that
you wanna make a type.

44
00:02:38.374 --> 00:02:39.660
That's basically what it's saying.

45
00:02:39.660 --> 00:02:42.390
And remember a type is anything
that we can resolve to.

46
00:02:42.390 --> 00:02:44.380
We have the scholar types, and

47
00:02:44.380 --> 00:02:47.300
then now we're creating a non-scholar
type which is basically an object.

48
00:02:48.820 --> 00:02:50.460
So we're gonna make a User type, and

49
00:02:50.460 --> 00:02:53.380
what I'm gonna do is I'm gonna pull
up the user model side-by-side.

50
00:02:53.380 --> 00:02:55.965
And when I say the user model I'm
talking about the thing we created in

51
00:02:55.965 --> 00:02:56.686
Mongo yesterday.

52
00:02:58.090 --> 00:03:04.910
Because most of the time,
initially, your types and GraphQL

53
00:03:04.910 --> 00:03:08.960
are gonna be very similar to your schemas
in your database, most of the time.

54
00:03:08.960 --> 00:03:10.460
At first, and
then you'll start adding stuff and

55
00:03:10.460 --> 00:03:14.080
taking away stuff and
expanding how you can query your graph.

56
00:03:14.080 --> 00:03:18.800
But it's a good baseline to start off
with what you have in the database and

57
00:03:18.800 --> 00:03:20.090
start from there.

58
00:03:20.090 --> 00:03:22.883
So User, for right now,
based on what we have in the database,

59
00:03:22.883 --> 00:03:25.278
there's really only two
things that I wanna expose.

60
00:03:25.278 --> 00:03:27.205
The first is the id.

61
00:03:27.205 --> 00:03:31.912
You obviously don't see id on the right
because id is generated from Mongo, so

62
00:03:31.912 --> 00:03:33.710
we don't have to declare it.

63
00:03:33.710 --> 00:03:38.200
But it is gonna be an id, so I wanna say
a user has an id and its type is ID.

64
00:03:39.860 --> 00:03:44.710
And I'm gonna put an exclamation there,
because id's always gonna be there.

65
00:03:44.710 --> 00:03:48.920
If I ask for an id from GraphQL for
a user id, I should always get back an id.

66
00:03:48.920 --> 00:03:50.440
If I don't, that should be a problem.

67
00:03:50.440 --> 00:03:51.490
I would expect that to break.

68
00:03:53.820 --> 00:03:57.715
The other thing is a username.

69
00:03:57.715 --> 00:04:01.138
This is gonna be String type,
just like it is in Mongo.

70
00:04:01.138 --> 00:04:03.412
And I'm gonna say, this is also non-null.

71
00:04:03.412 --> 00:04:08.350
I can feel safe to do that
because in Mongo it is required.

72
00:04:08.350 --> 00:04:10.960
So I can feel pretty safe that there's
always gonna be a username on this User

73
00:04:10.960 --> 00:04:15.381
type, because you can't create a user
in the database without a username,

74
00:04:15.381 --> 00:04:17.070
according to our schema in Mongo.

75
00:04:17.070 --> 00:04:21.750
So I feel pretty safe that if I ask for
a username, it should be non-null as well.

76
00:04:21.750 --> 00:04:23.600
I'm not gonna put the password hash there.

77
00:04:23.600 --> 00:04:27.480
Because you don't wanna be sending
back the password on GraphQL.

78
00:04:27.480 --> 00:04:29.640
So we're gonna just not do that.

79
00:04:29.640 --> 00:04:31.262
And that's a problem thing right there,
so that's pretty cool.

80
00:04:34.919 --> 00:04:37.630
&gt;&gt; Scott Moss: So that's basically
how easy it is to create a type.

81
00:04:37.630 --> 00:04:45.500
So we're gonna do the same thing for
the song model and the playlist model.

82
00:04:45.500 --> 00:04:49.830
So you would go into the song
resource folder, make a song.graphql.

83
00:04:49.830 --> 00:04:52.707
Go into the playlist resource folder and
make a playlist.graphql.

84
00:04:52.707 --> 00:04:57.792
Pull up the schema next to it,
and there is no right or wrong.

85
00:04:57.792 --> 00:05:00.570
You decide on how you want to do it.

86
00:05:00.570 --> 00:05:03.470
I did not show you how to do one thing.

87
00:05:03.470 --> 00:05:06.350
Well I didn't directly show you,
but you can put the clues together.

88
00:05:06.350 --> 00:05:10.064
And that's adding another non-scholar
type to a scholar type or

89
00:05:10.064 --> 00:05:11.762
another non-scholar type.

90
00:05:11.762 --> 00:05:17.639
But if you think about it, it actually
would probably be your first thought.

91
00:05:17.639 --> 00:05:19.790
It's actually pretty intuitive.

92
00:05:19.790 --> 00:05:20.910
So you can attempt that.

93
00:05:20.910 --> 00:05:23.660
And basically that's gonna come
down to the playlist model.

94
00:05:23.660 --> 00:05:28.410
Cuz the playlist model has songs, so it's
like how do you describe that in GraphQL?

95
00:05:28.410 --> 00:05:32.990
How do I tell GraphQL that a Playlist
type has an array of songs?

96
00:05:32.990 --> 00:05:35.390
So I'll let you attempt that.

97
00:05:35.390 --> 00:05:36.090
That's pretty fine.

98
00:05:36.090 --> 00:05:37.840
None of this code you're writing
right now is gonna be executed.

99
00:05:37.840 --> 00:05:39.072
So you can't check it, so
there's no right or wrong.

100
00:05:39.072 --> 00:05:40.792
I just want you to write some types.

