WEBVTT

1
00:00:02.360 --> 00:00:03.712
&gt;&gt; Scott: You can check out to lesson 4.

2
00:00:22.537 --> 00:00:23.238
&gt;&gt; Scott: Okay, so

3
00:00:23.238 --> 00:00:25.439
we've got lesson four here.

4
00:00:25.439 --> 00:00:28.000
Basically, what we need to do here,
is we need to do a couple things.

5
00:00:28.000 --> 00:00:31.150
Actually, do I have this listed here?

6
00:00:31.150 --> 00:00:32.350
Yeah, there we go.

7
00:00:32.350 --> 00:00:33.690
So, the challenge for this one is.

8
00:00:33.690 --> 00:00:35.490
Actually, let me just go over
before I talk about exactly what

9
00:00:35.490 --> 00:00:36.730
you're gonna be doing.

10
00:00:36.730 --> 00:00:39.380
So, one thing is we got some global
middleware that we need to set up.

11
00:00:39.380 --> 00:00:42.800
Remember, we were using that request.body,
right?

12
00:00:42.800 --> 00:00:45.100
And I was like, that's gonna be
attached to some middleware later on.

13
00:00:45.100 --> 00:00:47.320
Yeah by default,
Express knows nothing about JSON.

14
00:00:47.320 --> 00:00:48.370
It has no clue.

15
00:00:48.370 --> 00:00:49.810
It doesn't have any way
of how to handle it.

16
00:00:49.810 --> 00:00:55.470
But there's some special middleware that
does allow us to parse JSON, parse URLs.

17
00:00:55.470 --> 00:00:56.410
Do all that stuff for us.

18
00:00:56.410 --> 00:00:58.770
So we're gonna use that middleware
because we don't wanna do it ourselves.

19
00:00:58.770 --> 00:01:02.216
And we want that to happen on every single
request on our app because our whole app

20
00:01:02.216 --> 00:01:04.050
is going to be responding to sin and JSON.

21
00:01:04.050 --> 00:01:06.340
So we're gonna set it up globally.

22
00:01:06.340 --> 00:01:09.360
We can also set up logging globally,
like hey, I want to.

23
00:01:09.360 --> 00:01:14.572
Cuz right now, when I start the server,
&gt;&gt; Scott: And

24
00:01:14.572 --> 00:01:19.840
I make a request to it,
I don't know if somebody made a request.

25
00:01:19.840 --> 00:01:21.200
I'm not logging that request anywhere.

26
00:01:21.200 --> 00:01:24.600
It'd be pretty great to be able to log
every single request that came in.

27
00:01:24.600 --> 00:01:29.282
Really nice to have that that's like
API 101 some login for your request.

28
00:01:29.282 --> 00:01:31.184
So we wanna see that.

29
00:01:31.184 --> 00:01:32.892
And that also needs to be global.

30
00:01:32.892 --> 00:01:36.503
So if you look inside of
this middleware file, here,

31
00:01:36.503 --> 00:01:41.096
you can see there is a function
called set up setglobalMiddleware.

32
00:01:41.096 --> 00:01:43.969
And it takes in the app.

33
00:01:43.969 --> 00:01:48.787
What we wanna do here is we wanna set
up some middleware to do some logging,

34
00:01:48.787 --> 00:01:53.940
that's optional, but the one we absolutely
have to do is set up JSON parsing.

35
00:01:53.940 --> 00:01:58.796
And we're gonna use this bodyParser,
&gt;&gt; Scott: This

36
00:01:58.796 --> 00:02:01.830
bodyParser middleware thing.

37
00:02:01.830 --> 00:02:03.860
So let me, here we go.

38
00:02:03.860 --> 00:02:05.180
Let's go look at the docs for
this, so I can show you.

39
00:02:06.430 --> 00:02:11.122
So we go look at body-parser.
&gt;&gt; Scott: There's

40
00:02:11.122 --> 00:02:15.890
this thing in here called,
&gt;&gt; Scott: JSON.

41
00:02:15.890 --> 00:02:17.030
We need body-parser.json.

42
00:02:17.030 --> 00:02:22.130
And then we also need URL encoded.

43
00:02:22.130 --> 00:02:23.110
So we need both of those.

44
00:02:23.110 --> 00:02:27.760
And if you just take an example of how
to use it, if they even have examples.

45
00:02:27.760 --> 00:02:30.020
Do they even have?
&gt;&gt; Speaker 2: It's way down,

46
00:02:30.020 --> 00:02:32.390
there.
&gt;&gt; Scott: It's like all the way down,

47
00:02:32.390 --> 00:02:33.800
there we go.

48
00:02:33.800 --> 00:02:38.090
Again, this is again why we chose Express
because this thing works for Express.

49
00:02:38.090 --> 00:02:40.985
Almost everything works for
Express/Connect as you see right here.

50
00:02:40.985 --> 00:02:44.346
Express/Connect cuz Express
is based off of Connect.

51
00:02:44.346 --> 00:02:47.690
But basically we need to set
up both of these middlewares.

52
00:02:47.690 --> 00:02:52.830
We need to set up bodyParser,
urlencoded({ extended, just put true,

53
00:02:52.830 --> 00:02:54.980
and then we also need to
set up bodyParser.json.

54
00:02:54.980 --> 00:02:57.470
We need both of those
middleware on our app.

55
00:02:57.470 --> 00:03:00.600
So knowing this right here,
looking at this,

56
00:03:00.600 --> 00:03:05.286
we need to do that in here on our app.

57
00:03:05.286 --> 00:03:12.190
So and how we set up something what's
the method that we use on the app or

58
00:03:12.190 --> 00:03:16.020
the router that we can mount anything on?
&gt;&gt; Speaker 2: Use.

59
00:03:16.020 --> 00:03:17.676
&gt;&gt; Scott: Use exactly, so

60
00:03:17.676 --> 00:03:21.934
use use and
set up that body part for Json and

61
00:03:21.934 --> 00:03:26.903
URL encoded, and then
&gt;&gt; Scott: What we also

62
00:03:26.903 --> 00:03:30.042
have here is some authentication,
so we're not gonna

63
00:03:30.042 --> 00:03:34.150
walk through building custom
authentication cuz it's already done.

64
00:03:34.150 --> 00:03:37.130
And that's gonna take a long time to
do anyway, but it's already done.

65
00:03:37.130 --> 00:03:39.160
We're gonna attach it
to our routes though.

66
00:03:39.160 --> 00:03:44.590
I already have that done,
you can go look in modules/all and there's

67
00:03:44.590 --> 00:03:48.440
a whole bunch of stuff in here with JSON
web tokens, it's doing some crazy stuff.

68
00:03:48.440 --> 00:03:50.800
And we can walk through it when
we get done, of what's going on.

69
00:03:50.800 --> 00:03:53.890
But it's heavily commented, it tells
you exactly what's happening here.

70
00:03:53.890 --> 00:03:55.250
But this is also middleware,

71
00:03:55.250 --> 00:03:58.680
and we're gonna set this
middleware up to protect our API.

72
00:03:58.680 --> 00:04:02.400
So you can't access /api
without being authenticated.

73
00:04:04.110 --> 00:04:06.080
So that's what this is gonna do.

74
00:04:06.080 --> 00:04:11.768
So we need to set this up as well, and
the middleware for this is gonna be.

75
00:04:11.768 --> 00:04:17.010
Where are you?

76
00:04:17.010 --> 00:04:21.890
We need to use the decode
token function from this file.

77
00:04:21.890 --> 00:04:23.650
So decode token is exactly
what it sounds like.

78
00:04:23.650 --> 00:04:25.280
It's gonna decode the json web token and

79
00:04:25.280 --> 00:04:28.950
we wanna do that on every
single route to size api.

80
00:04:28.950 --> 00:04:31.900
So think in your app where
there's a place where

81
00:04:31.900 --> 00:04:36.180
we can set up some function that runs
before every other function for size api.

82
00:04:37.470 --> 00:04:42.270
Then you want to place decodeToken
in there Just like that,

83
00:04:42.270 --> 00:04:45.280
you have to invoke because it's
a function that returns a function.

84
00:04:45.280 --> 00:04:47.450
Every other middle word doesn't return
a function, this one returns a function,

85
00:04:47.450 --> 00:04:48.550
so you got to invoke it just like that.

86
00:04:50.870 --> 00:04:52.800
That a side to off, and

87
00:04:52.800 --> 00:04:57.480
then you have this custom error
handler that does absolutely nothing.

88
00:04:58.830 --> 00:05:01.050
And like you said, we need to set this up.

89
00:05:01.050 --> 00:05:03.370
To handle any error
that's passed into next.

90
00:05:03.370 --> 00:05:05.990
Eventually when you pass any
error to next it just bubbles up.

91
00:05:05.990 --> 00:05:08.490
No matter where you pass it in,
it's gonna go to its router like,

92
00:05:08.490 --> 00:05:09.560
do you have an error handler?

93
00:05:09.560 --> 00:05:10.260
Nope.

94
00:05:10.260 --> 00:05:10.990
Do you have an error handler?

95
00:05:10.990 --> 00:05:12.350
Nope.
Do you have an error handler?

96
00:05:12.350 --> 00:05:13.560
Nope.
Okay, I'm just gonna blow up

97
00:05:13.560 --> 00:05:14.120
right here, duh.

98
00:05:14.120 --> 00:05:17.600
It's just gonna check every single
level until it gets to the root app.

99
00:05:17.600 --> 00:05:21.030
So we should set up an error handler for
API.

100
00:05:21.030 --> 00:05:25.220
And the syntax for that is express passes
in the error as the first argument.

101
00:05:25.220 --> 00:05:27.160
That's how it knows if this
is an error handler or not.

102
00:05:27.160 --> 00:05:29.450
It checks the errity, or
the signature of your function and

103
00:05:29.450 --> 00:05:32.820
if it detects that there's an error here,
it's like okay, this is the error handler.

104
00:05:32.820 --> 00:05:33.440
That's how it does it.

105
00:05:33.440 --> 00:05:36.990
So all you're going to do it register
this using the same .use method and

106
00:05:36.990 --> 00:05:38.590
then inside of it you can
do whatever you want.

107
00:05:38.590 --> 00:05:41.910
I would say, probably log the error so
you can see what it is on the server.

108
00:05:41.910 --> 00:05:45.690
And then send back a status of like 500 or
whatever you wanna send back.

109
00:05:45.690 --> 00:05:50.910
But normally, what you would do is you
would throw custom error messages.

110
00:05:50.910 --> 00:05:52.160
And then inside this function,

111
00:05:52.160 --> 00:05:55.800
you'd be like if it's this error,
send back this status code.

112
00:05:55.800 --> 00:05:58.160
If it's this error,
send back this message.

113
00:05:58.160 --> 00:06:00.550
If it's this error, call this service.

114
00:06:00.550 --> 00:06:01.960
That's what you would do in here.

115
00:06:01.960 --> 00:06:03.570
You can do anything,
ASYNC can do whatever you want.

116
00:06:03.570 --> 00:06:06.050
But we're just throwing generic errors,
we don't really care.

117
00:06:06.050 --> 00:06:10.050
But that's what you would do in
production, you would check the metadata

118
00:06:10.050 --> 00:06:14.090
on this error right here to determine what
you need to do next, but ultimately no

119
00:06:14.090 --> 00:06:17.380
matter what you do you have to send
a response otherwise it's going to hang.

120
00:06:17.380 --> 00:06:19.340
So this has to send a response some way or
another.

121
00:06:21.370 --> 00:06:24.500
So I bring up the Tasks or

122
00:06:24.500 --> 00:06:29.090
the challenge and you're going
to setup global app middleware,

123
00:06:30.100 --> 00:06:34.480
you're going to add the router based
middleware, which is like the error

124
00:06:36.570 --> 00:06:39.780
handling, and then you're going to
setup auth middleware where needed.

125
00:06:41.690 --> 00:06:47.931
So global middleware The error handling,
&gt;&gt; Scott: and

126
00:06:47.931 --> 00:06:49.350
then set up the auth middleware.

127
00:06:49.350 --> 00:06:51.070
And if you don't get to auth
the middleware, that's totally fine.

128
00:06:51.070 --> 00:06:54.780
You don't have to set it up but
I think it's a good exercise.

129
00:06:56.770 --> 00:07:00.160
So it is-
&gt;&gt; Speaker 2: Can you define where needed?

130
00:07:00.160 --> 00:07:02.100
&gt;&gt; Scott: Where do you think it's needed?

131
00:07:02.100 --> 00:07:03.810
It'll work the same no
matter where you put it.

132
00:07:03.810 --> 00:07:04.560
&gt;&gt; Speaker 2: User create.

133
00:07:06.020 --> 00:07:09.120
Okay, I guess it totally depends
on each case of the app,

134
00:07:09.120 --> 00:07:11.060
right?
&gt;&gt; Scott: Yeah, so I would say for

135
00:07:11.060 --> 00:07:13.490
now just protect the whole /api.
&gt;&gt; Speaker 2: Okay.

136
00:07:13.490 --> 00:07:15.950
&gt;&gt; Scott: Yeah, obvisouly if you actually

137
00:07:15.950 --> 00:07:19.600
had your sign up ability
protected by authentication,

138
00:07:19.600 --> 00:07:21.070
then nobody could ever sign up.

139
00:07:21.070 --> 00:07:25.020
So I would say just Assume that that
create method is not for signing up.

140
00:07:25.020 --> 00:07:27.520
like you are admin creating users or
something like that.

141
00:07:27.520 --> 00:07:28.460
not for signing up.

142
00:07:28.460 --> 00:07:31.530
that's a whole other route that
i think is already in the app.

143
00:07:31.530 --> 00:07:35.910
yeah there's like a sign in sign up
flow already in there that's completely

144
00:07:35.910 --> 00:07:36.590
separated out.

145
00:07:36.590 --> 00:07:38.530
but yeah that's something
you don't want to do so

146
00:07:38.530 --> 00:07:42.420
you got to be careful where you Put these
Middleware because anything that belongs

147
00:07:42.420 --> 00:07:45.000
to that mount will be
affected by that Middleware.

148
00:07:45.000 --> 00:07:49.690
So if you accidentally put
authentication on your

149
00:07:49.690 --> 00:07:51.660
sign up flow nobody would
ever be able to sign up.

150
00:07:51.660 --> 00:07:53.060
Cuz they need to be
authenticated to sign up.

151
00:07:53.060 --> 00:07:55.470
So that would suck.

152
00:07:55.470 --> 00:07:58.040
So I would say just lock
down the whole API route.

153
00:07:58.040 --> 00:08:00.290
Setup that Error handling,

154
00:08:00.290 --> 00:08:02.970
the function is already there
inside of modules error handling.

155
00:08:02.970 --> 00:08:05.090
There it is.
And then, you also need to,

156
00:08:06.550 --> 00:08:10.938
inside the middleware file here,
you need to just attach the body parses.

157
00:08:10.938 --> 00:08:15.575
That's it.
&gt;&gt; Scott: So

158
00:08:15.575 --> 00:08:20.160
you'll know this works
when It doesn't break?

159
00:08:20.160 --> 00:08:24.220
[LAUGH] And you can actually send JSON.

160
00:08:24.220 --> 00:08:26.830
So if you do a post, you can do
some logging in the controllers and

161
00:08:26.830 --> 00:08:28.195
you can find out like body is.

162
00:08:28.195 --> 00:08:31.460
If you log body then that's exactly
what you send, then it totally works.

163
00:08:31.460 --> 00:08:33.830
And you can access the authentication
works is, cuz if you.

164
00:08:33.830 --> 00:08:37.250
I don't wanna show it but
if you put the authentication in there,

165
00:08:37.250 --> 00:08:39.640
you also get an error back immediately
like you're not authenticated.

166
00:08:39.640 --> 00:08:41.700
It'll immediately say,
you're not authenticated.

167
00:08:41.700 --> 00:08:43.200
It won't even execute your controller.

168
00:08:43.200 --> 00:08:43.770
It'll just break

