WEBVTT

1
00:00:02.297 --> 00:00:02.854
&gt;&gt; Scott Moss: The challenge

2
00:00:02.854 --> 00:00:05.223
we're gonna be doing is we're
gonna be setting up routing.

3
00:00:05.223 --> 00:00:07.760
And basically,
what you need to do for this one is,

4
00:00:07.760 --> 00:00:09.610
I'm just gonna walk you through it.

5
00:00:09.610 --> 00:00:12.430
I'm just gonna get stash this,
actually, I'll leave this open,

6
00:00:12.430 --> 00:00:13.310
I think it'll be very helpful.

7
00:00:13.310 --> 00:00:14.656
Will this be helpful, to see this?

8
00:00:14.656 --> 00:00:17.970
Okay, I'll leave this stuff up, actually.

9
00:00:17.970 --> 00:00:22.340
So what we're gonna do is if
you navigate over to API,

10
00:00:22.340 --> 00:00:25.740
you'll see tons of stuff in here,
don't worry about it.

11
00:00:25.740 --> 00:00:30.110
But you should see a file
called restRouter, right?

12
00:00:31.380 --> 00:00:36.860
Right now, restRouter is, there's one
example here that you can follow.

13
00:00:36.860 --> 00:00:39.840
And you're gonna use the example
to build out the other endpoints.

14
00:00:39.840 --> 00:00:43.870
But basically the API that we are going
to be making is like a music API.

15
00:00:43.870 --> 00:00:47.680
There's songs, there's playlists and
there's users.

16
00:00:47.680 --> 00:00:51.320
Right now, you can follow the example
that I have for the usefRouter.

17
00:00:51.320 --> 00:00:55.700
So basically what I'm doing here
is I'm creating a subrouter inside

18
00:00:56.900 --> 00:00:59.860
the restRouter and the reason I call
it restRouter is because we are going

19
00:00:59.860 --> 00:01:02.120
to make a graph router tomorrow.

20
00:01:02.120 --> 00:01:04.140
Any other way I would not
call it a restRouter, so

21
00:01:04.140 --> 00:01:06.140
if you think the name is ridiculous,
that's why.

22
00:01:06.140 --> 00:01:09.340
[LAUGH] I'm separating the two for
tomorrow.

23
00:01:09.340 --> 00:01:12.520
So this is our restRouter,
and I made a new one, and

24
00:01:12.520 --> 00:01:18.550
I'm mounting another subrouter on that
subrouter underneath the user's path.

25
00:01:18.550 --> 00:01:23.980
So basically what you would need to do is
one, first things first is you need to

26
00:01:23.980 --> 00:01:31.100
mount that restRouter on
the API path on the app.

27
00:01:31.100 --> 00:01:37.520
So inside of this server js,
you need to mount the api router on the,

28
00:01:37.520 --> 00:01:41.800
I'm sorry, the restRouter, get it right,

29
00:01:41.800 --> 00:01:47.793
on the API path.
&gt;&gt; Scott Moss: So

30
00:01:47.793 --> 00:01:49.470
I'm out the restRouter on the API path.

31
00:01:49.470 --> 00:01:50.550
That's the first thing.

32
00:01:50.550 --> 00:01:53.435
And then if you go look
at that restRouter,

33
00:01:53.435 --> 00:01:56.890
like I said this user
example is fully flushed out.

34
00:01:56.890 --> 00:02:01.852
You're going to have to do the same
thing for songRouter and playlistRouter.

35
00:02:01.852 --> 00:02:05.650
We need two different mounts for
those, so we should be able to access

36
00:02:05.650 --> 00:02:08.739
the playlistRouter underneath
the /playlist mount.

37
00:02:08.739 --> 00:02:13.127
And we should be able to access
the songRouter underneath the /song mount.

38
00:02:13.127 --> 00:02:17.370
And then if you actually go look at
those individual routers, for instance,

39
00:02:17.370 --> 00:02:19.909
let's go look at the userRouter
in resources/user.

40
00:02:21.220 --> 00:02:24.662
So resources/user inside the index file,

41
00:02:24.662 --> 00:02:28.854
you'll see that it's just
playing the restRouter.

42
00:02:28.854 --> 00:02:32.567
So if we go to the restRouter there,
you'll see here,

43
00:02:32.567 --> 00:02:35.328
you see some pretty crazy stuff in here.

44
00:02:35.328 --> 00:02:37.594
Now I'm just gonna walk through
this stuff briefly, and

45
00:02:37.594 --> 00:02:40.613
I didn't really wanna talk about it,
because I wanted to give you enough for

46
00:02:40.613 --> 00:02:43.770
you to figure out what's going on here and
I think I gave you enough.

47
00:02:43.770 --> 00:02:47.680
Basically this is a fully fleshed
out subrouter for the user resource.

48
00:02:47.680 --> 00:02:51.470
You're going to use this again as
an example to flesh out the routers for

49
00:02:51.470 --> 00:02:52.210
the song.

50
00:02:52.210 --> 00:02:54.810
You go look at the song restRouter,
it's empty.

51
00:02:54.810 --> 00:02:58.080
You go look at the playlist restRouter,
it's also empty.

52
00:02:59.630 --> 00:03:03.750
It's gonna look pretty much identical to
the userRouter just using its own router.

53
00:03:03.750 --> 00:03:04.850
So let's walk through here.

54
00:03:04.850 --> 00:03:06.720
I didn't talk about param.

55
00:03:06.720 --> 00:03:11.648
Param is basically a way that we
can tell our router or Express and

56
00:03:11.648 --> 00:03:16.028
say, hey, when somebody comes
in here with the URL, and

57
00:03:16.028 --> 00:03:19.697
it has a param on it like id,
run this function.

58
00:03:19.697 --> 00:03:20.700
That's what it's saying.

59
00:03:20.700 --> 00:03:23.978
This function allows us to pick
off the parameter of the URL,

60
00:03:23.978 --> 00:03:27.520
do something with it and
send it back down the router.

61
00:03:27.520 --> 00:03:31.486
So this doesn't respond to the request,
it does something with that parameter.

62
00:03:31.486 --> 00:03:36.880
Usually like for instance here,
let's say you wanna get user/one, right?

63
00:03:36.880 --> 00:03:40.984
This is gonna take that one parameter,
go to the user database,

64
00:03:40.984 --> 00:03:45.696
grab the user with the ID of one,
attach it to the request, call next, and

65
00:03:45.696 --> 00:03:48.600
send it down to the next
thing that's there.

66
00:03:48.600 --> 00:03:49.801
So that's what it's doing.

67
00:03:49.801 --> 00:03:53.210
This is like a middleware almost but
we haven't really talked about middleware.

68
00:03:53.210 --> 00:03:56.230
So you don't really need to know what
any of these functions are doing.

69
00:03:56.230 --> 00:03:57.590
You can just put them there.

70
00:03:57.590 --> 00:03:59.120
Don't worry about it, they'll work.

71
00:03:59.120 --> 00:04:00.370
We're gonna get to these functions later.

72
00:04:00.370 --> 00:04:03.400
But basically you just need to set
up the routes and the handlers.

73
00:04:04.520 --> 00:04:07.280
The other thing is this shortcut
here that I did not talk about.

74
00:04:07.280 --> 00:04:09.940
I also did not talk about this because
I didn't want you to use a shortcut.

75
00:04:09.940 --> 00:04:12.300
But if you can understand it,
you can totally use it.

76
00:04:12.300 --> 00:04:16.390
This shortcut on any router allows
you to use the .route method.

77
00:04:16.390 --> 00:04:18.580
And it's just a shortcut so
you don't have to do this.

78
00:04:18.580 --> 00:04:22.110
If we didn't use the .route
we'd have to say, userRouter.

79
00:04:22.110 --> 00:04:26.201
We're gonna say userRouter for
a slash, or userRouter.get('/').

80
00:04:26.201 --> 00:04:30.217
And then you have to do
userRouter.post('/').

81
00:04:30.217 --> 00:04:32.603
It's the same route, right?

82
00:04:32.603 --> 00:04:36.389
We're gonna eventually do
two different controllers.

83
00:04:36.389 --> 00:04:37.719
You're gonna be two
different actions here.

84
00:04:39.220 --> 00:04:44.030
But on the same route, so .route allows
you to say, hey, for this route,

85
00:04:44.030 --> 00:04:48.000
I wanna do this get, do this,
get through this post.

86
00:04:48.000 --> 00:04:49.770
So you have to define the route twice.

87
00:04:49.770 --> 00:04:51.510
That's all it's doing, so it's chainable.

88
00:04:51.510 --> 00:04:55.270
So you can say, hey, for index and
for get, I wanna do that.

89
00:04:55.270 --> 00:04:57.360
For index and post, I wanna do that.

90
00:04:57.360 --> 00:04:59.790
The same thing for this route right here,
which is a parameter.

91
00:04:59.790 --> 00:05:03.791
So for a /id, get post delete.

92
00:05:03.791 --> 00:05:09.122
So again, this is a fully
fleshed-out userRouter, and

93
00:05:09.122 --> 00:05:14.910
you need to flesh out the songRouter and
the playlistRouter.

94
00:05:16.130 --> 00:05:20.331
And then you also need to hook
them up in restRouter js file,

95
00:05:20.331 --> 00:05:24.545
very similar to what's going
on here with the userRouter.

96
00:05:24.545 --> 00:05:30.391
And then finally you need to hook
up the restRouter to the app.

97
00:05:30.391 --> 00:05:32.913
All right so you've got five things to do.

98
00:05:32.913 --> 00:05:36.635
Build out the songRouter,
build out the playlistRouter,

99
00:05:36.635 --> 00:05:42.146
attach the songRouter to the restRouter,
attach a playlistRouter to the restRouter,

100
00:05:42.146 --> 00:05:47.440
and then attach the restRouter to the app.
&gt;&gt; Scott Moss: And

101
00:05:47.440 --> 00:05:50.140
the userRouter is a full
example of how to do all of it.

102
00:05:50.140 --> 00:05:52.800
So you could look at that,
experiment with it.

103
00:05:52.800 --> 00:05:55.810
There's definitely some stuff in there
that I did not teach you about, but

104
00:05:55.810 --> 00:05:58.780
I want you to play with it and
see what you could think of.

105
00:05:58.780 --> 00:06:03.293
Cuz then we'll walk through it, and
I wanna see how you all think it works,

106
00:06:03.293 --> 00:06:04.808
or how you know it works.

107
00:06:04.808 --> 00:06:07.068
Cool, so it is 10:44 now.

108
00:06:07.068 --> 00:06:10.065
This one's gonna be a little longer, so

109
00:06:10.065 --> 00:06:14.811
let's come back at 11:10.
&gt;&gt; Speaker 2: This is lesson

110
00:06:14.811 --> 00:06:19.750
two in the git checkout?
&gt;&gt; Scott Moss: Yes,

111
00:06:19.750 --> 00:06:21.750
this is lesson two, sorry.

112
00:06:21.750 --> 00:06:23.995
Yeah, check out lesson two.
&gt;&gt; Speaker 3: It looks like it cares about

113
00:06:23.995 --> 00:06:26.040
Mongo on this lesson.
&gt;&gt; Scott Moss: It cares about Mongo

114
00:06:26.040 --> 00:06:26.650
in this lesson?

115
00:06:26.650 --> 00:06:29.970
Okay, so make sure you have
Mongo running on this one.

116
00:06:31.310 --> 00:06:33.280
Yeah, just make sure you have
Mongo running, you should be fine.

117
00:06:33.280 --> 00:06:37.910
If you don't have Mongo then what you need
to do is you need to go into, first you

118
00:06:37.910 --> 00:06:41.530
need to go to mLab, so if you don't
have Mongo, set up on mLab, it's free.

119
00:06:41.530 --> 00:06:44.161
And let me check out here and
show you where you gotta add your code.

120
00:06:49.660 --> 00:06:50.348
&gt;&gt; Scott Moss: So yeah,

121
00:06:50.348 --> 00:06:56.110
make a Mongo thing, and then go into DBjs,
and just add in your Mongo URL there.

122
00:06:57.260 --> 00:07:01.121
This is, if you have Mongo,
just start it up, you're fine.

123
00:07:01.121 --> 00:07:04.127
If you don't have Mongo,
go to mLAB, create a free database,

124
00:07:04.127 --> 00:07:05.968
get the URL, the connection string.

125
00:07:05.968 --> 00:07:12.983
Go to DB.js and add it there.
&gt;&gt; Scott Moss: If you don't feel

126
00:07:12.983 --> 00:07:16.984
like doing all that, that's totally fine,
you can also just go to server.js and see

127
00:07:16.984 --> 00:07:21.240
a line where it says connect, where it's
invoking that function that says connect.

128
00:07:21.240 --> 00:07:22.370
You can just comment that out.

129
00:07:22.370 --> 00:07:24.550
That connects to the database,
you don't need it in this example.

130
00:07:26.180 --> 00:07:27.830
So you can also just comment that out.

131
00:07:27.830 --> 00:07:29.122
We're not databases right now.

