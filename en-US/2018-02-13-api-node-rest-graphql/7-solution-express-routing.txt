[00:00:02]
>> Scott Moss: All right, so we're back. Hope everybody had ample time to work on their challenge. If not, we're gonna go over it right now, so it's all good. If you look at the list of challenges here, we have to look at the User router as a reference, and you can follow it all the way down.

[00:00:17]
Unless they follow it down, there's like two nested routers there. So follow it all the way down to the source and the source is basically where you're responding to. Which if you were to find out, there's literally no response there. But look at that, build out the song router with all the routes very much like the user router.

[00:00:33]
Build out the playlist router with all the routes very much like the user router. Connect the song and a playlist router to the rest router and it eventually connect the rest router to the basic express app on the /api path. So let's check that out, see what we got here.

[00:00:47]
I'm just going to check out, to save some time. Usually I love live coding. But, let's get through this, some solutions here. And then I can live code some stuff that's not here.
>> Scott Moss: So first things first is, let me get rid of this stuff that we just did last session,

[00:01:14]

>> Scott Moss: First things first is we need to connect our rest router to our app and that one's pretty simple app.use. We mount it. This is what when you hear people say mounting, this is what they're talking about. We're mounting this route in this path here and we're doing it before the catch all that I have here.

[00:01:35]
By the way, I have this catch all here. This by no means is me saying you should have this in your app. Okay, if you don't have a route, you should definitely throw an error before for something. I'm just having it so it's for development, but yeah. If you're building an express app that's serving a single-page application, you would most likely have to send back the index page.

[00:01:56]
So this is another thing you have to do as well. But you shouldn't be serving a static, you shouldn't be doing a front-end app on Express. You should just serve it on a CDN instead. But anyway, so yeah, we mounted it /api, got the restRouter. Let's go take a look at the restRouter here.

[00:02:11]
Any questions here, by the way about this, this part so far? Okay, restRouter, if we go take a look at the restRouter, all the stuff that you need is already imported, and what you saw was you had just the user mounted at slash user, so we're just going to go ahead and mount the song router and the playlist router on the appropriate paths as well.

[00:02:31]
So you've got /song and /playlist, and the important thing to remember here is one order, so I guess in this case order doesn't really matter because they're completely different paths right; so, it doesn't really matter right. They would matter if they were the same path. The other thing is that the usage of use, if we didn't use use here, we would have to say something like this, we would have to say like, let's say I want to mount some stuff on the restRouter for song, I just say restRouter.get/song/ or just /song you don't have to do like songRouter it'll be very tedious to do all that.

[00:03:12]
So use the .use it's like hey, anything for /song just delegate to this router, I don't care I'm just passing it through I don't really care, it's not my job, I'm just passing it through, right? So that's that. You can do the same thing in playlistRouter. So let's go take a look at the user router.

[00:03:32]

>> Scott Moss: And notice the typo here. You definitely don't wanna create one on delete, [LAUGH] you wanna delete one.
>> Scott Moss: But notice we're taking, I walked through this before the example, but the param. When we talk more about middleware, which I think that's the next one we're talking about actually.

[00:03:50]
This is gonna make more sense. But this is popping off the parameter of the URL, right? So if we created a URL, a route that's like /api/song/iid. That's how you do parameters. Then it's going to grab that ID. And it's going to pass it as an argument to this function.

[00:04:09]
And then our function can do whatever it wants. A function? Normally, what it will do is it will look at a database for that ID resource. Attach it to the request. And send it down the line, right? Because if you're coming, if you're looking for a /api/song/id, that's actually and let's say this is a git.

[00:04:23]
Let's say this is a git to this. So you did a git there. This is not the thing that's going to respond. The thing that's gonna respond is the route that you setup for this URL which is songs/id which in this case will be something like down here.

[00:04:40]
But this one runs first. So this would run first, grab the resource from the database with the appropriate ID. Attach it to the request, send it down the line to the one that actually matches this, which will be down here. And then that would have access to the object that was attached to the request and then it can respond appropriately, right?

[00:04:59]
That's how that would work. And you can do that as much as you like, in other words, as much as you like, which is don't abuse it. So we got this in a user router. So if we go look at the song router, we should see it pretty much be the same thing, right?

[00:05:19]
We use the dot route thing again for shortcuts, otherwise we have to use the route over and over and over again. This is a shortcut. The reason this stuff is mounted like this is because I'm following, rest, right? So basically, who here knows what rest is?
>> Scott Moss: I don't think anybody knows what rest is, cuz it's not a thing, right?

[00:05:43]
Yeah, it's a thing, but is it really a thing? There's conventions, REST should be like this, but there's really no convention. They have standard API and there's swagger, and there's all this stuff. But really what is rest? Everybody at the end of the day has to denormalize their rest to do something crazy.

[00:05:59]
You got to touch these clear strings. You got to do all this crazy stuff because eventually what you have to do, what you find out is that you build an app. You know, whether it's a mobile app or a web app. And you find out that that app needs data completely different from the way rest is designed.

[00:06:13]
It doesn't need it like this. It needs like it needs associations. It needs nested structures and rest doesn't satisfy that so what you end up having to do is optimize for the client especially if it is a web app. You want the client to optimize. So therefore, you don't want the client making multiple calls to get associations so you fix the back end and now you don't do the rest anymore.

[00:06:32]
Now it is just like, now we made this one special route just for this page. It's like okay. [LAUGH] What is this right? What is rest? I guess the way you could think of it is it's just a structured way that we can define our routes that could interact with our resources.

[00:06:49]
Taking advantage of HDV verbs. If you use the verb get. That means you want to get a resource. If you use the verb put. That means you want an updated resource. If you use the verb post, you want to create a resource. If you use the verb delete, you want to remove a resource.

[00:07:06]
And an options verb is for a course and then as far as the resource string is concerned, that's just going to be slash wherever your api is right? You got some business logic here. You might see something like this. Typical you'll see like api/v1. Nobody has a v2.

[00:07:25]
Nobody has a v2, it's always v1. They're over optimistic about that new api they never build. It's always v1 and then the resource name, it'll be the name of the thing. So in this case you might have user and then typically what you do here is you would do get and put to this.

[00:07:43]
So if I did a get request to this URL, that means I wanna get all the users, because I didn't specify an ID. If I did a post request to this URL, that means I wanna create a user, right? But now if I put an ID here and I did a get request to this, that means I wanna get the user with this ID, right, so not all users.

[00:08:01]
You couldn't do it post here because you could not create a user with this given ID, so that wouldn't make sense. But you could put a put here, right, so a put would means I wanna update the user with this ID. And you can also put a delete here, as in, I wanna delete this user with this ID.

[00:08:14]
All right, so that's basically REST or what REST should be. It's supposed to be stateless, it's supposed to be all this, but at the end of the day, nobody really knows what it is, and nobody wanted to admit it. Really that was it. I mean, Rails came out, Rails was like, here, we're doing rest, everything's rest a resource, it's great, you can do crude, that's great for a to do app.

[00:08:36]
That literally only does that. But what about a component that does all types of crazy stuff? Like this is just not gonna work. But we'll learn how to fix that tomorrow. Cool, so this is what you and to do for the song router. And then the playlist router is very much the same thing.

[00:08:55]
As you can see, this is like a benefit of rest I believe because you're pretty much doing this. It doesn't matter the resource, they all need the same endpoints right? I mean, for user you probably don't want to be exposed in creating a user. You want to go through an authentication for that, but other resources yeah.

[00:09:10]
It's the same thing. You can get all you can get one, you can delete one, you can create one. Stuff like that. So that way, you can see that a lot of stuff is redundant. We could have abstracted this to a whole another level, and just passed in a router and registered the routes for it that way, with just one function.

[00:09:26]
Which is what we're doing in some of the other files we'll get to soon. You have a question?
>> Speaker 2: Mario's asking, so in the case with the callback, and the param function does the job, the song is going to be available in the routes that match later?
>> Scott Moss: Exactly yeah so the param is gonna attach it to the request, and that same request object is passed down to the next handler, so yeah if you mutate the request object it's passed down the whole request it's like you can think of it as a per request cache basically.

[00:09:56]
It's only there per request so you don't have to be afraid of having two different requests for data on the same request object, what should be very dangerous, right, it's only per request. So yeah, mutate the request object, pass it down, it's available onto whatever handler comes after it, until you respond.

[00:10:16]

>> Scott Moss: Cool let me see, does it, are we due now with the test here? No, we're not due now with the test here. Okay, cool. We didn't get to the test yet. Awesome. Any questions on this?
>> Scott Moss: A lot to dive in on this one.
>> Speaker 2: Just have to createOne again for-

[00:10:33]

>> Scott Moss: Yeah, yeah. They're all.
>> Speaker 2: It does but-
>> Scott Moss: It definitely matters. [LAUGH]
>> Speaker 2: I don't know if it matters for the sake of the course.
>> Scott Moss: It definitely matters, I'm sure my test will fail. Cool, well let's dive into the next thing which is going to be controllers and responding.

[00:10:51]
I thought middle ware was next. Okay, so we're doing controllers and responding. So if you got all the way through this example, actually let me run it just to show you I'm sure people were freaking out and people online probably didn't hear me when I finally revealed that this is what should be happening.

[00:11:03]
But if you run this, you know you got everything working, it doesn't break. Everything's good. Right? You go try to test out your thing. Let's go test it out. Let's see if it can do this nice trick right here. Awesome. And then you can do like /api. And then you want to get all the songs, right?

[00:11:22]
And you hit enter. And nothing happens. It just hangs. There's literally, that's not a bug or anything. Like, nothing is coming back. I should expect something back. Eventually, this is going to error out. And it's gonna time out. That's intentional. Can anybody do some digging and figure out why?

[00:11:39]
Yeah, why?
>> Speaker 3: Cuz all the methods are empty in the query.JS?
>> Scott Moss: Yeah, all those methods in query JS are empty, and those methods that you're talking about are called controllers. All the controllers are empty, there's nothing in here. Now, I'm doing some pretty crazy stuff in here kind of, but it's not too advanced and I wanted to do this because I wanted to show how you can generate things based off, like, shared logic right?

[00:12:11]
Because it is rest and because we do have this path and everything's going to follow this same convention in every single resource is going to have a create, read, and update and delete. It is going to have CRUD on it. We can just do the exact same controllers for now by default on every single resource until we don't.

[00:12:26]
There is going to be times where we have to do associations and we need a different controller, but by default, yeah, they all do the same thing. Creating a song is the same thing as creating a playlist. They just take different parameters, but the logic is exactly the same so that's why this follows here.

[00:12:40]
This allows us to take any model when we get to models, and then do that thing on that model. So, that's what we're going to do next.

