WEBVTT

1
00:00:02.267 --> 00:00:06.950
&gt;&gt; Scott Moss: What we are gonna do,
though, is this.

2
00:00:06.950 --> 00:00:09.600
So you need to complete the schemas
in the resource models, and

3
00:00:09.600 --> 00:00:11.880
then get the model specs to pass.

4
00:00:11.880 --> 00:00:15.390
So every resource, which we only have
three right now, which is Playlist,

5
00:00:15.390 --> 00:00:18.170
Song, and User, there is a .model file.

6
00:00:18.170 --> 00:00:19.569
You need to get them to pass.

7
00:00:19.569 --> 00:00:24.810
Now you might be thinking, well,
I don't even know what to put in here.

8
00:00:24.810 --> 00:00:27.610
Well if you run the tests
you'll see that it all fails.

9
00:00:27.610 --> 00:00:30.920
The test is descriptive enough to
tell you what fields you need and

10
00:00:30.920 --> 00:00:33.630
what properties need
to be on those fields.

11
00:00:33.630 --> 00:00:37.860
So look at the tests, if you want
to actually look at the tests, each

12
00:00:37.860 --> 00:00:41.520
resource has a dot spec file and you can
actually read the test it will tell you.

13
00:00:41.520 --> 00:00:43.880
For instance if you look
at the song model it says,

14
00:00:43.880 --> 00:00:46.830
a song model should have a title,
even though it's spelled wrong.

15
00:00:47.910 --> 00:00:51.440
Title, it expects it to exist.

16
00:00:51.440 --> 00:00:53.660
It expects the required to be an array.

17
00:00:53.660 --> 00:00:58.790
Now this is tricky because I didn't tell
you how to make an array with Required.

18
00:00:58.790 --> 00:01:00.640
I only told you how to
do it with a Boolean.

19
00:01:00.640 --> 00:01:02.700
So I'm not gonna be a jerk,

20
00:01:02.700 --> 00:01:04.150
I'm actually just gonna show
you how to do this right now.

21
00:01:06.160 --> 00:01:08.810
So right now before I was like,
you can put required true.

22
00:01:08.810 --> 00:01:12.150
But you can also make required an array
like this, and the second argument is

23
00:01:12.150 --> 00:01:15.160
the custom error you want to be
droned when this is not validated.

24
00:01:15.160 --> 00:01:19.207
So required true, it'd be like,

25
00:01:19.207 --> 00:01:23.730
yo dogs must have names homie.

26
00:01:23.730 --> 00:01:24.600
Right, so

27
00:01:24.600 --> 00:01:28.870
that is a custom error that's gonna be
thrown when you don't pass in a name.

28
00:01:28.870 --> 00:01:30.580
So the test is looking for
something like this.

29
00:01:30.580 --> 00:01:34.140
So it's saying the required
validation must be an array.

30
00:01:34.140 --> 00:01:37.452
So when that test fails and you're like,
I don't know how to put in an array for

31
00:01:37.452 --> 00:01:38.934
Required, that was only Boolean.

32
00:01:38.934 --> 00:01:40.387
They're talking about this.

33
00:01:40.387 --> 00:01:41.960
This allows you custom error message.

34
00:01:41.960 --> 00:01:45.320
This is something so small,
but something so helpful.

35
00:01:45.320 --> 00:01:46.150
If you look at the logs.

36
00:01:46.150 --> 00:01:48.100
Just to see that error and
go, I know what's going on.

37
00:01:48.100 --> 00:01:51.600
If you don't do that, Mongoose will
throw the most obscure error and

38
00:01:51.600 --> 00:01:53.000
it'll be like duplicate key 1100.

39
00:01:53.000 --> 00:01:54.010
What?
What is that?

40
00:01:54.010 --> 00:01:56.560
I don't know what's going on.

41
00:01:56.560 --> 00:01:59.040
This is way easier to read.

42
00:01:59.040 --> 00:02:01.790
So highly recommend doing that.

43
00:02:01.790 --> 00:02:03.140
So yeah, get those tests to pass.

44
00:02:03.140 --> 00:02:05.800
All the model tests should pass,
and when I say all the model tests,

45
00:02:05.800 --> 00:02:09.240
let me run the tests so
you can see what I'm talking about.

46
00:02:14.051 --> 00:02:19.827
&gt;&gt; Scott Moss: You see every
single one that has model on it,

47
00:02:19.827 --> 00:02:22.720
which are 11 tests.

48
00:02:22.720 --> 00:02:26.206
They should all be passing, pretty much
all your tests should be passing except

49
00:02:26.206 --> 00:02:28.770
for the ones in blue right now
cuz they're being skipped.

50
00:02:28.770 --> 00:02:31.890
So after you get done with this all your
tests, you should either see all green and

51
00:02:31.890 --> 00:02:33.938
blue, and that's it,
there should be no red.

52
00:02:33.938 --> 00:02:36.011
&gt;&gt; Speaker 2: Five right?

53
00:02:39.200 --> 00:02:42.362
&gt;&gt; Scott Moss: So again use
the language that I wrote in the test,

54
00:02:42.362 --> 00:02:48.120
look at the error messages to kind of
figure out what you need to do here.

55
00:02:49.290 --> 00:02:50.846
If all all else fails, ask me.

56
00:02:50.846 --> 00:02:54.920
If you don't wanna ask me for whatever
reason, there is a solution branch.

57
00:02:54.920 --> 00:02:58.010
But I highly recommend going
through this and reading the test.

58
00:02:58.010 --> 00:03:02.510
It's a really good- I'm not
really a big fan of TDD.

59
00:03:02.510 --> 00:03:04.180
Who really does TDD?

60
00:03:04.180 --> 00:03:08.230
But on the backend I actually find
myself doing TTD a lot for some reason.

61
00:03:08.230 --> 00:03:09.710
On the front end I can almost never do it.

62
00:03:09.710 --> 00:03:11.350
I just can't.

63
00:03:11.350 --> 00:03:13.998
I have to built this feature, I've got to
test it out I've gotta check out these

64
00:03:13.998 --> 00:03:15.750
browsers and
then I'll wrote code to keep it there.

65
00:03:15.750 --> 00:03:18.980
But on the back end,
I know exactly what needs to happen.

66
00:03:18.980 --> 00:03:23.200
There is no fragmentation of browsers,

67
00:03:23.200 --> 00:03:25.480
it's going to run exactly
the same in the same run time.

68
00:03:25.480 --> 00:03:28.010
So it's easy for me to visualize tests.

69
00:03:28.010 --> 00:03:31.160
So, I will actually come in and
prefer to have test on the backend, and

70
00:03:31.160 --> 00:03:32.840
then build my code off of that.

71
00:03:32.840 --> 00:03:33.850
So this is a good practice for that.

72
00:03:33.850 --> 00:03:34.540
So, think about that.

73
00:03:34.540 --> 00:03:39.110
So these tests are done for you, so
if you are given these test as like here,

74
00:03:39.110 --> 00:03:40.760
here is some tests,
write the code for this.

75
00:03:40.760 --> 00:03:43.480
This is a good assignment for it, I think
it works very well in the back end,

76
00:03:43.480 --> 00:03:45.400
I don't think it works that
well in the front end.

77
00:03:45.400 --> 00:03:48.370
&gt;&gt; Speaker 2: It's cuz in the back
end it's data in data out.

78
00:03:48.370 --> 00:03:49.445
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Speaker 2: Here's your data,

79
00:03:49.445 --> 00:03:56.130
that's posted, or here's a route, and then
you need to serve the appropriate data.

80
00:03:56.130 --> 00:03:59.918
So in the API it's like,
okay well if it's authenticated,

81
00:03:59.918 --> 00:04:04.474
if it's not authenticated, give these
response codes [CROSSTALK] Exactly.

82
00:04:04.474 --> 00:04:05.620
With this data.

83
00:04:05.620 --> 00:04:06.990
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Speaker 2: It's really just data in,

84
00:04:06.990 --> 00:04:13.230
data out, and so you can write your
entire test for your entire API.

85
00:04:13.230 --> 00:04:14.014
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Speaker 2: Designing

86
00:04:14.014 --> 00:04:16.020
just from the data in, data out.

87
00:04:16.020 --> 00:04:18.520
And then you could do the code later.

88
00:04:18.520 --> 00:04:20.050
&gt;&gt; Scott Moss: That's true,
I've never thought about it that way.

89
00:04:20.050 --> 00:04:23.330
Yeah, that makes sense, the front end's,
[LAUGH] there's so much.

90
00:04:23.330 --> 00:04:27.310
That's nothing to do with that at all,
that's one part of it.

91
00:04:27.310 --> 00:04:29.250
&gt;&gt; Speaker 2: Yeah,
I mean buttons, interactions.

92
00:04:29.250 --> 00:04:29.810
&gt;&gt; Scott Moss: Right.

93
00:04:29.810 --> 00:04:31.370
&gt;&gt; Speaker 2: Asynchronous data,
all that stuff.

94
00:04:31.370 --> 00:04:33.770
But especially with
an API like a REST API.

95
00:04:33.770 --> 00:04:35.250
&gt;&gt; Scott Moss: Right.

96
00:04:35.250 --> 00:04:37.716
&gt;&gt; Speaker 2: Even in GraphQL,
[INAUDIBLE].

97
00:04:37.716 --> 00:04:41.750
&gt;&gt; Scott Moss: Yep, and
it's crazy because it's shifted.

98
00:04:41.750 --> 00:04:45.470
It used to be the fact that we're,
you would imagine the back end just being

99
00:04:45.470 --> 00:04:48.360
way more complicated to build
features around and stuff.

100
00:04:48.360 --> 00:04:50.070
The front end is, this is for kids.

101
00:04:50.070 --> 00:04:50.950
It's a kiddie language.

102
00:04:50.950 --> 00:04:52.080
It's the front end.

103
00:04:52.080 --> 00:04:55.710
But now it's just like, actually the front
end is so difficult to build stuff in now,

104
00:04:55.710 --> 00:04:57.590
and the back end is just,
it's just so easy.

105
00:04:57.590 --> 00:04:59.762
It's so easy.
I'm sure dev ops is a whole other thing,

106
00:04:59.762 --> 00:05:02.100
but building the actual
application of back end is.

107
00:05:02.100 --> 00:05:05.360
I find it way more satisfying than
building code for the front end.

108
00:05:05.360 --> 00:05:09.368
Unless I build something that's super
snazzy in frontend with animation or

109
00:05:09.368 --> 00:05:11.132
something and that's awesome.

110
00:05:11.132 --> 00:05:13.533
But the dev process and
writing the code and

111
00:05:13.533 --> 00:05:17.680
going through it is way more satisfying
on the backend for me personally.

