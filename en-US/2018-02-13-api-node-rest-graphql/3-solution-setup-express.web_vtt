WEBVTT

1
00:00:03.300 --> 00:00:05.735
&gt;&gt; Scott: So hopefully everybody had
enough time to work on that solution,

2
00:00:05.735 --> 00:00:06.897
we're just getting started.

3
00:00:06.897 --> 00:00:10.852
So I'm just gonna walk through the minimum
we need to solve that previous exercise

4
00:00:10.852 --> 00:00:14.670
and get our express app running and
then we can see it on the screen.

5
00:00:14.670 --> 00:00:17.317
So the first thing is if
you head over to server js,

6
00:00:17.317 --> 00:00:20.484
we have this app that was null and
we exported this default.

7
00:00:20.484 --> 00:00:23.808
We're going to use the express
that's imported up here up top and

8
00:00:23.808 --> 00:00:25.510
we're going to create a new app.

9
00:00:25.510 --> 00:00:29.253
And the way we do that is we
say express and we invoke it.

10
00:00:29.253 --> 00:00:31.580
And it's that simple, we have a new app.

11
00:00:31.580 --> 00:00:36.152
After we do that we need to go ahead and
setup some route that we can hit.

12
00:00:36.152 --> 00:00:38.685
And then we can actually see it when we
hit it with something like postman, or

13
00:00:38.685 --> 00:00:40.540
in the browser, or something like that.

14
00:00:40.540 --> 00:00:45.039
So what we'll do is we'll say app dot and
in this case we'll just say get.

15
00:00:45.039 --> 00:00:48.955
So this means if you do a get request,
this is a verb,

16
00:00:48.955 --> 00:00:54.562
if you do a get request to this URL,
which in this case is just the index URL.

17
00:00:54.562 --> 00:00:59.192
So as soon as you hit this path, which
will be local host whatever port we go to,

18
00:00:59.192 --> 00:01:01.662
it going to run this function right here.

19
00:01:01.662 --> 00:01:03.800
So we're just gonna use this request and
response.

20
00:01:03.800 --> 00:01:05.903
And we have not talked about this,
but we will get to it.

21
00:01:05.903 --> 00:01:10.807
And all I'm going to do is I'm going
to say res.json it's going to send

22
00:01:10.807 --> 00:01:14.176
back a JSON object here that says,
okay, true.

23
00:01:14.176 --> 00:01:16.130
You don't really need to
know what this is right now.

24
00:01:16.130 --> 00:01:20.894
But, basically, what we're saying is when
someone issues a get request to this URL,

25
00:01:20.894 --> 00:01:24.564
we're going to respond back with
some JSON that says okay, true.

26
00:01:24.564 --> 00:01:26.180
And this is gonna allow us to test it.

27
00:01:26.180 --> 00:01:29.086
So once we have that we
need to go ahead and

28
00:01:29.086 --> 00:01:32.597
import this app into the index and
then start it.

29
00:01:32.597 --> 00:01:36.313
And the reason we're doing that is because
we wanna be able to test this express

30
00:01:36.313 --> 00:01:38.980
application in isolation
without starting it.

31
00:01:38.980 --> 00:01:42.913
So we actually do the starting of
the survey in a completely separate file.

32
00:01:42.913 --> 00:01:46.140
So we'll head over to the index.js
which is the root of our server.

33
00:01:46.140 --> 00:01:49.556
We'll import that app, and notice that
on server its export as default so

34
00:01:49.556 --> 00:01:51.609
we don't have to bring
it in with brackets.

35
00:01:51.609 --> 00:01:56.490
So we'll just say import app from /server
and then all we have to do is just

36
00:01:56.490 --> 00:02:02.000
say app.listen, which is a method that
express gives us to open up a port.

37
00:02:02.000 --> 00:02:03.522
Type in an available port.

38
00:02:03.522 --> 00:02:07.070
If it's not available it will totally
tell you and it would error out.

39
00:02:07.070 --> 00:02:09.970
And then we're just gonna put a callback
here because it's asynchronous.

40
00:02:09.970 --> 00:02:13.770
And then once this is connected
we'll just do a console.log to

41
00:02:13.770 --> 00:02:16.289
remind ourselves what port our API is on.

42
00:02:16.289 --> 00:02:19.492
And we'll just go ahead and
hardcode 3000 and then we'll save it.

43
00:02:19.492 --> 00:02:21.190
And that's all we gotta
do to get things started.

44
00:02:21.190 --> 00:02:23.524
So we can go over to our terminal,
we can run yarn start,

45
00:02:23.524 --> 00:02:26.277
which is the command you'll need
to actually start your server.

46
00:02:29.380 --> 00:02:31.569
&gt;&gt; Scott: And it broke.

47
00:02:31.569 --> 00:02:32.388
Because.

48
00:02:38.210 --> 00:02:39.048
&gt;&gt; Scott: Why did you break?

49
00:02:42.052 --> 00:02:45.295
&gt;&gt; Scott: Man, it broke because I
forgot to put a dot there, there we go.

50
00:02:45.295 --> 00:02:48.036
So forgot to put a dot, now it's good.

51
00:02:48.036 --> 00:02:51.380
We can go over it and
we can actually query this API.

52
00:02:51.380 --> 00:02:56.265
I'm using something called HTTPI,
which is like a human

53
00:02:56.265 --> 00:03:00.959
readable way to talk to APIs
pragmatically on the CLI.

54
00:03:00.959 --> 00:03:03.697
You can use postman if you want,
you can use the browser if you want to,

55
00:03:03.697 --> 00:03:05.240
I'm just gonna do this.

56
00:03:05.240 --> 00:03:08.863
And I'm gonna do a get request,
I'm gonna explicitly say get,

57
00:03:08.863 --> 00:03:12.635
I'm gonna say local host, and
the port that I put in was 3000.

58
00:03:12.635 --> 00:03:17.340
Just gonna do a get request to that, hit
Enter, and you can see we have okay, true.

