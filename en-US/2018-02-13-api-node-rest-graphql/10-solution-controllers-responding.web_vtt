WEBVTT

1
00:00:02.667 --> 00:00:04.503
&gt;&gt; Scott Moss: Cool, and we're back.

2
00:00:04.503 --> 00:00:06.910
Hopefully everybody had a good
lunch because we sure did.

3
00:00:06.910 --> 00:00:10.590
Had some really good pizza here,
pretty dope.

4
00:00:10.590 --> 00:00:14.230
And hopefully you had enough time
to work through this challenge and

5
00:00:14.230 --> 00:00:15.370
get some of those tests to pass.

6
00:00:15.370 --> 00:00:20.970
So remember, ignore the model specs and
also you should ignore the Query specs,

7
00:00:20.970 --> 00:00:25.810
the text you're gonna be looking for to
pass are gonna be the route based specs.

8
00:00:25.810 --> 00:00:27.330
And we'll see what those
look like in a minute.

9
00:00:28.790 --> 00:00:31.160
Let's just hop right on to it.

10
00:00:31.160 --> 00:00:36.160
So, you were tested with filling
out these functions down here.

11
00:00:37.650 --> 00:00:41.960
So again, these functions right here,
because we're doing meta programming.

12
00:00:41.960 --> 00:00:45.090
Meta programming as in we're making
code that makes code, right?

13
00:00:46.210 --> 00:00:49.530
These functions are gonna be
used to generate controllers for

14
00:00:49.530 --> 00:00:51.370
all of our resources, all of models.

15
00:00:51.370 --> 00:00:55.190
So they're pretty generic which is why
they are functions that return functions

16
00:00:55.190 --> 00:00:56.380
and take in a model.

17
00:00:56.380 --> 00:00:59.910
So note that these functions are gonna
be used in every single resource and

18
00:00:59.910 --> 00:01:01.520
that's why they're so generic.

19
00:01:01.520 --> 00:01:04.190
The other approach is what I did
on V1 is where I went ahead and

20
00:01:04.190 --> 00:01:05.800
I wrote these controllers
in individually for

21
00:01:05.800 --> 00:01:09.790
every single resource, but, ultimately,
they're probably going to be the same.

22
00:01:09.790 --> 00:01:14.040
To get around the fact that where maybe we
don't need this one controller to be so

23
00:01:14.040 --> 00:01:18.580
generic, for this one resource, I allow
you to extend it with overrides, so

24
00:01:18.580 --> 00:01:21.470
you can override it per model,
if you want, it's totally fine.

25
00:01:21.470 --> 00:01:22.620
But let's just hop right into it.

26
00:01:24.060 --> 00:01:27.410
So for the createOne,
basically I told you, go ahead and

27
00:01:27.410 --> 00:01:30.490
assume that the controller methods are
like flashed out, they're already there.

28
00:01:30.490 --> 00:01:33.250
I mocked them all out to return
promises so they should be fine.

29
00:01:33.250 --> 00:01:35.370
They all just return test data,
right, that's all they do,

30
00:01:35.370 --> 00:01:38.550
they don't call the database,
we're not getting to databases yet.

31
00:01:38.550 --> 00:01:42.560
So for create one what we wanna do is
we wanna say control is our create one.

32
00:01:42.560 --> 00:01:46.380
We satisfy the arguments if we go look
at the methods, takes in the model,

33
00:01:46.380 --> 00:01:47.000
takes in the body.

34
00:01:48.710 --> 00:01:52.050
Right, the model is passed in,
the body is on the request our body.

35
00:01:52.050 --> 00:01:55.630
It's the adjacent body that's
passed in from the request, right?

36
00:01:55.630 --> 00:01:57.900
So we get that,
it's already then adjacent part.

37
00:01:57.900 --> 00:02:01.480
It's just not,
we let this controller do its thing.

38
00:02:01.480 --> 00:02:02.640
We don’t really care what it’s doing.

39
00:02:02.640 --> 00:02:05.040
And then because we’re creating one,

40
00:02:05.040 --> 00:02:07.730
that means this is probably
happening on a post request.

41
00:02:07.730 --> 00:02:08.630
And on a post request,

42
00:02:08.630 --> 00:02:12.430
I’m assuming you want the resource back
that you are requesting to create, right.

43
00:02:12.430 --> 00:02:16.280
So let’s send back that resource,
which in this case is gonna be doc.

44
00:02:16.280 --> 00:02:20.907
The reason I put doc, because in Mongo
a doc is short for a document, and

45
00:02:20.907 --> 00:02:24.620
a document is like a thing
you can save in a database.

46
00:02:24.620 --> 00:02:28.060
So if you go back to relational
databases you have tables, right.

47
00:02:28.060 --> 00:02:31.950
A table in Mongo is a model,
basically, or a collection.

48
00:02:31.950 --> 00:02:34.240
And then a document is
just an instance of that.

49
00:02:34.240 --> 00:02:39.170
So if we have a song model,
then each song is a document.

50
00:02:39.170 --> 00:02:41.110
Does that make sense?

51
00:02:41.110 --> 00:02:45.810
So this document is an instance
of whatever model was passed in.

52
00:02:45.810 --> 00:02:49.201
So we take that document,
we set the status to 201,

53
00:02:49.201 --> 00:02:52.375
because technically,
rest http status 201 for

54
00:02:52.375 --> 00:02:57.201
a successful post, and the test is
checking for that if you don't change it.

55
00:02:57.201 --> 00:03:00.577
And then, I just JSON to dock, right?

56
00:03:00.577 --> 00:03:02.700
And then I'm just handling
an error right here.

57
00:03:02.700 --> 00:03:04.980
I'm doing this next thing that
we have not talked about.

58
00:03:04.980 --> 00:03:08.550
So if you did it, great,
if you didn't don't worry about it.

59
00:03:08.550 --> 00:03:12.075
We're gonna talk about that next.

60
00:03:12.075 --> 00:03:14.200
[LAUGH] UpdateOne.

61
00:03:14.200 --> 00:03:17.600
There's two ways you can do this, and

62
00:03:17.600 --> 00:03:20.290
if you follow the clues you
would've did it one way.

63
00:03:20.290 --> 00:03:22.600
If you didn't you would've just
recreated it your own way.

64
00:03:22.600 --> 00:03:25.780
So if you were to follow the clues,
you'd have realized that

65
00:03:25.780 --> 00:03:29.470
update one is probably going to be
bound to a route that looks like this.

66
00:03:29.470 --> 00:03:33.140
So we'll have some like,
let's not use song slash ID.

67
00:03:33.140 --> 00:03:35.890
I want to do a put request to that.

68
00:03:35.890 --> 00:03:37.580
That's basically an update right there,
right?

69
00:03:37.580 --> 00:03:40.380
It's a put request to some resource and

70
00:03:40.380 --> 00:03:42.780
then ID of the thing
that you want to update.

71
00:03:42.780 --> 00:03:45.490
And then in the body is the thing,
the stuff that you're trying to update.

72
00:03:45.490 --> 00:03:49.650
Like, I want to update the name
to be new name, right?

73
00:03:49.650 --> 00:03:52.020
That's what that request looks like.

74
00:03:52.020 --> 00:03:56.140
So, because it has a parameter on it and
we know, if we go back to what we

75
00:03:56.140 --> 00:04:01.930
did before on the routers We know that
we have a handler that handles params.

76
00:04:01.930 --> 00:04:06.547
We can assume, and I told you this
thing is eventually going to find

77
00:04:06.547 --> 00:04:11.659
the associated resource by that given
idea and attach it to the request and

78
00:04:11.659 --> 00:04:15.534
send it along,
we can assume that aside its update one,

79
00:04:15.534 --> 00:04:19.266
that resource is going to
be attached to the request.

80
00:04:19.266 --> 00:04:21.419
So if you put the clues together,
you would have landed there.

81
00:04:21.419 --> 00:04:24.668
It's kind of hard to follow,
but it's there.

82
00:04:24.668 --> 00:04:29.020
We'll talk about why it's called dot
from id and how you can change that.

83
00:04:29.020 --> 00:04:31.560
Basically you get that
resource that's attached

84
00:04:31.560 --> 00:04:34.100
to the request from the params function.

85
00:04:34.100 --> 00:04:36.160
You get the update from the body.

86
00:04:36.160 --> 00:04:39.440
You pass it in to controllers
update one to satisfy it.

87
00:04:39.440 --> 00:04:42.360
If you look takes
the document to update and

88
00:04:42.360 --> 00:04:44.250
then the actual update,
then it does nothing.

89
00:04:45.980 --> 00:04:46.910
So it does that and

90
00:04:46.910 --> 00:04:51.570
then again, this is also a 201, send
that back, catch the error and next it.

91
00:04:52.650 --> 00:04:59.760
DeleteOne is very similar because
deleteOne also is the DELETE Followed

92
00:04:59.760 --> 00:05:03.030
by the resource, followed by the ID
of the thing you want to delete.

93
00:05:03.030 --> 00:05:06.280
There's no payload here, you just need
the ID, and you do the same thing.

94
00:05:06.280 --> 00:05:10.560
So that means that param's function
is going to attach the file and

95
00:05:10.560 --> 00:05:14.570
the document for the given resource and
attach it to the request.

96
00:05:14.570 --> 00:05:18.240
So because I already have that I
can just pass that in as well and

97
00:05:18.240 --> 00:05:19.999
it will do its thing and
it will also delete.

98
00:05:23.000 --> 00:05:29.790
Get one is pretty simple, because we know
get is a request that looks like this.

99
00:05:29.790 --> 00:05:32.760
And because we're getting one,
it also has an ID.

100
00:05:32.760 --> 00:05:35.370
Get this one with this ID, right?

101
00:05:35.370 --> 00:05:36.070
That's what that is,

102
00:05:36.070 --> 00:05:40.490
so that means it's also going to pass
through our find by parameters function.

103
00:05:40.490 --> 00:05:45.033
And it's going to grab that document and
attach it to the request, and

104
00:05:45.033 --> 00:05:46.656
so forth, and so forth.

105
00:05:46.656 --> 00:05:48.608
&gt;&gt; Speaker 2: Why does it update?

106
00:05:48.608 --> 00:05:52.770
&gt;&gt; Scott Moss: Yeah, I guess it should
just be just like everyone else.

107
00:05:52.770 --> 00:05:55.050
Let's just say docFromId.

108
00:05:55.050 --> 00:05:55.550
There we go.

109
00:05:56.800 --> 00:06:01.140
So getOne does that, passes it in, and I
mean, you already have it at this point so

110
00:06:01.140 --> 00:06:03.700
you really could just
return it with JSON here.

111
00:06:03.700 --> 00:06:06.310
But I'm just trying to pass everything
through the controllers just in case we do

112
00:06:06.310 --> 00:06:08.590
something else there,
which we may or may not.

113
00:06:08.590 --> 00:06:11.770
But I mean it's literally already
here you can just respond unless

114
00:06:11.770 --> 00:06:16.320
you're gonna do something extra which
like I said we might like for instance if

115
00:06:16.320 --> 00:06:20.980
you wanted to joint tables which Mago
doesn't support the Magoose uses thing

116
00:06:20.980 --> 00:06:25.520
called population which is Mox join tables
on the fly, then you would do it there,

117
00:06:25.520 --> 00:06:28.270
that's why it's great just send
it through here, just in case.

118
00:06:28.270 --> 00:06:31.110
At the end of day,
this thing's just going to return this,

119
00:06:31.110 --> 00:06:33.970
it's going to return
the same thing by default.

120
00:06:33.970 --> 00:06:37.300
Then get all, literally gets
all the stuff on this model.

121
00:06:37.300 --> 00:06:38.730
Give me all the documents on this model,

122
00:06:38.730 --> 00:06:41.370
you can back an array of documents and
you've got the same thing.

123
00:06:42.410 --> 00:06:45.060
And then the one that's pretty much been
used everywhere is this find by params.

124
00:06:46.246 --> 00:06:51.950
So this one takes in a request, response,
next and it takes in a fourth argument and

125
00:06:51.950 --> 00:06:56.400
that argument is going to be whatever was
on the parameter that you subscribed for.

126
00:06:56.400 --> 00:07:00.030
For instance, if I go back to Rest router,
I say hey look for this parameter.

127
00:07:00.030 --> 00:07:01.370
If I look for a parameter called id.

128
00:07:02.390 --> 00:07:04.610
It's gonna pass it in as
a forward argument, right?

129
00:07:04.610 --> 00:07:07.410
And I could register over any parameter,
and

130
00:07:07.410 --> 00:07:08.850
how does it know there's
a parameter called id?

131
00:07:08.850 --> 00:07:10.130
Well, because I called it id down here.

132
00:07:11.500 --> 00:07:16.710
See that, I say, hey, I'm making
a route for /:id, which is a parameter.

133
00:07:16.710 --> 00:07:20.240
When you get that id, run this function,
and then that function's gonna

134
00:07:20.240 --> 00:07:23.060
do whatever it needs to do, and then
pass it down To wherever it needs to go.

135
00:07:23.060 --> 00:07:27.810
So if I did a request to,
this is Playlist, so if I said,

136
00:07:27.810 --> 00:07:34.700
I wanna do a GET to /playlist/:id,
right, if I did a request there?

137
00:07:34.700 --> 00:07:36.830
What's gonna happen is,
the first thing's gonna happen,

138
00:07:36.830 --> 00:07:41.830
it's going to execute this one right here.

139
00:07:41.830 --> 00:07:47.644
So it's gonna get the param
&gt;&gt; Scott Moss: Or get playlist by id,

140
00:07:47.644 --> 00:07:53.280
so it's gonna do that first,
which is up here.

141
00:07:53.280 --> 00:07:58.290
That function's gonna do it, and that's
because it actually came down here and

142
00:07:58.290 --> 00:08:02.360
was like, there's a /:id, ID,
I know what I'm supposed to do with ID.

143
00:08:02.360 --> 00:08:02.940
I'm supposed to do this.

144
00:08:02.940 --> 00:08:04.000
It's the same name.

145
00:08:04.000 --> 00:08:05.680
If I change this to something
else it's not gonna do it.

146
00:08:05.680 --> 00:08:08.130
It has to be the same name, right?

147
00:08:08.130 --> 00:08:14.150
If I had another parameter here,
this is still only gonna run for id.

148
00:08:14.150 --> 00:08:17.110
The id that's passed in as a fourth
argument is still only gonna be id,

149
00:08:17.110 --> 00:08:17.840
it's not gonna be thing.

150
00:08:17.840 --> 00:08:20.142
I'm gonna have to make another one for
thing,

151
00:08:20.142 --> 00:08:22.159
to say this is what I wanna do with thing.

152
00:08:25.297 --> 00:08:28.943
&gt;&gt; Scott Moss: So then once it does that
it gets a playlist by id, then that param

153
00:08:28.943 --> 00:08:33.337
function right here is going to send
the control over to the original function

154
00:08:33.337 --> 00:08:37.730
that was going to run, in this case
a GET /playlist/:id would be this one,

155
00:08:37.730 --> 00:08:40.850
so they never execute this function.

156
00:08:40.850 --> 00:08:42.830
But by the time it executes this function,

157
00:08:42.830 --> 00:08:44.840
it already attached
the document to the request.

158
00:08:46.030 --> 00:08:49.070
Before it passed the control
over to this function,

159
00:08:50.990 --> 00:08:53.830
this function right here already
attached the document to the request.

160
00:08:54.860 --> 00:08:56.720
Which is whatever that
playlist is by the ID.

161
00:08:57.830 --> 00:08:59.560
Or if didn't find it,
maybe it threw an error.

162
00:08:59.560 --> 00:09:00.230
Whatever you want to do.

163
00:09:01.760 --> 00:09:03.180
So by the time we get here,
we already have it.

164
00:09:03.180 --> 00:09:04.720
And that's true for
all these methods here.

165
00:09:04.720 --> 00:09:09.430
So any get, put, or delete for
this route, whenever they execute, this

166
00:09:09.430 --> 00:09:13.270
function already attached the document
to the request automatically for you.

167
00:09:14.710 --> 00:09:17.100
So that's what this function is
right here, that's what it's doing.

168
00:09:17.100 --> 00:09:19.380
So you can see it takes a model,
takes an ID.

169
00:09:19.380 --> 00:09:22.038
It finds that document on
that model with a given ID.

170
00:09:22.038 --> 00:09:25.980
Here's the document, for some reason
it didn't find the document, that means

171
00:09:25.980 --> 00:09:29.010
the ID number you got was wrong, so you
figure out what you want to do, but I'm

172
00:09:29.010 --> 00:09:33.190
just going to throw an error here, like we
just didn't find anything with that ID.

173
00:09:33.190 --> 00:09:37.300
If you did find it, you attach it to
the request, so request.doc for my ID,

174
00:09:37.300 --> 00:09:40.160
you can pick whatever you want,
it doesn't have to be that,

175
00:09:40.160 --> 00:09:41.560
it doesn't matter as long
as you don't override.

176
00:09:41.560 --> 00:09:45.940
So I'm going to start you there, like
you know, body or something like that.

177
00:09:45.940 --> 00:09:49.010
I picked the generic name because
it's the document from the ID.

178
00:09:49.010 --> 00:09:52.770
If you were writing these controllers and
each single resource individually,

179
00:09:52.770 --> 00:09:56.890
then you might put like rec.user or
rec.song or rec.playlist.

180
00:09:56.890 --> 00:09:59.770
But because this is a generic
controller for every single resource,

181
00:09:59.770 --> 00:10:00.590
I picked a generic name.

182
00:10:01.810 --> 00:10:06.800
Document from ID, so that's how I can
reference document from ID up here,

183
00:10:06.800 --> 00:10:09.630
because it's being passed
down from this function.

184
00:10:09.630 --> 00:10:12.320
This function runs first,
and then when it calls next,

185
00:10:12.320 --> 00:10:15.350
which we'll learn about next,
it sends control over to the next thing.

186
00:10:18.740 --> 00:10:20.259
And then you catch the error,
and you throw an error.

187
00:10:21.910 --> 00:10:23.600
That's it, so if you run this test.

188
00:10:30.048 --> 00:10:35.211
&gt;&gt; Scott Moss: You should definitely
see some files, and you come those,

189
00:10:35.211 --> 00:10:39.350
models, but
all the routes should be passing.

190
00:10:39.350 --> 00:10:42.269
So over here, /playlist,
should get post playlist.

191
00:10:44.900 --> 00:10:47.630
/user GitPost ,/song GitPost.

192
00:10:47.630 --> 00:10:49.450
Notice we're only doing Git and
Post for these resources.

193
00:10:49.450 --> 00:10:51.530
We're not doing put and
delete and get all.

194
00:10:51.530 --> 00:10:53.900
And that's because we're
gonna be writing tests later,

195
00:10:53.900 --> 00:10:56.110
and that's what I'm going
to have you all do.

196
00:10:56.110 --> 00:10:58.670
But yeah, those are tests we
want to see that are passing.

197
00:10:58.670 --> 00:11:02.770
Ignore the model ones,
definitely ignore the.

198
00:11:02.770 --> 00:11:04.570
These right here because it's X'ed out.

199
00:11:04.570 --> 00:11:07.360
When you see something
like this in Moca or

200
00:11:07.360 --> 00:11:09.700
Jasmine, that means the test was skipped.

201
00:11:09.700 --> 00:11:12.430
They didn't fail, they didn't pass,
they were skipped.

202
00:11:12.430 --> 00:11:13.290
These tests got skipped.

203
00:11:13.290 --> 00:11:16.106
I should have skipped these too,
but it's all good.

204
00:11:16.106 --> 00:11:16.835
Any questions?

205
00:11:20.913 --> 00:11:22.379
&gt;&gt; Scott Moss: No.

206
00:11:22.379 --> 00:11:26.166
So if you're gonna learn how to skip a
test, if anybody wants to figure that out,

207
00:11:26.166 --> 00:11:28.210
you can put an x next to describe.

208
00:11:28.210 --> 00:11:28.710
It'll skip it.

209
00:11:29.710 --> 00:11:32.290
You can put it next to an it,
it'll skip it.

210
00:11:32.290 --> 00:11:38.618
If you wanna run only just one test only,
you can do.

211
00:11:38.618 --> 00:11:39.430
Where is it at?

212
00:11:43.796 --> 00:11:51.380
&gt;&gt; Scott Moss: If you just want to run
one test, you can just do dot only.

213
00:11:51.380 --> 00:11:54.681
So you can come in here and
say I only want to run these.

214
00:11:54.681 --> 00:11:57.540
You can do dot only and you run it again.

215
00:11:57.540 --> 00:12:02.940
It will only run that test and all of
its children, see and then you're good.

216
00:12:02.940 --> 00:12:04.240
So that's very helpful for development.

217
00:12:04.240 --> 00:12:07.911
So you can be like, I only wanna run
that and then I wanna watch it and

218
00:12:07.911 --> 00:12:10.216
then now this test is always evaluating.

219
00:12:10.216 --> 00:12:13.600
So whenever you save your code,
it's always watching it.

220
00:12:13.600 --> 00:12:16.100
I guess I just didn't
wanna watch it at all.

221
00:12:17.700 --> 00:12:19.260
Let's try that.
&gt;&gt; Speaker 3: Watch is a Mocha feature?

222
00:12:19.260 --> 00:12:21.650
&gt;&gt; Scott Moss: Yeah, it's a Mocha feature.

223
00:12:21.650 --> 00:12:24.090
I guess it just doesn't wanna watch.

224
00:12:24.090 --> 00:12:27.540
Well, I'm using Web Pack Mocha,
which is like a modified version of it, so

225
00:12:27.540 --> 00:12:31.700
it just doesn't wanna do that
right now for some reason.

226
00:12:31.700 --> 00:12:32.760
But yeah, you would watch it like that.

227
00:12:32.760 --> 00:12:34.100
Really good for development.

228
00:12:34.100 --> 00:12:37.080
Just keep the test running as
you're writing your feature,

229
00:12:37.080 --> 00:12:38.320
to make sure you didn't break anything.

230
00:12:38.320 --> 00:12:42.200
That way you don't have to roll out this
huge feature, now I'm going to go back and

231
00:12:42.200 --> 00:12:43.590
test it, and everything broke.

232
00:12:43.590 --> 00:12:45.890
And you're just like, dang,
where did it break, where did it break.

233
00:12:45.890 --> 00:12:48.330
Just keep it open,
keep your test executing.

234
00:12:48.330 --> 00:12:52.750
I know some of you all keep it
running in your dock inside of

235
00:12:52.750 --> 00:12:56.530
your IDE of using like a web service,
stuff like that.

236
00:12:56.530 --> 00:12:58.834
That's a good idea you can do that in and
VS code too.

