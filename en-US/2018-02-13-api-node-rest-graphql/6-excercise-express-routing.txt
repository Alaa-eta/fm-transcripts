[00:00:02]
>> Scott Moss: The challenge we're gonna be doing is we're gonna be setting up routing. And basically, what you need to do for this one is, I'm just gonna walk you through it. I'm just gonna get stash this, actually, I'll leave this open, I think it'll be very helpful. Will this be helpful, to see this?

[00:00:14]
Okay, I'll leave this stuff up, actually. So what we're gonna do is if you navigate over to API, you'll see tons of stuff in here, don't worry about it. But you should see a file called restRouter, right? Right now, restRouter is, there's one example here that you can follow.

[00:00:36]
And you're gonna use the example to build out the other endpoints. But basically the API that we are going to be making is like a music API. There's songs, there's playlists and there's users. Right now, you can follow the example that I have for the usefRouter. So basically what I'm doing here is I'm creating a subrouter inside the restRouter and the reason I call it restRouter is because we are going to make a graph router tomorrow.

[00:01:02]
Any other way I would not call it a restRouter, so if you think the name is ridiculous, that's why. [LAUGH] I'm separating the two for tomorrow. So this is our restRouter, and I made a new one, and I'm mounting another subrouter on that subrouter underneath the user's path.

[00:01:18]
So basically what you would need to do is one, first things first is you need to mount that restRouter on the API path on the app. So inside of this server js, you need to mount the api router on the, I'm sorry, the restRouter, get it right, on the API path.

[00:01:47]

>> Scott Moss: So I'm out the restRouter on the API path. That's the first thing. And then if you go look at that restRouter, like I said this user example is fully flushed out. You're going to have to do the same thing for songRouter and playlistRouter. We need two different mounts for those, so we should be able to access the playlistRouter underneath the /playlist mount.

[00:02:08]
And we should be able to access the songRouter underneath the /song mount. And then if you actually go look at those individual routers, for instance, let's go look at the userRouter in resources/user. So resources/user inside the index file, you'll see that it's just playing the restRouter. So if we go to the restRouter there, you'll see here, you see some pretty crazy stuff in here.

[00:02:35]
Now I'm just gonna walk through this stuff briefly, and I didn't really wanna talk about it, because I wanted to give you enough for you to figure out what's going on here and I think I gave you enough. Basically this is a fully fleshed out subrouter for the user resource.

[00:02:47]
You're going to use this again as an example to flesh out the routers for the song. You go look at the song restRouter, it's empty. You go look at the playlist restRouter, it's also empty. It's gonna look pretty much identical to the userRouter just using its own router.

[00:03:03]
So let's walk through here. I didn't talk about param. Param is basically a way that we can tell our router or Express and say, hey, when somebody comes in here with the URL, and it has a param on it like id, run this function. That's what it's saying.

[00:03:20]
This function allows us to pick off the parameter of the URL, do something with it and send it back down the router. So this doesn't respond to the request, it does something with that parameter. Usually like for instance here, let's say you wanna get user/one, right? This is gonna take that one parameter, go to the user database, grab the user with the ID of one, attach it to the request, call next, and send it down to the next thing that's there.

[00:03:48]
So that's what it's doing. This is like a middleware almost but we haven't really talked about middleware. So you don't really need to know what any of these functions are doing. You can just put them there. Don't worry about it, they'll work. We're gonna get to these functions later.

[00:04:00]
But basically you just need to set up the routes and the handlers. The other thing is this shortcut here that I did not talk about. I also did not talk about this because I didn't want you to use a shortcut. But if you can understand it, you can totally use it.

[00:04:12]
This shortcut on any router allows you to use the .route method. And it's just a shortcut so you don't have to do this. If we didn't use the .route we'd have to say, userRouter. We're gonna say userRouter for a slash, or userRouter.get('/'). And then you have to do userRouter.post('/').

[00:04:30]
It's the same route, right? We're gonna eventually do two different controllers. You're gonna be two different actions here. But on the same route, so .route allows you to say, hey, for this route, I wanna do this get, do this, get through this post. So you have to define the route twice.

[00:04:49]
That's all it's doing, so it's chainable. So you can say, hey, for index and for get, I wanna do that. For index and post, I wanna do that. The same thing for this route right here, which is a parameter. So for a /id, get post delete. So again, this is a fully fleshed-out userRouter, and you need to flesh out the songRouter and the playlistRouter.

[00:05:16]
And then you also need to hook them up in restRouter js file, very similar to what's going on here with the userRouter. And then finally you need to hook up the restRouter to the app. All right so you've got five things to do. Build out the songRouter, build out the playlistRouter, attach the songRouter to the restRouter, attach a playlistRouter to the restRouter, and then attach the restRouter to the app.

[00:05:47]

>> Scott Moss: And the userRouter is a full example of how to do all of it. So you could look at that, experiment with it. There's definitely some stuff in there that I did not teach you about, but I want you to play with it and see what you could think of.

[00:05:58]
Cuz then we'll walk through it, and I wanna see how you all think it works, or how you know it works. Cool, so it is 10:44 now. This one's gonna be a little longer, so let's come back at 11:10.
>> Speaker 2: This is lesson two in the git checkout?

[00:06:19]

>> Scott Moss: Yes, this is lesson two, sorry. Yeah, check out lesson two.
>> Speaker 3: It looks like it cares about Mongo on this lesson.
>> Scott Moss: It cares about Mongo in this lesson? Okay, so make sure you have Mongo running on this one. Yeah, just make sure you have Mongo running, you should be fine.

[00:06:33]
If you don't have Mongo then what you need to do is you need to go into, first you need to go to mLab, so if you don't have Mongo, set up on mLab, it's free. And let me check out here and show you where you gotta add your code.

[00:06:49]

>> Scott Moss: So yeah, make a Mongo thing, and then go into DBjs, and just add in your Mongo URL there. This is, if you have Mongo, just start it up, you're fine. If you don't have Mongo, go to mLAB, create a free database, get the URL, the connection string.

[00:07:05]
Go to DB.js and add it there.
>> Scott Moss: If you don't feel like doing all that, that's totally fine, you can also just go to server.js and see a line where it says connect, where it's invoking that function that says connect. You can just comment that out. That connects to the database, you don't need it in this example.

[00:07:26]
So you can also just comment that out. We're not databases right now.

