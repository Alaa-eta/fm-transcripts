[00:00:03]
>> Scott: Cool, so let's just go to the task right quick, and we can do this over lunch, is, did I not write that one? Okay, what you're going to be doing is pretty much just writing the resolvers for the song type and the playlist type. So if you check out to Lesson 11, you should see the ones for the user type already filled out.

[00:00:29]

>> Scott: So if you go to user.resolvers.
>> Scott: This is a basic resolver in there, right? So we need to do the same thing for the playlist type and the song type. Now, as far as what resolvers need to write, I want you to think about what we did yesterday with rest.

[00:01:01]
Think about all the things we did with get, remember what we did with get yesterday? We did get one and get all, I want you, for each type, I want you to write two resolvers. One that gets one song and one that gets all songs, and also do it for the playlist, does that make sense?

[00:01:18]
So, let's just, I'm going to do one song right quick, just so you can see. So let's walk through the whole flow of what you would have to do. The first thing you would have to do is you would have to come in here.
>> Scott: And you would have to make a query, but you cannot put type query because we already made a type called Query, this will break.

[00:01:34]
You actually have to extend the type Query.
>> Scott: Query was already defined in the user, so use the keyword extend in front of type. Otherwise it's going to try to make a new type calles Query, which was already defined here. You cannot make another type with the same name, it will break.

[00:01:52]
Query was already defined, so therefore we need to extend it. This is just like a merge in GraphQL, that's all this is, it's like, I'm merging the two query types together, that's all this is doing. So for Song, let's say we want to get one song, for me, I like to follow the convention of using the name or the type for getting one.

[00:02:07]
So I'll say Song, it takes an ID whose type is ID, and it returns a Song that is now null, so I would say that. I'm going to pull this up side by side, to the resolvers that I did not make. So you will have to come in here and make another file for song.resolver, then I'm going to make a function called-

[00:02:35]

>> Speaker 2: Resolvers.
>> Scott: Thank you.
>> Scott: Resolvers, and then we make a function called, you can call it whatever you want. This is, however you export it, it better be called capital Song, so I'm going to call it just, getOneSong.
>> Scott: And it's just going to take in a root value, which is nothing.

[00:02:59]
It is going to take an id as the arc, and that's really all I need. Then I need to import the song model from song.model, which is what we used in our controllers yesterday. And I'm just going to just query and get one song. So I'm just going to say, return Song.findById, because we have an id here, pass in an id, call exec, and now I get one song.

[00:03:24]
And the only thing I've got to do now is export this, songResolvers.
>> Scott: And I need to export on Query, remember, because I'm merging the query type. And I have a Query called Song whose value is that getOneSong function. So now that I have that, the next thing that I need to do is export these resolvers onto the graph QL router like this.

[00:03:59]
But in order to do that, I need to export it.
>> Scott: Did I already export it? Where's it at? Okay, yeah, so all I have to do is just import that there from the graph QL router. And then you can just copy this from users, you can do the same thing, you can say songResolvers.

[00:04:26]

>> Scott: There you go, and then you would need to add in the songResolvers down below.
>> Scott: There you go, and I think the last thing I need to do is make sure that this is exported from the index. So I'll see how we did that in user, actually, yeah, it's already good because it's in the router.

[00:04:45]
You've got to export in the router. So export star, I'm sorry, export songResolvers from song.resolvers.
>> Scott: There we go, so that was really fast, because we want to eat lunch, but I just wanted to walk you through, and if you were to run this.
>> Scott: Duplicate declaration song, I've got it in there twice, there, there we go.

[00:05:20]
So if we run this and then refresh this, we should look at Query and there should be Song right there.
>> Scott: So I want you to do the get one get all for song, get one get all for playlist, and then hook them up. I'm going to write that down on this slide, I don't know why it's not there.

