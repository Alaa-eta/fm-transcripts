WEBVTT

1
00:00:03.095 --> 00:00:05.299
&gt;&gt; Scott Moss: We got one more
thing today, this one is not so

2
00:00:05.299 --> 00:00:07.840
much of a lesson, but just an exercise.

3
00:00:07.840 --> 00:00:11.670
And in fact,
there really is no solution to it,

4
00:00:11.670 --> 00:00:13.300
it's just something that you should do.

5
00:00:13.300 --> 00:00:16.090
You could probably do it for
homework if you want.

6
00:00:17.770 --> 00:00:21.210
I could go over the solution, but
like I said it's not really a solution.

7
00:00:21.210 --> 00:00:22.370
I guess it is but not really.

8
00:00:22.370 --> 00:00:25.090
Anyways, what we're going to
do now is write more tests.

9
00:00:25.090 --> 00:00:29.490
Remember when I said for the API
we're only testing if it gets all for

10
00:00:29.490 --> 00:00:30.560
get in post?

11
00:00:30.560 --> 00:00:32.500
And there's like four of the methods for
each resource and

12
00:00:32.500 --> 00:00:34.030
we're not writing tests for that.

13
00:00:34.030 --> 00:00:35.890
This is where you write tests for that.

14
00:00:35.890 --> 00:00:38.480
So these tests right
here are generated tests.

15
00:00:38.480 --> 00:00:40.340
You can see we're doing some.

16
00:00:40.340 --> 00:00:44.620
Metaprograms here where these tests
take in a model, a resource name.

17
00:00:44.620 --> 00:00:48.610
And what a new resource of that will
look like, and it generates a test.

18
00:00:48.610 --> 00:00:53.190
It's generates the getAll test,
it generates the post test.

19
00:00:53.190 --> 00:00:54.720
It generates all that stuff for
every single model.

20
00:00:54.720 --> 00:00:58.760
So these tests are generic enough to
work for all the models and resources.

21
00:00:58.760 --> 00:01:01.350
That's how Well, our code is right now.

22
00:01:01.350 --> 00:01:04.250
We can generalize our text and
it still works.

23
00:01:04.250 --> 00:01:07.530
And you might say, well if that's the
case, and I wrote test for one of them,

24
00:01:07.530 --> 00:01:09.100
why do I need to test for all of them?

25
00:01:09.100 --> 00:01:12.636
Well just to make sure nobody changed or
added anything extra in between your meta

26
00:01:12.636 --> 00:01:16.551
programming and the result.
&gt;&gt; Scott Moss: So we would need to write

27
00:01:16.551 --> 00:01:20.240
tests for, as you can see for now,
we're getting tests for get and post.

28
00:01:20.240 --> 00:01:22.340
But forget we're only
testing if you can get all.

29
00:01:22.340 --> 00:01:23.570
We need to test if you can get one.

30
00:01:23.570 --> 00:01:25.570
Which means you need to create one first.

31
00:01:25.570 --> 00:01:26.460
And then for

32
00:01:26.460 --> 00:01:31.410
post we're only testing if you can
create one which is all post can do.

33
00:01:31.410 --> 00:01:32.701
But we also need to test for put and

34
00:01:32.701 --> 00:01:35.374
delete.
&gt;&gt; Scott Moss: So,

35
00:01:35.374 --> 00:01:37.040
let's just write one right now.

36
00:01:37.040 --> 00:01:40.090
Let's just write the one for
get one cuz this one's kinda hard.

37
00:01:40.090 --> 00:01:43.780
Cuz you need to create one
before you can get one.

38
00:01:43.780 --> 00:01:49.550
So use a it should get one
whatever the resource name is.

39
00:01:52.040 --> 00:01:53.540
And this is going to be async.

40
00:01:53.540 --> 00:01:55.570
You can also return a promise
if you don't want to use async.

41
00:01:57.780 --> 00:01:59.440
Oops, let's do that.

42
00:01:59.440 --> 00:02:04.440
And then basically this is testing that
we can actually use the API call to

43
00:02:04.440 --> 00:02:06.590
actually get one from the database right?

44
00:02:06.590 --> 00:02:09.170
So what we need to do is first we need
to create something in a database.

45
00:02:09.170 --> 00:02:11.220
So we'll just go ahead and
create a new resource.

46
00:02:11.220 --> 00:02:18.100
And we'll say new doc is going to be
whatever that model is that was passed in.

47
00:02:18.100 --> 00:02:20.765
Right here model so

48
00:02:20.765 --> 00:02:24.145
model.create and we'll say.

49
00:02:24.145 --> 00:02:26.320
&gt;&gt; [SOUND]
&gt;&gt; Scott Moss: Bless you.

50
00:02:26.320 --> 00:02:29.880
You could take it as new resource object
which will be what you need to create that

51
00:02:29.880 --> 00:02:30.550
new resource.

52
00:02:30.550 --> 00:02:32.450
So model.create that new resource.

53
00:02:33.600 --> 00:02:35.250
And we'll await that.

54
00:02:35.250 --> 00:02:39.020
And then now that we have that we can
go ahead and issue our API request.

55
00:02:39.020 --> 00:02:43.020
I'm just gonna copy this,
paste through here.

56
00:02:43.020 --> 00:02:47.720
So, we can use, whoever has used chai
before outside of mocha, awesome.

57
00:02:47.720 --> 00:02:52.370
So, they have chai.request, which is
basically a wrapper around super test.

58
00:02:52.370 --> 00:02:54.720
Ever hear of super test or super agent?

59
00:02:54.720 --> 00:02:58.150
Okay, all it is just a mocking suite,
thatâ€™s all it is.

60
00:02:58.150 --> 00:03:02.910
Super test is like It basically allows
you to make assertions against a HTP.

61
00:03:02.910 --> 00:03:08.540
So you can make HTP call comeback and
do assertions against it's headers,

62
00:03:08.540 --> 00:03:11.780
it's status codes,
it's response and with [INAUDIBLE].

63
00:03:11.780 --> 00:03:15.000
Chi is an assertion library for

64
00:03:15.000 --> 00:03:19.226
Java Script, they make a wrap around it,
so that you can hook Chi right into.

65
00:03:19.226 --> 00:03:23.210
So we're using to test so
we're using chai for insertions.

66
00:03:23.210 --> 00:03:26.600
So chai.request is just
a wrapper around super test,

67
00:03:26.600 --> 00:03:31.480
which is just a wrapper around making
insertions around HTTP request.

68
00:03:31.480 --> 00:03:35.490
So it's a lot of abstractions
tied into each other, but

69
00:03:35.490 --> 00:03:38.660
at the end of the day we're
able to make a request.

70
00:03:38.660 --> 00:03:40.720
And we can run assertions on that request.

71
00:03:40.720 --> 00:03:43.670
Like for instance I made the request,
storing to the result, and

72
00:03:43.670 --> 00:03:46.330
I can check that that
result has a status of 200.

73
00:03:46.330 --> 00:03:49.810
I can check that the result is Jason,
stuff like that.

74
00:03:49.810 --> 00:03:55.199
So we're gonna do the same thing, so I'm
gonna say, okay, wait try that request.

75
00:03:56.560 --> 00:04:01.580
API resource name for get, but this is
get one so I need to put an ID here.

76
00:04:01.580 --> 00:04:04.840
The ID is gonna be whatever
new doc dot ID is.

77
00:04:06.580 --> 00:04:10.990
And then I need to set authorization
because authorization is on by default.

78
00:04:10.990 --> 00:04:14.390
So this JWT,
right here is generated for you above,

79
00:04:14.390 --> 00:04:15.459
so you don't have to worry about it.

80
00:04:17.260 --> 00:04:19.240
And now that that's there
I'll grab the result, and

81
00:04:19.240 --> 00:04:20.540
then I'm gonna do some assertions on it.

82
00:04:20.540 --> 00:04:24.640
So if I did an update,
I'm sorry, I'm doing a get 1.

83
00:04:24.640 --> 00:04:29.320
I expect the results to be very similar

84
00:04:29.320 --> 00:04:32.170
to this newDoc right here because
this newDoc is a creation.

85
00:04:32.170 --> 00:04:35.570
And now I'm doing a get 1 to
actually get that newDoc so

86
00:04:35.570 --> 00:04:37.150
they should be very similar.

87
00:04:37.150 --> 00:04:40.130
So we will run these I'm going to
console log all the results, so

88
00:04:40.130 --> 00:04:41.370
I can see what the body looks like.

89
00:04:41.370 --> 00:04:48.781
We will put a dot only here
to only run this block and

90
00:04:48.781 --> 00:04:52.852
then we'll test our code.

91
00:05:00.240 --> 00:05:00.889
&gt;&gt; Scott Moss: Cool, so

92
00:05:00.889 --> 00:05:02.960
looks like it worked.

93
00:05:02.960 --> 00:05:05.540
Wow, it logged on for every single one.

94
00:05:05.540 --> 00:05:11.850
So we get a response, which is this huge
thing, really all I want is the body.

95
00:05:11.850 --> 00:05:13.690
Where's it at?

96
00:05:13.690 --> 00:05:18.960
It spots the header,
server request, Jesus.

97
00:05:20.740 --> 00:05:24.328
Let's just do that response, result.body.

98
00:05:27.316 --> 00:05:29.758
&gt;&gt; Scott Moss: I think that's what it is,

99
00:05:29.758 --> 00:05:36.604
result.body.
&gt;&gt; Scott Moss: Okay,

100
00:05:36.604 --> 00:05:38.190
so all this was up there already.

101
00:05:38.190 --> 00:05:42.480
Maybe it's result dot,
I don't know what it is.

102
00:05:42.480 --> 00:05:44.700
I'll go look it up,
I don't wanna waste time.

103
00:05:44.700 --> 00:05:46.310
But basically that's gonna be our test.

104
00:05:46.310 --> 00:05:47.250
This one should be passing.

105
00:05:47.250 --> 00:05:50.310
We need to write more granular tests
to check to make sure the thing that's

106
00:05:50.310 --> 00:05:51.660
coming back is actually the thing.

107
00:05:51.660 --> 00:05:55.460
All right so the property of it right now,
but you can see that's passing.

108
00:05:55.460 --> 00:05:59.340
That one test that I wrote right
here generated three tests,

109
00:05:59.340 --> 00:06:00.960
cuz it made it for each model.

110
00:06:00.960 --> 00:06:05.170
Each model is using this, so you can see
it generated a get playlist, get song,

111
00:06:05.170 --> 00:06:06.220
get user for each one.

112
00:06:06.220 --> 00:06:11.850
And it's actually going to be called,
yeah get resource name, yeah.

113
00:06:11.850 --> 00:06:15.836
So you could see it's working pretty good,
should get one song, should get one user,

114
00:06:15.836 --> 00:06:21.115
should get one playlist
&gt;&gt; Scott Moss: And

115
00:06:21.115 --> 00:06:25.888
then you would do the same thing for
updating one and

116
00:06:25.888 --> 00:06:30.603
deleting one
&gt;&gt; Scott Moss: And

117
00:06:30.603 --> 00:06:31.721
you would do that down here.

