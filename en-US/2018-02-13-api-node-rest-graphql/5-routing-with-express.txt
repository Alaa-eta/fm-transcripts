[00:00:03]
>> Scott Moss: Let's pop right into the next thing here.
>> Scott Moss: And that's gonna be routing with Express. So we talked a little bit about routing, we just did some catch alls, some verbs, some paths. We're gonna do like, some subrouting and all that fancy stuff next. So routing, like I said, with express, you have flexible pattern matching.

[00:00:25]
It handles parameters, and yeah, it just handles, in your route definitions, you can handle parameters. But in the controllers, you can also, you have access to the query string as well. You just don't define query strings in the actual route definitions themselves. Query strings aren't explicit. So back to routing, Express has multi-router support.

[00:00:49]
So I talked about, yeah we had that app, right, and we declared routes on it with verbs. But remember I said, you can also do subroutes at different pass that you mount on which is very flexible as it allows you to like, here's the API behind this. And then here's authentication over here, and then here's admin stuff over here.

[00:01:06]
So you can do that, it's really cool and then they don't really need to know about each other at all. They're completely isolated. And they can also share global middleware and global configuration from the app router. You also have static and dynamic configuration. So, static Configurations is we just did, right so we declare some routes here.

[00:01:29]
This is statically, you can also declare self-dynamically runtime. It's a really a verse we will not get to that but you could do it. Support for all HTTP verbs. This only really applies to RES when we get GraphQL. Nobody cares about verbs anymore, all right. You got get, put, options, delete, post, whatever other verb, you got it.

[00:01:52]
Express has got it and it's order based. So what that means is, if I were to set up another route here, check this out. If I were to say app.get, this one, and I were to say,
>> Scott Moss: If I were to do this, and I were to save it.

[00:02:14]
And let's just start this up again.
>> Scott Moss: Because I did that one first,
>> Scott Moss: It should respond first. Oops,right, first true. That's because I declared that route before I declared this catch all. Order does matter in Express. So keep that in mind. This Get for the index was declared before this all on every route, therefore when I did activate this path its response was handled.

[00:02:55]
But, I can show you and we will get to, it's like you can pass the control of this to the next one. So you can say, cool, I want this to run first but I don't want it to be the one that decides what goes back. I wanna pass it onto the next thing that matches and that's when we get into middleware.

[00:03:11]
So that's where it gets really crazy, but we'll get there. So yeah, order based. Cool, so the thing about routing in express is that you can pretty much do whatever you want. Like at the end of the day, there's literally like nothing you can't do. And that can be good or bad because you can develop all types of patterns that could benefit you.

[00:03:34]
But it also doesn't really give you like a constraint. Like you might have patterns that are just very wild. You might have issues with routes being resolved, you might have issues about which middleware is attaching to which route. So, because you can do everything, it's a very good practice to try to develop some type of standards for your application before you start declaring your routes.

[00:03:58]
Something that I like to do and that's what we are gonna be doing here, is I like to like mount different routers on different paths that have different purposes. So let's say I'm building app that has an admin side it has a customer side would have the API then it has analytic side, what I would do is for every single one of those single features, it'd be behind a different router.

[00:04:21]
And they have their own configurations associated with them. Because if I'm exposing API for my customers to use, there's probably a different set-up or dedication of mechanisms that I'm gonna use there, than I would for my admin API, or for my analytic's API. And so, I'm going to mount them behind different paths so for slash API use this router, for slash analytics use this router, for slash whatever use this router.

[00:04:46]
And that router has it's own routes inside of it, and that's what we are gonna see, so we are I'm just gonna do a little bit of demonstration on that and then we're gonna jump right into the next example. So, basically, what you can do, we're just gonna do it right here.

[00:05:05]
So, we have this app, right? And let's say I wanna make another router. I come in here and I can say I wanna make an API router. And with that I can discover here and say express.Router like this with a capital R. And invoke it and notice that I used express.Router not app.

[00:05:25]
So, just that right there kind of tells you that this app router does not care about this app right here it didn't even. We're not even using the same thing. So, they're completely two different things, right? With this appRouter is now a half a separate router, I can attach router to, just like I did with app.

[00:05:42]
So, now that I have apiRouter, I can say the apiRouter, I want you to respond, so I get request on index, right? Will get there in a minute, and then what I want to do is same thing, just going to say res.json, and I was going to be like api: true.

[00:06:02]
All right, so we got that. Now, remember when I said routes are order based, right? Completely order based? I just made a new router, I register and look for the index path on the get verb for that router, and I did it before this one. So, if I were to make a get request to this path, am I gonna see API true or am I gonna see first true?

[00:06:26]

>> Speaker 2: First.
>> Scott Moss: First
>> Speaker 2: First.
>> Scott Moss: Okay. And why is that?
>> Speaker 2: [INAUDIBLE] router's listening? It's not connected, is it?
>> Scott Moss: It's not connected, exactly. Yeah, it's just I didn't connect it to the app. It's just here, I just declared it but I need to associate it with this app.

[00:06:44]
Because remember by default, they have no association, I just declared a router that isn't connected with the app. Everything has to be connected to the main app here, the thing that's listening, which is this app. So yeah, cool story, you declared it a route but you didn't tell your app about it.

[00:06:59]
So that's the next thing we would have to do so to do that, it's an api router, so hey, let's mount it on the api path. So what I'll do down here, I'll say app.use and you can think of use as like it's almost the exact same thing as .all to be honest.

[00:07:16]
Use is more like, when you do use, you pretty much just saying, I'm going to use middleware here, not so much a final response. After all is like, I'm gonna respond here, but they can pretty much be used synonymous. There's a small difference, but the difference is not that big.

[00:07:32]
So we're gonna say app.use and we're gonna say for this pat/apr, we want you to use the api router.
>> Scott Moss: So now when I go to, when I make a request to /api, it's gonna activate the api router and its routes which, this is index. So this index is referencing the index that it's mounted on.

[00:07:56]
This is not the index of the router. I'm sorry, this is not the index of our app. This is the index of the router, and the router is mounted on an api. So therefore, this route is /api. So for instance, if I put a slash thing here, this full route is /api/thing.

[00:08:11]
Cuz it's mounted at API So we can actually test this out. So, let's see that. And then I'll come here. I'm already listed. Just gonna restart that, just in case. And now, if I go and I run this command again with no API, you see I still get first true.

[00:08:30]
I didn't hit the API but now when I say /api, I get api true. All right, cuz I hit the api. And if I go /api slash whatever, I'm not going to get anything because, I'm sorry, I'll leave it okay false, because it hit right here. This catch-all is going to prevent any 404.

[00:08:53]
No matter what I do, this catch-all is going to respond. So right now my api, we'll never have a 404 because there's always a catch-all this.
>> Speaker 3: That concept equals express, would that also work if you did express.router?
>> Scott Moss: Would what also work?
>> Speaker 3: Would the app run if it was concept equals express.router?

[00:09:16]

>> Scott Moss: No, because you need to mount it. Well, you need to mount a router to something that's eventually listening. So if you made app a router, well, you can't listen on a router. So, you wouldn't do anything. It would execute and it would exit immediately. Cuz the reason our server's running right now, a thing about Node.

[00:09:36]
Node what it does is it's asynchronous, so it'll run your code. And then anything that's async get put in a tas, que, and it's gonna back as an executed. When that queue is empty, Node just exits, there is no more work to be done so it stops. The reason why our code is still running right now on our server is because we are listening on a port.

[00:09:57]
There's always something on, there's always something listening. That Event Q is always there. So that's why it's there, if we do what he's suggesting, there will be nothing listening therefore the code will execute just fine. And then it will just exit immediately. Your script will be done before you blink, nothing will happen, but it did execute the code, just nothing happened.

[00:10:14]
So yeah, eventually a router has to be attached to some root app that is listening to some port somewhere. And that's how you get this to happen.
>> Speaker 4: Is it a best practice to break out your api router and do a separate file and then import it?
>> Scott Moss: Yes.

[00:10:31]

>> Speaker 4: Because you said it's still going to be order based.
>> Scott Moss: Exactly.
>> Speaker 4: So you can set up the order of this particular router or route the api. Manage that separately, import it to your-
>> Scott Moss: Yep.
>> Speaker 4: Okay.
>> Scott Moss: That's exactly we're gonna do. So I'm glad you're seeing that pattern cuz yep, you can pretty much see it.

[00:10:46]
Yeah, cuz you gotta imagine this API routers are gonna have tons of routes, tons of configurations. And then inside of it, it might have it's own subrouters like for api/todos, here's the todo router, right? And then there's so much configuration. So yeah, you totally wanna like, make sure you don't put all that in one file.

[00:11:03]
One, because you're not going to be able to test it. Two, you're going to have merge conflicts everywhere. [LAUGHS] So yeah, totally don't do that. But any questions on the subrouting here?
>> Speaker 4: Nope.
>> Scott Moss: Remember that order, the whole thing about order applies everywhere, right? So if I have this API router, and I make another route on that API router for a post on the same route,

[00:11:32]

>> Scott Moss: Then, I'm sorry, hold up, let's do another get for, we'll see that one and then what we'll do, we'll say start here. There we go.
>> Scott Moss: There we go. So because I registered the index of the API route first, before I registered the catchall, if I were to go to /api/ anything else, we should see a respond with apiAll versus what we did before which was ok: true.

[00:12:12]
So let's try that. So if I go to api, api:true, if I go to api/ anything else I should see apiAll, right? Everybody follow me there? Let's go back. I set up a catch all. So let's diagram what's happening here on this route. So we come through, we make a GET request to / right?

[00:12:40]
So we make a get request to slash, what's gonna happen is Express is gonna look, it's gonna come in here. It's gonna be like, okay you're at slash, but then we're actually at slash api, so it's like, okay, cool you're at /api. Let me execute this router. So now we're inside of this router, so now Express is up here.

[00:12:57]
And because the route that we hit was just last API and it was GET request, it actually stop right here, it was like, cool. This satisfies that. Okay, /api route which is the same route, get cool, I'll let you do that. But then the next time, we did get, we said /api/ whatever It did the same thing.

[00:13:20]
It came down, it was like, okay, cool, API's here, activate that router. Nope, doesn't satisfy that. Okay, here we go, we got a dot all, so any verb. Okay cool, so any path, any thing that is not this and is any verb, I'm gonna go ahead and run that, that's what happened.

[00:13:38]
Before, when I get rid of this, the reason it executes this one down here is because it still comes in here at API, goes to API router. It's like, I don't have anything for API router that happens here. So I am going to go to the next route that satisfies this request.

[00:13:59]
And that's this one, even though it's up a level. It's still serial. It's still in order, but it's nested, right? This is all still in order. This API router is in front of this app. And it has its own nester routes, but eventually it comes out. It's a tree.

[00:14:15]
It comes out of that tree to the parent and then it goes back down, right? It's a depth first. It does depth-first routing, right, not breadth-first. So it's gonna go all the way down to the root and be like, I don't know what I'm doing here. Let me go back up, check some more, go back up, check some more.

[00:14:29]
So it's depth-first. Anybody's ever done binary searches or stuff like that, right? So it's a depth-first versus a breadth-first. The difference is, breadth-first is like, let me check everything on this level first before I go down one level. Death first is like, I'm gonna go all the way down until I can't go down anymore, to the leaf.

[00:14:47]
Then I'm gonna come back up and do it again, come back up and do it again. And it's gonna do that until it figures out which one it finds. So that's what's happening here.
>> Scott Moss: Any questions on that?
>> Speaker 4: No.
>> Scott Moss: Okay, so, we have another hacking session here.

[00:15:10]
Basically we all ready have the Express app, we all ready have the route for the index. We have the, actually sorry, it's the wrong Challenge, hit, it's, I'll copy this Challenge here but actually it's the Challenge in the first one.

