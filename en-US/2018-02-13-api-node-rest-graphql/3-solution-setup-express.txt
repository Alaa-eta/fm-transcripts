[00:00:03]
>> Scott: So hopefully everybody had enough time to work on that solution, we're just getting started. So I'm just gonna walk through the minimum we need to solve that previous exercise and get our express app running and then we can see it on the screen. So the first thing is if you head over to server js, we have this app that was null and we exported this default.

[00:00:20]
We're going to use the express that's imported up here up top and we're going to create a new app. And the way we do that is we say express and we invoke it. And it's that simple, we have a new app. After we do that we need to go ahead and setup some route that we can hit.

[00:00:36]
And then we can actually see it when we hit it with something like postman, or in the browser, or something like that. So what we'll do is we'll say app dot and in this case we'll just say get. So this means if you do a get request, this is a verb, if you do a get request to this URL, which in this case is just the index URL.

[00:00:54]
So as soon as you hit this path, which will be local host whatever port we go to, it going to run this function right here. So we're just gonna use this request and response. And we have not talked about this, but we will get to it. And all I'm going to do is I'm going to say res.json it's going to send back a JSON object here that says, okay, true.

[00:01:14]
You don't really need to know what this is right now. But, basically, what we're saying is when someone issues a get request to this URL, we're going to respond back with some JSON that says okay, true. And this is gonna allow us to test it. So once we have that we need to go ahead and import this app into the index and then start it.

[00:01:32]
And the reason we're doing that is because we wanna be able to test this express application in isolation without starting it. So we actually do the starting of the survey in a completely separate file. So we'll head over to the index.js which is the root of our server.

[00:01:46]
We'll import that app, and notice that on server its export as default so we don't have to bring it in with brackets. So we'll just say import app from /server and then all we have to do is just say app.listen, which is a method that express gives us to open up a port.

[00:02:02]
Type in an available port. If it's not available it will totally tell you and it would error out. And then we're just gonna put a callback here because it's asynchronous. And then once this is connected we'll just do a console.log to remind ourselves what port our API is on.

[00:02:16]
And we'll just go ahead and hardcode 3000 and then we'll save it. And that's all we gotta do to get things started. So we can go over to our terminal, we can run yarn start, which is the command you'll need to actually start your server.
>> Scott: And it broke.

[00:02:31]
Because.
>> Scott: Why did you break?
>> Scott: Man, it broke because I forgot to put a dot there, there we go. So forgot to put a dot, now it's good. We can go over it and we can actually query this API. I'm using something called HTTPI, which is like a human readable way to talk to APIs pragmatically on the CLI.

[00:03:00]
You can use postman if you want, you can use the browser if you want to, I'm just gonna do this. And I'm gonna do a get request, I'm gonna explicitly say get, I'm gonna say local host, and the port that I put in was 3000. Just gonna do a get request to that, hit Enter, and you can see we have okay, true.

