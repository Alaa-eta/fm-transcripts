[00:00:02]
>> Scott Moss: All right, so what we got next is,
>> Scott Moss: So we just did Resolvers, we got mutations next. Okay, anybody remember what I said mutations were?
>> Speaker 2: They're updating the database. Yeah, it's this you want to mutate your data source, or data sources, or whatever. Yeah, you basically wanna, like, make a change back there somewhere.

[00:00:28]
So, the equivalent to RSS would be put, post, delete, right.
>> Scott Moss: So, used whenever you need to make a change to a data source, as in the word mutate. That's why it's called mutations, you're mutating a data source. If you're not gonna mutate a data source, then you're probably only asking for data, so use a query instead.

[00:00:48]
Useful for POST / PUT / DELETE requests. They usually take arguments, otherwise I wouldn't know you would. You know, unless you just had like, a persistent mutation that always did the same mutation every time. But if that was the case, you would be mutating something that is constantly changing.

[00:01:06]
So, I think most of the time, all of these will always take arguments. I've never run into an example of a mutation that didn't take an argument. If you do, then you can probably get away with it with just a query. So think about that, think about what your client needs as a response from the result of the input.

[00:01:21]
This was important because the community really hasn't like figure out what's the best way, what should you return from a mutation? That's because it depends on your app. Think about this, if you made a, we have a rest API, right? Now let's say from your app, your to do app you issued a, post request, you created as a due item.

[00:01:39]
What do you expect to get back from that post request?
>> Scott Moss: The creative source.
>> Speaker 2: The new ID.
>> Scott Moss: The ID, you said the creative resource. I mean you never know. It depends on what your app is. Maybe your to do app needs the full to do back.

[00:01:53]
Maybe it only needs the ID. Maybe it needs to say, okay, I don't know. That's what this is saying. Depending on what your app needs back, just make sure you respond appropriately. Because the mutation does the same thing. You create something, but you also ask for something back.

[00:02:07]
So it's like a creation, and a query at the same time. So although you'll be creating something, you need to say, this is what I want back. So, depending on your app, you need to make sure you're getting back what you need back. I would say, for most clients using GraphQL, you'll probably need back at minimum the ID and the changes that you made.

[00:02:23]
Because, most GraphQL mutations, are probably used in something locally that uses cashing, like Apollo or Relay. And, to update your local cache, you need a reference to the thing to update, and that usually consists of the ID plus something else. And then, you also need the things that you updated.

[00:02:38]
Because most likely, that cache is like, reflecting what’s on your UI. So if you don’t update that cache, well what you just updated or what you just created, then now, your UI’s out of date. So most likely, you would need the ID plus the things you updated, minimally, ideally, you would just ask back for the whole thing.

[00:02:54]
Like, just give me back the whole thing, the whole thing, even stuff I didn’t update, just give me back the whole object. So that's what I would say. You can only do one mutation at a time. And you might be asking okay, are we gonna do one query at a time?

[00:03:06]
Actually, you can do more than one query at a time. I forgot to mention that. And what that looks like is, it's not really that complicated, it's basically saying you can do this. So if I'm doing a query, of all playlists, let's just keep it simple. I can also right underneath it, I can say, I wanna do songs too.

[00:03:28]

>> Scott Moss: Then I also wanna do all songs.
>> Scott Moss: You can do that, and obviously I get an error, because stuff's messed up. This one's messed up right here. [SOUND] There we go.
>> Scott Moss: So you can do more than one query, in one query. Does that make sense? This is one request that I did.

[00:03:53]
And I did multiple queries. And they're all based of the name. So again, you can a-list these. So you can say, these are the playlists.
>> Scott Moss: [SOUND] These are the songs. [SOUND] And now when you run this,
>> Scott Moss: You'll get playlists and songs. Pretty cool. So you can't do this in mutations.

[00:04:14]
You can only do one mutation. You can't do many of them
>> Scott Moss: And they must also have Resolvers. So, they're not different than queries. You also still need to find a way to resolve these, because one, you need to mutate the thing you're trying to mutate. And then you also need to send back what the client is asking for.

[00:04:38]
So they also have to have Resolvers. Any questions on mutations?
>> Scott Moss: No? Okay, so, I'm gonna walk you through how to make a mutation from the client's perspective. Then we'll walk through how to create a mutation on the schema perspective. And then you'll create some mutations, and then from there, you should be able to come in graphical, create some data, and query some data, yes?

[00:05:04]

>> Speaker 3: So, if you do multiple queries and modem returns an error, do you get data for the one that was successful, and an error for the one that wasn't?
>> Scott Moss: It depends on your setup, by default. You should, so let's back to what I had here. So, this one's definitely gonna throw an error, cuz this is not a real ID.

[00:05:23]
And right now, it's saying, no, you don't get anything. So I guess by default, you're just gonna get anything, it's more like a transaction. Whereas like, in a database, if you wrote a transaction, if one thing fails, it completely just stops. So this case, we had an error from this one query.

[00:05:37]
So the whole thing erred, you can prevent this if you want, it's totally up to you. But yeah, I guess depending on our interpretation, using Apollo, GraphQL, yeah, you get one error everything's done.
>> Scott Moss: Cool, any other questions?
>> Scott Moss: No? Okay.

