WEBVTT

1
00:00:02.962 --> 00:00:05.650
&gt;&gt; Scott Moss: Yeah, a config driven app.

2
00:00:05.650 --> 00:00:12.420
So, basically,
in order to make this production ready and

3
00:00:12.420 --> 00:00:16.200
easy to work with, there are something
we just don't wanna hard code in and

4
00:00:16.200 --> 00:00:20.180
we wanna change values depending
on what environment we're in.

5
00:00:20.180 --> 00:00:24.550
So just like any server-side framework or
language you would use,

6
00:00:24.550 --> 00:00:26.580
you have access to environment variables.

7
00:00:26.580 --> 00:00:28.170
Who here doesn't know what
environment variables are?

8
00:00:30.350 --> 00:00:33.660
All right, so your code is executed in
some environment on some computer, right?

9
00:00:33.660 --> 00:00:38.980
Some Linux computer, in our case, or
in my case, this computer right here.

10
00:00:38.980 --> 00:00:42.860
We can inject variables from that
environment that's executing our code

11
00:00:42.860 --> 00:00:44.850
into our application and
we can reference those in variables.

12
00:00:44.850 --> 00:00:47.150
And those variables are live, so

13
00:00:47.150 --> 00:00:52.600
that's a good way to switch
configurations based off of environment.

14
00:00:52.600 --> 00:00:55.750
So for instance, my environment is
testing I might have a different URL for

15
00:00:55.750 --> 00:00:56.840
my testing database.

16
00:00:56.840 --> 00:00:57.670
If it's production,

17
00:00:57.670 --> 00:01:00.570
I have to put my production database in
there because it's deployed somewhere.

18
00:01:00.570 --> 00:01:02.080
So you wanna switch things like that like

19
00:01:03.520 --> 00:01:06.530
a really good example
of service is the port.

20
00:01:06.530 --> 00:01:10.110
You have no idea what port you're gonna
be when you deploy the service somewhere,

21
00:01:10.110 --> 00:01:11.860
how do you know a port to put in there.

22
00:01:11.860 --> 00:01:17.130
Or it's coming from environment variable
whatever service or stack that's holding

23
00:01:17.130 --> 00:01:20.990
your application it's job to inject
that port in the environment variable.

24
00:01:20.990 --> 00:01:24.200
Because it can probably change,
who know what is gonna be, so

25
00:01:24.200 --> 00:01:27.303
you would just listen to it
from the environment variable.

26
00:01:27.303 --> 00:01:31.410
All right, so we wanna keep all
the configuration at one place.

27
00:01:31.410 --> 00:01:34.900
It's also a great place for
like secrets and stuff like that.

28
00:01:37.000 --> 00:01:42.020
My God stop scrolling does that,
okay, cool.

29
00:01:43.500 --> 00:01:46.410
So, you wanna use config values in
the place of hard-coded values in our app.

30
00:01:46.410 --> 00:01:50.252
So in our app, I think we're
hard-coded under DB connection URLs,

31
00:01:50.252 --> 00:01:52.130
we're hard-coding the ports.

32
00:01:52.130 --> 00:01:55.160
We do have one secret,
we didn't really talk about it,

33
00:01:55.160 --> 00:02:00.040
but the authentication section has a JSON
web token secret that's hard-coded.

34
00:02:00.040 --> 00:02:02.590
We want that to change for
like production and stuff as well.

35
00:02:02.590 --> 00:02:06.140
So all those places where like things need
to change depending on where our app is

36
00:02:06.140 --> 00:02:08.750
deployed, we should put
under configuration file.

37
00:02:08.750 --> 00:02:11.600
And then what we need to do is we need
to generate that configuration file

38
00:02:11.600 --> 00:02:15.270
depending on what environment
our code is executing at.

39
00:02:15.270 --> 00:02:17.950
So we'll have like a base
configuration of file, and

40
00:02:17.950 --> 00:02:22.470
from there it will require
the appropriate production,

41
00:02:22.470 --> 00:02:25.300
staging, local, testing
configuration file and merge itself.

42
00:02:25.300 --> 00:02:28.140
And then you give you a configuration
file you can use in your app and

43
00:02:28.140 --> 00:02:29.070
it has different values on it.

44
00:02:30.360 --> 00:02:34.160
So this is a better approach to building
out APIs, to build stuff on the fly and

45
00:02:34.160 --> 00:02:37.380
not locking yourself into mistakes and

46
00:02:37.380 --> 00:02:41.730
accidentally putting secrets in your
git repo and all types of nasty things.

47
00:02:41.730 --> 00:02:43.540
So you totally wanna do this,
take advantage of this.

48
00:02:43.540 --> 00:02:46.130
You can do something like this on the
client side because you can inject some

49
00:02:46.130 --> 00:02:47.930
environment variables in a client side.

50
00:02:47.930 --> 00:02:50.920
Any codes you put in the clients
is gonna be in the browser.

51
00:02:50.920 --> 00:02:55.190
You can't hide it's gonna be there, nobody
is gonna see your environment variables,

52
00:02:55.190 --> 00:02:56.430
they're coming from the environment.

53
00:02:56.430 --> 00:02:58.210
They can only see the reference to it.

54
00:02:58.210 --> 00:03:01.160
So it's perfect for that, so
that's what we're gonna use.

55
00:03:01.160 --> 00:03:04.150
So lets take note of all the places
where we're hard coding things.

56
00:03:04.150 --> 00:03:07.050
Again, and then we'll talk about how to we

57
00:03:07.050 --> 00:03:10.260
can create a configuration
system around that.

58
00:03:10.260 --> 00:03:12.820
So one of the first places
that is in DV JS, right here,

59
00:03:12.820 --> 00:03:17.300
it's a hard coded URL for Mongo database.

60
00:03:17.300 --> 00:03:20.379
If we deployed this and
we try to connect to this, it'll break.

61
00:03:21.520 --> 00:03:25.930
This will totally break, unless for
instance you had your own

62
00:03:25.930 --> 00:03:30.790
Linux machine up in the cloud where you
had your own Mongo instance created.

63
00:03:30.790 --> 00:03:32.800
Then okay, maybe it would work.

64
00:03:32.800 --> 00:03:36.120
But most likely you're probably
using something like cloud db or

65
00:03:36.120 --> 00:03:39.080
something that's being hosted
somewhere else through some VPC or

66
00:03:39.080 --> 00:03:41.870
something like that and
you need a different URL.

67
00:03:41.870 --> 00:03:44.160
You're gonna use environment variable for
that, so that's one.

68
00:03:44.160 --> 00:03:47.460
The other one is the main one,
which is the port inside of nx.js.

69
00:03:47.460 --> 00:03:48.753
This just says 3000.

70
00:03:48.753 --> 00:03:50.796
This is not flexible at all, so

71
00:03:50.796 --> 00:03:54.580
this obviously some configuration
needs to be changed.

72
00:03:56.310 --> 00:04:00.120
And then the last place is inside of off
JS, which is this secret right here.

73
00:04:00.120 --> 00:04:06.160
This needs to change, and then for extra
credit, this disabled author right here,

74
00:04:06.160 --> 00:04:10.030
this allows us to turn up
authentication for testing.

75
00:04:10.030 --> 00:04:10.960
So for testing it's just like,

76
00:04:10.960 --> 00:04:14.440
hey, can you just not check out
the notification please, thanks.

77
00:04:14.440 --> 00:04:15.950
That's what that does.

78
00:04:15.950 --> 00:04:19.821
So we can set all these up
inside of configuration file.

79
00:04:19.821 --> 00:04:23.785
So the way that it will
look is if inside your API,

80
00:04:23.785 --> 00:04:29.703
if you were to create actually let me
check out some of this other branch.

81
00:04:34.742 --> 00:04:36.947
&gt;&gt; Scott Moss: Lesson seven, okay, so

82
00:04:36.947 --> 00:04:43.040
we're on lesson seven, and
let me check out some of these solution.

83
00:04:46.225 --> 00:04:49.622
&gt;&gt; Scott Moss: Do check out lesson seven,

84
00:04:49.622 --> 00:04:51.990
okay, so, cool!

85
00:04:51.990 --> 00:04:57.640
So if you're inside of here, your repo,
the way I've been doing it is,

86
00:04:57.640 --> 00:05:00.140
like I said, I want to keep
the configuration at one place.

87
00:05:00.140 --> 00:05:04.330
I want it to be dynamic so the ping
on the environment it inherits and

88
00:05:04.330 --> 00:05:07.160
merges as properties based on
those different environments.

89
00:05:07.160 --> 00:05:10.340
And it's solely based on that so
that I can feel confident that like hey,

90
00:05:10.340 --> 00:05:12.540
all I have to do is change the node
environment to testing and

91
00:05:12.540 --> 00:05:13.680
I get a testing and configuration.

92
00:05:13.680 --> 00:05:16.420
All it do it changes you're staging
I get a staging and configuration.

93
00:05:16.420 --> 00:05:17.810
It's pretty simple, so

94
00:05:17.810 --> 00:05:22.280
to do that if you look and you don't
have to change the branch right here.

95
00:05:22.280 --> 00:05:25.030
We start with a base config,
something like this, so

96
00:05:25.030 --> 00:05:29.510
you have a base config, where the first
thing you're configuring this import.

97
00:05:29.510 --> 00:05:34.284
But the first thing is you gonna make
sure you have your environment variable

98
00:05:34.284 --> 00:05:37.100
you're gonna read from for us the node.

99
00:05:37.100 --> 00:05:42.090
The standard is NODE_ENV
that's what we use in node to

100
00:05:42.090 --> 00:05:45.542
inject the appropriate environment in
which we are like running are code in.

101
00:05:45.542 --> 00:05:51.280
So process.env, notice that there's
no variable here called process or

102
00:05:51.280 --> 00:05:53.520
anything like that and that's because,

103
00:05:53.520 --> 00:05:58.290
again, in Node, your entire code is
wrapped in a function like this.

104
00:05:58.290 --> 00:05:59.640
So I talked about this before, right?

105
00:05:59.640 --> 00:06:02.060
But what I didn't talk about
is what's passed in here.

106
00:06:02.060 --> 00:06:03.516
You get some stuff that's passed in here.

107
00:06:03.516 --> 00:06:08.470
You get dirname what's just

108
00:06:08.470 --> 00:06:11.700
like a variable that's represents your
current directory that you're in.

109
00:06:11.700 --> 00:06:17.950
You get require which we use
the require stuff you get file name,

110
00:06:17.950 --> 00:06:22.116
and there is tons of
other stuff in there and

111
00:06:22.116 --> 00:06:25.612
then finally you also get process.

112
00:06:25.612 --> 00:06:28.842
The process is this, so
wven though you don't see it in here,

113
00:06:28.842 --> 00:06:30.960
it's given to you at runtime.

114
00:06:30.960 --> 00:06:36.110
Node executes your code in a iffy like
this, that's how it creates modules.

115
00:06:36.110 --> 00:06:37.060
That's all a module is.

116
00:06:37.060 --> 00:06:39.490
A module is just a closure,
that's all it is.

117
00:06:39.490 --> 00:06:41.655
So you just got close, this is a scope.

118
00:06:41.655 --> 00:06:43.660
So that's where this process comes from.

119
00:06:43.660 --> 00:06:47.820
You also got this thing called Global,
I'm not gonna tell you about it,

120
00:06:47.820 --> 00:06:49.449
cuz you just don't use it, right?

121
00:06:49.449 --> 00:06:51.720
[LAUGH] Do not use global.

122
00:06:51.720 --> 00:06:53.620
You're like, yeah,
I'm just gonna put everything on global.

123
00:06:53.620 --> 00:06:55.660
No, please don't, do not use global.

124
00:06:55.660 --> 00:06:59.300
So process is there, and
we want the .env property of it.

125
00:06:59.300 --> 00:07:02.542
And then the environment variable
that we want is NODE_ENV.

126
00:07:02.542 --> 00:07:05.320
So any environment variables you got in
your computer, you can read them in here.

127
00:07:05.320 --> 00:07:07.850
If the assessment variable doesn't
read them you'll just see.

128
00:07:07.850 --> 00:07:10.300
They'll show up right here,
so use the NODE_ENV.

129
00:07:10.300 --> 00:07:11.870
So basically what we're
saying here is like

130
00:07:13.110 --> 00:07:15.650
we're gonna set it to development
if it's not set already.

131
00:07:15.650 --> 00:07:17.950
We're defaulting to development,
that's what this is doing, right?

132
00:07:17.950 --> 00:07:22.180
NODE_ENV equals NODE_ENV or if that's
nothing then it's going to development.

133
00:07:23.260 --> 00:07:26.720
So that's the first step and then the
second step is to create your base config.

134
00:07:26.720 --> 00:07:30.340
This is default configuration,
everything is based off this.

135
00:07:30.340 --> 00:07:31.540
Here are my defaults for everything.

136
00:07:31.540 --> 00:07:36.340
So, by default ports 3000, I don't have
any secrets, just an empty object.

137
00:07:36.340 --> 00:07:41.630
My database has a URL string that is just
this local database, pretty simple, right?

138
00:07:43.070 --> 00:07:48.110
And then what we do is depending
on that env right here,

139
00:07:48.110 --> 00:07:52.460
depending on that env what we're
gonna do is, we're going to load up

140
00:07:52.460 --> 00:07:56.100
the appropriate file that has
it's own configuration in it.

141
00:07:56.100 --> 00:08:02.170
So if you notice here, there's a dev file,
a prod file, a testing file, depending

142
00:08:02.170 --> 00:08:05.540
on what the env is, if development or
dev, it's going to load a dev file.

143
00:08:05.540 --> 00:08:07.990
If it's testing or test,
it's going to load that file.

144
00:08:07.990 --> 00:08:09.550
If it's production or

145
00:08:09.550 --> 00:08:15.000
prod it's gonna load that file, defaulting
back to just dev and then it merges it.

146
00:08:15.000 --> 00:08:18.610
It merges the env config
on top of the base config,

147
00:08:18.610 --> 00:08:19.650
overriding what's on the left.

148
00:08:19.650 --> 00:08:22.190
And then now when you require this file,
we get

149
00:08:23.490 --> 00:08:28.060
extendable configuration that changes
depending on node environment.

150
00:08:28.060 --> 00:08:31.060
All we have to do to override
that environment is,

151
00:08:31.060 --> 00:08:32.850
when we execute any scripts, for

152
00:08:32.850 --> 00:08:36.330
us the only one we have is start,
is that you just pass in an environment.

153
00:08:36.330 --> 00:08:40.960
Notice right here I have NODE_ENV=testing,
so if this was like development.

154
00:08:40.960 --> 00:08:43.720
I can explicitly pass it in, but
although we do default to development,

155
00:08:43.720 --> 00:08:44.300
I don't have to do it.

156
00:08:44.300 --> 00:08:47.710
But if this was like production,
I could do that, all right?

157
00:08:47.710 --> 00:08:51.010
And now we're in production mode it'll
make sure it configures production,

158
00:08:51.010 --> 00:08:53.490
the database URL is
production database URL,

159
00:08:53.490 --> 00:08:57.130
the secrets are expected to be injected,
all of that good stuff, all right?

160
00:08:57.130 --> 00:09:02.150
So that's how you would do it on your
platform of choice where you deploy it,

161
00:09:02.150 --> 00:09:03.570
they have somewhere in their options,

162
00:09:03.570 --> 00:09:05.450
somewhere that you can put
environment variables.

163
00:09:05.450 --> 00:09:09.440
So they don't, leave that platform
because you shouldn't be using them.

164
00:09:09.440 --> 00:09:12.640
Every platform has that, you just put
your environment variables in there and

165
00:09:12.640 --> 00:09:14.950
that's how you inject them and
you can change them.

166
00:09:14.950 --> 00:09:19.520
And that also means that because you
have a configuration driven development.

167
00:09:19.520 --> 00:09:22.906
Let's say for some reason,
you have the wrong database URL.

168
00:09:22.906 --> 00:09:25.032
For some reason you hit
the wrong database URL.

169
00:09:25.032 --> 00:09:27.959
All you gonna do is go in and
change your environment variable,

170
00:09:27.959 --> 00:09:29.440
you don't have to redeploy.

171
00:09:29.440 --> 00:09:31.400
It says stage it's
supposed to be production,

172
00:09:31.400 --> 00:09:32.870
change it to production and you're done.

173
00:09:32.870 --> 00:09:34.771
You don't have to redeploy your whole app.

174
00:09:34.771 --> 00:09:37.325
You just change the environment variable,
ahese are live.

175
00:09:37.325 --> 00:09:40.827
It'll restart your app, the service
provider, but you don't have to redeploy.

176
00:09:40.827 --> 00:09:45.744
So you wanna configure as many things as
possible on your environment variable and

177
00:09:45.744 --> 00:09:49.106
not hard code them cuz it
limits you having to redeploy.

178
00:09:49.106 --> 00:09:54.100
It also allows you to change it on the fly
and it just makes sense logically.

179
00:09:54.100 --> 00:09:56.350
It saves you code, less if statements.

180
00:09:56.350 --> 00:09:59.050
You can put one if statement
inside this config file or

181
00:09:59.050 --> 00:10:03.070
a switch statement in my case, or you can
put an if statement in every single file

182
00:10:03.070 --> 00:10:05.118
that you will ever need a dynamic value.

183
00:10:05.118 --> 00:10:07.139
So I would rather just have one
place where it has a switch and

184
00:10:07.139 --> 00:10:08.040
if statements and stuff.

185
00:10:09.160 --> 00:10:10.000
Does that make sense?

