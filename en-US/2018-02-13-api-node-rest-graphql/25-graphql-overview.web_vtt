WEBVTT

1
00:00:02.980 --> 00:00:04.428
&gt;&gt; Scott Moss: All right, y'all,

2
00:00:04.428 --> 00:00:09.263
welcome back to day two of API Design
with Node V2, Front End Masters.

3
00:00:09.263 --> 00:00:11.290
So yesterday, we covered and

4
00:00:11.290 --> 00:00:15.351
we went through building out
an API using Express and Node.

5
00:00:15.351 --> 00:00:18.367
We took somewhat of a pragmatic approach,

6
00:00:18.367 --> 00:00:23.160
using metaprogramming to generate
common things for our REST API.

7
00:00:23.160 --> 00:00:27.019
We finished off with some testing, so
if you did some of that testing yesterday,

8
00:00:27.019 --> 00:00:27.943
that's awesome.

9
00:00:27.943 --> 00:00:34.190
Today we're gonna jump right into GraphQL
and talk about some different approaches.

10
00:00:34.190 --> 00:00:39.478
Walk through one of my favorite approaches
with GraphQL and how we can use

11
00:00:39.478 --> 00:00:44.951
it together with what we already built
yesterday, and then go from there.

12
00:00:44.951 --> 00:00:45.851
Before we get started,

13
00:00:45.851 --> 00:00:48.920
were there any questions from yesterday
that anyone didn't get a chance to ask?

14
00:00:48.920 --> 00:00:51.773
Or if they went home and wrote some tests
and then maybe ran into something and

15
00:00:51.773 --> 00:00:52.809
they want to talk about it?

16
00:00:54.782 --> 00:00:57.233
&gt;&gt; Scott Moss: Nope,
nobody writes tests anymore?

17
00:00:57.233 --> 00:00:59.262
[LAUGH] Tests?

18
00:00:59.262 --> 00:01:00.400
It worked on my machine.

19
00:01:00.400 --> 00:01:03.017
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Scott Moss: [LAUGH]

20
00:01:05.554 --> 00:01:06.802
&gt;&gt; Scott Moss: Okay, what is Graph,

21
00:01:06.802 --> 00:01:08.318
who here has used GraphQL?

22
00:01:10.058 --> 00:01:14.234
&gt;&gt; Scott Moss: Okay, Scott, give me
a definition of what is GraphQL to you?

23
00:01:14.234 --> 00:01:15.332
What is it?

24
00:01:15.332 --> 00:01:18.203
&gt;&gt; Speaker 2: It's a data
query language that allows us

25
00:01:18.203 --> 00:01:21.073
to define exactly what we're looking for

26
00:01:21.073 --> 00:01:26.895
from the backend without,
&gt;&gt; Speaker 2: Yeah.

27
00:01:26.895 --> 00:01:27.584
&gt;&gt; Scott Moss: Yeah, that sounds right.

28
00:01:27.584 --> 00:01:32.089
A query language that lets you define
exactly what you want for the back end and

29
00:01:32.089 --> 00:01:33.553
consume it in such a way.

30
00:01:33.553 --> 00:01:35.896
Okay, what about you?

31
00:01:35.896 --> 00:01:38.957
&gt;&gt; Speaker 2: [LAUGH] Yeah,
I don't know that I have much to add.

32
00:01:38.957 --> 00:01:39.848
I think this is pretty good.

33
00:01:39.848 --> 00:01:41.067
It's a sync.

34
00:01:41.067 --> 00:01:44.078
I think that it's nice because it's, yeah,

35
00:01:44.078 --> 00:01:46.942
it provides the data
that the client needs.

36
00:01:46.942 --> 00:01:50.374
It's not [INAUDIBLE] massive amount of-
&gt;&gt; Scott Moss: Nice, okay.

37
00:01:50.374 --> 00:01:53.675
And both the definitions I like that
both of you all mentioned that it's what

38
00:01:53.675 --> 00:01:54.660
the client wants.

39
00:01:54.660 --> 00:01:56.462
And that's what very
important about GraphQL.

40
00:01:56.462 --> 00:02:03.043
It's an approach from the client's
perspective, hey, this is what I want.

41
00:02:03.043 --> 00:02:04.351
So what is GraphQL?

42
00:02:04.351 --> 00:02:07.341
This is the definition I
got from the Internet.

43
00:02:07.341 --> 00:02:10.582
GraphQL is a query language for
APIs and a runtime for

44
00:02:10.582 --> 00:02:13.831
fulfilling those queries
with your existing data.

45
00:02:13.831 --> 00:02:18.271
GraphQL provides a complete and
understandable description of the data in

46
00:02:18.271 --> 00:02:22.919
your API, gives clients the power to ask
for exactly what they need and nothing

47
00:02:22.919 --> 00:02:28.083
more, makes it easier to evolve APIs over
time and enables powerful developer tools.

48
00:02:28.083 --> 00:02:30.502
Yeah, that's an Internet definition,
right?

49
00:02:30.502 --> 00:02:33.002
So what is it really?

50
00:02:33.002 --> 00:02:35.501
Here is my definition of GraphQL.

51
00:02:35.501 --> 00:02:37.982
It's a query language for your API.

52
00:02:37.982 --> 00:02:40.376
Clients describe how
they want their data and

53
00:02:40.376 --> 00:02:43.526
the shape of it using a query
language very similar to JSON.

54
00:02:43.526 --> 00:02:48.020
So if you know JSON, you'll see
some familiarities with GraphQL.

55
00:02:48.020 --> 00:02:51.053
There's definitely some differences but
you'll seem very familiar with it.

56
00:02:51.053 --> 00:02:54.863
Those requests are validated with against
a schema that you create on your server.

57
00:02:54.863 --> 00:02:57.172
So you have the queries
that your client sends.

58
00:02:57.172 --> 00:03:00.531
Your server has a matching schema
that validates those queries.

59
00:03:00.531 --> 00:03:04.940
And then your server then satisfies
the shape however it wants using

60
00:03:04.940 --> 00:03:06.032
the resolvers.

61
00:03:06.032 --> 00:03:11.372
So basically you could think of it as,
who here has used TypeScript?

62
00:03:11.372 --> 00:03:13.772
It's like TypeScript for
your APIs, almost.

63
00:03:13.772 --> 00:03:19.826
It's like you can put an abstraction in
front of your API that strictly prohibits

64
00:03:19.826 --> 00:03:25.982
what shapes and basically, what shapes of
data that could come through your API.

65
00:03:25.982 --> 00:03:27.841
And GraphQL strictly checks that.

66
00:03:27.841 --> 00:03:31.606
And it allows the client to descriptively
say hey, I want this object,

67
00:03:31.606 --> 00:03:35.462
with this name, with these properties,
in this order, in this shape.

68
00:03:35.462 --> 00:03:39.634
And then on the backend,
you respond to that using resolvers.

69
00:03:39.634 --> 00:03:44.041
That sounds pretty complicated, usually
you're like wait, how do I do all that?

70
00:03:44.041 --> 00:03:48.762
You'll see, and
it does all this with one URL.

71
00:03:48.762 --> 00:03:51.555
There's not many, you know with RES
we had to make different URLs for

72
00:03:51.555 --> 00:03:53.397
different resources, different actions?

73
00:03:53.397 --> 00:03:55.160
GraphQL does this with one URL.

74
00:03:55.160 --> 00:03:57.742
There's only one, ever.

75
00:03:57.742 --> 00:04:01.750
So can be used in tandem
with your current API.

76
00:04:01.750 --> 00:04:06.666
So we build the REST API yesterday, we
could use GraphQL together with the rest,

77
00:04:06.666 --> 00:04:08.342
sitting side-by-side.

78
00:04:08.342 --> 00:04:12.479
We can have GraphQL
underneath the REST API.

79
00:04:12.479 --> 00:04:14.170
We can have GraphQL on
top of the REST API.

80
00:04:14.170 --> 00:04:16.807
It's pretty much however you wanna do it.

81
00:04:16.807 --> 00:04:19.154
Today we're going to use
them together side-by-side.

82
00:04:19.154 --> 00:04:24.034
And at the end of the day, I'm gonna
talk about how you can have GraphQL sit

83
00:04:24.034 --> 00:04:27.520
underneath REST and
also next to it at the same time.

84
00:04:27.520 --> 00:04:30.630
Only needs one route for all requests,
and you'll see what I'm talking about.

85
00:04:30.630 --> 00:04:32.152
That sounds crazy.

86
00:04:32.152 --> 00:04:33.631
It sounded crazy to me the first time.

87
00:04:33.631 --> 00:04:35.621
I was like how?

88
00:04:35.621 --> 00:04:36.922
That doesn't make any sense.

89
00:04:36.922 --> 00:04:38.072
You'll see.

90
00:04:38.072 --> 00:04:41.805
Doesn't care about how you resolve
the data, it just has to match the shapes.

91
00:04:41.805 --> 00:04:44.890
So remember when we made
controllers yesterday?

92
00:04:44.890 --> 00:04:47.567
Those controllers respond to
all the routes that we created.

93
00:04:47.567 --> 00:04:51.250
You could think of resolvers as
controllers, but way more granular.

94
00:04:51.250 --> 00:04:53.830
Whereas a controller
responds to a request,

95
00:04:53.830 --> 00:04:58.220
a resolver responds to a shape or
a field on a shape.

96
00:04:58.220 --> 00:05:00.261
It can literally respond
to just one field.

97
00:05:00.261 --> 00:05:02.318
It depends on how you
write your resolvers.

98
00:05:02.318 --> 00:05:05.823
So you can think of them
just like microcontrollers

99
00:05:05.823 --> 00:05:08.500
that can do whatever they want.

100
00:05:08.500 --> 00:05:12.457
&gt;&gt; Scott Moss: You don't need versions
every again for your API because the URL

101
00:05:12.457 --> 00:05:16.640
is always the same and you can change
your schema as much as you want.

102
00:05:16.640 --> 00:05:19.621
You might need version for
schema [LAUGH] or your data types, but

103
00:05:19.621 --> 00:05:22.052
you definitely don't need versions for
your API.

104
00:05:22.052 --> 00:05:24.032
It's the same API, its the same URL.

105
00:05:24.032 --> 00:05:25.782
So don't have to do that anymore.

106
00:05:25.782 --> 00:05:29.169
And once you learn it, if you do
a lot of client side development,

107
00:05:29.169 --> 00:05:31.951
you're gonna love GraphQL,
you're gonna love it.

108
00:05:31.951 --> 00:05:34.044
The benefit of GraphQL might not be so

109
00:05:34.044 --> 00:05:39.180
obvious on the server until you start
doing advanced things, then you'll see it.

110
00:05:39.180 --> 00:05:42.015
But the benefit is immediate
if you're writing client code.

111
00:05:42.015 --> 00:05:44.874
If you're writing anything client,
whether that's mobile or Web,

112
00:05:44.874 --> 00:05:46.919
you'll immediately see
the benefit of GraphQL.

113
00:05:46.919 --> 00:05:49.145
So although we're doing
the service side today,

114
00:05:49.145 --> 00:05:51.851
we are gonna go over some stuff
where you can see the benefit.

115
00:05:51.851 --> 00:05:54.371
But the benefit is definitely
way better on the front end,

116
00:05:54.371 --> 00:05:55.870
where you're consuming the API.

117
00:05:55.870 --> 00:06:00.051
The consumer of the API definitely
benefits from GraphQL moreso than

118
00:06:00.051 --> 00:06:01.789
the implementer of the API.

119
00:06:01.789 --> 00:06:03.968
Does that make sense?

120
00:06:03.968 --> 00:06:05.715
Okay, cool.
Any questions on this?

121
00:06:05.715 --> 00:06:06.326
Go.

122
00:06:06.326 --> 00:06:09.171
&gt;&gt; Speaker 2: So would this be
considered kind of a replacement for

123
00:06:09.171 --> 00:06:11.694
the need to have filters and
things like that,

124
00:06:11.694 --> 00:06:14.941
that you would typically use
when you're doing a REST API?

125
00:06:14.941 --> 00:06:18.540
&gt;&gt; Scott Moss: So
GraphQL itself does not do the filtering.

126
00:06:18.540 --> 00:06:20.721
You have to implement the filtering
yourself in the resolvers.

127
00:06:20.721 --> 00:06:25.064
But it provides the mechanism
that facilitiates that filter.

128
00:06:25.064 --> 00:06:29.141
So just like you would in REST, for
instance, if you made a REST call.

129
00:06:29.141 --> 00:06:32.066
And on the query string you were like

130
00:06:32.066 --> 00:06:37.050
I want to get slash user query
string first name equals whatever.

131
00:06:37.050 --> 00:06:38.959
You would still have to build
that in your controller.

132
00:06:38.959 --> 00:06:40.393
You still gotta do that in your resolver.

133
00:06:40.393 --> 00:06:46.722
It's very much the same, it's just the way
GraphQL provides it, it's way more strict.

134
00:06:46.722 --> 00:06:48.572
For instance if you did that in REST,

135
00:06:48.572 --> 00:06:52.463
you would have to check to see if that
query string was there and do some stuff.

136
00:06:52.463 --> 00:06:55.959
Whereas GraphQL, it's guaranteed
there if you said it has to be there,

137
00:06:55.959 --> 00:06:58.092
otherwise it wouldn't have gotten there.

138
00:06:58.092 --> 00:07:01.207
It wouldn't have even got past
GraphQL cuz GraphQL would be like no,

139
00:07:01.207 --> 00:07:02.181
I need a filter here.

140
00:07:02.181 --> 00:07:03.072
You're not even going there.

141
00:07:03.072 --> 00:07:05.301
So it's very strict like that.

142
00:07:05.301 --> 00:07:09.124
All of this will make sense when we start
building but, yes, you can do all of that.

