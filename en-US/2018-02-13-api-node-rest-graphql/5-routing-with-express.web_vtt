WEBVTT

1
00:00:03.430 --> 00:00:05.370
&gt;&gt; Scott Moss: Let's pop
right into the next thing

2
00:00:05.370 --> 00:00:09.975
here.
&gt;&gt; Scott Moss: And

3
00:00:09.975 --> 00:00:12.513
that's gonna be routing with Express.

4
00:00:12.513 --> 00:00:16.220
So we talked a little bit about routing,
we just did some catch alls, some verbs,

5
00:00:16.220 --> 00:00:16.828
some paths.

6
00:00:16.828 --> 00:00:21.254
We're gonna do like, some subrouting and
all that fancy stuff next.

7
00:00:21.254 --> 00:00:25.335
So routing, like I said, with express,
you have flexible pattern matching.

8
00:00:25.335 --> 00:00:29.250
It handles parameters,
and yeah, it just handles,

9
00:00:29.250 --> 00:00:33.430
in your route definitions,
you can handle parameters.

10
00:00:33.430 --> 00:00:36.969
But in the controllers, you can also, you
have access to the query string as well.

11
00:00:36.969 --> 00:00:42.150
You just don't define query strings in
the actual route definitions themselves.

12
00:00:42.150 --> 00:00:43.684
Query strings aren't explicit.

13
00:00:43.684 --> 00:00:49.072
So back to routing,
Express has multi-router support.

14
00:00:49.072 --> 00:00:51.767
So I talked about,
yeah we had that app, right, and

15
00:00:51.767 --> 00:00:53.678
we declared routes on it with verbs.

16
00:00:53.678 --> 00:00:57.341
But remember I said, you can also do
subroutes at different pass that you mount

17
00:00:57.341 --> 00:01:01.077
on which is very flexible as it allows
you to like, here's the API behind this.

18
00:01:01.077 --> 00:01:06.662
And then here's authentication over here,
and then here's admin stuff over here.

19
00:01:06.662 --> 00:01:08.316
So you can do that, it's really cool and

20
00:01:08.316 --> 00:01:10.809
then they don't really need to
know about each other at all.

21
00:01:10.809 --> 00:01:12.894
They're completely isolated.

22
00:01:12.894 --> 00:01:16.033
And they can also share
global middleware and

23
00:01:16.033 --> 00:01:19.094
global configuration from the app router.

24
00:01:19.094 --> 00:01:21.528
You also have static and
dynamic configuration.

25
00:01:21.528 --> 00:01:26.029
So, static Configurations is we just did,

26
00:01:26.029 --> 00:01:29.931
right so we declare some routes here.

27
00:01:29.931 --> 00:01:33.412
This is statically, you can also
declare self-dynamically runtime.

28
00:01:33.412 --> 00:01:37.509
It's a really a verse we will not
get to that but you could do it.

29
00:01:37.509 --> 00:01:39.572
Support for all HTTP verbs.

30
00:01:39.572 --> 00:01:42.497
This only really applies
to RES when we get GraphQL.

31
00:01:42.497 --> 00:01:44.812
Nobody cares about verbs anymore,
all right.

32
00:01:44.812 --> 00:01:49.189
You got get, put, options, delete, post,

33
00:01:49.189 --> 00:01:52.452
whatever other verb, you got it.

34
00:01:52.452 --> 00:01:54.996
Express has got it and it's order based.

35
00:01:54.996 --> 00:02:01.101
So what that means is, if I were to set
up another route here, check this out.

36
00:02:01.101 --> 00:02:05.948
If I were to say app.get, this one, and

37
00:02:05.948 --> 00:02:13.802
I were to say,
&gt;&gt; Scott Moss: If I were to do this,

38
00:02:13.802 --> 00:02:14.535
and I were to save it.

39
00:02:14.535 --> 00:02:21.567
And let's just start this up again.
&gt;&gt; Scott Moss: Because I

40
00:02:21.567 --> 00:02:29.642
did that one first,
&gt;&gt; Scott Moss: It should respond first.

41
00:02:29.642 --> 00:02:33.702
Oops,right, first true.

42
00:02:33.702 --> 00:02:39.663
That's because I declared that route
before I declared this catch all.

43
00:02:39.663 --> 00:02:41.461
Order does matter in Express.

44
00:02:41.461 --> 00:02:42.853
So keep that in mind.

45
00:02:42.853 --> 00:02:49.349
This Get for the index was declared
before this all on every route,

46
00:02:49.349 --> 00:02:55.845
therefore when I did activate this
path its response was handled.

47
00:02:55.845 --> 00:02:58.329
But, I can show you and we will get to,

48
00:02:58.329 --> 00:03:02.153
it's like you can pass the control
of this to the next one.

49
00:03:02.153 --> 00:03:04.695
So you can say, cool,
I want this to run first but

50
00:03:04.695 --> 00:03:07.685
I don't want it to be the one
that decides what goes back.

51
00:03:07.685 --> 00:03:09.930
I wanna pass it onto the next
thing that matches and

52
00:03:09.930 --> 00:03:11.650
that's when we get into middleware.

53
00:03:11.650 --> 00:03:15.250
So that's where it gets really crazy,
but we'll get there.

54
00:03:15.250 --> 00:03:20.097
So yeah, order based.

55
00:03:20.097 --> 00:03:24.843
Cool, so the thing about
routing in express is that you

56
00:03:24.843 --> 00:03:28.156
can pretty much do whatever you want.

57
00:03:28.156 --> 00:03:30.506
Like at the end of the day, there's
literally like nothing you can't do.

58
00:03:30.506 --> 00:03:31.478
And that can be good or

59
00:03:31.478 --> 00:03:34.832
bad because you can develop all types
of patterns that could benefit you.

60
00:03:34.832 --> 00:03:39.337
But it also doesn't really
give you like a constraint.

61
00:03:39.337 --> 00:03:43.290
Like you might have patterns
that are just very wild.

62
00:03:43.290 --> 00:03:45.956
You might have issues with
routes being resolved,

63
00:03:45.956 --> 00:03:49.865
you might have issues about which
middleware is attaching to which route.

64
00:03:49.865 --> 00:03:54.060
So, because you can do everything, it's a
very good practice to try to develop some

65
00:03:54.060 --> 00:03:58.099
type of standards for your application
before you start declaring your routes.

66
00:03:58.099 --> 00:04:00.994
Something that I like to do and
that's what we are gonna be doing here,

67
00:04:00.994 --> 00:04:03.841
is I like to like mount different
routers on different paths that have

68
00:04:03.841 --> 00:04:04.792
different purposes.

69
00:04:04.792 --> 00:04:09.912
So let's say I'm building app that
has an admin side it has a customer

70
00:04:09.912 --> 00:04:15.118
side would have the API then it has
analytic side, what I would do is for

71
00:04:15.118 --> 00:04:21.143
every single one of those single features,
it'd be behind a different router.

72
00:04:21.143 --> 00:04:23.449
And they have their own
configurations associated with them.

73
00:04:23.449 --> 00:04:26.658
Because if I'm exposing API for
my customers to use,

74
00:04:26.658 --> 00:04:31.653
there's probably a different set-up or
dedication of mechanisms that I'm gonna

75
00:04:31.653 --> 00:04:35.811
use there, than I would for
my admin API, or for my analytic's API.

76
00:04:35.811 --> 00:04:39.711
And so, I'm going to mount them
behind different paths so for

77
00:04:39.711 --> 00:04:44.061
slash API use this router, for
slash analytics use this router, for

78
00:04:44.061 --> 00:04:46.171
slash whatever use this router.

79
00:04:46.171 --> 00:04:51.233
And that router has it's own routes inside
of it, and that's what we are gonna see,

80
00:04:51.233 --> 00:04:55.225
so we are I'm just gonna do a little
bit of demonstration on that and

81
00:04:55.225 --> 00:04:58.392
then we're gonna jump right
into the next example.

82
00:04:58.392 --> 00:05:05.234
So, basically, what you can do,
we're just gonna do it right here.

83
00:05:05.234 --> 00:05:06.731
So, we have this app, right?

84
00:05:06.731 --> 00:05:08.662
And let's say I wanna make another router.

85
00:05:08.662 --> 00:05:12.727
I come in here and
I can say I wanna make an API router.

86
00:05:12.727 --> 00:05:16.066
And with that I can discover here and

87
00:05:16.066 --> 00:05:20.642
say express.Router like
this with a capital R.

88
00:05:20.642 --> 00:05:25.378
And invoke it and
notice that I used express.Router not app.

89
00:05:25.378 --> 00:05:28.953
So, just that right there kind of
tells you that this app router does

90
00:05:28.953 --> 00:05:31.661
not care about this app
right here it didn't even.

91
00:05:31.661 --> 00:05:33.710
We're not even using the same thing.

92
00:05:33.710 --> 00:05:36.474
So, they're completely two
different things, right?

93
00:05:36.474 --> 00:05:40.716
With this appRouter is now a half
a separate router, I can attach router to,

94
00:05:40.716 --> 00:05:42.122
just like I did with app.

95
00:05:42.122 --> 00:05:46.634
So, now that I have apiRouter,
I can say the apiRouter,

96
00:05:46.634 --> 00:05:51.150
I want you to respond, so
I get request on index, right?

97
00:05:51.150 --> 00:05:56.619
Will get there in a minute, and
then what I want to do is same thing,

98
00:05:56.619 --> 00:06:02.104
just going to say res.json, and
I was going to be like api: true.

99
00:06:02.104 --> 00:06:04.719
All right, so we got that.

100
00:06:04.719 --> 00:06:07.738
Now, remember when I said
routes are order based, right?

101
00:06:07.738 --> 00:06:08.891
Completely order based?

102
00:06:08.891 --> 00:06:12.897
I just made a new router,
I register and look for

103
00:06:12.897 --> 00:06:19.220
the index path on the get verb for
that router, and I did it before this one.

104
00:06:19.220 --> 00:06:24.179
So, if I were to make a get request to
this path, am I gonna see API true or

105
00:06:24.179 --> 00:06:26.015
am I gonna see first true?

106
00:06:26.015 --> 00:06:27.111
&gt;&gt; Speaker 2: First.

107
00:06:27.111 --> 00:06:27.735
&gt;&gt; Scott Moss: First

108
00:06:27.735 --> 00:06:29.555
&gt;&gt; Speaker 2: First.
&gt;&gt; Scott Moss: Okay.

109
00:06:29.555 --> 00:06:33.419
And why is that?
&gt;&gt; Speaker 2: [INAUDIBLE] router's

110
00:06:33.419 --> 00:06:34.575
listening?

111
00:06:34.575 --> 00:06:35.783
It's not connected, is it?
&gt;&gt; Scott Moss: It's not

112
00:06:35.783 --> 00:06:36.670
connected, exactly.

113
00:06:36.670 --> 00:06:40.517
Yeah, it's just I didn't
connect it to the app.

114
00:06:40.517 --> 00:06:44.125
It's just here, I just declared it but
I need to associate it with this app.

115
00:06:44.125 --> 00:06:46.650
Because remember by default,
they have no association,

116
00:06:46.650 --> 00:06:49.283
I just declared a router that
isn't connected with the app.

117
00:06:49.283 --> 00:06:52.804
Everything has to be connected to the main
app here, the thing that's listening,

118
00:06:52.804 --> 00:06:53.620
which is this app.

119
00:06:53.620 --> 00:06:56.818
So yeah, cool story,
you declared it a route but

120
00:06:56.818 --> 00:06:59.158
you didn't tell your app about it.

121
00:06:59.158 --> 00:07:03.344
So that's the next thing we would have to
do so to do that, it's an api router, so

122
00:07:03.344 --> 00:07:05.325
hey, let's mount it on the api path.

123
00:07:05.325 --> 00:07:09.735
So what I'll do down here,
I'll say app.use and

124
00:07:09.735 --> 00:07:16.993
you can think of use as like it's almost
the exact same thing as .all to be honest.

125
00:07:16.993 --> 00:07:21.421
Use is more like, when you do use,
you pretty much just saying,

126
00:07:21.421 --> 00:07:25.934
I'm going to use middleware here,
not so much a final response.

127
00:07:25.934 --> 00:07:27.761
After all is like,
I'm gonna respond here, but

128
00:07:27.761 --> 00:07:29.330
they can pretty much be used synonymous.

129
00:07:29.330 --> 00:07:32.438
There's a small difference, but
the difference is not that big.

130
00:07:32.438 --> 00:07:38.131
So we're gonna say app.use and
we're gonna say for this pat/apr,

131
00:07:38.131 --> 00:07:43.757
we want you to use the api router.
&gt;&gt; Scott Moss: So

132
00:07:43.757 --> 00:07:47.357
now when I go to,
when I make a request to /api,

133
00:07:47.357 --> 00:07:52.940
it's gonna activate the api router and
its routes which, this is index.

134
00:07:52.940 --> 00:07:56.461
So this index is referencing
the index that it's mounted on.

135
00:07:56.461 --> 00:07:58.166
This is not the index of the router.

136
00:07:58.166 --> 00:07:59.583
I'm sorry,
this is not the index of our app.

137
00:07:59.583 --> 00:08:02.681
This is the index of the router, and
the router is mounted on an api.

138
00:08:02.681 --> 00:08:05.123
So therefore, this route is /api.

139
00:08:05.123 --> 00:08:11.523
So for instance, if I put a slash thing
here, this full route is /api/thing.

140
00:08:11.523 --> 00:08:14.859
Cuz it's mounted at API So
we can actually test this out.

141
00:08:14.859 --> 00:08:18.062
So, let's see that.

142
00:08:18.062 --> 00:08:19.563
And then I'll come here.

143
00:08:19.563 --> 00:08:21.470
I'm already listed.

144
00:08:21.470 --> 00:08:25.804
Just gonna restart that, just in case.

145
00:08:25.804 --> 00:08:28.864
And now, if I go and
I run this command again with no API,

146
00:08:28.864 --> 00:08:30.572
you see I still get first true.

147
00:08:30.572 --> 00:08:37.827
I didn't hit the API but
now when I say /api, I get api true.

148
00:08:37.827 --> 00:08:39.465
All right, cuz I hit the api.

149
00:08:39.465 --> 00:08:45.072
And if I go /api slash whatever,
I'm not going to get anything because,

150
00:08:45.072 --> 00:08:50.240
I'm sorry, I'll leave it okay false,
because it hit right here.

151
00:08:50.240 --> 00:08:53.426
This catch-all is going
to prevent any 404.

152
00:08:53.426 --> 00:08:55.257
No matter what I do,
this catch-all is going to respond.

153
00:08:55.257 --> 00:09:00.103
So right now my api, we'll never
have a 404 because there's always

154
00:09:00.103 --> 00:09:03.602
a catch-all this.
&gt;&gt; Speaker 3: That concept equals

155
00:09:03.602 --> 00:09:06.423
express, would that also work if you

156
00:09:06.423 --> 00:09:09.521
did express.router?
&gt;&gt; Scott Moss: Would what

157
00:09:09.521 --> 00:09:12.455
also work?
&gt;&gt; Speaker 3: Would the app run

158
00:09:12.455 --> 00:09:16.860
if it was concept equals express.router?
&gt;&gt; Scott Moss: No,

159
00:09:16.860 --> 00:09:19.346
because you need to mount it.

160
00:09:19.346 --> 00:09:24.319
Well, you need to mount a router to
something that's eventually listening.

161
00:09:24.319 --> 00:09:28.734
So if you made app a router, well,
you can't listen on a router.

162
00:09:28.734 --> 00:09:30.598
So, you wouldn't do anything.

163
00:09:30.598 --> 00:09:33.741
It would execute and
it would exit immediately.

164
00:09:33.741 --> 00:09:36.628
Cuz the reason our server's running
right now, a thing about Node.

165
00:09:36.628 --> 00:09:40.346
Node what it does is it's asynchronous,
so it'll run your code.

166
00:09:40.346 --> 00:09:43.512
And then anything that's async
get put in a tas, que, and

167
00:09:43.512 --> 00:09:45.331
it's gonna back as an executed.

168
00:09:45.331 --> 00:09:49.344
When that queue is empty, Node just exits,
there is no more work to be done so

169
00:09:49.344 --> 00:09:49.928
it stops.

170
00:09:49.928 --> 00:09:54.598
The reason why our code is still
running right now on our server is

171
00:09:54.598 --> 00:09:57.770
because we are listening on a port.

172
00:09:57.770 --> 00:09:59.820
There's always something on,
there's always something listening.

173
00:09:59.820 --> 00:10:01.569
That Event Q is always there.

174
00:10:01.569 --> 00:10:04.304
So that's why it's there,
if we do what he's suggesting,

175
00:10:04.304 --> 00:10:07.753
there will be nothing listening therefore
the code will execute just fine.

176
00:10:07.753 --> 00:10:09.306
And then it will just exit immediately.

177
00:10:09.306 --> 00:10:12.563
Your script will be done before you blink,
nothing will happen, but

178
00:10:12.563 --> 00:10:14.931
it did execute the code,
just nothing happened.

179
00:10:14.931 --> 00:10:18.305
So yeah, eventually a router
has to be attached to some root

180
00:10:18.305 --> 00:10:20.943
app that is listening
to some port somewhere.

181
00:10:20.943 --> 00:10:25.870
And that's how you get this to happen.
&gt;&gt; Speaker 4: Is it a best practice

182
00:10:25.870 --> 00:10:30.397
to break out your api router and
do a separate file and then import it?

183
00:10:30.397 --> 00:10:31.032
&gt;&gt; Scott Moss: Yes.

184
00:10:31.032 --> 00:10:32.122
&gt;&gt; Speaker 4: Because you said it's still

185
00:10:32.122 --> 00:10:33.858
going to be order based.
&gt;&gt; Scott Moss: Exactly.

186
00:10:33.858 --> 00:10:36.140
&gt;&gt; Speaker 4: So you can set up the order

187
00:10:36.140 --> 00:10:40.175
of this particular router or
route the api.

188
00:10:40.175 --> 00:10:42.065
Manage that separately, import it to your-

189
00:10:42.065 --> 00:10:42.617
&gt;&gt; Scott Moss: Yep.

190
00:10:42.617 --> 00:10:43.389
&gt;&gt; Speaker 4: Okay.
&gt;&gt; Scott Moss: That's

191
00:10:43.389 --> 00:10:43.973
exactly we're gonna do.

192
00:10:43.973 --> 00:10:46.838
So I'm glad you're seeing that pattern
cuz yep, you can pretty much see it.

193
00:10:46.838 --> 00:10:50.056
Yeah, cuz you gotta imagine this API
routers are gonna have tons of routes,

194
00:10:50.056 --> 00:10:51.174
tons of configurations.

195
00:10:51.174 --> 00:10:56.004
And then inside of it, it might have
it's own subrouters like for api/todos,

196
00:10:56.004 --> 00:10:58.039
here's the todo router, right?

197
00:10:58.039 --> 00:10:59.616
And then there's so much configuration.

198
00:10:59.616 --> 00:11:03.614
So yeah, you totally wanna like, make
sure you don't put all that in one file.

199
00:11:03.614 --> 00:11:05.460
One, because you're not
going to be able to test it.

200
00:11:05.460 --> 00:11:08.620
Two, you're going to have
merge conflicts everywhere.

201
00:11:08.620 --> 00:11:12.281
[LAUGHS] So yeah, totally don't do that.

202
00:11:12.281 --> 00:11:17.502
But any questions on the subrouting here?
&gt;&gt; Speaker 4: Nope.

203
00:11:17.502 --> 00:11:18.414
&gt;&gt; Scott Moss: Remember that order,

204
00:11:18.414 --> 00:11:20.768
the whole thing about order
applies everywhere, right?

205
00:11:20.768 --> 00:11:27.154
So if I have this API router, and I make
another route on that API router for

206
00:11:27.154 --> 00:11:33.164
a post on the same route,
&gt;&gt; Scott Moss: Then,

207
00:11:33.164 --> 00:11:38.486
I'm sorry, hold up,
let's do another get for,

208
00:11:38.486 --> 00:11:45.736
we'll see that one and
then what we'll do, we'll say start here.

209
00:11:45.736 --> 00:11:53.424
There we go.
&gt;&gt; Scott Moss: There we go.

210
00:11:53.424 --> 00:11:58.441
So because I registered the index
of the API route first,

211
00:11:58.441 --> 00:12:05.131
before I registered the catchall,
if I were to go to /api/ anything else,

212
00:12:05.131 --> 00:12:12.260
we should see a respond with apiAll versus
what we did before which was ok: true.

213
00:12:12.260 --> 00:12:15.051
So let's try that.

214
00:12:15.051 --> 00:12:19.992
So if I go to api,
api:true, if I go to api/

215
00:12:19.992 --> 00:12:24.948
anything else I should see apiAll, right?

216
00:12:24.948 --> 00:12:25.856
Everybody follow me there?

217
00:12:25.856 --> 00:12:27.735
Let's go back.

218
00:12:27.735 --> 00:12:29.178
I set up a catch all.

219
00:12:29.178 --> 00:12:32.632
So let's diagram what's
happening here on this route.

220
00:12:32.632 --> 00:12:35.781
So we come through,

221
00:12:35.781 --> 00:12:40.977
we make a GET request to / right?

222
00:12:40.977 --> 00:12:45.077
So we make a get request to slash, what's
gonna happen is Express is gonna look,

223
00:12:45.077 --> 00:12:46.420
it's gonna come in here.

224
00:12:46.420 --> 00:12:51.143
It's gonna be like, okay you're at slash,
but then we're actually at slash api, so

225
00:12:51.143 --> 00:12:53.680
it's like, okay, cool you're at /api.

226
00:12:53.680 --> 00:12:54.486
Let me execute this router.

227
00:12:54.486 --> 00:12:57.818
So now we're inside of this router,
so now Express is up here.

228
00:12:57.818 --> 00:13:01.722
And because the route that we hit was
just last API and it was GET request,

229
00:13:01.722 --> 00:13:04.416
it actually stop right here,
it was like, cool.

230
00:13:04.416 --> 00:13:06.310
This satisfies that.

231
00:13:06.310 --> 00:13:13.191
Okay, /api route which is the same route,
get cool, I'll let you do that.

232
00:13:13.191 --> 00:13:20.322
But then the next time, we did get, we
said /api/ whatever It did the same thing.

233
00:13:20.322 --> 00:13:25.982
It came down, it was like, okay, cool,
API's here, activate that router.

234
00:13:25.982 --> 00:13:28.175
Nope, doesn't satisfy that.

235
00:13:28.175 --> 00:13:30.820
Okay, here we go,
we got a dot all, so any verb.

236
00:13:30.820 --> 00:13:34.865
Okay cool, so any path, any thing
that is not this and is any verb,

237
00:13:34.865 --> 00:13:38.425
I'm gonna go ahead and
run that, that's what happened.

238
00:13:38.425 --> 00:13:43.189
Before, when I get rid of this,
the reason it executes this one down

239
00:13:43.189 --> 00:13:47.804
here is because it still comes in
here at API, goes to API router.

240
00:13:47.804 --> 00:13:52.311
It's like, I don't have anything for
API router that happens here.

241
00:13:52.311 --> 00:13:59.185
So I am going to go to the next
route that satisfies this request.

242
00:13:59.185 --> 00:14:02.681
And that's this one,
even though it's up a level.

243
00:14:02.681 --> 00:14:03.607
It's still serial.

244
00:14:03.607 --> 00:14:05.946
It's still in order,
but it's nested, right?

245
00:14:05.946 --> 00:14:07.222
This is all still in order.

246
00:14:07.222 --> 00:14:12.250
This API router is in front of this app.

247
00:14:12.250 --> 00:14:15.096
And it has its own nester routes,
but eventually it comes out.

248
00:14:15.096 --> 00:14:15.757
It's a tree.

249
00:14:15.757 --> 00:14:18.578
It comes out of that tree to the parent
and then it goes back down, right?

250
00:14:18.578 --> 00:14:19.271
It's a depth first.

251
00:14:19.271 --> 00:14:21.993
It does depth-first routing,
right, not breadth-first.

252
00:14:21.993 --> 00:14:24.241
So it's gonna go all the way
down to the root and

253
00:14:24.241 --> 00:14:26.674
be like, I don't know what I'm doing here.

254
00:14:26.674 --> 00:14:29.707
Let me go back up, check some more,
go back up, check some more.

255
00:14:29.707 --> 00:14:30.602
So it's depth-first.

256
00:14:30.602 --> 00:14:34.294
Anybody's ever done binary searches or
stuff like that, right?

257
00:14:34.294 --> 00:14:37.660
So it's a depth-first
versus a breadth-first.

258
00:14:37.660 --> 00:14:40.031
The difference is, breadth-first is like,

259
00:14:40.031 --> 00:14:43.632
let me check everything on this level
first before I go down one level.

260
00:14:43.632 --> 00:14:47.270
Death first is like, I'm gonna go all the
way down until I can't go down anymore,

261
00:14:47.270 --> 00:14:47.870
to the leaf.

262
00:14:47.870 --> 00:14:50.591
Then I'm gonna come back up and
do it again, come back up and do it again.

263
00:14:50.591 --> 00:14:53.223
And it's gonna do that until it
figures out which one it finds.

264
00:14:53.223 --> 00:14:57.950
So that's what's happening here.
&gt;&gt; Scott Moss: Any

265
00:14:57.950 --> 00:15:01.135
questions on that?
&gt;&gt; Speaker 4: No.

266
00:15:01.135 --> 00:15:05.681
&gt;&gt; Scott Moss: Okay, so, we have another

267
00:15:05.681 --> 00:15:10.130
hacking session here.

268
00:15:10.130 --> 00:15:13.490
Basically we all ready
have the Express app,

269
00:15:13.490 --> 00:15:16.592
we all ready have the route for the index.

270
00:15:16.592 --> 00:15:19.730
We have the, actually sorry,
it's the wrong Challenge, hit, it's,

271
00:15:19.730 --> 00:15:23.129
I'll copy this Challenge here but actually
it's the Challenge in the first one.

