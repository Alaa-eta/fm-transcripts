WEBVTT

1
00:00:02.313 --> 00:00:03.970
&gt;&gt; Scott Moss: All right, so we're back.

2
00:00:03.970 --> 00:00:06.550
Hope everybody had ample time
to work on their challenge.

3
00:00:07.570 --> 00:00:10.200
If not, we're gonna go over it right now,
so it's all good.

4
00:00:10.200 --> 00:00:14.520
If you look at the list of challenges
here, we have to look at the User router

5
00:00:14.520 --> 00:00:17.390
as a reference, and
you can follow it all the way down.

6
00:00:17.390 --> 00:00:20.640
Unless they follow it down,
there's like two nested routers there.

7
00:00:20.640 --> 00:00:22.330
So follow it all the way
down to the source and

8
00:00:22.330 --> 00:00:25.050
the source is basically
where you're responding to.

9
00:00:25.050 --> 00:00:28.230
Which if you were to find out,
there's literally no response there.

10
00:00:28.230 --> 00:00:29.820
But look at that,

11
00:00:29.820 --> 00:00:33.180
build out the song router with all
the routes very much like the user router.

12
00:00:33.180 --> 00:00:36.379
Build out the playlist router with all
the routes very much like the user router.

13
00:00:36.379 --> 00:00:39.102
Connect the song and
a playlist router to the rest router and

14
00:00:39.102 --> 00:00:42.819
it eventually connect the rest router to
the basic express app on the /api path.

15
00:00:42.819 --> 00:00:47.790
So let's check that out,
see what we got here.

16
00:00:47.790 --> 00:00:51.770
I'm just going to check out,
to save some time.

17
00:00:51.770 --> 00:00:53.120
Usually I love live coding.

18
00:00:53.120 --> 00:00:56.520
But, let's get through this,
some solutions here.

19
00:00:56.520 --> 00:00:58.244
And then I can live code
some stuff that's not here.

20
00:01:03.817 --> 00:01:08.924
&gt;&gt; Scott Moss: So first things first is,
let me get rid of this stuff that we just

21
00:01:08.924 --> 00:01:15.392
did last session,
&gt;&gt; Scott Moss: First

22
00:01:15.392 --> 00:01:21.125
things first is we need to connect
our rest router to our app and

23
00:01:21.125 --> 00:01:24.690
that one's pretty simple app.use.

24
00:01:24.690 --> 00:01:25.500
We mount it.

25
00:01:25.500 --> 00:01:27.530
This is what when you
hear people say mounting,

26
00:01:27.530 --> 00:01:29.070
this is what they're talking about.

27
00:01:29.070 --> 00:01:31.630
We're mounting this route
in this path here and

28
00:01:31.630 --> 00:01:35.110
we're doing it before the catch
all that I have here.

29
00:01:35.110 --> 00:01:36.720
By the way, I have this catch all here.

30
00:01:36.720 --> 00:01:40.250
This by no means is me saying you
should have this in your app.

31
00:01:40.250 --> 00:01:42.510
Okay, if you don't have a route,

32
00:01:42.510 --> 00:01:45.430
you should definitely throw
an error before for something.

33
00:01:45.430 --> 00:01:49.510
I'm just having it so it's for
development, but yeah.

34
00:01:49.510 --> 00:01:53.680
If you're building an express app that's
serving a single-page application,

35
00:01:53.680 --> 00:01:56.050
you would most likely have
to send back the index page.

36
00:01:56.050 --> 00:01:58.520
So this is another thing
you have to do as well.

37
00:01:58.520 --> 00:02:00.970
But you shouldn't be serving a static,

38
00:02:00.970 --> 00:02:02.950
you shouldn't be doing
a front-end app on Express.

39
00:02:02.950 --> 00:02:06.120
You should just serve it on a CDN instead.

40
00:02:06.120 --> 00:02:09.700
But anyway, so yeah,
we mounted it /api, got the restRouter.

41
00:02:09.700 --> 00:02:11.900
Let's go take a look at
the restRouter here.

42
00:02:11.900 --> 00:02:16.270
Any questions here,
by the way about this, this part so far?

43
00:02:16.270 --> 00:02:19.810
Okay, restRouter,
if we go take a look at the restRouter,

44
00:02:19.810 --> 00:02:24.430
all the stuff that you need is already
imported, and what you saw was you had

45
00:02:24.430 --> 00:02:27.750
just the user mounted at slash user,
so we're just going to go ahead and

46
00:02:27.750 --> 00:02:31.840
mount the song router and the playlist
router on the appropriate paths as well.

47
00:02:31.840 --> 00:02:37.340
So you've got /song and /playlist, and
the important thing to remember here is

48
00:02:37.340 --> 00:02:41.650
one order, so I guess in this case
order doesn't really matter because

49
00:02:41.650 --> 00:02:44.140
they're completely different paths right;
so, it doesn't really matter right.

50
00:02:44.140 --> 00:02:45.830
They would matter if
they were the same path.

51
00:02:45.830 --> 00:02:51.273
The other thing is that the usage of use,
if we didn't use use here,

52
00:02:51.273 --> 00:02:56.717
we would have to say something like this,
we would have to say like,

53
00:02:56.717 --> 00:03:01.874
let's say I want to mount some
stuff on the restRouter for song,

54
00:03:01.874 --> 00:03:06.842
I just say restRouter.get/song/ or
just /song you don't

55
00:03:06.842 --> 00:03:12.040
have to do like songRouter it'll
be very tedious to do all that.

56
00:03:12.040 --> 00:03:16.611
So use the .use it's like hey, anything
for /song just delegate to this router,

57
00:03:16.611 --> 00:03:21.114
I don't care I'm just passing it through
I don't really care, it's not my job,

58
00:03:21.114 --> 00:03:23.950
I'm just passing it through, right?

59
00:03:23.950 --> 00:03:25.150
So that's that.

60
00:03:25.150 --> 00:03:27.760
You can do the same
thing in playlistRouter.

61
00:03:27.760 --> 00:03:29.618
So let's go take a look
at the user router.

62
00:03:32.106 --> 00:03:35.850
&gt;&gt; Scott Moss: And notice the typo here.

63
00:03:35.850 --> 00:03:38.683
You definitely don't wanna create one on
delete, [LAUGH] you wanna delete one.

64
00:03:41.721 --> 00:03:44.848
&gt;&gt; Scott Moss: But notice we're taking,
I walked through this before the example,

65
00:03:44.848 --> 00:03:46.460
but the param.

66
00:03:46.460 --> 00:03:47.500
When we talk more about middleware,

67
00:03:47.500 --> 00:03:50.080
which I think that's the next one
we're talking about actually.

68
00:03:50.080 --> 00:03:51.320
This is gonna make more sense.

69
00:03:51.320 --> 00:03:54.290
But this is popping off
the parameter of the URL, right?

70
00:03:54.290 --> 00:04:00.292
So if we created a URL,
a route that's like /api/song/iid.

71
00:04:00.292 --> 00:04:04.580
That's how you do parameters.

72
00:04:04.580 --> 00:04:06.240
Then it's going to grab that ID.

73
00:04:06.240 --> 00:04:09.400
And it's going to pass it as
an argument to this function.

74
00:04:09.400 --> 00:04:12.450
And then our function can
do whatever it wants.

75
00:04:12.450 --> 00:04:13.160
A function?
Normally,

76
00:04:13.160 --> 00:04:16.090
what it will do is it will look at
a database for that ID resource.

77
00:04:16.090 --> 00:04:17.770
Attach it to the request.

78
00:04:17.770 --> 00:04:19.110
And send it down the line, right?

79
00:04:19.110 --> 00:04:21.551
Because if you're coming,
if you're looking for a /api/song/id,

80
00:04:21.551 --> 00:04:23.125
that's actually and
let's say this is a git.

81
00:04:23.125 --> 00:04:26.180
Let's say this is a git to this.

82
00:04:28.510 --> 00:04:29.370
So you did a git there.

83
00:04:31.020 --> 00:04:33.710
This is not the thing
that's going to respond.

84
00:04:33.710 --> 00:04:36.240
The thing that's gonna respond
is the route that you setup for

85
00:04:36.240 --> 00:04:40.870
this URL which is songs/id which in this
case will be something like down here.

86
00:04:40.870 --> 00:04:42.040
But this one runs first.

87
00:04:42.040 --> 00:04:46.660
So this would run first, grab the resource
from the database with the appropriate ID.

88
00:04:46.660 --> 00:04:50.520
Attach it to the request,
send it down the line to the one that

89
00:04:50.520 --> 00:04:53.510
actually matches this,
which will be down here.

90
00:04:53.510 --> 00:04:57.900
And then that would have access to the
object that was attached to the request

91
00:04:57.900 --> 00:04:59.740
and then it can respond appropriately,
right?

92
00:04:59.740 --> 00:05:00.980
That's how that would work.

93
00:05:00.980 --> 00:05:03.750
And you can do that as much as you like,
in other words,

94
00:05:03.750 --> 00:05:07.680
as much as you like,
which is don't abuse it.

95
00:05:07.680 --> 00:05:09.090
So we got this in a user router.

96
00:05:09.090 --> 00:05:11.090
So if we go look at the song router,

97
00:05:12.680 --> 00:05:17.439
we should see it pretty much
be the same thing, right?

98
00:05:19.130 --> 00:05:21.040
We use the dot route thing again for
shortcuts,

99
00:05:21.040 --> 00:05:24.480
otherwise we have to use the route
over and over and over again.

100
00:05:24.480 --> 00:05:25.230
This is a shortcut.

101
00:05:26.390 --> 00:05:30.470
The reason this stuff is mounted like this
is because I'm following, rest, right?

102
00:05:30.470 --> 00:05:36.010
So basically, who here knows what rest is?

103
00:05:39.499 --> 00:05:42.610
&gt;&gt; Scott Moss: I don't think anybody knows
what rest is, cuz it's not a thing, right?

104
00:05:43.620 --> 00:05:46.300
Yeah, it's a thing, but
is it really a thing?

105
00:05:46.300 --> 00:05:50.310
There's conventions, REST should be like
this, but there's really no convention.

106
00:05:50.310 --> 00:05:54.460
They have standard API and there's
swagger, and there's all this stuff.

107
00:05:54.460 --> 00:05:56.220
But really what is rest?

108
00:05:56.220 --> 00:05:58.890
Everybody at the end of the day has
to denormalize their rest to do

109
00:05:58.890 --> 00:05:59.560
something crazy.

110
00:05:59.560 --> 00:06:01.490
You got to touch these clear strings.

111
00:06:01.490 --> 00:06:05.020
You got to do all this crazy stuff
because eventually what you have to do,

112
00:06:05.020 --> 00:06:06.780
what you find out is
that you build an app.

113
00:06:06.780 --> 00:06:09.290
You know, whether it's a mobile app or
a web app.

114
00:06:09.290 --> 00:06:12.240
And you find out that that app needs
data completely different from the way

115
00:06:12.240 --> 00:06:13.460
rest is designed.

116
00:06:13.460 --> 00:06:14.820
It doesn't need it like this.

117
00:06:14.820 --> 00:06:17.090
It needs like it needs associations.

118
00:06:17.090 --> 00:06:20.990
It needs nested structures and rest
doesn't satisfy that so what you end up

119
00:06:20.990 --> 00:06:24.420
having to do is optimize for
the client especially if it is a web app.

120
00:06:24.420 --> 00:06:25.610
You want the client to optimize.

121
00:06:25.610 --> 00:06:29.040
So therefore, you don't want
the client making multiple calls to get

122
00:06:29.040 --> 00:06:32.720
associations so you fix the back end and
now you don't do the rest anymore.

123
00:06:32.720 --> 00:06:35.890
Now it is just like, now we made this
one special route just for this page.

124
00:06:35.890 --> 00:06:36.475
It's like okay.

125
00:06:36.475 --> 00:06:38.497
[LAUGH] What is this right?

126
00:06:38.497 --> 00:06:39.637
What is rest?

127
00:06:39.637 --> 00:06:44.515
I guess the way you could think of it
is it's just a structured way that we

128
00:06:44.515 --> 00:06:49.120
can define our routes that could
interact with our resources.

129
00:06:49.120 --> 00:06:50.850
Taking advantage of HDV verbs.

130
00:06:50.850 --> 00:06:53.240
If you use the verb get.

131
00:06:53.240 --> 00:06:54.800
That means you want to get a resource.

132
00:06:54.800 --> 00:06:56.210
If you use the verb put.

133
00:06:56.210 --> 00:06:58.700
That means you want an updated resource.

134
00:06:58.700 --> 00:07:02.430
If you use the verb post,
you want to create a resource.

135
00:07:02.430 --> 00:07:06.790
If you use the verb delete,
you want to remove a resource.

136
00:07:06.790 --> 00:07:11.880
And an options verb is for a course and
then as far as the resource string

137
00:07:11.880 --> 00:07:17.400
is concerned, that's just going to
be slash wherever your api is right?

138
00:07:17.400 --> 00:07:18.660
You got some business logic here.

139
00:07:18.660 --> 00:07:20.440
You might see something like this.

140
00:07:20.440 --> 00:07:22.880
Typical you'll see like api/v1.

141
00:07:22.880 --> 00:07:25.241
Nobody has a v2.

142
00:07:25.241 --> 00:07:27.081
Nobody has a v2, it's always v1.

143
00:07:27.081 --> 00:07:31.140
They're over optimistic about
that new api they never build.

144
00:07:31.140 --> 00:07:37.010
It's always v1 and then the resource name,
it'll be the name of the thing.

145
00:07:37.010 --> 00:07:39.290
So in this case you might have user and

146
00:07:39.290 --> 00:07:43.830
then typically what you do here is
you would do get and put to this.

147
00:07:43.830 --> 00:07:47.770
So if I did a get request to this URL,
that means I wanna get all the users,

148
00:07:47.770 --> 00:07:49.640
because I didn't specify an ID.

149
00:07:49.640 --> 00:07:53.860
If I did a post request to this URL,
that means I wanna create a user, right?

150
00:07:53.860 --> 00:07:58.210
But now if I put an ID here and
I did a get request to this,

151
00:07:58.210 --> 00:08:01.750
that means I wanna get the user with
this ID, right, so not all users.

152
00:08:01.750 --> 00:08:04.957
You couldn't do it post here because you
could not create a user with this given

153
00:08:04.957 --> 00:08:06.428
ID, so that wouldn't make sense.

154
00:08:06.428 --> 00:08:08.641
But you could put a put here, right, so

155
00:08:08.641 --> 00:08:11.670
a put would means I wanna
update the user with this ID.

156
00:08:11.670 --> 00:08:14.830
And you can also put a delete here, as in,
I wanna delete this user with this ID.

157
00:08:14.830 --> 00:08:20.511
All right, so that's basically REST or
what REST should be.

158
00:08:20.511 --> 00:08:24.256
It's supposed to be stateless,
it's supposed to be all this, but

159
00:08:24.256 --> 00:08:29.430
at the end of the day, nobody really knows
what it is, and nobody wanted to admit it.

160
00:08:29.430 --> 00:08:29.950
Really that was it.

161
00:08:29.950 --> 00:08:32.770
I mean, Rails came out, Rails was like,
here, we're doing rest, everything's rest

162
00:08:32.770 --> 00:08:36.630
a resource, it's great, you can do crude,
that's great for a to do app.

163
00:08:36.630 --> 00:08:38.070
That literally only does that.

164
00:08:38.070 --> 00:08:41.800
But what about a component that
does all types of crazy stuff?

165
00:08:41.800 --> 00:08:43.600
Like this is just not gonna work.

166
00:08:43.600 --> 00:08:45.540
But we'll learn how to fix that tomorrow.

167
00:08:47.520 --> 00:08:49.950
Cool, so this is what you and
to do for the song router.

168
00:08:49.950 --> 00:08:53.700
And then the playlist router
is very much the same thing.

169
00:08:55.860 --> 00:08:56.900
As you can see,

170
00:08:56.900 --> 00:09:01.900
this is like a benefit of rest I believe
because you're pretty much doing this.

171
00:09:01.900 --> 00:09:04.330
It doesn't matter the resource,
they all need the same endpoints right?

172
00:09:04.330 --> 00:09:06.960
I mean, for user you probably don't
want to be exposed in creating a user.

173
00:09:06.960 --> 00:09:10.750
You want to go through an authentication
for that, but other resources yeah.

174
00:09:10.750 --> 00:09:11.440
It's the same thing.

175
00:09:11.440 --> 00:09:15.200
You can get all you can get one,
you can delete one, you can create one.

176
00:09:16.410 --> 00:09:16.960
Stuff like that.

177
00:09:16.960 --> 00:09:19.490
So that way, you can see that
a lot of stuff is redundant.

178
00:09:19.490 --> 00:09:22.606
We could have abstracted this to a whole
another level, and just passed in

179
00:09:22.606 --> 00:09:25.510
a router and registered the routes for
it that way, with just one function.

180
00:09:26.720 --> 00:09:28.820
Which is what we're doing in some of
the other files we'll get to soon.

181
00:09:30.750 --> 00:09:31.450
You have a question?

182
00:09:31.450 --> 00:09:34.435
&gt;&gt; Speaker 2: Mario's asking, so
in the case with the callback, and

183
00:09:34.435 --> 00:09:36.213
the param function does the job,

184
00:09:36.213 --> 00:09:39.658
the song is going to be available
in the routes that match later?

185
00:09:39.658 --> 00:09:43.636
&gt;&gt; Scott Moss: Exactly yeah so the param
is gonna attach it to the request, and

186
00:09:43.636 --> 00:09:47.615
that same request object is passed
down to the next handler, so

187
00:09:47.615 --> 00:09:52.570
yeah if you mutate the request object
it's passed down the whole request it's

188
00:09:52.570 --> 00:09:56.196
like you can think of it as
a per request cache basically.

189
00:09:56.196 --> 00:09:59.991
It's only there per request so you don't
have to be afraid of having two different

190
00:09:59.991 --> 00:10:03.621
requests for data on the same request
object, what should be very dangerous,

191
00:10:03.621 --> 00:10:05.630
right, it's only per request.

192
00:10:05.630 --> 00:10:08.776
So yeah, mutate the request object,
pass it down,

193
00:10:08.776 --> 00:10:13.367
it's available onto whatever handler
comes after it, until you respond.

194
00:10:16.556 --> 00:10:21.130
&gt;&gt; Scott Moss: Cool let me see, does it,
are we due now with the test here?

195
00:10:21.130 --> 00:10:22.370
No, we're not due now with the test here.

196
00:10:22.370 --> 00:10:22.960
Okay, cool.

197
00:10:22.960 --> 00:10:24.200
We didn't get to the test yet.

198
00:10:24.200 --> 00:10:25.396
Awesome.
Any questions on this?

199
00:10:27.354 --> 00:10:29.860
&gt;&gt; Scott Moss: A lot to
dive in on this one.

200
00:10:31.450 --> 00:10:33.980
&gt;&gt; Speaker 2: Just have
to createOne again for-

201
00:10:33.980 --> 00:10:34.494
&gt;&gt; Scott Moss: Yeah, yeah.

202
00:10:34.494 --> 00:10:35.270
They're all.

203
00:10:35.270 --> 00:10:37.475
&gt;&gt; Speaker 2: It does but-
&gt;&gt; Scott Moss: It definitely matters.

204
00:10:37.475 --> 00:10:38.651
[LAUGH]
&gt;&gt; Speaker 2: I don't know if it matters

205
00:10:38.651 --> 00:10:39.950
for the sake of the course.

206
00:10:39.950 --> 00:10:43.370
&gt;&gt; Scott Moss: It definitely matters,
I'm sure my test will fail.

207
00:10:43.370 --> 00:10:47.390
Cool, well let's dive into the next thing

208
00:10:47.390 --> 00:10:51.306
which is going to be controllers and
responding.

209
00:10:51.306 --> 00:10:52.170
I thought middle ware was next.

210
00:10:52.170 --> 00:10:53.750
Okay, so we're doing controllers and
responding.

211
00:10:53.750 --> 00:10:55.040
So if you got all the way
through this example,

212
00:10:55.040 --> 00:10:58.770
actually let me run it just to show you
I'm sure people were freaking out and

213
00:10:58.770 --> 00:11:02.550
people online probably didn't hear me
when I finally revealed that this is what

214
00:11:02.550 --> 00:11:03.790
should be happening.

215
00:11:03.790 --> 00:11:09.220
But if you run this, you know you got
everything working, it doesn't break.

216
00:11:09.220 --> 00:11:10.120
Everything's good.

217
00:11:10.120 --> 00:11:12.030
Right?
You go try to test out your thing.

218
00:11:12.030 --> 00:11:13.010
Let's go test it out.

219
00:11:13.010 --> 00:11:15.860
Let's see if it can do this
nice trick right here.

220
00:11:15.860 --> 00:11:16.360
Awesome.

221
00:11:17.570 --> 00:11:19.310
And then you can do like /api.

222
00:11:19.310 --> 00:11:22.620
And then you want to get all the songs,
right?

223
00:11:22.620 --> 00:11:24.180
And you hit enter.

224
00:11:24.180 --> 00:11:26.570
And nothing happens.

225
00:11:26.570 --> 00:11:27.670
It just hangs.

226
00:11:27.670 --> 00:11:30.010
There's literally,
that's not a bug or anything.

227
00:11:30.010 --> 00:11:31.120
Like, nothing is coming back.

228
00:11:31.120 --> 00:11:32.500
I should expect something back.

229
00:11:32.500 --> 00:11:33.820
Eventually, this is going to error out.

230
00:11:33.820 --> 00:11:35.490
And it's gonna time out.

231
00:11:35.490 --> 00:11:36.580
That's intentional.

232
00:11:36.580 --> 00:11:38.080
Can anybody do some digging and
figure out why?

233
00:11:39.280 --> 00:11:41.560
Yeah, why?

234
00:11:41.560 --> 00:11:44.820
&gt;&gt; Speaker 3: Cuz all the methods
are empty in the query.JS?

235
00:11:44.820 --> 00:11:49.060
&gt;&gt; Scott Moss: Yeah, all those
methods in query JS are empty, and

236
00:11:49.060 --> 00:11:54.260
those methods that you're talking
about are called controllers.

237
00:11:54.260 --> 00:11:56.860
All the controllers are empty,
there's nothing in here.

238
00:11:56.860 --> 00:12:01.770
Now, I'm doing some pretty crazy
stuff in here kind of, but

239
00:12:01.770 --> 00:12:06.520
it's not too advanced and I wanted to
do this because I wanted to show how

240
00:12:06.520 --> 00:12:11.090
you can generate things based off,
like, shared logic right?

241
00:12:11.090 --> 00:12:14.990
Because it is rest and because we do have
this path and everything's going to follow

242
00:12:14.990 --> 00:12:18.430
this same convention in every single
resource is going to have a create, read,

243
00:12:18.430 --> 00:12:19.320
and update and delete.

244
00:12:19.320 --> 00:12:20.690
It is going to have CRUD on it.

245
00:12:20.690 --> 00:12:23.600
We can just do the exact
same controllers for

246
00:12:23.600 --> 00:12:26.580
now by default on every single
resource until we don't.

247
00:12:26.580 --> 00:12:28.960
There is going to be times where
we have to do associations and

248
00:12:28.960 --> 00:12:32.520
we need a different controller, but by
default, yeah, they all do the same thing.

249
00:12:32.520 --> 00:12:36.150
Creating a song is the same
thing as creating a playlist.

250
00:12:36.150 --> 00:12:39.570
They just take different parameters,
but the logic is exactly the same so

251
00:12:39.570 --> 00:12:40.860
that's why this follows here.

252
00:12:40.860 --> 00:12:44.500
This allows us to take any model
when we get to models, and

253
00:12:44.500 --> 00:12:46.610
then do that thing on that model.

254
00:12:46.610 --> 00:12:47.910
So, that's what we're going to do next.

