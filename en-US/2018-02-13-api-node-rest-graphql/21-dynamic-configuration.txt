[00:00:02]
>> Scott Moss: Yeah, a config driven app. So, basically, in order to make this production ready and easy to work with, there are something we just don't wanna hard code in and we wanna change values depending on what environment we're in. So just like any server-side framework or language you would use, you have access to environment variables.

[00:00:26]
Who here doesn't know what environment variables are? All right, so your code is executed in some environment on some computer, right? Some Linux computer, in our case, or in my case, this computer right here. We can inject variables from that environment that's executing our code into our application and we can reference those in variables.

[00:00:44]
And those variables are live, so that's a good way to switch configurations based off of environment. So for instance, my environment is testing I might have a different URL for my testing database. If it's production, I have to put my production database in there because it's deployed somewhere.

[00:01:00]
So you wanna switch things like that like a really good example of service is the port. You have no idea what port you're gonna be when you deploy the service somewhere, how do you know a port to put in there. Or it's coming from environment variable whatever service or stack that's holding your application it's job to inject that port in the environment variable.

[00:01:20]
Because it can probably change, who know what is gonna be, so you would just listen to it from the environment variable. All right, so we wanna keep all the configuration at one place. It's also a great place for like secrets and stuff like that. My God stop scrolling does that, okay, cool.

[00:01:43]
So, you wanna use config values in the place of hard-coded values in our app. So in our app, I think we're hard-coded under DB connection URLs, we're hard-coding the ports. We do have one secret, we didn't really talk about it, but the authentication section has a JSON web token secret that's hard-coded.

[00:02:00]
We want that to change for like production and stuff as well. So all those places where like things need to change depending on where our app is deployed, we should put under configuration file. And then what we need to do is we need to generate that configuration file depending on what environment our code is executing at.

[00:02:15]
So we'll have like a base configuration of file, and from there it will require the appropriate production, staging, local, testing configuration file and merge itself. And then you give you a configuration file you can use in your app and it has different values on it. So this is a better approach to building out APIs, to build stuff on the fly and not locking yourself into mistakes and accidentally putting secrets in your git repo and all types of nasty things.

[00:02:41]
So you totally wanna do this, take advantage of this. You can do something like this on the client side because you can inject some environment variables in a client side. Any codes you put in the clients is gonna be in the browser. You can't hide it's gonna be there, nobody is gonna see your environment variables, they're coming from the environment.

[00:02:56]
They can only see the reference to it. So it's perfect for that, so that's what we're gonna use. So lets take note of all the places where we're hard coding things. Again, and then we'll talk about how to we can create a configuration system around that. So one of the first places that is in DV JS, right here, it's a hard coded URL for Mongo database.

[00:03:17]
If we deployed this and we try to connect to this, it'll break. This will totally break, unless for instance you had your own Linux machine up in the cloud where you had your own Mongo instance created. Then okay, maybe it would work. But most likely you're probably using something like cloud db or something that's being hosted somewhere else through some VPC or something like that and you need a different URL.

[00:03:41]
You're gonna use environment variable for that, so that's one. The other one is the main one, which is the port inside of nx.js. This just says 3000. This is not flexible at all, so this obviously some configuration needs to be changed. And then the last place is inside of off JS, which is this secret right here.

[00:04:00]
This needs to change, and then for extra credit, this disabled author right here, this allows us to turn up authentication for testing. So for testing it's just like, hey, can you just not check out the notification please, thanks. That's what that does. So we can set all these up inside of configuration file.

[00:04:19]
So the way that it will look is if inside your API, if you were to create actually let me check out some of this other branch.
>> Scott Moss: Lesson seven, okay, so we're on lesson seven, and let me check out some of these solution.
>> Scott Moss: Do check out lesson seven, okay, so, cool!

[00:04:51]
So if you're inside of here, your repo, the way I've been doing it is, like I said, I want to keep the configuration at one place. I want it to be dynamic so the ping on the environment it inherits and merges as properties based on those different environments.

[00:05:07]
And it's solely based on that so that I can feel confident that like hey, all I have to do is change the node environment to testing and I get a testing and configuration. All it do it changes you're staging I get a staging and configuration. It's pretty simple, so to do that if you look and you don't have to change the branch right here.

[00:05:22]
We start with a base config, something like this, so you have a base config, where the first thing you're configuring this import. But the first thing is you gonna make sure you have your environment variable you're gonna read from for us the node. The standard is NODE_ENV that's what we use in node to inject the appropriate environment in which we are like running are code in.

[00:05:45]
So process.env, notice that there's no variable here called process or anything like that and that's because, again, in Node, your entire code is wrapped in a function like this. So I talked about this before, right? But what I didn't talk about is what's passed in here. You get some stuff that's passed in here.

[00:06:03]
You get dirname what's just like a variable that's represents your current directory that you're in. You get require which we use the require stuff you get file name, and there is tons of other stuff in there and then finally you also get process. The process is this, so wven though you don't see it in here, it's given to you at runtime.

[00:06:30]
Node executes your code in a iffy like this, that's how it creates modules. That's all a module is. A module is just a closure, that's all it is. So you just got close, this is a scope. So that's where this process comes from. You also got this thing called Global, I'm not gonna tell you about it, cuz you just don't use it, right?

[00:06:49]
[LAUGH] Do not use global. You're like, yeah, I'm just gonna put everything on global. No, please don't, do not use global. So process is there, and we want the .env property of it. And then the environment variable that we want is NODE_ENV. So any environment variables you got in your computer, you can read them in here.

[00:07:05]
If the assessment variable doesn't read them you'll just see. They'll show up right here, so use the NODE_ENV. So basically what we're saying here is like we're gonna set it to development if it's not set already. We're defaulting to development, that's what this is doing, right? NODE_ENV equals NODE_ENV or if that's nothing then it's going to development.

[00:07:23]
So that's the first step and then the second step is to create your base config. This is default configuration, everything is based off this. Here are my defaults for everything. So, by default ports 3000, I don't have any secrets, just an empty object. My database has a URL string that is just this local database, pretty simple, right?

[00:07:43]
And then what we do is depending on that env right here, depending on that env what we're gonna do is, we're going to load up the appropriate file that has it's own configuration in it. So if you notice here, there's a dev file, a prod file, a testing file, depending on what the env is, if development or dev, it's going to load a dev file.

[00:08:05]
If it's testing or test, it's going to load that file. If it's production or prod it's gonna load that file, defaulting back to just dev and then it merges it. It merges the env config on top of the base config, overriding what's on the left. And then now when you require this file, we get extendable configuration that changes depending on node environment.

[00:08:28]
All we have to do to override that environment is, when we execute any scripts, for us the only one we have is start, is that you just pass in an environment. Notice right here I have NODE_ENV=testing, so if this was like development. I can explicitly pass it in, but although we do default to development, I don't have to do it.

[00:08:44]
But if this was like production, I could do that, all right? And now we're in production mode it'll make sure it configures production, the database URL is production database URL, the secrets are expected to be injected, all of that good stuff, all right? So that's how you would do it on your platform of choice where you deploy it, they have somewhere in their options, somewhere that you can put environment variables.

[00:09:05]
So they don't, leave that platform because you shouldn't be using them. Every platform has that, you just put your environment variables in there and that's how you inject them and you can change them. And that also means that because you have a configuration driven development. Let's say for some reason, you have the wrong database URL.

[00:09:22]
For some reason you hit the wrong database URL. All you gonna do is go in and change your environment variable, you don't have to redeploy. It says stage it's supposed to be production, change it to production and you're done. You don't have to redeploy your whole app. You just change the environment variable, ahese are live.

[00:09:37]
It'll restart your app, the service provider, but you don't have to redeploy. So you wanna configure as many things as possible on your environment variable and not hard code them cuz it limits you having to redeploy. It also allows you to change it on the fly and it just makes sense logically.

[00:09:54]
It saves you code, less if statements. You can put one if statement inside this config file or a switch statement in my case, or you can put an if statement in every single file that you will ever need a dynamic value. So I would rather just have one place where it has a switch and if statements and stuff.

[00:10:09]
Does that make sense?

