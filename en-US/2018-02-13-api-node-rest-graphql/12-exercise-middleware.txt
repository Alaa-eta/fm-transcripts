[00:00:02]
>> Scott: You can check out to lesson 4.
>> Scott: Okay, so we've got lesson four here. Basically, what we need to do here, is we need to do a couple things. Actually, do I have this listed here? Yeah, there we go. So, the challenge for this one is. Actually, let me just go over before I talk about exactly what you're gonna be doing.

[00:00:36]
So, one thing is we got some global middleware that we need to set up. Remember, we were using that request.body, right? And I was like, that's gonna be attached to some middleware later on. Yeah by default, Express knows nothing about JSON. It has no clue. It doesn't have any way of how to handle it.

[00:00:49]
But there's some special middleware that does allow us to parse JSON, parse URLs. Do all that stuff for us. So we're gonna use that middleware because we don't wanna do it ourselves. And we want that to happen on every single request on our app because our whole app is going to be responding to sin and JSON.

[00:01:04]
So we're gonna set it up globally. We can also set up logging globally, like hey, I want to. Cuz right now, when I start the server,
>> Scott: And I make a request to it, I don't know if somebody made a request. I'm not logging that request anywhere. It'd be pretty great to be able to log every single request that came in.

[00:01:24]
Really nice to have that that's like API 101 some login for your request. So we wanna see that. And that also needs to be global. So if you look inside of this middleware file, here, you can see there is a function called set up setglobalMiddleware. And it takes in the app.

[00:01:43]
What we wanna do here is we wanna set up some middleware to do some logging, that's optional, but the one we absolutely have to do is set up JSON parsing. And we're gonna use this bodyParser,
>> Scott: This bodyParser middleware thing. So let me, here we go. Let's go look at the docs for this, so I can show you.

[00:02:06]
So we go look at body-parser.
>> Scott: There's this thing in here called,
>> Scott: JSON. We need body-parser.json. And then we also need URL encoded. So we need both of those. And if you just take an example of how to use it, if they even have examples. Do they even have?

[00:02:29]

>> Speaker 2: It's way down, there.
>> Scott: It's like all the way down, there we go. Again, this is again why we chose Express because this thing works for Express. Almost everything works for Express/Connect as you see right here. Express/Connect cuz Express is based off of Connect. But basically we need to set up both of these middlewares.

[00:02:47]
We need to set up bodyParser, urlencoded({ extended, just put true, and then we also need to set up bodyParser.json. We need both of those middleware on our app. So knowing this right here, looking at this, we need to do that in here on our app. So and how we set up something what's the method that we use on the app or the router that we can mount anything on?

[00:03:15]

>> Speaker 2: Use.
>> Scott: Use exactly, so use use and set up that body part for Json and URL encoded, and then
>> Scott: What we also have here is some authentication, so we're not gonna walk through building custom authentication cuz it's already done. And that's gonna take a long time to do anyway, but it's already done.

[00:03:37]
We're gonna attach it to our routes though. I already have that done, you can go look in modules/all and there's a whole bunch of stuff in here with JSON web tokens, it's doing some crazy stuff. And we can walk through it when we get done, of what's going on.

[00:03:50]
But it's heavily commented, it tells you exactly what's happening here. But this is also middleware, and we're gonna set this middleware up to protect our API. So you can't access /api without being authenticated. So that's what this is gonna do. So we need to set this up as well, and the middleware for this is gonna be.

[00:04:11]
Where are you? We need to use the decode token function from this file. So decode token is exactly what it sounds like. It's gonna decode the json web token and we wanna do that on every single route to size api. So think in your app where there's a place where we can set up some function that runs before every other function for size api.

[00:04:37]
Then you want to place decodeToken in there Just like that, you have to invoke because it's a function that returns a function. Every other middle word doesn't return a function, this one returns a function, so you got to invoke it just like that. That a side to off, and then you have this custom error handler that does absolutely nothing.

[00:04:58]
And like you said, we need to set this up. To handle any error that's passed into next. Eventually when you pass any error to next it just bubbles up. No matter where you pass it in, it's gonna go to its router like, do you have an error handler?

[00:05:09]
Nope. Do you have an error handler? Nope. Do you have an error handler? Nope. Okay, I'm just gonna blow up right here, duh. It's just gonna check every single level until it gets to the root app. So we should set up an error handler for API. And the syntax for that is express passes in the error as the first argument.

[00:05:25]
That's how it knows if this is an error handler or not. It checks the errity, or the signature of your function and if it detects that there's an error here, it's like okay, this is the error handler. That's how it does it. So all you're going to do it register this using the same .use method and then inside of it you can do whatever you want.

[00:05:38]
I would say, probably log the error so you can see what it is on the server. And then send back a status of like 500 or whatever you wanna send back. But normally, what you would do is you would throw custom error messages. And then inside this function, you'd be like if it's this error, send back this status code.

[00:05:55]
If it's this error, send back this message. If it's this error, call this service. That's what you would do in here. You can do anything, ASYNC can do whatever you want. But we're just throwing generic errors, we don't really care. But that's what you would do in production, you would check the metadata on this error right here to determine what you need to do next, but ultimately no matter what you do you have to send a response otherwise it's going to hang.

[00:06:17]
So this has to send a response some way or another. So I bring up the Tasks or the challenge and you're going to setup global app middleware, you're going to add the router based middleware, which is like the error handling, and then you're going to setup auth middleware where needed.

[00:06:41]
So global middleware The error handling,
>> Scott: and then set up the auth middleware. And if you don't get to auth the middleware, that's totally fine. You don't have to set it up but I think it's a good exercise. So it is-
>> Speaker 2: Can you define where needed?
>> Scott: Where do you think it's needed?

[00:07:02]
It'll work the same no matter where you put it.
>> Speaker 2: User create. Okay, I guess it totally depends on each case of the app, right?
>> Scott: Yeah, so I would say for now just protect the whole /api.
>> Speaker 2: Okay.
>> Scott: Yeah, obvisouly if you actually had your sign up ability protected by authentication, then nobody could ever sign up.

[00:07:21]
So I would say just Assume that that create method is not for signing up. like you are admin creating users or something like that. not for signing up. that's a whole other route that i think is already in the app. yeah there's like a sign in sign up flow already in there that's completely separated out.

[00:07:36]
but yeah that's something you don't want to do so you got to be careful where you Put these Middleware because anything that belongs to that mount will be affected by that Middleware. So if you accidentally put authentication on your sign up flow nobody would ever be able to sign up.

[00:07:51]
Cuz they need to be authenticated to sign up. So that would suck. So I would say just lock down the whole API route. Setup that Error handling, the function is already there inside of modules error handling. There it is. And then, you also need to, inside the middleware file here, you need to just attach the body parses.

[00:08:10]
That's it.
>> Scott: So you'll know this works when It doesn't break? [LAUGH] And you can actually send JSON. So if you do a post, you can do some logging in the controllers and you can find out like body is. If you log body then that's exactly what you send, then it totally works.

[00:08:31]
And you can access the authentication works is, cuz if you. I don't wanna show it but if you put the authentication in there, you also get an error back immediately like you're not authenticated. It'll immediately say, you're not authenticated. It won't even execute your controller. It'll just break

