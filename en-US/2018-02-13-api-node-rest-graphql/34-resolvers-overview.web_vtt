WEBVTT

1
00:00:02.230 --> 00:00:06.770
&gt;&gt; Scott Moss: Resolvers, once you
learn this part you can pretty much do

2
00:00:06.770 --> 00:00:08.780
everything with GraphQL,
other than mutations.

3
00:00:08.780 --> 00:00:12.050
So we'll go over Resolvers, we'll cut
to the challenge, then we'll eat lunch,

4
00:00:12.050 --> 00:00:14.590
and we'll come back and talk about it.

5
00:00:14.590 --> 00:00:20.145
So Resolvers, looks like I was
about to put something here.

6
00:00:20.145 --> 00:00:22.860
[LAUGH] I don't know what happened
I did save or I don't know.

7
00:00:22.860 --> 00:00:25.620
But I'll just talk about resolvers.

8
00:00:27.740 --> 00:00:29.570
Functions to resolve data for your schema.

9
00:00:29.570 --> 00:00:32.440
So again,
let's look at this example right here.

10
00:00:32.440 --> 00:00:33.980
I'm just gonna walk through.

11
00:00:33.980 --> 00:00:36.470
I think it's better if I just
walk through it as I talk.

12
00:00:36.470 --> 00:00:40.750
So again we have this, this is a resolver.

13
00:00:42.460 --> 00:00:45.190
I want to talk about this
argument syntax here.

14
00:00:45.190 --> 00:00:48.320
So resolver takes in four arguments.

15
00:00:49.710 --> 00:00:52.670
The first argument is
gonna be the root value.

16
00:00:53.840 --> 00:00:58.050
Root value is optional because it's
up to you to pass on the root value.

17
00:00:58.050 --> 00:01:00.430
Most of the time you
won't have anything here.

18
00:01:00.430 --> 00:01:01.860
On a top level resolver.

19
00:01:01.860 --> 00:01:04.960
On a Nesta resolver when we get there,
this will always be something.

20
00:01:04.960 --> 00:01:08.353
It will be the thing that is
being resolved before it.

21
00:01:08.353 --> 00:01:13.210
[LAUGH] It will be, Okay, so
a Nesta resolver is another branch.

22
00:01:13.210 --> 00:01:17.580
Its root value will be the branch
that it branched from, right?

23
00:01:17.580 --> 00:01:21.850
But because this is a top level resolver,
as in it is a branch from the root.

24
00:01:22.900 --> 00:01:26.440
There's nothing above it, there is
no rootValue, unless we supply it.

25
00:01:26.440 --> 00:01:32.468
You can supply a rootValue
&gt;&gt; Scott Moss: Here if you want.

26
00:01:32.468 --> 00:01:35.247
I'm sorry here,
you could put a rootValue here.

27
00:01:39.603 --> 00:01:40.480
&gt;&gt; Scott Moss: And
you could put whatever you want.

28
00:01:40.480 --> 00:01:42.840
And that rootValue will be
passed down to your top level.

29
00:01:44.990 --> 00:01:46.410
Top level resolvers.

30
00:01:46.410 --> 00:01:50.470
What that's mostly gonna be used for that
I've seen is for pervert quest caching.

31
00:01:50.470 --> 00:01:52.230
So there's something called a data loader.

32
00:01:52.230 --> 00:01:53.920
We're not gonna be using
the data loader today.

33
00:01:53.920 --> 00:01:56.390
But allows you to like
cache things per request.

34
00:01:56.390 --> 00:01:58.949
Cuz if you did the math and
you kinda thought about this for a minute.

35
00:02:00.380 --> 00:02:03.010
You, somebody could
query your GraphQL API.

36
00:02:03.010 --> 00:02:07.760
And recursively make it query the database
and kill your API, it could kill it.

37
00:02:07.760 --> 00:02:12.280
For instance, if your user type had
a song, and your song type had a user.

38
00:02:12.280 --> 00:02:15.880
You can ask the user for the song, ask the
song for the user, the user for the song.

39
00:02:15.880 --> 00:02:17.000
You can do that over and
over and over again.

40
00:02:17.000 --> 00:02:20.220
And every time you have a resolve,
it will create a database for that, right.

41
00:02:20.220 --> 00:02:22.090
It's gonna go on and on and on.

42
00:02:22.090 --> 00:02:25.320
So you can stop that,
you can a root value that caches it.

43
00:02:25.320 --> 00:02:28.890
So it's like, I've already this user once,
cache it here, so if he asks for it again,

44
00:02:28.890 --> 00:02:31.580
just get it from the cache,
per request So,

45
00:02:31.580 --> 00:02:33.010
there's a lot of advanced
stuff you could do there.

46
00:02:33.010 --> 00:02:38.860
But yeah, you could have like a recursive
GraphiQL that gets pooped on so,

47
00:02:38.860 --> 00:02:39.840
gotta be careful.

48
00:02:39.840 --> 00:02:43.800
So the first ones the root value
which is normally empty unless you

49
00:02:43.800 --> 00:02:46.470
pass in something or
if you're on the nested resolver.

50
00:02:46.470 --> 00:02:51.330
The second one is going to be Any
arguments that are parsed in.

51
00:02:51.330 --> 00:02:53.560
So when we parse in
arguments permutations,

52
00:02:53.560 --> 00:02:54.740
that's what this second one is gonna be.

53
00:02:54.740 --> 00:02:56.400
It's gonna be an object
of those arguments,

54
00:02:56.400 --> 00:02:59.570
with the same name as they
are in your graph QL.

55
00:02:59.570 --> 00:03:03.940
So if we went to here, and let's say
I don't know, let's say getme took

56
00:03:03.940 --> 00:03:09.990
an argument of hello which type of spring,
right, inside that resolver.

57
00:03:09.990 --> 00:03:12.870
We don't have an object and
we call this like args.

58
00:03:12.870 --> 00:03:17.300
There will be an args.string, or
I'm sorry, args.hello on there.

59
00:03:17.300 --> 00:03:17.890
That's how this works.

60
00:03:17.890 --> 00:03:20.270
This is an object for
all the arguments for this vserksolver.

61
00:03:22.000 --> 00:03:26.160
Normally what you would see, especially in
my code, all this d structure like this.

62
00:03:26.160 --> 00:03:27.220
So I would just be like, hello.

63
00:03:27.220 --> 00:03:30.330
I'll just get it right there,
d structuring.

64
00:03:30.330 --> 00:03:36.268
Isn't it a six or is it the same thing as
&gt;&gt; Scott Moss: rs.hello.

65
00:03:36.268 --> 00:03:41.881
It's the same thing as saying
&gt;&gt; Scott Moss: The same thing.

66
00:03:41.881 --> 00:03:43.850
I just the structure in there.

67
00:03:43.850 --> 00:03:46.510
Another pattern that I follow
was to always put arguments

68
00:03:46.510 --> 00:03:48.040
on a property called input.

69
00:03:49.090 --> 00:03:52.820
So when you see me do input
we start writing inputs.

70
00:03:52.820 --> 00:03:56.200
I always use the variable name
input which has nothing to do with

71
00:03:56.200 --> 00:03:57.700
the input type in graghic.

72
00:03:57.700 --> 00:04:00.520
I just name it input that way
I know in some of our resolver

73
00:04:00.520 --> 00:04:02.110
there is always input argument.

74
00:04:02.110 --> 00:04:05.000
The only time I wouldn't use input if
it was just one argument like an id,

75
00:04:05.000 --> 00:04:06.250
I'll just put ID.

76
00:04:06.250 --> 00:04:09.310
But it's like, you're doing an update,
cool, here's an input.

77
00:04:09.310 --> 00:04:11.740
So, I know it's always called input.

78
00:04:11.740 --> 00:04:13.210
It helps you a lot when you start writing.

79
00:04:13.210 --> 00:04:17.750
Otherwise you have to remember
every signature of every single

80
00:04:17.750 --> 00:04:19.330
mutation that you wrote.

81
00:04:19.330 --> 00:04:20.290
And that can be tedious,

82
00:04:20.290 --> 00:04:22.790
it's better to just give them all the same
name, it's like there's an input.

83
00:04:24.130 --> 00:04:25.100
So, that's the second argument.

84
00:04:26.170 --> 00:04:28.200
The third argument is gonna
be called the context.

85
00:04:29.830 --> 00:04:34.290
Context is, remember when we did
this down here, this context object?

86
00:04:34.290 --> 00:04:35.880
That's what context is.

87
00:04:35.880 --> 00:04:37.970
It's kind of like a root value, except for

88
00:04:37.970 --> 00:04:42.430
it's more like, it's not just values
you can pass functions down here.

89
00:04:42.430 --> 00:04:46.120
Pretty much anything that needs to
be shared for all your resolvers.

90
00:04:46.120 --> 00:04:49.180
So in this case, the context is
the request that was coming.

91
00:04:49.180 --> 00:04:51.380
So we passed the request down,
we passed the user down.

92
00:04:51.380 --> 00:04:52.380
So that's the context.

93
00:04:52.380 --> 00:04:53.170
You'll use this one a lot.

94
00:04:53.170 --> 00:04:56.950
And then the last one
which you will probably

95
00:04:56.950 --> 00:05:01.190
almost never use unless you're
going to advance is info.

96
00:05:01.190 --> 00:05:06.470
And this is going to be the native AST for
the graph QO cree that came in.

97
00:05:06.470 --> 00:05:09.430
If you're going to log this
you'll see some crazy stuff.

98
00:05:09.430 --> 00:05:12.500
But it's very helpful to do
optimizations for the data base created.

99
00:05:12.500 --> 00:05:13.880
First you can take this AST.

100
00:05:13.880 --> 00:05:19.115
You can feed it to Mongo and for
instance if I did a query where

101
00:05:19.115 --> 00:05:23.840
I only asked
&gt;&gt; Scott Moss: Let's go back here.

102
00:05:25.710 --> 00:05:28.700
So let's say I did a query
where I only asked for the id.

103
00:05:28.700 --> 00:05:32.060
That ast that comes in, that object
that's gonna represent this query,

104
00:05:32.060 --> 00:05:33.400
is only gonna have an id property on it.

105
00:05:33.400 --> 00:05:36.710
So they're not gonna tell Mongo to only
query for the id field and not query for

106
00:05:36.710 --> 00:05:38.400
all the fields.

107
00:05:38.400 --> 00:05:40.990
And then give it to GraphQL,
have GraphQL only pop off the ID,

108
00:05:40.990 --> 00:05:42.200
because that's what would happen.

109
00:05:42.200 --> 00:05:47.420
So by saving the database queries,
I can use that AST to tone my database

110
00:05:47.420 --> 00:05:50.590
to only query for
these fields that were asked for.

111
00:05:50.590 --> 00:05:53.948
So that is like an optimization you could
do, at least the problems with caching,

112
00:05:53.948 --> 00:05:55.620
especially if you're doing a.

113
00:05:55.620 --> 00:05:58.210
So you gotta figure that out.

114
00:05:58.210 --> 00:05:59.260
But yeah you can do that.

115
00:06:00.570 --> 00:06:05.590
But you will almost never use info,
but I mean I'll log it for

116
00:06:05.590 --> 00:06:07.740
you so you can see what it'd look like.

117
00:06:07.740 --> 00:06:10.560
But If you want to see raw graph gill
looks like I'll just log this for

118
00:06:10.560 --> 00:06:13.440
you here so you can run this.

119
00:06:18.200 --> 00:06:23.070
Run our query, we'll go back and here
you go, here is the ast for that query.

120
00:06:23.070 --> 00:06:26.960
Here is the field name,
that's called gitny, all the notes.

121
00:06:26.960 --> 00:06:31.730
This is the raw graphical query
associated with that, the schema,

122
00:06:31.730 --> 00:06:34.060
any directives we've not
talked about directives.

123
00:06:35.790 --> 00:06:38.510
Pretty much everything associated
with that, so you could take this.

124
00:06:38.510 --> 00:06:45.820
And you can see that you can use this
information to associate to your database.

125
00:06:45.820 --> 00:06:47.950
What you actually need to query and
what you don't need to query.

126
00:06:47.950 --> 00:06:49.950
So like I said you probably
almost never use this.

127
00:06:49.950 --> 00:06:52.950
This is for very, very advanced cases.

128
00:06:52.950 --> 00:06:55.480
And you'll probably
just will never use it.

129
00:06:55.480 --> 00:06:56.930
But it's there.

130
00:06:56.930 --> 00:07:01.980
Most of the time what you are gonna be
using It's going to be are's in context,

131
00:07:03.030 --> 00:07:04.400
probably never even filled this in.

132
00:07:04.400 --> 00:07:07.820
This will be just a place holder until
you get to the next step resolvers.

133
00:07:07.820 --> 00:07:14.380
Then you have to use this one but
most likely just these two in context.

134
00:07:14.380 --> 00:07:16.150
That's the signature for a resolver.

135
00:07:16.150 --> 00:07:19.930
Now for an actual resolver
Here's how you would hook it up.

136
00:07:19.930 --> 00:07:24.290
So we're using graphql-tools, which allows
us to hook it up in a specific way.

137
00:07:24.290 --> 00:07:27.158
Depending on what implementation you use,
you hook up your resolvers differently.

138
00:07:27.158 --> 00:07:30.820
We're using graphql-tools, I prefer this
method, it makes so much more sense to me.

139
00:07:30.820 --> 00:07:34.721
So the way it works is,
if we go look at the graphql file,

140
00:07:34.721 --> 00:07:38.632
we have a type called Query here,
right, on this user.

141
00:07:40.490 --> 00:07:41.880
&gt;&gt; Scott Moss: Guess what that's doing?

142
00:07:44.497 --> 00:07:46.410
&gt;&gt; Speaker 2: Queries the user?

143
00:07:46.410 --> 00:07:49.740
&gt;&gt; Scott Moss: GetMe queries the user,
but what do you think this is doing?

144
00:07:49.740 --> 00:07:52.710
We know what this is doing,
right, type User?

145
00:07:52.710 --> 00:07:54.901
That creates a user type,
what is this doing?

146
00:07:54.901 --> 00:07:56.570
&gt;&gt; Speaker 3: Creating [INAUDIBLE] type.

147
00:07:56.570 --> 00:07:58.180
&gt;&gt; Scott Moss: Yeah,
it's creating a Query type, yep.

148
00:07:58.180 --> 00:07:59.743
It creates a Query type,

149
00:07:59.743 --> 00:08:04.533
and that Query type gets associated And,
&gt;&gt; Scott Moss: Here,

150
00:08:04.533 --> 00:08:05.520
there's our queryType.

151
00:08:05.520 --> 00:08:07.880
It gets associated to this query here.

152
00:08:07.880 --> 00:08:09.440
I just put in the user file.

153
00:08:09.440 --> 00:08:12.760
You only make the queryType one time and
the mutationType one time.

154
00:08:12.760 --> 00:08:17.750
So we made a queryType, and inside that
queryType we made a query called getMe.

155
00:08:17.750 --> 00:08:20.930
I'm gonna get rid of this because
we don't need these right?

156
00:08:20.930 --> 00:08:25.800
So we made another one called getme
notice the name, getme, camel case right.

157
00:08:25.800 --> 00:08:33.300
I'm gonna pull the resolvers,
look at that it is also called getme.

158
00:08:33.300 --> 00:08:35.660
Inside here the function
name these have to match.

159
00:08:35.660 --> 00:08:39.950
If they dont match it will break and
in fact everything has to match.

160
00:08:39.950 --> 00:08:45.750
So I have user resolvers, I defined for
the Query with a capital Q.

161
00:08:45.750 --> 00:08:48.400
Ehich is exactly the same over here,
Query.

162
00:08:48.400 --> 00:08:51.930
That I want to make a Query called getMe.

163
00:08:51.930 --> 00:08:54.700
And I don't have to put it twice,
cuz it's ES6, right?

164
00:08:54.700 --> 00:08:55.381
It just looks it up.

165
00:08:57.621 --> 00:08:59.120
&gt;&gt; Scott Moss: And it's called getMe.

166
00:08:59.120 --> 00:09:01.680
If I change the name of this,
this will break.

167
00:09:01.680 --> 00:09:05.730
If I say, getMeee, you know it's getMe,

168
00:09:05.730 --> 00:09:07.820
now I'm going to get
an error mostly likely.

169
00:09:07.820 --> 00:09:10.420
Right here.

170
00:09:10.420 --> 00:09:12.630
Says it right here, Cannot apply update.

171
00:09:12.630 --> 00:09:16.480
Query dot getMeee defined in resolvers,
but not in schema.

172
00:09:16.480 --> 00:09:18.360
You need to restart your application,
all right?

173
00:09:18.360 --> 00:09:19.720
That's because they're saying,

174
00:09:19.720 --> 00:09:23.510
Hey you defined a resolver
called getMe with three E's.

175
00:09:23.510 --> 00:09:25.840
But inside your schema
you don't have that.

176
00:09:25.840 --> 00:09:28.000
So that's why it's freaking out.

177
00:09:28.000 --> 00:09:28.834
So they have to match.

178
00:09:30.538 --> 00:09:32.780
&gt;&gt; Scott Moss: You can turn that error off
if you want, but I do not recommend it.

179
00:09:34.190 --> 00:09:37.770
So if you go back to our resolver and
we replace.

180
00:09:37.770 --> 00:09:39.610
We go back, it didn't match it.

181
00:09:39.610 --> 00:09:40.884
So those have to match.

182
00:09:42.667 --> 00:09:43.510
&gt;&gt; Scott Moss: Any questions on that?

183
00:09:44.790 --> 00:09:47.250
So we have our query here,
if we have more queries like for

184
00:09:47.250 --> 00:09:49.780
instance we had get all users.

185
00:09:49.780 --> 00:09:52.520
Then we have to go inside of here and
do get all.

186
00:09:52.520 --> 00:09:56.036
Like now we're gonna make
another one called get all,

187
00:09:56.036 --> 00:09:58.337
and that returns an array of users.

188
00:09:59.893 --> 00:10:01.820
&gt;&gt; Scott Moss: Then now we have
the make a get all over here.

189
00:10:01.820 --> 00:10:05.750
The same would happen if I put in
a schema Don't put in the resolver.

190
00:10:05.750 --> 00:10:06.575
Also get an error.

191
00:10:11.311 --> 00:10:14.160
&gt;&gt; Scott Moss: Or maybe not,
maybe doesn't give me an error.

192
00:10:14.160 --> 00:10:15.629
Maybe it doesn't give me
an error unless I run it.

193
00:10:17.141 --> 00:10:18.557
&gt;&gt; Scott Moss: Get.

194
00:10:21.534 --> 00:10:23.166
&gt;&gt; Scott Moss: All right,
it didn't even show it.

195
00:10:23.166 --> 00:10:24.303
Did I not save it?

196
00:10:26.928 --> 00:10:28.143
&gt;&gt; Scott Moss: Get all.

197
00:10:30.292 --> 00:10:32.925
&gt;&gt; Scott Moss: I gotta refresh GraphICL
yeah sometimes you've gotta refresh

198
00:10:32.925 --> 00:10:35.730
GraphICL because
the introspection query is old.

199
00:10:35.730 --> 00:10:36.885
So make sure you do that.

200
00:10:39.411 --> 00:10:42.651
&gt;&gt; Scott Moss: There is get all and
then I'm like cool give me ID, and

201
00:10:42.651 --> 00:10:44.030
then it's like no.

202
00:10:45.500 --> 00:10:50.890
You try to do a user that is non-known but
we don't even know how to resolve this.

203
00:10:50.890 --> 00:10:52.380
you didn't tell us how to resolve it.

204
00:10:52.380 --> 00:10:53.530
So, it's just null.

205
00:10:53.530 --> 00:10:56.600
So, yeah you gonna get an error either
way if you don't match this stuff up.

206
00:10:56.600 --> 00:10:57.514
So make sure they match.

207
00:10:57.514 --> 00:10:59.772
Matched up, that's the first rule.

208
00:11:03.372 --> 00:11:05.301
&gt;&gt; Scott Moss: And
we do have them matched up here.

