[00:00:02]
>> Scott Moss: All right, y'all, welcome back to day two of API Design with Node V2, Front End Masters. So yesterday, we covered and we went through building out an API using Express and Node. We took somewhat of a pragmatic approach, using metaprogramming to generate common things for our REST API.

[00:00:23]
We finished off with some testing, so if you did some of that testing yesterday, that's awesome. Today we're gonna jump right into GraphQL and talk about some different approaches. Walk through one of my favorite approaches with GraphQL and how we can use it together with what we already built yesterday, and then go from there.

[00:00:44]
Before we get started, were there any questions from yesterday that anyone didn't get a chance to ask? Or if they went home and wrote some tests and then maybe ran into something and they want to talk about it?
>> Scott Moss: Nope, nobody writes tests anymore? [LAUGH] Tests? It worked on my machine.

[00:01:00]

>> Speaker 2: [LAUGH]
>> Scott Moss: [LAUGH]
>> Scott Moss: Okay, what is Graph, who here has used GraphQL?
>> Scott Moss: Okay, Scott, give me a definition of what is GraphQL to you? What is it?
>> Speaker 2: It's a data query language that allows us to define exactly what we're looking for from the backend without,

[00:01:25]

>> Speaker 2: Yeah.
>> Scott Moss: Yeah, that sounds right. A query language that lets you define exactly what you want for the back end and consume it in such a way. Okay, what about you?
>> Speaker 2: [LAUGH] Yeah, I don't know that I have much to add. I think this is pretty good.

[00:01:39]
It's a sync. I think that it's nice because it's, yeah, it provides the data that the client needs. It's not [INAUDIBLE] massive amount of-
>> Scott Moss: Nice, okay. And both the definitions I like that both of you all mentioned that it's what the client wants. And that's what very important about GraphQL.

[00:01:56]
It's an approach from the client's perspective, hey, this is what I want. So what is GraphQL? This is the definition I got from the Internet. GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time and enables powerful developer tools.

[00:02:28]
Yeah, that's an Internet definition, right? So what is it really? Here is my definition of GraphQL. It's a query language for your API. Clients describe how they want their data and the shape of it using a query language very similar to JSON. So if you know JSON, you'll see some familiarities with GraphQL.

[00:02:48]
There's definitely some differences but you'll seem very familiar with it. Those requests are validated with against a schema that you create on your server. So you have the queries that your client sends. Your server has a matching schema that validates those queries. And then your server then satisfies the shape however it wants using the resolvers.

[00:03:06]
So basically you could think of it as, who here has used TypeScript? It's like TypeScript for your APIs, almost. It's like you can put an abstraction in front of your API that strictly prohibits what shapes and basically, what shapes of data that could come through your API. And GraphQL strictly checks that.

[00:03:27]
And it allows the client to descriptively say hey, I want this object, with this name, with these properties, in this order, in this shape. And then on the backend, you respond to that using resolvers. That sounds pretty complicated, usually you're like wait, how do I do all that?

[00:03:44]
You'll see, and it does all this with one URL. There's not many, you know with RES we had to make different URLs for different resources, different actions? GraphQL does this with one URL. There's only one, ever. So can be used in tandem with your current API. So we build the REST API yesterday, we could use GraphQL together with the rest, sitting side-by-side.

[00:04:08]
We can have GraphQL underneath the REST API. We can have GraphQL on top of the REST API. It's pretty much however you wanna do it. Today we're going to use them together side-by-side. And at the end of the day, I'm gonna talk about how you can have GraphQL sit underneath REST and also next to it at the same time.

[00:04:27]
Only needs one route for all requests, and you'll see what I'm talking about. That sounds crazy. It sounded crazy to me the first time. I was like how? That doesn't make any sense. You'll see. Doesn't care about how you resolve the data, it just has to match the shapes.

[00:04:41]
So remember when we made controllers yesterday? Those controllers respond to all the routes that we created. You could think of resolvers as controllers, but way more granular. Whereas a controller responds to a request, a resolver responds to a shape or a field on a shape. It can literally respond to just one field.

[00:05:00]
It depends on how you write your resolvers. So you can think of them just like microcontrollers that can do whatever they want.
>> Scott Moss: You don't need versions every again for your API because the URL is always the same and you can change your schema as much as you want.

[00:05:16]
You might need version for schema [LAUGH] or your data types, but you definitely don't need versions for your API. It's the same API, its the same URL. So don't have to do that anymore. And once you learn it, if you do a lot of client side development, you're gonna love GraphQL, you're gonna love it.

[00:05:31]
The benefit of GraphQL might not be so obvious on the server until you start doing advanced things, then you'll see it. But the benefit is immediate if you're writing client code. If you're writing anything client, whether that's mobile or Web, you'll immediately see the benefit of GraphQL. So although we're doing the service side today, we are gonna go over some stuff where you can see the benefit.

[00:05:51]
But the benefit is definitely way better on the front end, where you're consuming the API. The consumer of the API definitely benefits from GraphQL moreso than the implementer of the API. Does that make sense? Okay, cool. Any questions on this? Go.
>> Speaker 2: So would this be considered kind of a replacement for the need to have filters and things like that, that you would typically use when you're doing a REST API?

[00:06:14]

>> Scott Moss: So GraphQL itself does not do the filtering. You have to implement the filtering yourself in the resolvers. But it provides the mechanism that facilitiates that filter. So just like you would in REST, for instance, if you made a REST call. And on the query string you were like I want to get slash user query string first name equals whatever.

[00:06:37]
You would still have to build that in your controller. You still gotta do that in your resolver. It's very much the same, it's just the way GraphQL provides it, it's way more strict. For instance if you did that in REST, you would have to check to see if that query string was there and do some stuff.

[00:06:52]
Whereas GraphQL, it's guaranteed there if you said it has to be there, otherwise it wouldn't have gotten there. It wouldn't have even got past GraphQL cuz GraphQL would be like no, I need a filter here. You're not even going there. So it's very strict like that. All of this will make sense when we start building but, yes, you can do all of that.

