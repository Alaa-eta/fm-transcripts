[00:00:02]
>> Scott Moss: What we are gonna do, though, is this. So you need to complete the schemas in the resource models, and then get the model specs to pass. So every resource, which we only have three right now, which is Playlist, Song, and User, there is a .model file. You need to get them to pass.

[00:00:19]
Now you might be thinking, well, I don't even know what to put in here. Well if you run the tests you'll see that it all fails. The test is descriptive enough to tell you what fields you need and what properties need to be on those fields. So look at the tests, if you want to actually look at the tests, each resource has a dot spec file and you can actually read the test it will tell you.

[00:00:41]
For instance if you look at the song model it says, a song model should have a title, even though it's spelled wrong. Title, it expects it to exist. It expects the required to be an array. Now this is tricky because I didn't tell you how to make an array with Required.

[00:00:58]
I only told you how to do it with a Boolean. So I'm not gonna be a jerk, I'm actually just gonna show you how to do this right now. So right now before I was like, you can put required true. But you can also make required an array like this, and the second argument is the custom error you want to be droned when this is not validated.

[00:01:15]
So required true, it'd be like, yo dogs must have names homie. Right, so that is a custom error that's gonna be thrown when you don't pass in a name. So the test is looking for something like this. So it's saying the required validation must be an array. So when that test fails and you're like, I don't know how to put in an array for Required, that was only Boolean.

[00:01:38]
They're talking about this. This allows you custom error message. This is something so small, but something so helpful. If you look at the logs. Just to see that error and go, I know what's going on. If you don't do that, Mongoose will throw the most obscure error and it'll be like duplicate key 1100.

[00:01:53]
What? What is that? I don't know what's going on. This is way easier to read. So highly recommend doing that. So yeah, get those tests to pass. All the model tests should pass, and when I say all the model tests, let me run the tests so you can see what I'm talking about.

[00:02:14]

>> Scott Moss: You see every single one that has model on it, which are 11 tests. They should all be passing, pretty much all your tests should be passing except for the ones in blue right now cuz they're being skipped. So after you get done with this all your tests, you should either see all green and blue, and that's it, there should be no red.

[00:02:33]

>> Speaker 2: Five right?
>> Scott Moss: So again use the language that I wrote in the test, look at the error messages to kind of figure out what you need to do here. If all all else fails, ask me. If you don't wanna ask me for whatever reason, there is a solution branch.

[00:02:54]
But I highly recommend going through this and reading the test. It's a really good- I'm not really a big fan of TDD. Who really does TDD? But on the backend I actually find myself doing TTD a lot for some reason. On the front end I can almost never do it.

[00:03:09]
I just can't. I have to built this feature, I've got to test it out I've gotta check out these browsers and then I'll wrote code to keep it there. But on the back end, I know exactly what needs to happen. There is no fragmentation of browsers, it's going to run exactly the same in the same run time.

[00:03:25]
So it's easy for me to visualize tests. So, I will actually come in and prefer to have test on the backend, and then build my code off of that. So this is a good practice for that. So, think about that. So these tests are done for you, so if you are given these test as like here, here is some tests, write the code for this.

[00:03:40]
This is a good assignment for it, I think it works very well in the back end, I don't think it works that well in the front end.
>> Speaker 2: It's cuz in the back end it's data in data out.
>> Scott Moss: Yeah.
>> Speaker 2: Here's your data, that's posted, or here's a route, and then you need to serve the appropriate data.

[00:03:56]
So in the API it's like, okay well if it's authenticated, if it's not authenticated, give these response codes [CROSSTALK] Exactly. With this data.
>> Scott Moss: Yeah.
>> Speaker 2: It's really just data in, data out, and so you can write your entire test for your entire API.
>> Scott Moss: Yeah.
>> Speaker 2: Designing just from the data in, data out.

[00:04:16]
And then you could do the code later.
>> Scott Moss: That's true, I've never thought about it that way. Yeah, that makes sense, the front end's, [LAUGH] there's so much. That's nothing to do with that at all, that's one part of it.
>> Speaker 2: Yeah, I mean buttons, interactions.
>> Scott Moss: Right.

[00:04:29]

>> Speaker 2: Asynchronous data, all that stuff. But especially with an API like a REST API.
>> Scott Moss: Right.
>> Speaker 2: Even in GraphQL, [INAUDIBLE].
>> Scott Moss: Yep, and it's crazy because it's shifted. It used to be the fact that we're, you would imagine the back end just being way more complicated to build features around and stuff.

[00:04:48]
The front end is, this is for kids. It's a kiddie language. It's the front end. But now it's just like, actually the front end is so difficult to build stuff in now, and the back end is just, it's just so easy. It's so easy. I'm sure dev ops is a whole other thing, but building the actual application of back end is.

[00:05:02]
I find it way more satisfying than building code for the front end. Unless I build something that's super snazzy in frontend with animation or something and that's awesome. But the dev process and writing the code and going through it is way more satisfying on the backend for me personally.

