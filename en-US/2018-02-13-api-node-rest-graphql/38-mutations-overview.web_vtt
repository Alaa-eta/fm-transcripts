WEBVTT

1
00:00:02.430 --> 00:00:05.633
&gt;&gt; Scott Moss: All right,
so what we got next

2
00:00:05.633 --> 00:00:10.687
is,
&gt;&gt; Scott Moss: So

3
00:00:10.687 --> 00:00:12.943
we just did Resolvers,
we got mutations next.

4
00:00:12.943 --> 00:00:15.888
Okay, anybody remember what
I said mutations were?

5
00:00:17.924 --> 00:00:20.597
&gt;&gt; Speaker 2: They're
updating the database.

6
00:00:20.597 --> 00:00:26.062
Yeah, it's this you want to mutate your
data source, or data sources, or whatever.

7
00:00:26.062 --> 00:00:28.559
Yeah, you basically wanna, like,
make a change back there somewhere.

8
00:00:28.559 --> 00:00:32.960
So, the equivalent to RSS would be put,
post, delete, right.

9
00:00:35.435 --> 00:00:38.672
&gt;&gt; Scott Moss: So, used whenever you
need to make a change to a data source,

10
00:00:38.672 --> 00:00:39.888
as in the word mutate.

11
00:00:39.888 --> 00:00:43.401
That's why it's called mutations,
you're mutating a data source.

12
00:00:43.401 --> 00:00:47.210
If you're not gonna mutate a data source,
then you're probably only asking for

13
00:00:47.210 --> 00:00:48.677
data, so use a query instead.

14
00:00:48.677 --> 00:00:51.633
Useful for POST / PUT / DELETE requests.

15
00:00:51.633 --> 00:00:55.935
They usually take arguments,
otherwise I wouldn't know you would.

16
00:00:55.935 --> 00:00:58.282
You know, unless you just had like,

17
00:00:58.282 --> 00:01:02.688
a persistent mutation that always
did the same mutation every time.

18
00:01:02.688 --> 00:01:03.852
But if that was the case,

19
00:01:03.852 --> 00:01:06.802
you would be mutating something
that is constantly changing.

20
00:01:06.802 --> 00:01:10.067
So, I think most of the time,
all of these will always take arguments.

21
00:01:10.067 --> 00:01:13.979
I've never run into an example of
a mutation that didn't take an argument.

22
00:01:13.979 --> 00:01:17.337
If you do, then you can probably
get away with it with just a query.

23
00:01:17.337 --> 00:01:18.286
So think about that,

24
00:01:18.286 --> 00:01:21.734
think about what your client needs as
a response from the result of the input.

25
00:01:21.734 --> 00:01:26.178
This was important because the community
really hasn't like figure out what's

26
00:01:26.178 --> 00:01:29.194
the best way,
what should you return from a mutation?

27
00:01:29.194 --> 00:01:30.950
That's because it depends on your app.

28
00:01:30.950 --> 00:01:33.934
Think about this, if you made a,
we have a rest API, right?

29
00:01:33.934 --> 00:01:38.082
Now let's say from your app,
your to do app you issued a, post request,

30
00:01:38.082 --> 00:01:39.588
you created as a due item.

31
00:01:39.588 --> 00:01:42.080
What do you expect to get
back from that post request?

32
00:01:44.843 --> 00:01:45.731
&gt;&gt; Scott Moss: The creative source.

33
00:01:45.731 --> 00:01:46.467
&gt;&gt; Speaker 2: The new ID.

34
00:01:46.467 --> 00:01:49.333
&gt;&gt; Scott Moss: The ID,
you said the creative resource.

35
00:01:49.333 --> 00:01:50.243
I mean you never know.

36
00:01:50.243 --> 00:01:51.284
It depends on what your app is.

37
00:01:51.284 --> 00:01:53.884
Maybe your to do app needs
the full to do back.

38
00:01:53.884 --> 00:01:55.342
Maybe it only needs the ID.

39
00:01:55.342 --> 00:01:58.339
Maybe it needs to say, okay, I don't know.

40
00:01:58.339 --> 00:01:59.541
That's what this is saying.

41
00:01:59.541 --> 00:02:03.620
Depending on what your app needs back,
just make sure you respond appropriately.

42
00:02:03.620 --> 00:02:04.991
Because the mutation does the same thing.

43
00:02:04.991 --> 00:02:07.333
You create something, but
you also ask for something back.

44
00:02:07.333 --> 00:02:10.482
So it's like a creation, and
a query at the same time.

45
00:02:10.482 --> 00:02:13.713
So although you'll be creating something,
you need to say, this is what I want back.

46
00:02:13.713 --> 00:02:14.822
So, depending on your app,

47
00:02:14.822 --> 00:02:17.236
you need to make sure you're
getting back what you need back.

48
00:02:17.236 --> 00:02:19.585
I would say, for
most clients using GraphQL,

49
00:02:19.585 --> 00:02:23.392
you'll probably need back at minimum
the ID and the changes that you made.

50
00:02:23.392 --> 00:02:25.215
Because, most GraphQL mutations,

51
00:02:25.215 --> 00:02:29.285
are probably used in something locally
that uses cashing, like Apollo or Relay.

52
00:02:29.285 --> 00:02:33.459
And, to update your local cache, you need
a reference to the thing to update, and

53
00:02:33.459 --> 00:02:36.198
that usually consists of
the ID plus something else.

54
00:02:36.198 --> 00:02:38.472
And then,
you also need the things that you updated.

55
00:02:38.472 --> 00:02:42.847
Because most likely, that cache is like,
reflecting what’s on your UI.

56
00:02:42.847 --> 00:02:45.587
So if you don’t update that cache,
well what you just updated or

57
00:02:45.587 --> 00:02:48.093
what you just created, then now,
your UI’s out of date.

58
00:02:48.093 --> 00:02:51.997
So most likely, you would need the ID
plus the things you updated, minimally,

59
00:02:51.997 --> 00:02:54.693
ideally, you would just ask back for
the whole thing.

60
00:02:54.693 --> 00:02:56.807
Like, just give me back the whole thing,
the whole thing,

61
00:02:56.807 --> 00:02:59.148
even stuff I didn’t update,
just give me back the whole object.

62
00:02:59.148 --> 00:03:01.348
So that's what I would say.

63
00:03:01.348 --> 00:03:03.540
You can only do one mutation at a time.

64
00:03:03.540 --> 00:03:06.531
And you might be asking okay,
are we gonna do one query at a time?

65
00:03:06.531 --> 00:03:07.863
Actually, you can do more
than one query at a time.

66
00:03:07.863 --> 00:03:09.759
I forgot to mention that.

67
00:03:09.759 --> 00:03:12.852
And what that looks like is,
it's not really that complicated,

68
00:03:12.852 --> 00:03:14.773
it's basically saying you can do this.

69
00:03:14.773 --> 00:03:20.159
So if I'm doing a query, of all playlists,
let's just keep it simple.

70
00:03:20.159 --> 00:03:24.209
I can also right underneath it,
I can say, I wanna do songs too.

71
00:03:28.829 --> 00:03:30.766
&gt;&gt; Scott Moss: Then I
also wanna do all songs.

72
00:03:36.738 --> 00:03:38.871
&gt;&gt; Scott Moss: You can do that,
and obviously I get an error,

73
00:03:38.871 --> 00:03:40.251
because stuff's messed up.

74
00:03:40.251 --> 00:03:41.911
This one's messed up right here.

75
00:03:41.911 --> 00:03:43.660
[SOUND] There we go.

76
00:03:48.427 --> 00:03:50.842
&gt;&gt; Scott Moss: So you can do more
than one query, in one query.

77
00:03:50.842 --> 00:03:53.023
Does that make sense?
This is one request that I did.

78
00:03:53.023 --> 00:03:54.336
And I did multiple queries.

79
00:03:54.336 --> 00:03:57.693
And they're all based of the name.

80
00:03:57.693 --> 00:03:59.060
So again, you can a-list these.

81
00:03:59.060 --> 00:04:00.970
So you can say, these are the playlists.

82
00:04:02.143 --> 00:04:05.239
&gt;&gt; Scott Moss: [SOUND]
These are the songs.

83
00:04:05.239 --> 00:04:10.609
[SOUND] And now when you run this,
&gt;&gt; Scott Moss: You'll

84
00:04:10.609 --> 00:04:13.050
get playlists and songs.

85
00:04:13.050 --> 00:04:13.562
Pretty cool.

86
00:04:13.562 --> 00:04:14.795
So you can't do this in mutations.

87
00:04:14.795 --> 00:04:16.029
You can only do one mutation.

88
00:04:16.029 --> 00:04:23.846
You can't do many of them
&gt;&gt; Scott Moss: And

89
00:04:23.846 --> 00:04:26.327
they must also have Resolvers.

90
00:04:26.327 --> 00:04:28.468
So, they're not different than queries.

91
00:04:28.468 --> 00:04:31.369
You also still need to find a way
to resolve these, because one,

92
00:04:31.369 --> 00:04:33.861
you need to mutate the thing
you're trying to mutate.

93
00:04:33.861 --> 00:04:38.185
And then you also need to send back
what the client is asking for.

94
00:04:38.185 --> 00:04:40.677
So they also have to have Resolvers.

95
00:04:40.677 --> 00:04:42.070
Any questions on mutations?

96
00:04:45.890 --> 00:04:46.684
&gt;&gt; Scott Moss: No?
Okay, so,

97
00:04:46.684 --> 00:04:50.953
I'm gonna walk you through how to make
a mutation from the client's perspective.

98
00:04:50.953 --> 00:04:54.509
Then we'll walk through how to create
a mutation on the schema perspective.

99
00:04:54.509 --> 00:04:59.225
And then you'll create some mutations,
and then from there, you should

100
00:04:59.225 --> 00:05:04.107
be able to come in graphical, create
some data, and query some data, yes?

101
00:05:04.107 --> 00:05:06.826
&gt;&gt; Speaker 3: So, if you do multiple
queries and modem returns an error, do you

102
00:05:06.826 --> 00:05:10.151
get data for the one that was successful,
and an error for the one that wasn't?

103
00:05:10.151 --> 00:05:12.160
&gt;&gt; Scott Moss: It depends on your setup,
by default.

104
00:05:12.160 --> 00:05:17.965
You should, so
let's back to what I had here.

105
00:05:17.965 --> 00:05:23.786
So, this one's definitely gonna throw
an error, cuz this is not a real ID.

106
00:05:23.786 --> 00:05:26.197
And right now, it's saying,
no, you don't get anything.

107
00:05:26.197 --> 00:05:28.645
So I guess by default,
you're just gonna get anything,

108
00:05:28.645 --> 00:05:30.027
it's more like a transaction.

109
00:05:30.027 --> 00:05:33.380
Whereas like, in a database, if you
wrote a transaction, if one thing fails,

110
00:05:33.380 --> 00:05:34.540
it completely just stops.

111
00:05:34.540 --> 00:05:37.056
So this case,
we had an error from this one query.

112
00:05:37.056 --> 00:05:42.112
So the whole thing erred, you can prevent
this if you want, it's totally up to you.

113
00:05:42.112 --> 00:05:45.414
But yeah, I guess depending on our
interpretation, using Apollo, GraphQL,

114
00:05:45.414 --> 00:05:47.350
yeah, you get one error everything's done.

115
00:05:54.258 --> 00:05:55.979
&gt;&gt; Scott Moss: Cool, any other questions?

116
00:05:59.550 --> 00:06:00.079
&gt;&gt; Scott Moss: No?

117
00:06:00.079 --> 00:06:00.886
Okay.

