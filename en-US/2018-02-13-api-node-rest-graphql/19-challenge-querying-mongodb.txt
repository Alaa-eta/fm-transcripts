[00:00:02]
>> Scott Moss: Okay cool, so just hop right into some codes then. I'm gonna check out to,
>> Scott Moss: Lesson-6.
>> Scott Moss: Oops,
>> Scott Moss: There we go [COUGH] the side of here, if you go to modules, create JS, back into this file. Basically, what you're gonna be doing, so we're gonna be trying to get the test the pass for the query.

[00:00:34]
if you run the test right now, you should get some failing tests for the query, that are uncommented now. It should be four of them, two of them are already passing, cuz they're like very naive tests, but four of them are failing. And we need to get them to pass, and then we also need to make sure the ones that are passing are not falsely passing, which I'm sure they are right now.

[00:00:55]
So basically what were gonna do is you're gonna come in here, inside of this controller. The controller object and you're gonna creates the appropriate database calls for each action. I didn't show you how to do this yet, so we're gonna walk through some examples of each single one, to show you how to do it, how to use it with monitors, so let's talk about that for a minute.

[00:01:17]
Let's just go, let me see, that's a document. That's a documents, that's a documents, its a model. Okay cool, let's do this, I'm just gonna come down here, blank canvas. And let's talk about using a model and getting a document, from the database and all the different ways you can do that, using Mongoose.

[00:01:38]
So let's say I have a model, a Mongoose and in our case a model is a song, a user or a playlist. Was the only models we have. All right, let's just say we have a song, okay? I can use that song model. And let's say, I have an ID, I have an ID from the parameter and I wanna find the song with that given ID.

[00:01:59]
Using Mongoose, I can say Song findById and I can pass in an ID like that. This is gonna return a Promise, by default Mongoose uses like their own implementation of promises. I converted it to use the native promises. So, whatever the native promise has you have here, right?

[00:02:18]
But actually, actually what happens is this thing actually returns a query what's called a mongo, come back. It actually returns a, mongo query object which has a promise on it. A query object will get to, we'll talk about it briefly level but we gonna really use it here, this allows you to drill down your query.

[00:02:37]
Kinda like SQL, were you can like, I wanna find my ID really, you wouldn't need a query but let's see do the generic find. So I wanna find all songs where created at was this. If this rejects is true, exact text match this, that's the query objects you wanna drill down on it.

[00:02:54]
We're not gonna do that right now. So finding by ID's pretty simple. But if you just want the pure premise, you can just go ahead and call that exec, I recommend doing that. This means execute the query that's what that means. So if you put that exec, on anything that starts with find, so if its song.findById and then put that exec ever.

[00:03:11]
That means, there's no, there's no more query coming out there. Like, for instance, so I can come here like say .where(), .limit(), .whatever. When I do that .exec() that means there's nothing else coming out there. That's what that means. It means execute this query, give me the promise.

[00:03:29]
Because, I'm not doing any query here I'm just gonna jump straight to execute.exec. This returns a promise, and you could probably just go ahead async/await it. So, I have a song here. There you go, so that would be a song. Did you never use async/await don't worry about it, just use a premise.

[00:03:47]
If you're just like what is that? It's cool, you could just use premises, it's told us the same thing. I just like to use a single weight, cause it's legit. So that's how you find one by ID. Lets say we wanted to, find one not by an ID but by a name.

[00:04:04]
So we'd say Song.findOne(), and then we pass in the query that we want. So we wanna find one who's name equals like, thisname, that'll give us that and then we can also call .exec(). And that's how you would find one by a name. Or whatever property you wanna pass in here, whatever thing you wanna search by.

[00:04:27]
But note, when you created your schema. You didn't create any indexes by default. So, when you start thinking about how you wanna search for data, this is just a data modelling thing. Make sure you're creating indexes on things you wanna search, to keep your queries fast. If you don't know anything about indexes and databases, it's basically just like a place, a place where the databases references properties and values, so they can look them up faster, right?

[00:04:54]
It's like a constant time lookup almost, like, it's the difference between like having an array or an object. An object is constant time, right? You can go straight there. Whereas an array's linear, so the bigger the array, the longer it's gonna take to search. Constant time is you know, alter in, so though I mean 0 1 so it'll get it instantly.

[00:05:11]
So
>> Scott Moss: So you got that, let's say you wanted to create a song. There's so many ways you can do that, but my preferred way is use song.create and then pass it in the object that satisfies the song schema, right? So you just do that, you can also do something like this.

[00:05:32]
It's a new song, and then you'll pass that in, and then afterwards, you would have to call safe to save it. That's how you create, and then, let's say you wanted to update. You can say Song.findoneAndUpdate(). You pass in the thing you wanna find by, I wanna find the one with this name, and I wanna update it with a new name called other name.

[00:06:05]
And I'm gonna pass in these options, called new: true. New: true's important, it just means return the new updated. Document from this query and not the one before I updated it. If you don't put new: true it'll give you the old one before you updated. If you put new: true it'll give it to you after you updated it.

[00:06:21]
That's probably what you want. You probably wanna get it after you update it. So you had the new: true. I dunno why that's not default. I dunno why you would never not want that, but yeah. So that's how you find one and update. You can also do, as you probably guessed, findByID and update, and you just pass in an ID in here, instead of an object.

[00:06:45]

>> Speaker 2: If we're using the find by paramo, we always just be finding and then updating later?
>> Scott Moss: Right. So, the next one is because, like you said, you're gonna be finding by params. So, the params gonna find it and it's gonna pass the document along to the request objects.

[00:07:00]
So, you need to wait to update it, right? So, the way you would do that is if you- Now, all this was model level stuff. Why don't we just label that? This is all model level stuff by also you can do it on a model. The updating stuff like you're talking about, that's document level.

[00:07:16]
That's what we're gonna talk about next. So once you already have a document, as in from the params, then you can do this. So once you already have a document, we have song. Song is a document, here it is right here. What we can do, as you can call .save on that, if you want and that will save it.

[00:07:32]
So, for instance, if you had a song, you already have this song right here, and he's like you know what, your name is now this. Your name equals whatever this is now. And I'm gonna call song .save, and it's gonna save in database. And this is async, so you can await this.

[00:07:46]
This also returns a premise.
>> Scott Moss: So that'll give you the newSong. So you basically just, attach the properties you want to it. You can do merge. You can do whatever you want. And then whenever you call .save, that's gonna issue the right to the database. Because this actual object you get back, is not just a regular object.

[00:08:02]
It's a reference to a document that is live. It's a live reference. It's not a JSON thing. If you want this to be JSON, you have to call .lean, which turns it to JSON. Or when you get it back, you don't have to say song.ToJSON or ToObject to convert it.

[00:08:19]
By default, it's gonna be an actual live document that has a save method on it, a remove method on it, a populate method on it. It'll have all those methods on it that it can use to act on itself.
>> Scott Moss: So that's how you would save, an already gathered document.

[00:08:38]
You would just call .save on it. So that's a document level thing. So you have a song.save.
>> Scott Moss: All right, so you're gonna use Season that you also might be using there. I mean you also have like find one and remove, find by ID and remove. And yeah, that's pretty much it.

[00:09:06]
And this works for every single model database, right? It's all the same, so it doesn't really matter. So you're gonna take this. What we learned here about finding one, creating, finding on an update, removing, populating. And we're gonna fill out, this stuff. So for instance, let's just walk through, create one together.

[00:09:26]
So create one, takes some model, takes a body. Judging by those two things, what do you think we need to do?
>> Speaker 2: Model.create model.create, return.
>> Scott Moss: Right, exactly, so, we're gonna return model.create which returns the promise, and we don't wanna create? The body? Exactly, that's it. You don't have to call it .exec on create.

[00:09:46]
.Exec is for anything that starts off with find. So, that's how you would create one. You just call up model.create and you pass to the body, done. So, updateOne, notice the name of the arguments. UpdateOne has a document, does not have a model, cuz' it's a document. We talk about how to update documents, down here, you put the properties on, you hit save, right?

[00:10:08]
You can do a mixing, whatever you want, put those properties on there and you save it. So notice that deleteOne is also a document. Documents know how to remove themselves, remember that. But I don't think the .remove returns itself. I dunno, I can't remember. I'll have to figure that out.

[00:10:27]
Document to get, this one's actually like, we're just gonna do this one right now because it's like, a trick question, usually they just return the same thing. And a Promise, so we can satisfy the Promise API. It's cuz' the document's already there, it's literally already there. This is just here just in case, like I said, you wanted to do something extra like, I need to populate this thing first.

[00:10:47]
Or I wanna get rid of the ID. Like, if you wanted to do something with the properties on it, but, at the end of the day, the param's middle were already found it. So we're just returning what it found. So, lets just patch this straight through. To get all, that takes a model, so imagine what we have to do here.

[00:11:03]
We need to find every single thing on this model. No parameters passed, and then to find my param takes a model, and then an ID. So you can imagine what it needs to do with that.
>> Scott Moss: So once you get all those, you should be able to hit your test, and they should all pass.

[00:11:22]

>> Scott Moss: So I'm gonna leave, this up right here. Basically, your goal is to get all the tests to pass. At this exercise, all your tests should be passing. So follow the test, read the test. You're gonna be working with these five functions right here, or six I'm sorry six functions and all your test should be passing unless I wrote that test and that may well be possible [LAUGH] hopefully not.

