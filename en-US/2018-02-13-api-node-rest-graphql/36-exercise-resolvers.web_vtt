WEBVTT

1
00:00:03.757 --> 00:00:07.899
&gt;&gt; Scott: Cool, so
let's just go to the task right quick, and

2
00:00:07.899 --> 00:00:12.338
we can do this over lunch,
is, did I not write that one?

3
00:00:12.338 --> 00:00:17.513
Okay, what you're going to be doing is
pretty much just writing the resolvers for

4
00:00:17.513 --> 00:00:19.846
the song type and the playlist type.

5
00:00:19.846 --> 00:00:23.980
So if you check out to Lesson 11,
you should see the ones for

6
00:00:23.980 --> 00:00:29.937
the user type already filled out.
&gt;&gt; Scott: So

7
00:00:29.937 --> 00:00:31.609
if you go to user.resolvers.

8
00:00:47.875 --> 00:00:49.804
&gt;&gt; Scott: This is a basic
resolver in there, right?

9
00:00:49.804 --> 00:00:53.506
So we need to do the same thing for

10
00:00:53.506 --> 00:00:57.769
the playlist type and the song type.

11
00:00:57.769 --> 00:00:59.387
Now, as far as what
resolvers need to write,

12
00:00:59.387 --> 00:01:01.440
I want you to think about what
we did yesterday with rest.

13
00:01:01.440 --> 00:01:03.221
Think about all the things
we did with get,

14
00:01:03.221 --> 00:01:04.964
remember what we did with get yesterday?

15
00:01:04.964 --> 00:01:08.024
We did get one and get all,
I want you, for each type,

16
00:01:08.024 --> 00:01:10.010
I want you to write two resolvers.

17
00:01:10.010 --> 00:01:14.451
One that gets one song and
one that gets all songs, and

18
00:01:14.451 --> 00:01:18.704
also do it for the playlist,
does that make sense?

19
00:01:18.704 --> 00:01:22.668
So, let's just, I'm going to do one
song right quick, just so you can see.

20
00:01:22.668 --> 00:01:25.577
So let's walk through the whole
flow of what you would have to do.

21
00:01:25.577 --> 00:01:27.143
The first thing you would
have to do is you would have

22
00:01:27.143 --> 00:01:29.447
to come in here.
&gt;&gt; Scott: And

23
00:01:29.447 --> 00:01:32.217
you would have to make a query, but
you cannot put type query because

24
00:01:32.217 --> 00:01:34.465
we already made a type called Query,
this will break.

25
00:01:34.465 --> 00:01:37.084
You actually have to extend the type

26
00:01:37.084 --> 00:01:40.597
Query.
&gt;&gt; Scott: Query was already defined in

27
00:01:40.597 --> 00:01:43.897
the user, so
use the keyword extend in front of type.

28
00:01:43.897 --> 00:01:47.344
Otherwise it's going to try to
make a new type calles Query,

29
00:01:47.344 --> 00:01:49.246
which was already defined here.

30
00:01:49.246 --> 00:01:52.208
You cannot make another type with
the same name, it will break.

31
00:01:52.208 --> 00:01:55.502
Query was already defined, so
therefore we need to extend it.

32
00:01:55.502 --> 00:01:58.624
This is just like a merge in GraphQL,
that's all this is, it's like,

33
00:01:58.624 --> 00:02:01.765
I'm merging the two query types together,
that's all this is doing.

34
00:02:01.765 --> 00:02:04.334
So for Song,
let's say we want to get one song, for me,

35
00:02:04.334 --> 00:02:07.869
I like to follow the convention of using
the name or the type for getting one.

36
00:02:07.869 --> 00:02:12.534
So I'll say Song,
it takes an ID whose type is ID, and

37
00:02:12.534 --> 00:02:17.324
it returns a Song that is now null,
so I would say that.

38
00:02:17.324 --> 00:02:21.920
I'm going to pull this up side by side,
to the resolvers that I did not make.

39
00:02:21.920 --> 00:02:25.922
So you will have to come in here and
make another file for

40
00:02:25.922 --> 00:02:30.458
song.resolver, then I'm going
to make a function called-

41
00:02:35.594 --> 00:02:37.106
&gt;&gt; Speaker 2: Resolvers.

42
00:02:37.106 --> 00:02:38.106
&gt;&gt; Scott: Thank you.

43
00:02:43.351 --> 00:02:43.882
&gt;&gt; Scott: Resolvers,

44
00:02:43.882 --> 00:02:46.736
and then we make a function called,
you can call it whatever you want.

45
00:02:46.736 --> 00:02:50.083
This is, however you export it,
it better be called capital Song, so

46
00:02:50.083 --> 00:02:54.183
I'm going to call it just, getOneSong.
&gt;&gt; Scott: And

47
00:02:54.183 --> 00:02:59.736
it's just going to take in a root value,
which is nothing.

48
00:02:59.736 --> 00:03:03.508
It is going to take an id as the arc,
and that's really all I need.

49
00:03:03.508 --> 00:03:07.419
Then I need to import the song
model from song.model,

50
00:03:07.419 --> 00:03:11.167
which is what we used in
our controllers yesterday.

51
00:03:11.167 --> 00:03:13.263
And I'm just going to just query and
get one song.

52
00:03:13.263 --> 00:03:17.652
So I'm just going to say,
return Song.findById,

53
00:03:17.652 --> 00:03:24.048
because we have an id here, pass in an id,
call exec, and now I get one song.

54
00:03:24.048 --> 00:03:29.667
And the only thing I've got
to do now is export this,

55
00:03:29.667 --> 00:03:38.161
songResolvers.
&gt;&gt; Scott: And

56
00:03:38.161 --> 00:03:42.064
I need to export on Query, remember,
because I'm merging the query type.

57
00:03:42.064 --> 00:03:48.592
And I have a Query called Song whose
value is that getOneSong function.

58
00:03:48.592 --> 00:03:53.809
So now that I have that,
the next thing that I need to do is

59
00:03:53.809 --> 00:03:59.373
export these resolvers onto
the graph QL router like this.

60
00:03:59.373 --> 00:04:02.638
But in order to do that,
I need to export it.

61
00:04:07.254 --> 00:04:08.751
&gt;&gt; Scott: Did I already export it?

62
00:04:08.751 --> 00:04:10.615
Where's it at?

63
00:04:10.615 --> 00:04:11.464
Okay, yeah, so

64
00:04:11.464 --> 00:04:14.819
all I have to do is just import that
there from the graph QL router.

65
00:04:14.819 --> 00:04:20.213
And then you can just copy this from
users, you can do the same thing,

66
00:04:20.213 --> 00:04:27.154
you can say songResolvers.
&gt;&gt; Scott: There you go,

67
00:04:27.154 --> 00:04:30.638
and then you would need to
add in the songResolvers down

68
00:04:30.638 --> 00:04:35.815
below.
&gt;&gt; Scott: There you go, and I

69
00:04:35.815 --> 00:04:39.494
think the last thing I need to do is make
sure that this is exported from the index.

70
00:04:39.494 --> 00:04:42.854
So I'll see how we did that in user,
actually, yeah,

71
00:04:42.854 --> 00:04:45.627
it's already good because
it's in the router.

72
00:04:45.627 --> 00:04:46.676
You've got to export in the router.

73
00:04:46.676 --> 00:04:53.100
So export star, I'm sorry,
export songResolvers

74
00:04:53.100 --> 00:05:00.106
from song.resolvers.
&gt;&gt; Scott: There we go,

75
00:05:00.106 --> 00:05:03.074
so that was really fast,
because we want to eat lunch, but

76
00:05:03.074 --> 00:05:06.239
I just wanted to walk you through,
and if you were to run this.

77
00:05:12.145 --> 00:05:15.479
&gt;&gt; Scott: Duplicate declaration song,

78
00:05:15.479 --> 00:05:20.153
I've got it in there twice,
there, there we go.

79
00:05:20.153 --> 00:05:24.745
So if we run this and then refresh this,
we should look at Query and

80
00:05:24.745 --> 00:05:29.072
there should be Song right there.
&gt;&gt; Scott: So

81
00:05:29.072 --> 00:05:33.829
I want you to do the get one get all for
song, get one get all for

82
00:05:33.829 --> 00:05:36.545
playlist, and then hook them up.

83
00:05:36.545 --> 00:05:39.447
I'm going to write that down on this
slide, I don't know why it's not there.

