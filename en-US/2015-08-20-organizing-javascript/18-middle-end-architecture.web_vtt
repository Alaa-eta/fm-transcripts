WEBVTT

1
00:00:00.000 --> 00:00:03.771
[MUSIC]

2
00:00:03.771 --> 00:00:07.687
&gt;&gt; Kyle: Yesterday we did kind of
a starting from the very basics,

3
00:00:07.687 --> 00:00:11.780
what is a source code program,
kind of look at JavaScript.

4
00:00:11.780 --> 00:00:15.750
And we accelerated through the day to
about the point that I'd expect most

5
00:00:15.750 --> 00:00:21.170
people to be, with roughly 12 to 18
months of experience in JavaScript.

6
00:00:21.170 --> 00:00:27.390
Today there is a little bit of a gap,
if you will just in terms of expectation.

7
00:00:27.390 --> 00:00:32.320
So my expectation is essentially people
here are fairly familiar with JavaScript,

8
00:00:32.320 --> 00:00:34.100
they're fairly strong with JavaScript.

9
00:00:34.100 --> 00:00:37.200
Maybe you've had at least
two years of JavaScript and

10
00:00:37.200 --> 00:00:40.420
especially for this afternoon session
when we're talking about node,

11
00:00:40.420 --> 00:00:43.470
this is not a course that
teaches you about node.

12
00:00:43.470 --> 00:00:47.420
I have a course that teaches you
about node from Front End Masters and

13
00:00:47.420 --> 00:00:49.180
there are other great ones out there.

14
00:00:49.180 --> 00:00:51.810
There's also nodes school which
is a free way to go through and

15
00:00:51.810 --> 00:00:53.620
kind of get quickly up to speed on it.

16
00:00:53.620 --> 00:00:57.614
So if you don't know a lot about node,
if it's sort of a theoretical thing for

17
00:00:57.614 --> 00:01:01.438
you that you kind of in principle get
it but you haven't done a lot with it.

18
00:01:01.438 --> 00:01:03.419
Over one of the breaks or
over lunch break or

19
00:01:03.419 --> 00:01:07.107
something like that you would probably do
well to spend a little bit of time going

20
00:01:07.107 --> 00:01:10.601
through something like node school or
reading some online blogs about it.

21
00:01:10.601 --> 00:01:15.448
Because I'm going to assume that everyone
here has at least a basic understanding of

22
00:01:15.448 --> 00:01:17.166
node as a tool that we can use.

23
00:01:17.166 --> 00:01:21.198
So what we're talking about
today is not how to do node but

24
00:01:21.198 --> 00:01:23.306
how to use node in principle.

25
00:01:23.306 --> 00:01:27.759
Which I'm going to talk about ways
that we can, without worrying about

26
00:01:27.759 --> 00:01:32.280
crazy framework or lots of weird
terminology or things like that.

27
00:01:32.280 --> 00:01:34.850
The term isomorphic JavaScript
is thrown around a lot, and

28
00:01:34.850 --> 00:01:36.920
it's a the total nonsense term.

29
00:01:36.920 --> 00:01:39.620
So without any of that
stuff junk on top of us,

30
00:01:39.620 --> 00:01:43.210
what we're going to just look
at is some practical ways.

31
00:01:43.210 --> 00:01:48.147
To write JavaScript that the same code
can be used in both places that can

32
00:01:48.147 --> 00:01:51.293
be used on the server and
used in the browser.

33
00:01:51.293 --> 00:01:56.099
And so we'll walk through, I have built
basically the bare bones of one of those

34
00:01:56.099 --> 00:02:00.635
for you and I will walk you through
some explanation of how that code works.

35
00:02:00.635 --> 00:02:05.634
And then we'll go into looking
at a more complete application,

36
00:02:05.634 --> 00:02:09.253
a site that I actually
launched a few days ago.

37
00:02:09.253 --> 00:02:13.002
Still not a significantly complex app but
it's got more of those details.

38
00:02:13.002 --> 00:02:16.260
And so that's basically what
to expect from the afternoon.

39
00:02:16.260 --> 00:02:19.050
It will expect that you are pretty
solid with JavaScript and

40
00:02:19.050 --> 00:02:22.350
at least decently familiar and
have used node.

41
00:02:22.350 --> 00:02:24.310
So definitely have that
expectation all the way.

42
00:02:24.310 --> 00:02:27.130
We're going to try to switch
gears a little bit and

43
00:02:27.130 --> 00:02:31.450
focus on applying
JavaScript to some stuff.

44
00:02:31.450 --> 00:02:36.860
And this particular workshop is
not exactly a formal workshop.

45
00:02:36.860 --> 00:02:41.910
This is more, we are going to basically
just go through some code that I wrote for

46
00:02:41.910 --> 00:02:45.220
the purposes of being able to illustrate

47
00:02:45.220 --> 00:02:50.050
ideas that I have kind of espoused in
various talks over the last several years.

48
00:02:50.050 --> 00:02:55.270
So just as a brief little
history lesson that nobody would

49
00:02:55.270 --> 00:02:58.580
care about but since you're listening
to me you have to listen to me anyway.

50
00:03:00.540 --> 00:03:06.540
Way back in 2009, kind of towards actually

51
00:03:06.540 --> 00:03:13.090
the early parts of my speaking career,
I was working at a PHP shop.

52
00:03:13.090 --> 00:03:18.170
And I wanted to be able to do
JavaScript on the server because there

53
00:03:18.170 --> 00:03:23.280
were things that I wanted to do that
were awkward or harder to do with PHP,

54
00:03:23.280 --> 00:03:28.110
and I also hated the fact that I was
essentially repeating code a lot.

55
00:03:28.110 --> 00:03:33.510
I don't know if anybody else has had this
frustration of like repeating code before

56
00:03:33.510 --> 00:03:36.090
but I was definitely on this frustration.

57
00:03:36.090 --> 00:03:38.982
My particular pain point
was data validation rule.

58
00:03:38.982 --> 00:03:43.536
And I remembered back to my computer
science schooling years before,

59
00:03:43.536 --> 00:03:48.395
that one of the principals, one of
the maxims, that I learned in my first,

60
00:03:48.395 --> 00:03:53.512
you know, programming 101 course is
what we now call the drive principle.

61
00:03:53.512 --> 00:03:56.686
But back then what they said
in the computer science school

62
00:03:56.686 --> 00:04:01.110
was any time there's more than one copy
of something, one copy is always wrong.

63
00:04:02.460 --> 00:04:06.560
Which nowadays we just referred to is dry,
we say don't repeat yourself, right?

64
00:04:06.560 --> 00:04:12.100
If it's possible to not repeat yourself,
it's better to not repeat yourself.

65
00:04:12.100 --> 00:04:15.415
It's better to reuse something than
to repeat it over and over again.

66
00:04:15.415 --> 00:04:18.255
Obviously those are not hard and
fast principles,

67
00:04:18.255 --> 00:04:21.304
but they're guiding principles
in software design.

68
00:04:21.304 --> 00:04:27.933
So, it struck me that I was repeating
this data validation rule set in PHP and

69
00:04:27.933 --> 00:04:33.330
I was turning around and
writing the same code in JavaScript.

70
00:04:33.330 --> 00:04:37.155
And I had done that, actually many times
because I had written many many different

71
00:04:37.155 --> 00:04:38.495
sorts of PHP applications.

72
00:04:38.495 --> 00:04:40.062
Years earlier than that,

73
00:04:40.062 --> 00:04:45.350
now way back in late 2002 I had written
a time sheet application for a company.

74
00:04:45.350 --> 00:04:50.160
And I had written all of the back end
stuff in PHP inside all my classes and

75
00:04:50.160 --> 00:04:51.590
stuff like that in PHP.

76
00:04:51.590 --> 00:04:55.146
And then I had to turn around and write
most of that stuff in JavaScript as well.

77
00:04:55.146 --> 00:04:57.525
So I was repeating some of that
same logic over and over again.

78
00:04:57.525 --> 00:05:00.478
And any time I need to refactor
something I had to go back and

79
00:05:00.478 --> 00:05:01.937
refactor it in both places.

80
00:05:01.937 --> 00:05:05.122
And over the years I worked
in a lot of different shops,

81
00:05:05.122 --> 00:05:09.920
I saw a lot of different possible
solutions to the sorts of problems.

82
00:05:09.920 --> 00:05:13.000
I worked in a Java shop and I saw,
I don't remember the name of it,

83
00:05:13.000 --> 00:05:17.250
but there was some framework that probably
job people know right off the bat, right?

84
00:05:17.250 --> 00:05:21.770
Essentially, they expressed their
data validation rules in Java and

85
00:05:21.770 --> 00:05:24.710
it automatically generated JavaScript for
them.

86
00:05:24.710 --> 00:05:26.550
It automatically wrote
the JavaScript rules,

87
00:05:26.550 --> 00:05:29.530
they had no control over it
just injected it in the page.

88
00:05:29.530 --> 00:05:33.200
That seemed like theoretically it was
some solution to the problem because

89
00:05:33.200 --> 00:05:35.370
now the JavaScript get pushed to the page.

90
00:05:35.370 --> 00:05:38.150
Except we ran across
a problem where there was one

91
00:05:38.150 --> 00:05:40.860
particular sort of check that
was happening in Java that

92
00:05:40.860 --> 00:05:44.710
the equivalent in JavaScript ended
up giving a different result.

93
00:05:44.710 --> 00:05:47.380
There was no way to exactly get the same

94
00:05:47.380 --> 00:05:50.500
check result in JavaScript that
they were getting out of Java.

95
00:05:50.500 --> 00:05:53.590
It was close but
we ran across this one case and

96
00:05:53.590 --> 00:05:58.870
it was annoying that I had no capability
to go in and change the JavaScript.

97
00:05:58.870 --> 00:06:00.920
Because it was auto
generated on the fly and

98
00:06:00.920 --> 00:06:03.210
had no control over the code
they were generating.

99
00:06:03.210 --> 00:06:06.680
So we had to work around that by writing
a different set of validation rules and

100
00:06:06.680 --> 00:06:09.050
reformatting the way
the data was coming in.

101
00:06:09.050 --> 00:06:12.810
Was sort of the tail wagging the dog
problem, like we wanted to fix the problem

102
00:06:12.810 --> 00:06:15.580
but we couldn't so we had to fix this
other entirely different thing, so

103
00:06:15.580 --> 00:06:16.630
that the problem would go away.

104
00:06:17.960 --> 00:06:22.528
So as you can tell I've had lots of
different exposures to this in different

105
00:06:22.528 --> 00:06:24.859
things I've seen it in Python shops.

106
00:06:24.859 --> 00:06:27.469
I worked in a Python shop one
time in a Django well and

107
00:06:27.469 --> 00:06:30.383
thankfully I didn't have to do
a lot of the Python work but

108
00:06:30.383 --> 00:06:33.322
I did have to do a little bit
of the Python and Django work.

109
00:06:33.322 --> 00:06:38.452
And in particular the problem that
I had was whatever framework they

110
00:06:38.452 --> 00:06:43.852
were using on top of Django whatever
their application framework was,

111
00:06:43.852 --> 00:06:48.089
it could not accept arrays
of values from a JavaScript.

112
00:06:48.089 --> 00:06:51.842
Like if you posted an array of values
you couldn't post in array and

113
00:06:51.842 --> 00:06:55.203
have it automatically translate
that into a Python array.

114
00:06:55.203 --> 00:06:58.066
It required you to have
an individual named thing,

115
00:06:58.066 --> 00:07:01.994
which is great until you start doing
UIs where they want to have a big set

116
00:07:01.994 --> 00:07:05.204
of radio buttons for example or
check boxes or whatever.

117
00:07:05.204 --> 00:07:07.803
You don't want to have to uniquely
name those things, that's annoying.

118
00:07:07.803 --> 00:07:11.349
You want to just pass an array of all the
check boxes that have been checked with

119
00:07:11.349 --> 00:07:12.810
true and false in them.

120
00:07:12.810 --> 00:07:14.790
But we couldn't do that,
we just flat out couldn't do it.

121
00:07:14.790 --> 00:07:17.560
And the back end was sort of
our restriction at this point,

122
00:07:17.560 --> 00:07:19.600
because JavaScript clearly
knew how to do it.

123
00:07:19.600 --> 00:07:23.520
We'd passed the array and it would work
and so I was running into this problem

124
00:07:23.520 --> 00:07:27.890
over and over were code was being repeated
or things were being too difficult to do.

125
00:07:27.890 --> 00:07:31.370
Bridging this gap between JavaScript and
the server.

126
00:07:31.370 --> 00:07:36.290
And then there were times where I wanted
to configure something about the server.

127
00:07:36.290 --> 00:07:38.950
I wanted to have some control over
something about the server like the way it

128
00:07:38.950 --> 00:07:41.170
was putting together the HTTP headers.

129
00:07:41.170 --> 00:07:43.580
I wanted to change that to
optimize some performance or

130
00:07:43.580 --> 00:07:47.410
I wanted to have more control over
the way it packaged up files or whatever.

131
00:07:47.410 --> 00:07:51.760
And over and over again from Python
shops to .Net, to Java shops, and

132
00:07:51.760 --> 00:07:55.980
everything in between Ruby and Grails,
and everything, I worked at all of them.

133
00:07:55.980 --> 00:08:02.160
And in every one of those jobs that I
worked at, essentially the back end ruled.

134
00:08:02.160 --> 00:08:04.940
And if you didn't know the back end
language you just couldn't do what

135
00:08:04.940 --> 00:08:05.490
you wanted to do.

136
00:08:05.490 --> 00:08:06.894
And I was a JavaScript person or

137
00:08:06.894 --> 00:08:09.436
wanting to be a JavaScript
person rather exclusively.

138
00:08:09.436 --> 00:08:14.027
And this dirty secret was I had
no control over the back end.

139
00:08:14.027 --> 00:08:17.798
So in 2009 I had started to get this
conclusion like the problem is not that I

140
00:08:17.798 --> 00:08:21.800
haven't learned every single back end of
every single job that I've ever worked at

141
00:08:21.800 --> 00:08:23.419
because that's not practical.

142
00:08:23.419 --> 00:08:27.830
It's not practical for me to be
hired as a JavaScript developer but

143
00:08:27.830 --> 00:08:31.233
have to become a Grails
developer to do something.

144
00:08:31.233 --> 00:08:33.360
And that literally happened to me,
and I'm not making it up.

145
00:08:33.360 --> 00:08:37.970
I went into a job, very first day,
hired as a pure front end JavaScripter,

146
00:08:37.970 --> 00:08:41.840
I was hired to build
an embeddable JavaScript widget.

147
00:08:41.840 --> 00:08:45.040
Totally JavaScript work, I wasn't
hired to do anything back end at all.

148
00:08:45.040 --> 00:08:49.823
And I said to them on the very first day,
the guy that was kind of intro-ing me,

149
00:08:49.823 --> 00:08:53.519
I said all right, so what I need
is I need an empty HTML file and

150
00:08:53.519 --> 00:08:55.209
an empty JavaScript file.

151
00:08:55.209 --> 00:08:59.095
I need to be able to serve those up and
that will be the basis for my widget and

152
00:08:59.095 --> 00:09:03.314
so just tell me where to put those files
and then I'll go from there, I'm good.

153
00:09:03.314 --> 00:09:06.290
Just tell me where and whatever your
system is where do I put these files.

154
00:09:06.290 --> 00:09:09.720
And I was imagining there was some
special folders somewhere in this Grails

155
00:09:09.720 --> 00:09:13.360
application, I could just drop a couple
of files and bam, it magically worked.

156
00:09:13.360 --> 00:09:16.530
And he said yeah,
you can't really do that.

157
00:09:16.530 --> 00:09:20.510
And he literally handed me
this huge book on Grails, and

158
00:09:20.510 --> 00:09:22.600
he said you're going to read
chapters four, five, and

159
00:09:22.600 --> 00:09:26.570
six of this book, figure out how
to set up a static routing for it.

160
00:09:26.570 --> 00:09:29.130
And do this, that, and
he completely lost me.

161
00:09:29.130 --> 00:09:31.890
And I flipped, I was like,
are you kidding me?

162
00:09:31.890 --> 00:09:36.629
That's what I have to do to put an empty
HTML and empty JavaScript file on the web.

163
00:09:36.629 --> 00:09:40.770
This is ridiculous, and so it was kind of
this long boil that I had gotten to and

164
00:09:40.770 --> 00:09:42.004
I kind of flipped out.

165
00:09:42.004 --> 00:09:47.343
And I was like I don't want to do all of
that crap to put up some JavaScript files,

166
00:09:47.343 --> 00:09:52.709
I want control over at least the part of
the server that I need to have control of.

167
00:09:52.709 --> 00:09:57.261
So in 2009 I started to formulate this
alternate way of thinking about web

168
00:09:57.261 --> 00:09:58.248
architecture.

169
00:09:58.248 --> 00:10:01.312
All right, and I eventually came to
call it middle end architecture.

170
00:10:01.312 --> 00:10:05.647
And to this day if you go to MiddleEnd.com
it redirects to a series of blog posts

171
00:10:05.647 --> 00:10:07.498
that I wrote about that concept.

172
00:10:07.498 --> 00:10:12.750
Where essentially I was suggesting there
is a set of tasks that every application

173
00:10:12.750 --> 00:10:17.477
architecture needs to do, which I
wanted to be able to do in JavaScript.

174
00:10:17.477 --> 00:10:19.542
Because, many of those tasks,

175
00:10:19.542 --> 00:10:24.446
the majority of them in fact are things
that you need to do in both locations.

176
00:10:24.446 --> 00:10:28.216
For example, data validation,
data formatting,

177
00:10:28.216 --> 00:10:32.940
routing, templating,
caching headers those sorts of things.

178
00:10:32.940 --> 00:10:36.940
Those are all things that every
application does but they're also all

179
00:10:36.940 --> 00:10:41.540
things that you end up having to do
a lot of on both sides of the fence.

180
00:10:41.540 --> 00:10:43.050
The parsing of those things and so forth.

181
00:10:43.050 --> 00:10:45.930
So I wanted to be able to
implement that in JavaScript and

182
00:10:45.930 --> 00:10:48.060
reuse the code in both places.

183
00:10:48.060 --> 00:10:51.970
And my only option was to suggest some
sort of architecture that would allow me

184
00:10:51.970 --> 00:10:55.640
to write the JavaScript, and
then use it in both places.

185
00:10:55.640 --> 00:10:59.820
And so I developed this idea of middle end
architecture, it's a tongue in cheek idea.

186
00:10:59.820 --> 00:11:01.690
What comes between the front end and
the back end?

187
00:11:01.690 --> 00:11:03.450
Of course, the middle end.

188
00:11:03.450 --> 00:11:07.710
And I defined it as the top 10% of
what's happening on the server and

189
00:11:07.710 --> 00:11:10.620
the bottom 10% of what was
happening in the browser.

190
00:11:10.620 --> 00:11:14.460
And everything in between, and
I called that the middle end, and

191
00:11:14.460 --> 00:11:16.740
it involved all of those tasks
that I was talking about.

192
00:11:16.740 --> 00:11:22.580
So at the time there was
no such thing as Node.js.

193
00:11:22.580 --> 00:11:26.050
We had a couple of things, like in
the Java world we had Rhino, which still

194
00:11:26.050 --> 00:11:29.810
exists today and it's being rewritten I
think to a different engine or whatever.

195
00:11:29.810 --> 00:11:31.782
But we had Rhino which
was a way to do it but

196
00:11:31.782 --> 00:11:34.165
that only works if you
happen to be in a Java shop.

197
00:11:34.165 --> 00:11:37.616
You wouldn't run a Rhino instance
just of Java all by itself.

198
00:11:37.616 --> 00:11:41.394
So that didn't seem to work out for
us especially since I was at

199
00:11:41.394 --> 00:11:44.370
the time I had moved on to
a job where I was in PHP and

200
00:11:44.370 --> 00:11:48.167
they definitely didn't want to
have a Java tool in the stack.

201
00:11:48.167 --> 00:11:52.930
So what could I do if I couldn't
run something with a Rhino or

202
00:11:52.930 --> 00:11:55.037
whatever what could I do?

203
00:11:55.037 --> 00:11:59.459
And I had read that you could take
the JavaScript engine out of the Chrome

204
00:11:59.459 --> 00:12:04.913
browser, V8 JavaScript engine, that you
could write some C ++ bindings around it,

205
00:12:04.913 --> 00:12:09.010
and you could create a JavaScript
environment somewhere.

206
00:12:09.010 --> 00:12:09.900
And I thought to myself,

207
00:12:09.900 --> 00:12:13.610
well I'll just do that, I'll just
write a server side JavaScript engine.

208
00:12:14.730 --> 00:12:17.390
If they've already got V8 all I've
gotta do is write some bindings.

209
00:12:17.390 --> 00:12:21.040
I just gotta make it accessible
to the file system and

210
00:12:21.040 --> 00:12:23.440
a few other things like that and
that's all I'll need to do.

211
00:12:23.440 --> 00:12:26.500
So I said about to write a server
side JavaScript engine and I in fact

212
00:12:26.500 --> 00:12:31.810
did it I wrote an engine called byte
chain and it's still up there on GitHub.

213
00:12:31.810 --> 00:12:33.410
Not that anybody would ever use it but

214
00:12:33.410 --> 00:12:35.520
it's still there if you
ever wanna go look at it.

215
00:12:35.520 --> 00:12:40.210
I wrote this engine in JavaScript and
this was all contemporaneously before and

216
00:12:40.210 --> 00:12:42.860
contemporaneous with
the launch of Node,js.

217
00:12:42.860 --> 00:12:47.247
Because you fast forward
to November of 2009 and

218
00:12:47.247 --> 00:12:50.548
I was at JavaScript JS Com VU in Berlin.

219
00:12:50.548 --> 00:12:53.077
I was over there speaking and sat and

220
00:12:53.077 --> 00:12:57.975
listened to a talk by a relative
unknown in the JavaScript industry.

221
00:12:57.975 --> 00:13:03.030
Ryan Dall stood up and in his dry wit way
announced this new thing that he had been

222
00:13:03.030 --> 00:13:07.867
creating called Node.js and everybody
flipped, I mean we all went nuts.

223
00:13:07.867 --> 00:13:11.008
It was standing ovation,
I mean it was crazy cuz everybody's so

224
00:13:11.008 --> 00:13:14.516
excited about this concept of getting
to write JavaScript on a server.

225
00:13:14.516 --> 00:13:18.020
And I'm like yeah that's what I've been
working on for six months we need this.

226
00:13:18.020 --> 00:13:21.030
It's an inevitability that we want
to put JavaScript on the server.

227
00:13:22.130 --> 00:13:26.571
Within three months of Node.js coming out
and it's hugely popular as it took off.

228
00:13:26.571 --> 00:13:30.668
I abandoned byte chain because there was
absolutely no reason to keep trying to do

229
00:13:30.668 --> 00:13:32.123
something a different way.

230
00:13:32.123 --> 00:13:34.760
But the process of putting
JavaScript on a server,

231
00:13:34.760 --> 00:13:38.480
regardless of how it was actually done,
the process is what I wanted.

232
00:13:38.480 --> 00:13:40.680
I wanted to be able to run
JavaScript on a server and

233
00:13:40.680 --> 00:13:43.470
to this day that's how I
feel about JavaScript.

234
00:13:43.470 --> 00:13:46.390
I don't actually care
that much about node.

235
00:13:46.390 --> 00:13:50.340
I'm not even all that emotionally wrapped
up in this whole like forking from

236
00:13:50.340 --> 00:13:53.550
node to IO thing that's happened and
whether they're going to come back

237
00:13:53.550 --> 00:13:55.839
together because for
me Node is not a trademark.

238
00:13:56.880 --> 00:13:58.890
Node is not a command line.

239
00:13:58.890 --> 00:13:59.930
Node is a category,

240
00:14:00.990 --> 00:14:05.310
it's a category of applications that
bring JavaScript out of the browser and

241
00:14:05.310 --> 00:14:09.440
put them in the place where I want them,
which happens to be the server.

242
00:14:09.440 --> 00:14:15.110
It's a tool, and I don't think that Node
in IO are the end of this tool chain.

243
00:14:15.110 --> 00:14:19.122
They are the first modern step that we've
had by the way they want the original.

244
00:14:19.122 --> 00:14:21.716
You know the original
server side JavaScript was?

245
00:14:21.716 --> 00:14:24.490
1997 Live Script server from Netscape,

246
00:14:24.490 --> 00:14:28.320
actually 96 is when it was
really kinda coming up.

247
00:14:28.320 --> 00:14:32.330
Brand new after JavaScript was out we
had live scripts server Netscape was

248
00:14:32.330 --> 00:14:35.700
the original the OG of
server side JavaScript.

249
00:14:35.700 --> 00:14:39.173
Of course it's pretty awful and
nobody used it but nonetheless.

250
00:14:39.173 --> 00:14:43.240
So the concept of putting JavaScript
on a server is not new but

251
00:14:43.240 --> 00:14:47.760
just in our modern age we kind of think
of Node is like the big first step

252
00:14:47.760 --> 00:14:52.900
to modernizing server side JavaScript,
but it's not the last in my prediction.

253
00:14:52.900 --> 00:14:55.760
It's just the first big one
that we've seen in a while and

254
00:14:55.760 --> 00:14:59.230
we're gonna see something that comes
after it might be a year or two or

255
00:14:59.230 --> 00:15:02.250
three years from now but
they'll be some new idea that comes along.

256
00:15:02.250 --> 00:15:06.920
I'm anxious to see things like Firefox OS
which is JavaScript at the kernel

257
00:15:06.920 --> 00:15:08.010
operating system level.

258
00:15:08.010 --> 00:15:11.580
I'm anxious to see those things start to
take over where we don't need a user land

259
00:15:11.580 --> 00:15:13.400
process like node to run.

260
00:15:13.400 --> 00:15:16.950
We can just run natively JavaScript any
part of our application if we want.

261
00:15:18.400 --> 00:15:21.480
So I think we're gonna
continue to see that evolve.

262
00:15:21.480 --> 00:15:22.050
And I don't get so

263
00:15:22.050 --> 00:15:26.030
wrapped up in exactly what is Node
doing or not doing or whatever.

264
00:15:28.000 --> 00:15:29.152
Okay, question here.

265
00:15:29.152 --> 00:15:31.699
Somebody just quoting.

266
00:15:31.699 --> 00:15:36.567
So, that's the little brief history
lesson that gives you a perspective

267
00:15:36.567 --> 00:15:39.560
on how I approach server-side JavaScript.

268
00:15:39.560 --> 00:15:41.508
It's a tool to help me solve problems.

269
00:15:41.508 --> 00:15:45.109
The problems that I like to solve,
are sharing code,

270
00:15:45.109 --> 00:15:49.521
not repeating myself,
being able to do things in a buffered way.

271
00:15:49.521 --> 00:15:53.007
In other words I want to be able to do my
front end completely separate from how I

272
00:15:53.007 --> 00:15:53.769
do the back end.

273
00:15:53.769 --> 00:15:56.054
And that middle end
architecture I referred to,

274
00:15:56.054 --> 00:15:59.420
the back end essentially becomes
irrelevant to the front end.

275
00:15:59.420 --> 00:16:02.470
The front end never talks to the back
end it talks to the middle end.

276
00:16:02.470 --> 00:16:04.320
And the back end talks
to the middle end and

277
00:16:04.320 --> 00:16:06.760
it has no clue what
the front end is doing.

278
00:16:06.760 --> 00:16:10.910
Could be a mobile app, could be a web
site, could be another API server,

279
00:16:10.910 --> 00:16:11.568
it doesn't care.

280
00:16:11.568 --> 00:16:15.610
The back end simply becomes
a headless black box state machine.

281
00:16:16.730 --> 00:16:20.278
It manages the session, it knows what
state it's in, you give it some data,

282
00:16:20.278 --> 00:16:21.617
it gives you some data back.

283
00:16:21.617 --> 00:16:25.254
And that was attractive to me because I
didn't want to have to re-learn every

284
00:16:25.254 --> 00:16:29.380
single back end system to figure out how
to manage the headers, and the cookies,

285
00:16:29.380 --> 00:16:31.120
and the HTML files and all that stuff.

286
00:16:31.120 --> 00:16:34.795
I just want you to give me some data,
I'll figure out the presentation my own.

287
00:16:34.795 --> 00:16:35.965
That's the job of the middle end.

288
00:16:37.065 --> 00:16:41.505
So even though today I'm not going to
espouse specifically this middle end

289
00:16:41.505 --> 00:16:44.455
architecture, I just want you
to have that as the backdrop for

290
00:16:44.455 --> 00:16:46.995
what I'm talking about
when we go into this code.

