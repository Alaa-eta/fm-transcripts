[00:00:00]
>> [MUSIC]

[00:00:03]
>> Kyle: Yesterday we did kind of a starting from the very basics, what is a source code program, kind of look at JavaScript. And we accelerated through the day to about the point that I'd expect most people to be, with roughly 12 to 18 months of experience in JavaScript.

[00:00:21]
Today there is a little bit of a gap, if you will just in terms of expectation. So my expectation is essentially people here are fairly familiar with JavaScript, they're fairly strong with JavaScript. Maybe you've had at least two years of JavaScript and especially for this afternoon session when we're talking about node, this is not a course that teaches you about node.

[00:00:43]
I have a course that teaches you about node from Front End Masters and there are other great ones out there. There's also nodes school which is a free way to go through and kind of get quickly up to speed on it. So if you don't know a lot about node, if it's sort of a theoretical thing for you that you kind of in principle get it but you haven't done a lot with it.

[00:01:01]
Over one of the breaks or over lunch break or something like that you would probably do well to spend a little bit of time going through something like node school or reading some online blogs about it. Because I'm going to assume that everyone here has at least a basic understanding of node as a tool that we can use.

[00:01:17]
So what we're talking about today is not how to do node but how to use node in principle. Which I'm going to talk about ways that we can, without worrying about crazy framework or lots of weird terminology or things like that. The term isomorphic JavaScript is thrown around a lot, and it's a the total nonsense term.

[00:01:36]
So without any of that stuff junk on top of us, what we're going to just look at is some practical ways. To write JavaScript that the same code can be used in both places that can be used on the server and used in the browser. And so we'll walk through, I have built basically the bare bones of one of those for you and I will walk you through some explanation of how that code works.

[00:02:00]
And then we'll go into looking at a more complete application, a site that I actually launched a few days ago. Still not a significantly complex app but it's got more of those details. And so that's basically what to expect from the afternoon. It will expect that you are pretty solid with JavaScript and at least decently familiar and have used node.

[00:02:22]
So definitely have that expectation all the way. We're going to try to switch gears a little bit and focus on applying JavaScript to some stuff. And this particular workshop is not exactly a formal workshop. This is more, we are going to basically just go through some code that I wrote for the purposes of being able to illustrate ideas that I have kind of espoused in various talks over the last several years.

[00:02:50]
So just as a brief little history lesson that nobody would care about but since you're listening to me you have to listen to me anyway. Way back in 2009, kind of towards actually the early parts of my speaking career, I was working at a PHP shop. And I wanted to be able to do JavaScript on the server because there were things that I wanted to do that were awkward or harder to do with PHP, and I also hated the fact that I was essentially repeating code a lot.

[00:03:28]
I don't know if anybody else has had this frustration of like repeating code before but I was definitely on this frustration. My particular pain point was data validation rule. And I remembered back to my computer science schooling years before, that one of the principals, one of the maxims, that I learned in my first, you know, programming 101 course is what we now call the drive principle.

[00:03:53]
But back then what they said in the computer science school was any time there's more than one copy of something, one copy is always wrong. Which nowadays we just referred to is dry, we say don't repeat yourself, right? If it's possible to not repeat yourself, it's better to not repeat yourself.

[00:04:12]
It's better to reuse something than to repeat it over and over again. Obviously those are not hard and fast principles, but they're guiding principles in software design. So, it struck me that I was repeating this data validation rule set in PHP and I was turning around and writing the same code in JavaScript.

[00:04:33]
And I had done that, actually many times because I had written many many different sorts of PHP applications. Years earlier than that, now way back in late 2002 I had written a time sheet application for a company. And I had written all of the back end stuff in PHP inside all my classes and stuff like that in PHP.

[00:04:51]
And then I had to turn around and write most of that stuff in JavaScript as well. So I was repeating some of that same logic over and over again. And any time I need to refactor something I had to go back and refactor it in both places. And over the years I worked in a lot of different shops, I saw a lot of different possible solutions to the sorts of problems.

[00:05:09]
I worked in a Java shop and I saw, I don't remember the name of it, but there was some framework that probably job people know right off the bat, right? Essentially, they expressed their data validation rules in Java and it automatically generated JavaScript for them. It automatically wrote the JavaScript rules, they had no control over it just injected it in the page.

[00:05:29]
That seemed like theoretically it was some solution to the problem because now the JavaScript get pushed to the page. Except we ran across a problem where there was one particular sort of check that was happening in Java that the equivalent in JavaScript ended up giving a different result.

[00:05:44]
There was no way to exactly get the same check result in JavaScript that they were getting out of Java. It was close but we ran across this one case and it was annoying that I had no capability to go in and change the JavaScript. Because it was auto generated on the fly and had no control over the code they were generating.

[00:06:03]
So we had to work around that by writing a different set of validation rules and reformatting the way the data was coming in. Was sort of the tail wagging the dog problem, like we wanted to fix the problem but we couldn't so we had to fix this other entirely different thing, so that the problem would go away.

[00:06:17]
So as you can tell I've had lots of different exposures to this in different things I've seen it in Python shops. I worked in a Python shop one time in a Django well and thankfully I didn't have to do a lot of the Python work but I did have to do a little bit of the Python and Django work.

[00:06:33]
And in particular the problem that I had was whatever framework they were using on top of Django whatever their application framework was, it could not accept arrays of values from a JavaScript. Like if you posted an array of values you couldn't post in array and have it automatically translate that into a Python array.

[00:06:55]
It required you to have an individual named thing, which is great until you start doing UIs where they want to have a big set of radio buttons for example or check boxes or whatever. You don't want to have to uniquely name those things, that's annoying. You want to just pass an array of all the check boxes that have been checked with true and false in them.

[00:07:12]
But we couldn't do that, we just flat out couldn't do it. And the back end was sort of our restriction at this point, because JavaScript clearly knew how to do it. We'd passed the array and it would work and so I was running into this problem over and over were code was being repeated or things were being too difficult to do.

[00:07:27]
Bridging this gap between JavaScript and the server. And then there were times where I wanted to configure something about the server. I wanted to have some control over something about the server like the way it was putting together the HTTP headers. I wanted to change that to optimize some performance or I wanted to have more control over the way it packaged up files or whatever.

[00:07:47]
And over and over again from Python shops to .Net, to Java shops, and everything in between Ruby and Grails, and everything, I worked at all of them. And in every one of those jobs that I worked at, essentially the back end ruled. And if you didn't know the back end language you just couldn't do what you wanted to do.

[00:08:05]
And I was a JavaScript person or wanting to be a JavaScript person rather exclusively. And this dirty secret was I had no control over the back end. So in 2009 I had started to get this conclusion like the problem is not that I haven't learned every single back end of every single job that I've ever worked at because that's not practical.

[00:08:23]
It's not practical for me to be hired as a JavaScript developer but have to become a Grails developer to do something. And that literally happened to me, and I'm not making it up. I went into a job, very first day, hired as a pure front end JavaScripter, I was hired to build an embeddable JavaScript widget.

[00:08:41]
Totally JavaScript work, I wasn't hired to do anything back end at all. And I said to them on the very first day, the guy that was kind of intro-ing me, I said all right, so what I need is I need an empty HTML file and an empty JavaScript file.

[00:08:55]
I need to be able to serve those up and that will be the basis for my widget and so just tell me where to put those files and then I'll go from there, I'm good. Just tell me where and whatever your system is where do I put these files.

[00:09:06]
And I was imagining there was some special folders somewhere in this Grails application, I could just drop a couple of files and bam, it magically worked. And he said yeah, you can't really do that. And he literally handed me this huge book on Grails, and he said you're going to read chapters four, five, and six of this book, figure out how to set up a static routing for it.

[00:09:26]
And do this, that, and he completely lost me. And I flipped, I was like, are you kidding me? That's what I have to do to put an empty HTML and empty JavaScript file on the web. This is ridiculous, and so it was kind of this long boil that I had gotten to and I kind of flipped out.

[00:09:42]
And I was like I don't want to do all of that crap to put up some JavaScript files, I want control over at least the part of the server that I need to have control of. So in 2009 I started to formulate this alternate way of thinking about web architecture.

[00:09:58]
All right, and I eventually came to call it middle end architecture. And to this day if you go to MiddleEnd.com it redirects to a series of blog posts that I wrote about that concept. Where essentially I was suggesting there is a set of tasks that every application architecture needs to do, which I wanted to be able to do in JavaScript.

[00:10:17]
Because, many of those tasks, the majority of them in fact are things that you need to do in both locations. For example, data validation, data formatting, routing, templating, caching headers those sorts of things. Those are all things that every application does but they're also all things that you end up having to do a lot of on both sides of the fence.

[00:10:41]
The parsing of those things and so forth. So I wanted to be able to implement that in JavaScript and reuse the code in both places. And my only option was to suggest some sort of architecture that would allow me to write the JavaScript, and then use it in both places.

[00:10:55]
And so I developed this idea of middle end architecture, it's a tongue in cheek idea. What comes between the front end and the back end? Of course, the middle end. And I defined it as the top 10% of what's happening on the server and the bottom 10% of what was happening in the browser.

[00:11:10]
And everything in between, and I called that the middle end, and it involved all of those tasks that I was talking about. So at the time there was no such thing as Node.js. We had a couple of things, like in the Java world we had Rhino, which still exists today and it's being rewritten I think to a different engine or whatever.

[00:11:29]
But we had Rhino which was a way to do it but that only works if you happen to be in a Java shop. You wouldn't run a Rhino instance just of Java all by itself. So that didn't seem to work out for us especially since I was at the time I had moved on to a job where I was in PHP and they definitely didn't want to have a Java tool in the stack.

[00:11:48]
So what could I do if I couldn't run something with a Rhino or whatever what could I do? And I had read that you could take the JavaScript engine out of the Chrome browser, V8 JavaScript engine, that you could write some C ++ bindings around it, and you could create a JavaScript environment somewhere.

[00:12:09]
And I thought to myself, well I'll just do that, I'll just write a server side JavaScript engine. If they've already got V8 all I've gotta do is write some bindings. I just gotta make it accessible to the file system and a few other things like that and that's all I'll need to do.

[00:12:23]
So I said about to write a server side JavaScript engine and I in fact did it I wrote an engine called byte chain and it's still up there on GitHub. Not that anybody would ever use it but it's still there if you ever wanna go look at it.

[00:12:35]
I wrote this engine in JavaScript and this was all contemporaneously before and contemporaneous with the launch of Node,js. Because you fast forward to November of 2009 and I was at JavaScript JS Com VU in Berlin. I was over there speaking and sat and listened to a talk by a relative unknown in the JavaScript industry.

[00:12:57]
Ryan Dall stood up and in his dry wit way announced this new thing that he had been creating called Node.js and everybody flipped, I mean we all went nuts. It was standing ovation, I mean it was crazy cuz everybody's so excited about this concept of getting to write JavaScript on a server.

[00:13:14]
And I'm like yeah that's what I've been working on for six months we need this. It's an inevitability that we want to put JavaScript on the server. Within three months of Node.js coming out and it's hugely popular as it took off. I abandoned byte chain because there was absolutely no reason to keep trying to do something a different way.

[00:13:32]
But the process of putting JavaScript on a server, regardless of how it was actually done, the process is what I wanted. I wanted to be able to run JavaScript on a server and to this day that's how I feel about JavaScript. I don't actually care that much about node.

[00:13:46]
I'm not even all that emotionally wrapped up in this whole like forking from node to IO thing that's happened and whether they're going to come back together because for me Node is not a trademark. Node is not a command line. Node is a category, it's a category of applications that bring JavaScript out of the browser and put them in the place where I want them, which happens to be the server.

[00:14:09]
It's a tool, and I don't think that Node in IO are the end of this tool chain. They are the first modern step that we've had by the way they want the original. You know the original server side JavaScript was? 1997 Live Script server from Netscape, actually 96 is when it was really kinda coming up.

[00:14:28]
Brand new after JavaScript was out we had live scripts server Netscape was the original the OG of server side JavaScript. Of course it's pretty awful and nobody used it but nonetheless. So the concept of putting JavaScript on a server is not new but just in our modern age we kind of think of Node is like the big first step to modernizing server side JavaScript, but it's not the last in my prediction.

[00:14:52]
It's just the first big one that we've seen in a while and we're gonna see something that comes after it might be a year or two or three years from now but they'll be some new idea that comes along. I'm anxious to see things like Firefox OS which is JavaScript at the kernel operating system level.

[00:15:08]
I'm anxious to see those things start to take over where we don't need a user land process like node to run. We can just run natively JavaScript any part of our application if we want. So I think we're gonna continue to see that evolve. And I don't get so wrapped up in exactly what is Node doing or not doing or whatever.

[00:15:28]
Okay, question here. Somebody just quoting. So, that's the little brief history lesson that gives you a perspective on how I approach server-side JavaScript. It's a tool to help me solve problems. The problems that I like to solve, are sharing code, not repeating myself, being able to do things in a buffered way.

[00:15:49]
In other words I want to be able to do my front end completely separate from how I do the back end. And that middle end architecture I referred to, the back end essentially becomes irrelevant to the front end. The front end never talks to the back end it talks to the middle end.

[00:16:02]
And the back end talks to the middle end and it has no clue what the front end is doing. Could be a mobile app, could be a web site, could be another API server, it doesn't care. The back end simply becomes a headless black box state machine. It manages the session, it knows what state it's in, you give it some data, it gives you some data back.

[00:16:21]
And that was attractive to me because I didn't want to have to re-learn every single back end system to figure out how to manage the headers, and the cookies, and the HTML files and all that stuff. I just want you to give me some data, I'll figure out the presentation my own.

[00:16:34]
That's the job of the middle end. So even though today I'm not going to espouse specifically this middle end architecture, I just want you to have that as the backdrop for what I'm talking about when we go into this code.

