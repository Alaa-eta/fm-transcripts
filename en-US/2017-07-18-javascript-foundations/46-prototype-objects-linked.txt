[00:00:00]
>> Kyle Simpson: And more set of pain to point out, this is how we model classes. I'm not gonna diagram this cuz the diagram is coming in just a moment, but we have our Foo prototype. If we wanna make child class, we wanna make a Bar that points to it, but the Bar prototype that comes with the Bar function on line 8, where does it link?

[00:00:20]
It links here like all functions do. And where would we want Bar prototype to link? We'd want it to link to foo prototype, right? So what do we gotta do, we do line 12. Line 12 is using a utility called Object.create. Now I just pulled that rabbit out of thin air, you're like where does that come from?

[00:00:42]
That's a built in utility in ES5, so way, way back. But here are the two things that Object.create does, and tell me if this sounds familiar. The first thing Object.create does, create a brand new empty object out of thin air. The second thing object.create does, link it to another object, does that sound familiar?

[00:01:02]
It's almost like it's the first two steps of the new algorithm, which it is, because those are the only two steps that we actually care about here. We wanna create an object and link it to another object, and that's exactly what that utility does. So we now use that newly created linked object as the prototype for Bar, that's what we do on line 12.

[00:01:24]
So now we can start adding to Bar.prototype. We can add a speak method, so now we've got an object down here that's got a speak method, and the speak method can delegate up to the identify method. It still falls apart if you use shadowing. But at least we have some way of approximating something that kinda looks like a class.

[00:01:51]

>> Kyle Simpson: There's a takeaway from this slide that's gonna set us up for our further discussions in this unit. There's a b1 object there, everybody can agree with that, right? Where is b1 linked?
>> Kyle Simpson: It's linked to Bar.prototype, isn't it? Bar.prototype is an object, where is Bar.prototype linked?
>> Speaker 2: Foo prototype.

[00:02:17]

>> Kyle Simpson: Foo prototype is an object.
>> Kyle Simpson: I don't know who to credit this to, but I've heard it said many times. There's a beautiful program hiding inside of this ugly program. The beautiful program in this ugly program, is there's an object linked to another object which is linked to another object.

[00:02:36]
And we get that prototype delegation, and that super unicorn magic, that's an amazing system. And it still blows my mind that Brendan Eich was able to create all of this that we've seen over this unit in the first ten days. I couldn't create this if I was given four years, and he did it in ten days.

[00:02:58]
But the problem with this program is that it's cluttered by all of this other crap. All of these functions and .prototype references and new keywords, all of this incidental complexity, that's what it's called. There's incidental complexity that is making this program, instead of being nice, and clean, and simple, much harder to understand.

