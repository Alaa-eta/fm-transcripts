WEBVTT

1
00:00:00.220 --> 00:00:01.570
&gt;&gt; Kyle Simpson: I've been
promising that we wanna

2
00:00:01.570 --> 00:00:04.610
talk about this double equals thing,
cuz it's the elephant in the room.

3
00:00:04.610 --> 00:00:07.740
This is the most obvious place
where implicit coercion,

4
00:00:07.740 --> 00:00:11.100
not only enters our programs,
but also can bite us.

5
00:00:11.100 --> 00:00:15.010
But it only bites us not because this is
a confusing topic that can't be learned,

6
00:00:15.010 --> 00:00:17.380
it only bites us because it's unlearned.

7
00:00:17.380 --> 00:00:19.650
We just haven't chosen to learn
what double equals is about.

8
00:00:20.750 --> 00:00:22.899
Guess where the best place to learn
what double equals is about is?

9
00:00:24.510 --> 00:00:28.392
Trying it out, reading the spec,
that's all I did, okay?

10
00:00:28.392 --> 00:00:31.330
There's no magical formula here.

11
00:00:31.330 --> 00:00:34.280
What I chose to do was say if
the double equals is so bad,

12
00:00:34.280 --> 00:00:36.210
let's test all of the corner cases and

13
00:00:36.210 --> 00:00:40.490
see which ones of them are really
bad versus not actually bad.

14
00:00:40.490 --> 00:00:44.552
So I came up, I programmatically
generated this list, but

15
00:00:44.552 --> 00:00:48.790
I came up with 24 corner case
coercions with double equals.

16
00:00:48.790 --> 00:00:51.770
As far as I'm aware, these are all
the corner cases that we can express.

17
00:00:55.600 --> 00:00:56.990
And I went down the list and I said,

18
00:00:56.990 --> 00:01:01.710
which ones of these are crazy and
which ones of these make sense?

19
00:01:01.710 --> 00:01:04.160
And I chose to mark the ones
that I thought were strange.

20
00:01:04.160 --> 00:01:11.000
This is subjective, but
I said "0" == false, line 3.

21
00:01:11.000 --> 00:01:12.710
That seems strange to me.

22
00:01:12.710 --> 00:01:16.990
Cuz the string 0 and the value false
are most definitely different values.

23
00:01:18.550 --> 00:01:21.920
So that result where they end
up both becoming numbers and

24
00:01:21.920 --> 00:01:23.770
comparing to each other,
that result is strange.

25
00:01:25.210 --> 00:01:26.430
Should not be, okay?

26
00:01:28.410 --> 00:01:34.457
But by comparison line 8,
false == null, that fails.

27
00:01:34.457 --> 00:01:37.034
And that makes a lot of sense to fail,
because false and

28
00:01:37.034 --> 00:01:39.180
null are distinctly different values.

29
00:01:39.180 --> 00:01:43.040
And so they aren't equal to each other,
do you follow me?

30
00:01:44.040 --> 00:01:49.580
So if we do the math here, there are 7
of these 24 which are kind of outliers,

31
00:01:49.580 --> 00:01:51.920
they are genuinely WTFs, and

32
00:01:51.920 --> 00:01:55.170
there's another 17 of them that
actually are pretty reasonable.

33
00:01:56.850 --> 00:01:58.930
Your numbers might be slightly different,
but

34
00:01:58.930 --> 00:02:03.487
the point that I'm trying to get at is,
&gt;&gt; Kyle Simpson: Supposedly,

35
00:02:03.487 --> 00:02:08.543
all of coercion is bad, and it's okay
to just get rid of all of this implicit

36
00:02:08.543 --> 00:02:14.870
coercion, but I kinda think that would be
sort of baby with the bath water here.

37
00:02:14.870 --> 00:02:17.770
Cuz it actually looks like most
of coercion's pretty good, and

38
00:02:17.770 --> 00:02:20.120
there's only a few cornered cases
that we should be worried about.

39
00:02:22.100 --> 00:02:26.849
Because there's an infinite number of
double equals coercion comparisons that

40
00:02:26.849 --> 00:02:28.315
aren't corner cases and

41
00:02:28.315 --> 00:02:33.316
they're all completely reasonable.
&gt;&gt; Kyle Simpson: So out

42
00:02:33.316 --> 00:02:39.260
of the infinite space of reasonable ones,
there's only seven which are problematic.

43
00:02:39.260 --> 00:02:41.690
That's the point, okay?

44
00:02:41.690 --> 00:02:47.529
Let's zero in on those 7, here they are.
&gt;&gt; Kyle Simpson: What do you notice

45
00:02:47.529 --> 00:02:53.861
about the first four in that list?
&gt;&gt; Kyle Simpson: They're

46
00:02:53.861 --> 00:02:57.530
all doing a double equals
comparison with false, right?

47
00:02:57.530 --> 00:02:59.910
And I already told you
to eliminate those 4.

48
00:02:59.910 --> 00:03:01.830
So that was pretty easy.

49
00:03:01.830 --> 00:03:04.530
We just went from 7 down to 3.

50
00:03:04.530 --> 00:03:07.487
Eliminate those 4 and
focus on these 3 in particular.

51
00:03:07.487 --> 00:03:10.040
And now, let's look at those 3.

52
00:03:10.040 --> 00:03:12.490
When do those kinds of
thing happen in code?

53
00:03:12.490 --> 00:03:15.694
Let's look at the line 6 and
line 7 specifically.

54
00:03:15.694 --> 00:03:20.235
When it is it that we end up doing
a double equals comparison with

55
00:03:20.235 --> 00:03:23.060
a empty string and an empty array?

56
00:03:23.060 --> 00:03:24.530
When can that happen?

57
00:03:24.530 --> 00:03:27.040
Or, when can we compare
a zero to an empty array?

58
00:03:27.040 --> 00:03:32.170
I decided to test this against
my own history of my code,

59
00:03:32.170 --> 00:03:33.180
all the code that I've ever written.

60
00:03:33.180 --> 00:03:36.820
I decided to go and try to do some
analysis of my code and figure out,

61
00:03:36.820 --> 00:03:40.530
are there any places where I do
the double equals and this can happen?

62
00:03:40.530 --> 00:03:44.740
And I found very few examples where
that's even remotely possible.

63
00:03:44.740 --> 00:03:46.380
Now your code may be different.

64
00:03:46.380 --> 00:03:47.480
The point I'm trying to get at is,

65
00:03:47.480 --> 00:03:51.200
it's not terribly common that we
end up with these logic cases,

66
00:03:51.200 --> 00:03:54.450
where we could end up comparing
an empty string to and empty array.

67
00:03:54.450 --> 00:03:58.785
There's a few places, but it's not like
every line of code that this happens.

68
00:03:58.785 --> 00:04:01.558
So even line 6 and line 7,
they are corner cases but

69
00:04:01.558 --> 00:04:05.882
they're not common corner cases,
they're rare corner cases.

70
00:04:05.882 --> 00:04:11.094
So we really just end up back in line 5,
the root of all evil,

71
00:04:11.094 --> 00:04:14.998
that one empty string
double equaling to 0.

72
00:04:14.998 --> 00:04:16.200
They all sort of devolve to it.

73
00:04:16.200 --> 00:04:22.413
As a matter of fact, line 6 devolves
to it, and line 7 devolves to it.

74
00:04:22.413 --> 00:04:26.000
Line 6 and
line 7 happen because of line 5.

75
00:04:26.000 --> 00:04:28.030
It really is the root of all evil.

76
00:04:28.030 --> 00:04:30.930
And some of you may have
seen the video before.

77
00:04:30.930 --> 00:04:35.240
Came out several years back, and it was
making fun of, in particular, this case.

78
00:04:35.240 --> 00:04:39.540
Where the empty array is somehow
coercively equal to the negation of

79
00:04:39.540 --> 00:04:40.680
the empty array.

80
00:04:40.680 --> 00:04:42.160
And you're like, that's crazy.

81
00:04:42.160 --> 00:04:45.560
People that design JavaScript,
I don't know what they're smoking, right?

82
00:04:45.560 --> 00:04:49.020
So I got a lot of traction
from making fun of JavaScript.

83
00:04:49.020 --> 00:04:53.035
There is lots of opportunity to make fun
of JavaScript when you are ignorant about

84
00:04:53.035 --> 00:04:57.610
JavaScript.
&gt;&gt; Kyle Simpson: It's easy.

85
00:04:57.610 --> 00:05:02.300
The hard part is to say, hey, wait
a minute, why is JavaScript doing that?

86
00:05:02.300 --> 00:05:04.410
Well, part of my
understanding is different.

87
00:05:04.410 --> 00:05:07.341
You know what might be
different between me and you?

88
00:05:07.341 --> 00:05:10.730
And I mean you metaphorically
like the industry as a whole.

89
00:05:10.730 --> 00:05:14.480
What might be different between me and you
is that when I see something that doesn't

90
00:05:14.480 --> 00:05:18.070
make sense, I don't blame
the design of the language first.

91
00:05:19.400 --> 00:05:22.110
There's a lot of developers that when
they see something in JavaScript

92
00:05:22.110 --> 00:05:24.140
that doesn't make sense,
you know what they do?

93
00:05:24.140 --> 00:05:26.800
All those idiot designers
of the JavaScript language.

94
00:05:28.010 --> 00:05:32.830
Because we assume somehow, that we
should be able to look at something and

95
00:05:32.830 --> 00:05:38.140
immediately intuit exactly what it's
doing without any learning at all.

96
00:05:38.140 --> 00:05:40.050
And if it takes any effort on our part or

97
00:05:40.050 --> 00:05:43.910
if it's confusing in the slightest,
we immediately jump to the conclusion,

98
00:05:43.910 --> 00:05:46.130
those people don't know what
they're doing, designing languages.

99
00:05:46.130 --> 00:05:49.070
Because my Python, or
my Ruby, or my .NET, or

100
00:05:49.070 --> 00:05:51.550
fill in the blank of my favorite
language doesn't do that.

101
00:05:52.850 --> 00:05:56.060
We immediately assume the designers
of the language were poor.

102
00:05:56.060 --> 00:05:57.580
You know what I assume?

103
00:05:57.580 --> 00:05:59.370
There's something wrong
with my understanding.

104
00:06:01.820 --> 00:06:06.320
I mean when you come down to it,
the source of every bug in

105
00:06:06.320 --> 00:06:10.040
every program ever written is
actually a lack of understanding.

106
00:06:11.150 --> 00:06:12.780
This is how I like to say it.

107
00:06:12.780 --> 00:06:17.239
At the point where your brain diverges
from the way the computer works.

108
00:06:18.620 --> 00:06:21.460
It is at that junction point
that bugs enter your code,

109
00:06:23.110 --> 00:06:25.480
because if you understood it,
you wouldn't write a bug, right?

110
00:06:27.090 --> 00:06:30.070
I mean if you fully understood a piece
of code, you'd write it correct.

111
00:06:30.070 --> 00:06:32.630
So if there was a bug,
there must be a lack of understanding, and

112
00:06:32.630 --> 00:06:36.790
all I've done is embrace that
as a core philosophy of mine.

113
00:06:36.790 --> 00:06:39.310
If there's something I don't understand,
the problem is on me.

114
00:06:41.060 --> 00:06:45.530
Now, I've made plenty of critiques even
today about design decisions of language,

115
00:06:45.530 --> 00:06:48.070
but I'm not doing that
from a place of ignorance.

116
00:06:48.070 --> 00:06:50.220
I'm doing that from a place of
I've studied it deeply, and

117
00:06:50.220 --> 00:06:52.870
I've worked with people, and
I've become frustrated by it.

118
00:06:52.870 --> 00:06:55.010
And by the way,
those opinions have changed.

119
00:06:55.010 --> 00:06:58.840
There are things that I used to complain
about that I no longer complain about cuz

120
00:06:58.840 --> 00:06:59.860
now I understand them.

121
00:07:01.590 --> 00:07:05.600
And because that was true for myself,
I thought I wonder if I shared with other

122
00:07:05.600 --> 00:07:09.960
people and they learned,
maybe they'd complain less.

123
00:07:12.000 --> 00:07:12.510
Food for thought.

124
00:07:13.520 --> 00:07:19.260
So this double, I mean this empty array
equal to the negation of the empty array.

125
00:07:19.260 --> 00:07:22.560
First off,
the problem of how absurd that looks

126
00:07:22.560 --> 00:07:26.000
comes from a misunderstanding
about how operators work.

127
00:07:26.000 --> 00:07:29.420
There's a misunderstanding here that the
operators are gonna happen all at once,

128
00:07:30.540 --> 00:07:31.490
which isn't the case.

129
00:07:31.490 --> 00:07:33.310
There is an operator precedence,

130
00:07:33.310 --> 00:07:36.840
the negate's gonna happen
before the comparison, okay?

131
00:07:37.890 --> 00:07:40.430
It's not as obvious but it's a fact.

132
00:07:40.430 --> 00:07:42.928
So, what's gonna happen when
we negate an empty array?

133
00:07:42.928 --> 00:07:48.850
That's a non-primitive, so first,
we're gonna call the two primitive on it.

134
00:07:48.850 --> 00:07:50.675
What's the two primitive
of an empty array?

135
00:07:50.675 --> 00:07:52.410
&gt;&gt; Speaker 2: String.

136
00:07:52.410 --> 00:07:53.130
&gt;&gt; Kyle Simpson: Unfortunately,

137
00:07:53.130 --> 00:07:53.990
it's the empty string.

138
00:07:53.990 --> 00:07:55.830
It oughta be the string
with brackets in it, but

139
00:07:55.830 --> 00:07:57.880
unfortunately it's the empty string.

140
00:07:57.880 --> 00:08:01.100
So we have turned it into
the empty string as its primitive.

141
00:08:02.270 --> 00:08:07.540
And now, the negate operator says,
well, wait, I don't have a boolean yet.

142
00:08:07.540 --> 00:08:12.580
So I need to take that empty string and
turn it into a boolean.

143
00:08:14.650 --> 00:08:17.200
So, what is the empty string's boolean

144
00:08:17.200 --> 00:08:19.230
equivalent?
&gt;&gt; Speaker 2: False.

145
00:08:20.360 --> 00:08:21.650
&gt;&gt; Kyle Simpson: It's false, right?

146
00:08:21.650 --> 00:08:25.020
But now, we're in the negate operator,
so we're gonna flip it around to true.

147
00:08:25.020 --> 00:08:29.020
So now, what we're actually saying is
the empty array double equal to true.

148
00:08:29.020 --> 00:08:31.190
That's the real comparison
that's happening here.

149
00:08:31.190 --> 00:08:31.904
Are you with me on that?

150
00:08:31.904 --> 00:08:35.909
Now, the empty array, I'm sorry,

151
00:08:35.909 --> 00:08:41.380
I must have gotten that flipped backwards.

152
00:08:41.380 --> 00:08:46.300
The empty array became,
&gt;&gt; Kyle Simpson: Hold on just a moment.

153
00:08:51.410 --> 00:08:52.380
I know what's wrong.

154
00:08:52.380 --> 00:08:55.892
So the empty array is gonna
become the string, and

155
00:08:55.892 --> 00:08:58.489
that's gonna become the number 0.

156
00:08:58.489 --> 00:09:01.338
And then we have the array on the other
side, which becomes a string and

157
00:09:01.338 --> 00:09:02.940
it becomes a number zero.

158
00:09:02.940 --> 00:09:05.320
So now, we compare 0 to 0.

159
00:09:05.320 --> 00:09:11.156
We have two occurrences of the root
of all evil here, string became 0.

160
00:09:11.156 --> 00:09:15.760
If empty string had just become NaN,
that wouldn't have happened, okay?

161
00:09:17.120 --> 00:09:21.520
So all it takes is to actually dig into,
understand the operations that occur.

162
00:09:24.060 --> 00:09:26.310
Yes.
&gt;&gt; Speaker 2: There was a question on,

163
00:09:26.310 --> 00:09:30.290
can you explain why false
double equals to null is false?

164
00:09:30.290 --> 00:09:33.730
You're saying if double equals does
a number coercion and both null and

165
00:09:33.730 --> 00:09:34.942
false coerce to 0,

166
00:09:34.942 --> 00:09:38.690
should the result not be true?
&gt;&gt; Kyle Simpson: Yes, except for

167
00:09:38.690 --> 00:09:43.600
the fact that there is special case which
we're gonna look at the spec in a minute.

168
00:09:43.600 --> 00:09:48.530
There is a special case in the spec,
which deals with null and undefined.

169
00:09:48.530 --> 00:09:53.350
They are treated specially and
importantly, null and

170
00:09:53.350 --> 00:09:56.720
undefined are treated as coercively
equal to each other, and

171
00:09:56.720 --> 00:09:58.400
to know other values in the language.

172
00:10:00.400 --> 00:10:04.450
So if it was only a numeric coercion,
that assertion would be true,

173
00:10:04.450 --> 00:10:07.710
that would be correct, but
there's more to the spec than that.

