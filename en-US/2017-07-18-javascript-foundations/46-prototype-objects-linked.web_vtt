WEBVTT

1
00:00:00.570 --> 00:00:04.800
&gt;&gt; Kyle Simpson: And more set of pain to
point out, this is how we model classes.

2
00:00:04.800 --> 00:00:08.470
I'm not gonna diagram this cuz the diagram
is coming in just a moment, but

3
00:00:08.470 --> 00:00:09.950
we have our Foo prototype.

4
00:00:09.950 --> 00:00:14.870
If we wanna make child class,
we wanna make a Bar that points to it, but

5
00:00:14.870 --> 00:00:20.390
the Bar prototype that comes with the Bar
function on line 8, where does it link?

6
00:00:20.390 --> 00:00:23.630
It links here like all functions do.

7
00:00:23.630 --> 00:00:25.650
And where would we want
Bar prototype to link?

8
00:00:27.250 --> 00:00:30.344
We'd want it to link to foo prototype,
right?

9
00:00:30.344 --> 00:00:32.982
So what do we gotta do, we do line 12.

10
00:00:32.982 --> 00:00:38.450
Line 12 is using a utility
called Object.create.

11
00:00:38.450 --> 00:00:40.310
Now I just pulled that
rabbit out of thin air,

12
00:00:40.310 --> 00:00:42.260
you're like where does that come from?

13
00:00:42.260 --> 00:00:45.390
That's a built in utility in ES5,
so way, way back.

14
00:00:46.730 --> 00:00:49.490
But here are the two things
that Object.create does,

15
00:00:49.490 --> 00:00:51.740
and tell me if this sounds familiar.

16
00:00:51.740 --> 00:00:56.620
The first thing Object.create does, create
a brand new empty object out of thin air.

17
00:00:56.620 --> 00:01:00.120
The second thing object.create does,
link it to another object,

18
00:01:00.120 --> 00:01:01.350
does that sound familiar?

19
00:01:02.920 --> 00:01:08.010
It's almost like it's the first two
steps of the new algorithm, which it is,

20
00:01:08.010 --> 00:01:10.980
because those are the only two steps
that we actually care about here.

21
00:01:10.980 --> 00:01:14.005
We wanna create an object and
link it to another object, and

22
00:01:14.005 --> 00:01:16.131
that's exactly what that utility does.

23
00:01:16.131 --> 00:01:21.390
So we now use that newly created
linked object as the prototype for

24
00:01:21.390 --> 00:01:24.455
Bar, that's what we do on line 12.

25
00:01:24.455 --> 00:01:28.692
So now we can start
adding to Bar.prototype.

26
00:01:28.692 --> 00:01:33.324
We can add a speak method, so now we've
got an object down here that's got a speak

27
00:01:33.324 --> 00:01:37.890
method, and the speak method can
delegate up to the identify method.

28
00:01:37.890 --> 00:01:39.670
It still falls apart if you use shadowing.

29
00:01:41.280 --> 00:01:44.195
But at least we have some way of
approximating something that kinda looks

30
00:01:44.195 --> 00:01:44.780
like a class.

31
00:01:51.036 --> 00:01:54.416
&gt;&gt; Kyle Simpson: There's a takeaway from
this slide that's gonna set us up for

32
00:01:54.416 --> 00:01:56.570
our further discussions in this unit.

33
00:01:58.380 --> 00:02:02.250
There's a b1 object there,
everybody can agree with that, right?

34
00:02:02.250 --> 00:02:03.144
Where is b1 linked?

35
00:02:09.141 --> 00:02:11.537
&gt;&gt; Kyle Simpson: It's linked
to Bar.prototype, isn't it?

36
00:02:11.537 --> 00:02:14.941
Bar.prototype is an object,
where is Bar.prototype linked?

37
00:02:16.550 --> 00:02:17.510
&gt;&gt; Speaker 2: Foo prototype.

38
00:02:17.510 --> 00:02:18.581
&gt;&gt; Kyle Simpson: Foo
prototype is an object.

39
00:02:21.203 --> 00:02:22.940
&gt;&gt; Kyle Simpson: I don't know
who to credit this to, but

40
00:02:22.940 --> 00:02:25.000
I've heard it said many times.

41
00:02:25.000 --> 00:02:27.930
There's a beautiful program hiding
inside of this ugly program.

42
00:02:30.070 --> 00:02:32.350
The beautiful program
in this ugly program,

43
00:02:32.350 --> 00:02:36.499
is there's an object linked to another
object which is linked to another object.

44
00:02:36.499 --> 00:02:40.998
And we get that prototype delegation,
and that super unicorn magic,

45
00:02:40.998 --> 00:02:42.836
that's an amazing system.

46
00:02:42.836 --> 00:02:47.805
And it still blows my mind that
Brendan Eich was able to create all of

47
00:02:47.805 --> 00:02:52.180
this that we've seen over this
unit in the first ten days.

48
00:02:52.180 --> 00:02:56.279
I couldn't create this if I was given
four years, and he did it in ten days.

49
00:02:58.270 --> 00:03:01.860
But the problem with this program is that
it's cluttered by all of this other crap.

50
00:03:03.140 --> 00:03:07.240
All of these functions and
.prototype references and new keywords,

51
00:03:07.240 --> 00:03:13.380
all of this incidental complexity,
that's what it's called.

52
00:03:13.380 --> 00:03:17.390
There's incidental complexity
that is making this program,

53
00:03:17.390 --> 00:03:20.680
instead of being nice, and clean, and
simple, much harder to understand.

