WEBVTT

1
00:00:00.510 --> 00:00:04.020
&gt;&gt; Kyle Simpson: One last point to make
about delegation, we'll wrap up and

2
00:00:04.020 --> 00:00:05.000
do our final exercise.

3
00:00:06.010 --> 00:00:10.090
Delegation is not just
a simpler style of code.

4
00:00:10.090 --> 00:00:13.480
It's not just what I claim
as a simpler mental model.

5
00:00:13.480 --> 00:00:16.690
It's actually a very different
way of designing software.

6
00:00:16.690 --> 00:00:18.933
It's a different design pattern.

7
00:00:18.933 --> 00:00:22.317
If functional programming
is a design pattern.

8
00:00:22.317 --> 00:00:25.580
If class-oriented coding
is a design pattern.

9
00:00:25.580 --> 00:00:30.850
Delegation is a third style
of designing software.

10
00:00:30.850 --> 00:00:36.198
It doesn't get a lot of attention, because
we've been using the system on prototypes

11
00:00:36.198 --> 00:00:41.342
to do classes instead of using it for what
its really good at, which is delegation.

12
00:00:41.342 --> 00:00:45.795
So I wanna point out that to begin to
change your brain about how you design

13
00:00:45.795 --> 00:00:47.621
software using this system,

14
00:00:47.621 --> 00:00:51.731
you have to move away from the thought
process of parent and child.

15
00:00:51.731 --> 00:00:55.864
And instead embrace objects
that are peers of each other.

16
00:00:55.864 --> 00:00:58.650
You have to think about peer to
peer instead of parent to child.

17
00:00:59.800 --> 00:01:03.120
And I wanna give you a scenario
to demonstrate that.

18
00:01:03.120 --> 00:01:06.028
Imagine I have a log in
page in my application, and

19
00:01:06.028 --> 00:01:08.115
I have two different controllers.

20
00:01:08.115 --> 00:01:11.983
I have the Authcontroller, which handles
communications with the server and

21
00:01:11.983 --> 00:01:15.746
I have the LoginFormController,
which handles dealing with the webpage.

22
00:01:15.746 --> 00:01:19.021
Dealing with the input form and
buttons, and

23
00:01:19.021 --> 00:01:22.810
displaying of error messages and all that.

24
00:01:22.810 --> 00:01:27.062
I've only partially implemented these, so
obviously there's missing functionality.

25
00:01:27.062 --> 00:01:31.708
But what I wanna point out is
what's going on online 13 and 14.

26
00:01:31.708 --> 00:01:35.650
I make the LoginFormController,
it's a real concrete object.

27
00:01:35.650 --> 00:01:39.250
I make it delegate to
the AuthController object.

28
00:01:39.250 --> 00:01:42.239
It's not that that's it's parent,
it's just there's two peers of each other.

29
00:01:43.400 --> 00:01:46.460
And then this is how I
let them work together.

30
00:01:47.510 --> 00:01:52.310
On line 16,
I grabbed the username from the form and

31
00:01:52.310 --> 00:01:56.034
I set it into a property on my
LoginFormController object.

32
00:01:57.420 --> 00:02:01.430
So I saved this .username equals and
this .password equals, and

33
00:02:01.430 --> 00:02:03.388
then look at line 18.

34
00:02:03.388 --> 00:02:07.373
I call this .authenticate.

35
00:02:07.373 --> 00:02:12.164
I'm calling a method that does
not exist on LoginFormController.

36
00:02:13.915 --> 00:02:15.300
&gt;&gt; Kyle Simpson: Where does it exists?

37
00:02:16.330 --> 00:02:18.440
Line 2, under AuthController.

38
00:02:19.470 --> 00:02:23.200
So I am intentionally delegating
to a different object.

39
00:02:23.200 --> 00:02:28.550
Now authenticate, when it runs, what's
the very first thing it does on line 4?

40
00:02:28.550 --> 00:02:34.220
It references this.username and
this.password.

41
00:02:34.220 --> 00:02:38.785
But wait a minute,
AuthController doesn't have a username and

42
00:02:38.785 --> 00:02:40.992
password property, does it?

43
00:02:40.992 --> 00:02:43.522
But what is the this.keyword point at?

44
00:02:46.368 --> 00:02:48.210
&gt;&gt; Kyle Simpson: Where's the call site?

45
00:02:48.210 --> 00:02:49.660
&gt;&gt; Students: LoginForm?

46
00:02:49.660 --> 00:02:53.490
&gt;&gt; Kyle Simpson: The call site is line 18,
which is gonna be the LoginFormController.

47
00:02:54.590 --> 00:02:56.390
So when we are running line four,

48
00:02:56.390 --> 00:03:00.480
we're actually running in the context
of the LoginFormController.

49
00:03:00.480 --> 00:03:04.520
And we're able to implicitly get
the username and password property.

50
00:03:04.520 --> 00:03:07.000
That context has been
shared with that method.

51
00:03:08.570 --> 00:03:11.200
And here's where it really
starts to get interesting.

52
00:03:11.200 --> 00:03:14.696
The callback that use for
server.authenticate,

53
00:03:14.696 --> 00:03:19.246
I make it the handleResponse on my
list object, but wait a minute,

54
00:03:19.246 --> 00:03:23.243
AuthController doesn't have
a handleResponse method.

55
00:03:23.243 --> 00:03:25.504
Who has the handleResponse method?

56
00:03:30.945 --> 00:03:35.250
&gt;&gt; Kyle Simpson: LoginFormController
has handleResponse, okay?

57
00:03:35.250 --> 00:03:38.486
Sorry, I call it handleResponse when I
meant displayError and that's a mistake.

58
00:03:39.984 --> 00:03:42.582
&gt;&gt; Kyle Simpson: Sorry about that, yeah.

59
00:03:42.582 --> 00:03:48.970
Okay, so I'm binding the handleResponse
to call displayError.

60
00:03:50.910 --> 00:03:51.603
You see that?

61
00:03:56.358 --> 00:03:58.460
&gt;&gt; Kyle Simpson: So
what's really happening?

62
00:03:58.460 --> 00:04:01.340
Is that my LoginFormController object and

63
00:04:01.340 --> 00:04:05.390
my AuthController object
are independent objects, but

64
00:04:05.390 --> 00:04:10.750
during the call context they virtually
compose themselves into one context.

65
00:04:12.080 --> 00:04:16.280
And one of them can share properties and
the other one can share methods.

66
00:04:16.280 --> 00:04:18.619
And then when the call is done,
they go back to being independent.

67
00:04:21.100 --> 00:04:23.729
That's the real power of delegation.

68
00:04:23.729 --> 00:04:25.790
That's what I call virtual composition.

69
00:04:28.462 --> 00:04:33.544
&gt;&gt; Kyle Simpson: That at the call site, we
decide to mix these two objects together.

70
00:04:38.154 --> 00:04:42.180
&gt;&gt; Kyle Simpson: You might be wondering,
why would this be beneficial?

71
00:04:42.180 --> 00:04:45.090
This is a different way of thinking
than I've ever done before.

72
00:04:45.090 --> 00:04:46.760
I haven't needed it,
why would I need it here?

73
00:04:48.230 --> 00:04:53.245
One of many benefits that I could point
out in addition to all the questions

74
00:04:53.245 --> 00:04:57.095
that we might ask about simplicity
of code and all that other stuff.

75
00:04:57.095 --> 00:05:00.605
But one of the more concrete
benefits to delegation

76
00:05:00.605 --> 00:05:05.595
is that now LoginFormController and
AuthController are more easily testable.

77
00:05:07.575 --> 00:05:13.080
For example, if I wanted to test
LoginFormController, all I need to

78
00:05:13.080 --> 00:05:19.320
do is make LoginFormController delegate to
a mock off object, off controller object.

79
00:05:20.660 --> 00:05:24.760
I just make a fake AuthController,
a mock, and I delegate to it.

80
00:05:24.760 --> 00:05:28.000
And now I can fully test
LoginFormController.

81
00:05:28.000 --> 00:05:30.730
If I wanna test AuthController,

82
00:05:30.730 --> 00:05:35.160
all I need to do is make a mock login
form controller that delegates to it.

83
00:05:36.500 --> 00:05:41.950
These two pieces stay independent, which
makes them easier to independently test.

84
00:05:41.950 --> 00:05:47.269
And they only sit together at the call
site time through virtual composition.

85
00:05:49.440 --> 00:05:53.245
Try independently testing two modules
that are hard coded to each other.

86
00:05:53.245 --> 00:05:56.272
Try independently testing two classes,
which are,

87
00:05:56.272 --> 00:06:00.117
one is instantiating the other or
one is inheriting from the other.

88
00:06:00.117 --> 00:06:03.250
And you'll find out that testing
pieces like that gets a lot harder.

89
00:06:04.310 --> 00:06:08.263
These pieces are much easier to
test because they are independent.

90
00:06:15.448 --> 00:06:17.736
&gt;&gt; Kyle Simpson: It has been claimed,
and this is not unique to me,

91
00:06:17.736 --> 00:06:19.920
I'm simply repeating it.

92
00:06:19.920 --> 00:06:25.156
It has been claimed that if you
compare a class oriented system

93
00:06:25.156 --> 00:06:30.595
to a delegation oriented system,
that the delegation oriented

94
00:06:30.595 --> 00:06:36.048
system is actually more powerful
than a class oriented system.

95
00:06:36.048 --> 00:06:41.402
And the reason for that claim is this,
you can implement classes or

96
00:06:41.402 --> 00:06:46.852
fake classes with the delegation system,
but you cannot implement

97
00:06:46.852 --> 00:06:52.452
delegation with the class system
&gt;&gt; Kyle Simpson: We've

98
00:06:52.452 --> 00:06:53.710
proven that, haven't we?

99
00:06:53.710 --> 00:06:58.787
Haven't we implemented classes on top
of JavaScript's delegation system?

100
00:06:58.787 --> 00:07:03.460
But you can't do the reverse,
you can't go into something like Java and

101
00:07:03.460 --> 00:07:08.298
implement this graceful style of
dynamic context sharing of delegation.

102
00:07:08.298 --> 00:07:09.236
[COUGH]

