WEBVTT

1
00:00:00.452 --> 00:00:03.323
So as we saw earlier in the course,

2
00:00:03.323 --> 00:00:09.268
we can add events to elements with
a thing that we call the on directive.

3
00:00:09.268 --> 00:00:12.672
And that's basically equivalent
to doing element.addEventListener

4
00:00:12.672 --> 00:00:13.849
in vanilla JavaScript.

5
00:00:15.680 --> 00:00:19.253
So in this application here,
we have a mouse move handler,

6
00:00:19.253 --> 00:00:23.475
which is gonna change this value to
the current position of the mouse.

7
00:00:23.475 --> 00:00:26.319
And then we're just displaying
that inside the markup here.

8
00:00:29.710 --> 00:00:35.034
And if we now add mouse move
handler to the div, on:mousemove =,

9
00:00:35.034 --> 00:00:40.672
and then just pass it a reference,
To the function,

10
00:00:46.209 --> 00:00:51.381
Then now as we move the mouse around,
the text on the screen will change.

11
00:00:51.381 --> 00:00:55.935
And you'll notice that this function
reference is being called with the event

12
00:00:55.935 --> 00:00:59.600
object that you would get if
you're using addEventListener.

13
00:00:59.600 --> 00:01:00.589
Its exactly the same.

14
00:01:04.092 --> 00:01:06.499
And we can also declare
event handlers inline.

15
00:01:06.499 --> 00:01:11.526
We don't need to pass
a function reference,

16
00:01:11.526 --> 00:01:14.977
we can do it like this instead.

17
00:01:25.872 --> 00:01:29.733
Still works, and now we can get rid of
that handler because we no longer need it.

18
00:01:31.237 --> 00:01:35.390
This can be very convenient at times, but
it's also something that you can use to

19
00:01:35.390 --> 00:01:38.092
make your templates look
like absolute gibberish.

20
00:01:38.092 --> 00:01:42.187
So generally, once your event handlers
get more complicated than this,

21
00:01:42.187 --> 00:01:45.765
you want to hoist them into the script
block and give them a name.

22
00:01:50.750 --> 00:01:52.642
I should point out something here.

23
00:01:52.642 --> 00:01:57.506
If you're using an editor
where this syntax highlighting

24
00:01:57.506 --> 00:02:01.676
causes problems because
it's not typical HTML,

25
00:02:01.676 --> 00:02:05.942
you can wrap the whole thing
in quote marks, just so

26
00:02:05.942 --> 00:02:10.531
you don't have those syntax
highlighting problems.

27
00:02:10.531 --> 00:02:14.051
As far as Svelte's concerned,
those two things are identical.

28
00:02:14.051 --> 00:02:15.731
It's not gonna treat this as a string.

29
00:02:21.732 --> 00:02:24.740
So we can also add modifiers
to our event handlers.

30
00:02:24.740 --> 00:02:29.547
And what modifiers do is they change the
behavior of the event handler in some way.

31
00:02:29.547 --> 00:02:35.656
For example, we can add a once
modifier to this on:click handler.

32
00:02:35.656 --> 00:02:38.501
Right now, if I do click me,
I'll get an alert.

33
00:02:38.501 --> 00:02:40.477
I do click me again,
I'll get another alert.

34
00:02:40.477 --> 00:02:42.499
Third time, a third alert.

35
00:02:42.499 --> 00:02:44.871
But sometimes you want
an event to only happen once.

36
00:02:44.871 --> 00:02:48.106
So we'd use the pipe syntax pipe once.

37
00:02:49.806 --> 00:02:53.165
It'll pipe the event
through the once modifier.

38
00:02:53.165 --> 00:02:58.343
And now click once, click twice,
click three times, nothing happens.

39
00:03:00.243 --> 00:03:02.523
There's a few different modifiers
that we have access to.

40
00:03:02.523 --> 00:03:07.774
We have preventDefault, which calls
event.preventDefault before handling

41
00:03:07.774 --> 00:03:13.666
the event, which is useful for handling
form submissions client-side, for example.

42
00:03:13.666 --> 00:03:16.838
stopPropagation, which calls
event.stopPropagation,

43
00:03:16.838 --> 00:03:20.138
which means that the event
doesn't bubble to outer elements.

44
00:03:20.138 --> 00:03:22.195
We can add the passive modifier,

45
00:03:22.195 --> 00:03:26.543
which will improve scrolling
performance on touch and wheel events.

46
00:03:26.543 --> 00:03:32.474
Although, Svelte will, if it's safe to,
add that modifier itself.

47
00:03:32.474 --> 00:03:37.320
The capture modifier causes the event
to be handled on the capture phase

48
00:03:37.320 --> 00:03:39.509
as opposed to the bubble phase.

49
00:03:39.509 --> 00:03:44.222
Basically what that means is events
work their way in from the window when

50
00:03:44.222 --> 00:03:45.696
they first happened.

51
00:03:45.696 --> 00:03:47.273
So if you click on an element,

52
00:03:47.273 --> 00:03:50.314
the window receives the event
during the capture phase.

53
00:03:50.314 --> 00:03:54.169
And then any parent elements get it
all the way down to the element that

54
00:03:54.169 --> 00:03:57.444
was actually clicked,
which is called the event target.

55
00:03:57.444 --> 00:04:01.448
And then it goes to the bubble phase and
works its way back out again.

56
00:04:01.448 --> 00:04:06.963
And by default, Svelte event handlers
will be handled in the bubble phase.

57
00:04:06.963 --> 00:04:10.769
But very occasionally, you will need
to handle them in the capture phase.

58
00:04:10.769 --> 00:04:14.054
And that modifier allows you to do so.

59
00:04:14.054 --> 00:04:18.991
And we also have the self modifier, which
only triggers the handler if the event

60
00:04:18.991 --> 00:04:23.205
target is the element itself,
rather than a child of that element.

61
00:04:27.976 --> 00:04:30.604
So that's what DOM events look like.

62
00:04:30.604 --> 00:04:32.937
But we also have component events,

63
00:04:32.937 --> 00:04:37.230
which are a way that components
can communicate with each other.

64
00:04:37.230 --> 00:04:42.492
So typically, our data will
flow into components as props,

65
00:04:42.492 --> 00:04:48.899
but it can flow back out of components
in cases where it needs to as events.

66
00:04:48.899 --> 00:04:53.527
So here, in our App.svelte,
we have an inner component and

67
00:04:53.527 --> 00:05:00.177
we have an on:message event handler that's
gonna alert the details of that message.

68
00:05:00.177 --> 00:05:03.860
Inside our inner component,
we need to set that up so

69
00:05:03.860 --> 00:05:06.300
that this event gets dispatched.

70
00:05:06.300 --> 00:05:09.129
And the way that we do it
is by importing a function

71
00:05:09.129 --> 00:05:12.238
called createEventDispatcher
from Svelte itself.

72
00:05:19.844 --> 00:05:22.550
And once we've done that,
we create a dispatch function.

73
00:05:31.875 --> 00:05:34.971
And then inside our
sayHello function here,

74
00:05:34.971 --> 00:05:38.718
we're gonna call dispatch
with the name of the event,

75
00:05:38.718 --> 00:05:43.134
which in this case, is message and
an optional payload of data.

76
00:05:51.683 --> 00:05:56.521
And now when we, oops, and
now when we click on this button,

77
00:05:58.593 --> 00:06:03.495
The inner component creates the event,
broadcasts it, and

78
00:06:03.495 --> 00:06:07.252
then the outer component
is able to handle it.

79
00:06:07.252 --> 00:06:08.790
And if we log the event here,

80
00:06:16.086 --> 00:06:17.785
It's gonna comment that out.

81
00:06:29.226 --> 00:06:34.385
You'll see that what we're using
is the native DOM custom event.

82
00:06:34.385 --> 00:06:39.343
Which, among other things, has this detail
property which corresponds to the payload

83
00:06:39.343 --> 00:06:41.695
that we passed to the dispatch function.

84
00:06:46.202 --> 00:06:50.383
Now a question that we get a lot is,
why do we need to do this two lines stanza

85
00:06:50.383 --> 00:06:55.188
the where we import createEventDispatcher
and then we create a dispatch function?

86
00:06:55.188 --> 00:06:59.844
Wouldn't it be easier if we could just
do import { dispatch } from 'svelte' and

87
00:06:59.844 --> 00:07:01.065
then get rid of that?

88
00:07:01.065 --> 00:07:05.521
So the way that it works is when this
script block is being executed when

89
00:07:05.521 --> 00:07:10.972
a component is created, Svelte knows which
component is currently instantiating.

90
00:07:10.972 --> 00:07:13.839
And so when we call a function
like createEventDispatcher,

91
00:07:13.839 --> 00:07:17.390
we're able to create a function that
is bound to that specific component.

92
00:07:17.390 --> 00:07:20.570
Whereas if we were just importing
a function called dispatch,

93
00:07:20.570 --> 00:07:23.690
which doesn't exist, from Svelte,
then when we called it,

94
00:07:23.690 --> 00:07:27.727
Svelte will have no way of knowing which
component was dispatched in the event.

95
00:07:27.727 --> 00:07:30.794
And so it wouldn't know which
handlers needed to be triggered.

96
00:07:30.794 --> 00:07:35.069
So that's why we have this two line
stanza, createEventDispatcher.

97
00:07:35.069 --> 00:07:38.857
And then this needs to run at
the top level of the script log.

98
00:07:45.368 --> 00:07:49.712
Now, in the DOM,
when you trigger an event on an element,

99
00:07:49.712 --> 00:07:53.007
it will bubble from
the element that event.

100
00:07:58.706 --> 00:08:02.767
In the DOM, when an event is triggered on
an element, it will bubble out from that

101
00:08:02.767 --> 00:08:06.014
element to its parents until it
eventually reaches the window.

102
00:08:06.014 --> 00:08:08.730
That doesn't happen with components.

103
00:08:08.730 --> 00:08:13.150
If you want to listen to an event on some
nested component, then the intermediate

104
00:08:13.150 --> 00:08:16.856
components need to forward the events
that you're interested in.

105
00:08:16.856 --> 00:08:21.553
So now we have a similar case to before,
we have an inner component that is

106
00:08:21.553 --> 00:08:26.173
gonna dispatch an event, but
it's wrapped in an outer component, and

107
00:08:26.173 --> 00:08:30.181
the outer component is what's
inside the main App.svelte.

108
00:08:30.181 --> 00:08:34.905
So what we need to do here is
forward the event from inner

109
00:08:34.905 --> 00:08:37.378
via outer all the way to App.

110
00:08:40.882 --> 00:08:46.711
And one way that we could do that
is by going through the whole

111
00:08:46.711 --> 00:08:53.716
rigmarole of creating the event
dispatcher inside the App component.

112
00:08:53.716 --> 00:08:57.272
Do the whole const dispatch
= createEventDispatcher.

113
00:08:57.272 --> 00:09:02.360
And then we'll create, A forward handler.

114
00:09:08.727 --> 00:09:13.675
And just for the event detail
from the inner component up

115
00:09:13.675 --> 00:09:17.052
the app on:message ={forward}.

116
00:09:19.598 --> 00:09:23.216
And now when you click that button,
the event is forwarded, but

117
00:09:23.216 --> 00:09:27.638
that's an awful lot of boilerplate to
do something fairly straightforward.

118
00:09:27.638 --> 00:09:32.384
So Svelte gives us a slightly
easier way to do this.

119
00:09:32.384 --> 00:09:35.221
If we just have on:message,
just like that,

120
00:09:35.221 --> 00:09:37.561
it will do all that behind the scenes.

121
00:09:37.561 --> 00:09:42.166
It recognizes that is you asking
the outer component to forward that

122
00:09:42.166 --> 00:09:45.571
message from the inner
component to its parents.

123
00:09:50.346 --> 00:09:54.097
And we can do the same
thing with DOM elements.

124
00:09:54.097 --> 00:09:59.476
We have a CustomButton component here,
With some fancy styling.

125
00:10:01.729 --> 00:10:08.628
And we want to get click
events handled inside the app.

126
00:10:08.628 --> 00:10:13.429
Right now,
the button doesn't have an event handler.

127
00:10:13.429 --> 00:10:18.239
And again, we could wire up some logic
to forward the event manually, but

128
00:10:18.239 --> 00:10:21.042
it's a lot easier if we just do on:click.

129
00:10:21.042 --> 00:10:24.616
And so now any click events from
the button will be forwarded through

130
00:10:24.616 --> 00:10:29.133
the CustomButton component to anything
that includes the CustomButton component,

131
00:10:29.133 --> 00:10:30.776
like our App.svelte, here.

