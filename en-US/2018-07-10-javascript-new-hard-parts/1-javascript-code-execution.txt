[00:00:00]
>> Will Sentance: Here we are, hard parts of JavaScript. The foundations we have to understand though to get to the hard parts are gonna feel at times a little bit trite, a little bit trivial. I have a part you've been to hard parts before, you even gonna feel hold on, I've seen these stuff before.

[00:00:20]
Our first about 30 minutes or so is gonna be material that if you've been to hard parts before, you'll recognize. Because that is the JavaScript engine and how it works. It's a universal, but we gotta lay these foundations out. And by the way, you're gonna see code where you're gonna go, yeah, yeah, thanks.

[00:00:39]
I get how this code is running. I get what it's doing. But we're gonna see it, and it's going to empower us to then solve all the hard parts to come. All right, let's go, here it is. We're gonna whiteboard through all of our code's execution just as the JavaScript engine runs it.

[00:01:01]
We do that, they're can be no gaps in our understanding. We're gonna step through line by line. And we're gonna map it up on the white board the whole time. So, with that in mind what happens when JavaScript executes runs my code? It's two-halves, and I'll tell you straight away, it's two-halves to the process of executing code.

[00:01:22]
One is literally the ability to walk through the code line, by line, by line, that is known as the thread of execution. That all that is, is the processing ability to take line one, do it, whatever it says to do. Take line two, do it, whatever it says to do.

[00:01:40]
Take line three, do it, whatever it is, it's executing doing the code line by line, and it's threading its way down our code. By the way, in order top to bottom. Simultaneously, the other part that's required to run our code is a place to store the bits of data that we announce as we go through our code's execution.

[00:02:02]
So you can see in line one, we're announcing that we're gonna store num as the label for some data 3. So we're gonna map these on the white board, which will be a fascinating experience. Let's see how it goes line by line, starting with line 1. I'm gonna call on Paul.

[00:02:22]
What are we doing here in line 1? What are we actually doing?
>> Speaker 2: Were saying, allocate some data, the global to a constant called num, and then toss an integer 3 onto that?
>> Will Sentance: Well, that seems like a very intuitive description. So we are in our memory, in our memory we are declaring a constant.

[00:02:48]
Just remember that means a piece of data where we're not allowed to change it's position in memory. So we can't suddenly replace nums value with full. It's now set for the running of our application. Num is set to the value of 3. Excellent, Michelle, what is our next line of code here say to do?

[00:03:08]

>> Speaker 2: The next line of code is also creating something in memory that we're calling.
>> Will Sentance: All right, everybody, we're being very precise. Just this [LAUGH] go on. What is it called? Core ability, excellent. Called, named multiplyBy2. We're declaring the function multiplyBy2. In JavaScript functions, that means the entire functionality, is, are assigned as values.

[00:03:33]
Just like the number 3, we're storing in memory the functionality, the function definition of multiplyBy2. I'm not gonna write the whole function definition out on the right hand side here. Instead, I'm gonna represent it with this little box with an fn. That represents my entire function definition. If I do in my console, now log multiplyBy2, what would I see, James?

[00:03:58]

>> Speaker 3: You would see the actual source code for a function.
>> Will Sentance: Yeah, exactly, I'd see the block of code itself function multiplyBy2. I'd see the whole thing with the code in my console. That is what we mean when we say declare a function. We are literally, sometimes we think we're just sort of going there's a function in code.

[00:04:19]
No, no, no, the keyword function literally means go save in memory. Go save in memory this particular functionality. All right, excellent. What's our third line of code that executes, Shawn?
>> Speaker 4: It's doing the same thing as our first constant declaration, just creating a-
>> Will Sentance: Yup.
>> Speaker 4: Piece of memory called name, setting it to-

[00:04:43]

>> Will Sentance: Excellent, Shawn, what was not our third line of code?
>> Speaker 4: Const results.
>> Will Sentance: Right, why not?
>> Speaker 4: Because that is not being called yet.
>> Will Sentance: Exactly, we do not go into the body of a function until what, Shawn?
>> Speaker 4: Until it's called?
>> Will Sentance: Until it's called. Excellent, all right.

[00:05:01]
Shawn is spot on there. And folk, this may seem profoundly trivial. Okay, I get how to store stuff in memory. But this foundation is what we need. This level of precision is absolutely vital for everything that follows. All the way up to re-building a single weight with generators.

[00:05:21]
It all in the end depends on these foundations. All right, excellent. So, as soon as we start running our code, we spin up two things. One, the ability to go through our code line by line, that's our thread of execution remember. Threading it's way through and executing a code line by line, and simultaneously we spin up [INAUDIBLE] A live memory of variables with data live store of labels with data.

[00:05:50]
Posh name for that is a variable environment. We can call this a variable environment. Think of it as being environment is the things around me these are the variables around me the variable environment. Now, these two-halves together, are known these two-halves the thread that we are gonna walk we didn't copy out the lines and the threads there is no point.

[00:06:15]
But these two-halves together are known as an execution context. That is a context, is a space to do something, a space of context so must we do something, what so space in which we execute a code is an execution context. And itâ€™s the global one, these gonna discover whenever we wanna run code including for example when we wanna execute the code inside the function we're gonna create a little baby local execution context, just for running the code inside a function.

[00:06:48]
We call it the local one, just for the stuff inside a function. So this though, is for our overall code. It's called the global execution context. All right, people, let's see what's next? All right, as Shawn rightly said, we did not execute, we did not call, we did not invoke multiplyBy2.

[00:07:10]
So we stayed in which execution context, Shawn?
>> Speaker 5: Global.
>> Will Sentance: Global, excellent. But now, we are going to execute a function and see what happens, so we've declared numbers 3. Declared motivators of a function. What is our next line of code? Mr. Anderson?
>> Anderson: Yes.
>> Will Sentance: What is our next line of code, Brian?

[00:07:32]

>> Brian: We are creating a new label in memory called outlook.
>> Will Sentance: Excellent. Do we know what to assign to it yet?
>> Brian: It's undefined at this point.
>> Will Sentance: Very good, because what's the right-hand side? Is the right-hand side a value that we can store?
>> Speaker 8: Yeah, no, it's calling the execution of-

[00:07:51]

>> Will Sentance: Exactly, it's a command to go and do something. It's actually not a value we can store in the right-hand side. Output has zero interest in multiplyBy2. That is a command to go and run some code. Whatever gets returned out, known as the, what Brian? What's a generic name for what gets returned out of a function?

[00:08:10]

>> Speaker 8: The return value.
>> Will Sentance: Return value, exactly. Quite literal, the returned value. That's what's gonna be assigned to output. All right, let's do it. So, output is going to be the result, the return value of calling multiplyBy2 with the input of 4. There we go. So, what did I say we create whenever we have code to execute?

[00:08:39]

>> Speaker 9: [INAUDIBLE] execution content.
>> Will Sentance: An execution content. I'm gonna represent that. This is a Big Ol' Box with two parts. I'm gonna represent that with a little box with two parts, here it is. I'm taking it slowly because these are genuinely over the next 10, 15 minutes we're gonna see the 3 pieces of synchronize JavaScript execution.

[00:08:58]
If we don't get these pieces down, nothing else follows. So, into this execution context we go. And just like our global one for running the main code, now we're gonna run the code for just inside multipliedBy2. We're gonna have a little memory just for the code, just for the things that get announced, get declared, the variables and functions, and parameters and arguments that get declared inside of multiplyBy2's body.

[00:09:27]
They're just gonna be stored in here. By the way, when this function finishes executing, all those pieces, unless they're returned out will be deleted. Automatically, garbage collected. It's stuff that we cannot access again, we cannot reference those names again, so it's garbage, it's memory that's being wasted. We're gonna automatically clean it out in JavaScript, except for in one special condition.

[00:09:55]
Which we will see a little bit later on, cuz it's my favorite thing in JavaScript. Those times when all our data is not necessarily deleted when we exit a function, the most beautiful concept in JavaScript. And even though we're not gonna go through it as the focal point, inevitably we have to come to it In it's raters.

[00:10:14]
Okay, good, so in we go. And what is the first thing, Rick, inside our local execution context that we're gonna do?
>> Speaker 10: Defining constant variable called result.
>> Will Sentance: So that's our second thing, Rick. What's the very first thing we put in our local memory?
>> Speaker 10: The function.
>> Will Sentance: Not, the function.

[00:10:35]
Michelle?
>> Michelle: The input number.
>> Will Sentance: Exactly, input number which is known as our parameter. Remember the placeholder we defined a function which is to say, we will run this thing later on. When you run me better make sure you fill in that blank. That placeholder and put a number with an argument.

[00:10:53]
Parameter is the place holder. Argument is the actual value that gets passed in. Michelle, what's argument?
>> Michelle: Argument is 4.
>> Will Sentance: 4, excellent. And so result is 8, and the final line in the body of the function says do what, Josh?
>> Speaker 12: To return 8?
>> Will Sentance: To return 8, I like that, return the value of result 8.

[00:11:13]
It's not returning result, it returns the value of result which is the number 8. I do not say return result kind of implies the whole thing, it's JavaScript C is return result and goes, what's the result? 8t, okay, perfect, return it out to where, what's your name, dude?

[00:11:30]

>> Brady: Brady.
>> Will Sentance: Brady, sorry Brady. Brady, to return now to where?
>> Brady: To the label output?
>> Will Sentance: But to which execution context?
>> Brady: To the global.
>> Will Sentance: To the global, exactly. Return out 8 into the global execution context. Where it's stored in output. Perfect, folk, I know this may seem procedural.

[00:11:57]
But I know you can this and go well yeah, yeah, I get that output's gonna be 8. I got that, but we need to have the precision. So now, notice by the way, that we weren't allowed to move on to the next line in global declaring new output until we'd finished running multipleBy2 with the input of 4.

[00:12:19]
A thread of execution, the ability to go through the code line by line, it when did, its way in to the called multipliedBy2, where it's spent time going through the code line by line. And then hit what keyword to exit? What keyword, Mike, said to exit?
>> Speaker 8: Return?

[00:12:40]

>> Will Sentance: Return. And then there's no return statement there. The closing curly brace which implies an implicit return is going to insert return for us an out we return. In other words, JavaScript, how many things can I do at a time? One, its thread is singular. It's not going to continue down in global code while simultaneously running more probabilities..

[00:13:02]
It's almost to say, okay, let's keep going down here and continuing here simultaneously. One of the beautiful things about JavaScript is it's so predictable, because it's always one thing after another in order, top to bottom, at least in its core synchronous nature. We will see when that doesn't apply, of course.

[00:13:21]
So JavaScript's really synchronous, in order top to bottom, and single threaded. We can't suddenly do two things at the same time, excellent. So now, we do return out to the global execution context where we encounter declaring new output which is gonna be the return value of another function pool to multiplyBy2.

[00:13:40]
We're gonna create an execution context for it in to it we go what is the first thing, Rick, in our local memory?
>> Speaker 14: The input number.
>> Will Sentance: Which is known as our, what is the posh name for a place holder?
>> Speaker 14: Argument.
>> Will Sentance: So that's the argument. That's the-

[00:14:00]

>> Speaker 14: Parameter.
>> Will Sentance: Parameter. Okay, so Rick, what is our argument? You're right to say our parameter is input number. What's our argument here?
>> Speaker 14: 10.
>> Will Sentance: 10, excellent, all right. And then result will be,
>> Will Sentance: 20, and we return that out back out to,
>> Will Sentance: Global. The 20 is returned out to the global variable, sorry, the global constant.

[00:14:26]
New output is 20. So our thread when did its way in and when did its way back out again. Okay, but there's a final piece to this synchronous JavaScript model. We have our memory posh name, variable environment. We have our thread of execution, the ability to go through the code line by line.

[00:14:50]
These together are known as an execution context, the two things we need to execute code. The context of the things we need to execute code. But we've got a whole bunch of these execution contexts being created, deleted, created, and then we run another function inside of that one.

[00:15:09]
It's another little mini one being created inside of there. Keeping track of those, to us is visually easy. I finished calling multiplyBy2. I come out of it, and I'm back where I was before when I started coding multiplyBy2. We can visually see that very easily. JavaScript doesn't have that same ability to visually see, I was previously, I called this function in global, and I was in the big box, when I moved into the little box.

[00:15:38]
When I finished in the little box, I can go back out of the big box. JavaScript doesn't that ability. It needs keep track of where it is in the code right now, where it was, when it before it started being inside this function.Where it's going to go back to when it finishes inside this function.

[00:15:53]
What, this is a knowledge thing, does anyone know what, data, we can sort all that sort of information any format. But there's a particularly nice structure with structuring data, that will store that information very cleanly. Anyone know what that structure might be?
>> Speaker 9: Stack.
>> Will Sentance: It's a stack, exactly.

[00:16:14]
It's called the, in fact, it's gonna be a stack of call. A stack is a, we have a raise, a raise say, a list of data I wanna be able to grab an element at any random position. That's not reflected in what we want to do here. Here, we want tona say just like a stack of plates.

[00:16:28]
I put the first one in, I start off in the global execution context. That's one of my first element in my stack. And then, when I start running multiplyBy2, I add it on top. And that's like adding my next plate. If I had to run another function inside that I'd add that one on top.

[00:16:45]
When I finish in that one, all I care is that when I take that one away the previous one that was there before is still there. And that is the essence of a stack. Is that when I take the last thing that was there off, I'm back to where I was before.

[00:16:57]
And so, our stack is gonna be a stack of cools to functions. Starting off, here is the call stack. The stack of calls to functions. Starting off with a representation of our overall, think of our whole code base as a function called global. That as soon as we start running our code, we're running global.

[00:17:19]
So starting off with global as soon as we start running our code. When we start running multipleBy2. Paul, what would it make sense to add call stack?
>> Paul: Add on the new execution function.
>> Will Sentance: Add on the new execution context, exactly. Add on the call to multiplyBy2 with the input of 4.

[00:17:39]
Meaning, while I am in my multiplyBy2 function, while my thread is in my multiplyBy2 function, multiplyBy2 is gonna be top of my stack of calls. My one simple rule is, whatever's top of my call stack, that's where I am right now. And then as soon as I return out, what's gonna happen, Paul, to my call stack?

[00:18:02]

>> Speaker 14: MultiplyBy2, that execution context disappears, you go back into the global and then you get.
>> Will Sentance: Excellent, I'm gonna get rid of multiplyBy2 of my call stack. And we may know, therefore return out to global execution context and output, but Josh, it doesn't. JavaScript should knows that because look, what's on my call stack now?

[00:18:20]
Don't panic, it's global, I'm back out to global. This allows JavaScript to keep track of where is it in its code what line it's running. And then, when I finish in the code execution context, where am I gonna return back to? Well, get rid of where I was, and the next layer down is where I'm returning back to, all right.

[00:18:42]

>> Will Sentance: By the way, posh name for adding to a stack is not to add, is not to throw on. Is to what Shawn? Victor? What's a posh name to add to a stack anyone know?
>> Speaker 14: Push.
>> Will Sentance: Push, that's the computer science technical term for adding to a stack.

[00:18:58]
And what's the posh name? Josh you know for getting from the Office FAQ?
>> Speaker 14: Pop.
>> Will Sentance: Pop, exactly. Push and pop. Excellent, all right, good. Yet, we talked about this. So let's have thumbs on these core foundations. Thumbs is a widely used pedagogical techniques to indicate one's understanding.

[00:19:17]
You lost me, I am very clear. I have a clarification question, everybody's thumbs out, right now. It's okay to have clarifications, nobody? Very frustrating, all right, good, good.

