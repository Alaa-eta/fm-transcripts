[00:00:03]
>> Will Sentance: We're going to move on to now the wonderful world of asynchronicity. Asynchronicity is going to change up this whole model. I'm gonna change it up, it's going to augment this model. This whole model is gonna continue to exist. In fact, the reason we're gonna need to augment our model is this model is gonna be fundamentally untenable in how we think about doing tasks that take a long time.

[00:00:32]
So let's just confirm. JavaScript is single threaded. One line of code executing at a time. When I start running multiplyBy2, I'm not allowed to continue on in my global code,
>> Will Sentance: To executing the next multiplyBy2 at the same time. Not allowed to. Single threaded, but simultaneously, I'm also not allowed to move on to the next line regardless.

[00:00:58]
because until I finished multiplyBy2's call, because JavaScript is synchronous. So what that means is I go from top to bottom. I never move onto the next line until I've finished all the previous lines. I never ever move onto the next line. If you see a function call, I must return out of it.

[00:01:15]
I must finish executing it, before I hit the next line. All this implies a big problem. What if our multiplyBy2 call, were a call to a server? There was gonna take 300 milliseconds, I'm not allowed to move on from that line to run any more JavaScript until that comes back.

[00:01:32]
What if I couldn't view more tweets, it runs JavaScript code that says go get more tweets? It's gonna take 300 milliseconds or 200 milliseconds before the tweets come back. But in the meantime, I'm clicking Like on all the tweets, which is gonna run more JavaScript code to turn it to pink.

[00:01:50]
And to increase the number of likes on that tweet in my state, in my memory, that can't happen. I'll be sitting there clicking because I'm still busy waiting on the line saying, go get more tweets. Because I've got to wait until it returns about the tweets, right? Before I can move onto my next line that says color the heart pink cuz I clicked the button.

[00:02:09]

>> Will Sentance: This is gonna be a profound issue.
>> Will Sentance: What if we want to wait some time before we can execute certain bits of code? We want to wait until our data comes back from Twitter before we can then display and run the functionality display that data.
>> Will Sentance: Perhaps we need to get more data in the API or even a timer to complete, and then we wanna run some code.

[00:02:33]
We have a conundrum, a tension between wanting to delay some code running because we're waiting for data to come back. So we wanna have the next line of code be display those tweets, we want to have the data actually come back. But we do know to block our single thread from continuing to run code.

[00:02:50]
This is gonna be a profound conundrum, it's gonna be the essence of why we have to introduce in JavaScript a whole complimentary model to our beautiful synchronous world. These three parts of JavaScript alone are not enough. What's particularly interesting is asynchronicity in Java, asynchronous word of Java is interesting stuff.

[00:03:11]
I love our pure, simple JavaScript engine, but everything we love about web application development is not happening in pure JavaScript. Pure JavaScript does not know how to speak to the Internet. It is not a feature of JavaScript to speak to the Internet. Instead, all those features are sitting outside of JavaScript.

[00:03:33]
They're sitting outside of JavaScript in where? What's your name dude? Aleck.
>> Alec: Aleck.
>> Will Sentance: Aleck, where are they sitting? What are those feature of JavaScript that are not doing things like speaking to the Internet. Where are they?
>> Alec: APIs?
>> Will Sentance: Or not features of JavaScript, sorry. What are the features that speak to the Internet, that Java's reviewed, yeah, what does that mean?

[00:03:52]

>> Alec: I don't know, restful web services and-
>> Will Sentance: Michelle where are those features that, for example, can speak to the Internet?
>> Speaker 3: Are they in the browser?
>> Will Sentance: They're in the browser. The browser is a wealth of features that we in JavaScript get access to. We write JavaScript code that is essentially a facade.

[00:04:14]
We're gonna see these are facades for a bunch of features that are not in JavaScript, but instead in the web browser. That's what we're gonna end up spending most of our time this morning doing, is writing JavaScript code that interfaces, API. Alex, right, interfaces. The I in API stands for interface, that interacts with stuff outside of JavaScript.

[00:04:38]
Okay, we need a whole new bunch of features in JavaScript and outside of JavaScript in order to understand how this is working. So here we go. Here's our first solution. I'm gonna pre-tell you that it's fundamentally untenable. But here's our first solution for how to go and do a task that's gonna take a long time, like speaking to Twitter and getting our tweets back.

[00:05:05]
And nevertheless be able to continue running code but know where that data is when it comes back. This first solution here is going to be untenable but it is nevertheless gonna fairly intuitive, but completely untenable. All right, line one, and by the way, so far, we're still seeing things that are very analagous to first hard parts.

[00:05:32]
But we need to get these foundations down to understand the harder pieces to come. All right, line one. RD?
>> Abdi: Yeah, well we're declaring display in our variable environment.
>> Will Sentance: Yeah, very nice, you put, RD, display is declared, excellent.
>> Will Sentance: Next line of code, Alec?
>> Will Sentance: Do the left hand side first.

[00:05:57]

>> Abdi: We're declaring data from API.
>> Will Sentance: Yep, and what's it gonna be assigned?
>> Abdi: The fetch and wait function.
>> Will Sentance: No, we never assign function. If we had no parenthesis there, it could be assigned, it would say, let's fetch and wait, and it would assign it to whatever it is.

[00:06:14]
But JavaScript is not doing that on the right hand side. What are parenthesis always tell me to do? Blessing?
>> Speaker 5: To call a function.
>> Will Sentance: To call. The right-hand side here is a command, it is unfinished work. So be really clear with yourself, data API has zero interest in fetch and wait.

[00:06:34]
It's only interest is in whatever gets returned from fetch and wait. We hope will be our tweet, okay? So fetchAndWait here is a made up function, but let's just see what it does. So data from API is going to be the return of fetch and wait to our Twitter URL.

[00:07:01]
So we're hoping it's gonna return a nice Tweet for us, that's what we're hoping. So let's start tracking our time passing. We're at about one millisecond here. Let's say this thing here takes 200 milliseconds to complete. 200 milliseconds later,
>> Will Sentance: Finally comes back. Could be 300 milliseconds, could be half a second, we don't even know.

[00:07:37]
In that time, are we allowed to move on and run any further jobs from code? Absolutely not, we are not allowed to move on. We are blocked because our JavaScript thread is synchronous. There's work we're still doing on the right-hand side here, we're not allowed to be one of the next line, and we would want to.

[00:07:55]
Cuz the next line says display the data reveal API. So we better have that data back to be able to display it. Is that solution one? Be clear this is not the right solution, but this is a solution. So 200 milliseconds passes and our request to Twitter returns out.

[00:08:15]
Let's just say very nicely it returns out our data and it is a single tweet. And it's not even coming back as an object, and of course, they come back as objects, but just a tweet, hi. And we're going to store hi, where Michelle?
>> Speaker 6: Sorry, I was distracted, [INAUDIBLE]

[00:08:34]

>> Will Sentance: We're going to return that from fetch and wait, hi, where's it gonna be stored? Yeah, Michelle, where's it gonna be stored?
>> Speaker 6: In data from API.
>> Will Sentance: In data from API, exactly. I apologize for sounding like I'm correcting all of your pronunciations of data to data, but I'm not.

[00:08:53]
I embrace your mispronunciations, okay. Well done all of you for corrupt node, not corrupting.
>> Will Sentance: Good, customizing, a beautiful language. All right, okay, good. So data API has hi, the string hi stored in it.
>> Will Sentance: 200 milliseconds later, in that time, no further jobs recorded run. This is absolutely disastrous, but whatever.

[00:09:24]
Now we hit our next line which is we want to call it yet, Sonny? What does our next line of code say to do?
>> Speaker 7: It will pass the data API to display.
>> Will Sentance: Right, so we're calling the display function with our argument being the value of data for API, rememeber everything in JavaScript gets evaluated immediately.

[00:09:46]
Data from API here is a string high, we throw it straight in. And we create a execution context to run it, where in the memory it's supposed to be really clear here, in the memory data. The parameter data is set to that argument hi, and so we're going to log in console at about 201 milliseconds, we're going to log, hi, okay?

[00:10:14]
And now finally, what line do we hit next? Gentleman what was your name?
>> Ben: Ben.
>> Will Sentance: Ben, sorry Ben.
>> Ben: Me later.
>> Will Sentance: Me later, it's gonna be logged at the much later time of 202 milliseconds. Me later is logged.
>> Will Sentance: Raise your hand, if you're a huge fan of this solution.

[00:10:43]

>> Ben: [LAUGH]
>> Will Sentance: I'm a huge fan of this. No, I'm not really. No, I don't mind the solution. Here's why I dont mind the solution is it is profoundly intuitive. Three goals we have. Be able to do tasks that take a long time. Slow tasks like getting data from Twitter.

[00:11:00]
We have to be able to do that. Otherwise our web app is very, very boring. At best, we can make a hangman game. Very nice hangman game, in the command line, but that's the best we can do. But we wanna be able to continue running our JavaScript code in the meantime.

[00:11:13]
We could not do that here. Look at this. In the meantime, no JavaScript code was allowed to run for 200 milliseconds. When our slow task completes though, we should be able to run functionality knowing the task is done and data is ready, that's the hard bit. So it turns out, every other solution we have, that's the hard bit.

[00:11:31]
In this solution, not a hard bit. This solution's effortless. I can see where my data is synchronously in order and memory. I've got no issues when my display function's gonna run, it ain't gonna run literally in my single thread until I've got my data back. I'm dealing only in the synchronous world here, in order, in order top to bottom.

[00:11:49]
That's what we love JavaScript singe thread and model, that's the vision behind it, is it's highly predictable and easy to work with a developer. But obviously it's fundamentally untenable.
>> Will Sentance: Blocks our single JavaScript thread from running any further code while this task completes. Benefits, it's definitely easy to reason about, but it's untenable.

