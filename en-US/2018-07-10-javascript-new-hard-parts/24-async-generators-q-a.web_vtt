WEBVTT

1
00:00:00.190 --> 00:00:03.000
&gt;&gt; Will Sentance: But
before we get to that, you lost me.

2
00:00:03.000 --> 00:00:04.500
And it's okay.

3
00:00:04.500 --> 00:00:08.720
I'm clear, I have some clarification
questions on this new model of execution.

4
00:00:08.720 --> 00:00:10.330
Everybody, thumbs proudly out.

5
00:00:10.330 --> 00:00:11.830
It's okay to have.

6
00:00:11.830 --> 00:00:13.455
Alec has a clarification.

7
00:00:14.594 --> 00:00:17.150
&gt;&gt; Will Sentance: Abdee has
more than a clarification.

8
00:00:17.150 --> 00:00:19.100
Brian has a clarification.

9
00:00:19.100 --> 00:00:20.460
Brian, do you wanna go first?

10
00:00:20.460 --> 00:00:25.446
&gt;&gt; Brian: Yeah, so this is still
asynchronous when you get down to the,

11
00:00:25.446 --> 00:00:29.820
that we're still adding everything
to the microtask used before it.

12
00:00:29.820 --> 00:00:30.360
&gt;&gt; Will Sentance: It is.

13
00:00:30.360 --> 00:00:34.270
&gt;&gt; Brian: So, it was a console log
after that, that would go first.

14
00:00:34.270 --> 00:00:36.120
&gt;&gt; Will Sentance: Absolutely,
if I had, I should have done that.

15
00:00:36.120 --> 00:00:39.990
If I had a console log straight after
storing the do when data received on

16
00:00:39.990 --> 00:00:44.170
the then,
on the future data unfulfillment array.

17
00:00:44.170 --> 00:00:46.810
And a console log straight after.

18
00:00:46.810 --> 00:00:47.840
All to happen.

19
00:00:47.840 --> 00:00:52.120
If I were to block my thread here,
after this assignment of the do when data

20
00:00:52.120 --> 00:00:55.150
received to future.data's
unfulfillment array.

21
00:00:55.150 --> 00:01:00.630
If I were to have a blocking task there or
a while that was infinite,

22
00:01:00.630 --> 00:01:06.480
then my do when data received that
triggers inside of it, entering back

23
00:01:06.480 --> 00:01:10.940
into createFlow, I've never reached that
because that's on my micro task queue.

24
00:01:10.940 --> 00:01:12.950
So, it's still absolutely asynchronous.

25
00:01:12.950 --> 00:01:16.880
All this is doing, you can almost
think of the code console log.

26
00:01:16.880 --> 00:01:20.745
You can almost think of everything after
the yield statement that threw out

27
00:01:20.745 --> 00:01:23.512
the tasks,
threw out the promise of [INAUDIBLE] Data.

28
00:01:23.512 --> 00:01:28.036
Think of everything like this as being
like the functionality we want to run on

29
00:01:28.036 --> 00:01:29.680
the data coming back.

30
00:01:29.680 --> 00:01:34.320
Almost think of this as being
the function we pass here.

31
00:01:34.320 --> 00:01:38.110
Right, think of it as being this here
is our function that you run later, but

32
00:01:38.110 --> 00:01:41.340
now we get to go and run it.

33
00:01:42.350 --> 00:01:46.400
We get to write it as though it's
synchronous code in a function.

34
00:01:46.400 --> 00:01:52.258
We just come back to it only when we
trigger running doWhenDataReceived,

35
00:01:52.258 --> 00:01:54.970
which we then get to manually set.

36
00:01:54.970 --> 00:01:57.750
Now I get to go back and run this code.

37
00:01:57.750 --> 00:02:04.350
It's the most control we've had probably
over when our deferred functionality runs.

38
00:02:04.350 --> 00:02:05.480
But in the end it's still,

39
00:02:05.480 --> 00:02:09.740
as by the very nature of a synchronicity
in a language, beyond our control.

40
00:02:09.740 --> 00:02:12.790
Because what triggers
returnNextElement.next

41
00:02:12.790 --> 00:02:15.410
running that takes it back in here,
what triggers it?

42
00:02:15.410 --> 00:02:20.340
It's the beyond our control
setting your value property.

43
00:02:20.340 --> 00:02:23.140
Beyond that control triggered
doWhenDataReceived.

44
00:02:24.310 --> 00:02:28.300
But now when we trigger that, we just
write inside a command that we did get to

45
00:02:28.300 --> 00:02:30.440
control writing that takes
us back in this function.

46
00:02:30.440 --> 00:02:34.681
But the very nature of a single
thread in asynchronous language

47
00:02:34.681 --> 00:02:37.810
is that you throw out
tasks in a single thread.

48
00:02:37.810 --> 00:02:40.380
You throw them out, and
then they come back in and

49
00:02:40.380 --> 00:02:43.850
run functionality on the returned
values beyond your control.

50
00:02:43.850 --> 00:02:47.300
That's their very nature, and
that's why in the end, solution two,

51
00:02:47.300 --> 00:02:51.100
which was the call back model,
in the end it's also true.

52
00:02:51.100 --> 00:02:53.170
It's not a wrong model.

53
00:02:53.170 --> 00:02:54.840
Under the hood it's the same thing.

54
00:02:54.840 --> 00:02:58.070
Under the hood we're not
doing profoundly more here.

55
00:02:58.070 --> 00:03:01.090
You're just increasing
readability more and more.

56
00:03:01.090 --> 00:03:06.160
And in a sense by doing so,
hiding the underlying engine more and

57
00:03:06.160 --> 00:03:10.390
more, and that's arguably a problem if you
don't understand the underlying engine.

58
00:03:10.390 --> 00:03:12.730
If you do,
now you get best of both worlds.

59
00:03:12.730 --> 00:03:16.870
Increased readability, and the ability
to understand how it's truly working.

60
00:03:16.870 --> 00:03:18.570
All right, Alec.

61
00:03:18.570 --> 00:03:21.923
&gt;&gt; Alec: Maybe someone
has asked this already,

62
00:03:21.923 --> 00:03:25.730
but can the generator
functions be anonymous?

63
00:03:26.910 --> 00:03:27.650
&gt;&gt; Will Sentance: Go play with that.

64
00:03:27.650 --> 00:03:31.560
There's interesting questions around arrow
functions and how you can define these.

65
00:03:31.560 --> 00:03:32.340
Go play with these.

66
00:03:33.510 --> 00:03:34.620
&gt;&gt; Alec: Okay.

67
00:03:34.620 --> 00:03:38.907
&gt;&gt; Will Sentance: And we'll talk
about that after you've experimented.

68
00:03:38.907 --> 00:03:42.539
Abdee, you want to try and
phrase it as a question?

69
00:03:42.539 --> 00:03:46.169
&gt;&gt; Speaker 4: I get it, but I need to have
a little bit more time to really have it

70
00:03:46.169 --> 00:03:49.010
sink in, but I kinda [CROSSTALK]
&gt;&gt; Will Sentance: I appreciate it, man.

