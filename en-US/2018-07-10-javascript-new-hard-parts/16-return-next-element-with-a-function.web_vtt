WEBVTT

1
00:00:00.400 --> 00:00:05.710
&gt;&gt; Will Sentance: We now have a situation
here where we create a little function

2
00:00:05.710 --> 00:00:10.350
inside another function,
returned it out into a new global label,

3
00:00:10.350 --> 00:00:15.530
and then use the new global label for that
functionality for what possible reason?

4
00:00:15.530 --> 00:00:19.933
Why did I not define add2 globally?

5
00:00:19.933 --> 00:00:21.220
Who already knows the answer?

6
00:00:22.830 --> 00:00:25.469
Right.
So I love it when there's lots of people

7
00:00:25.469 --> 00:00:27.396
feel cuz I love the big reveals.

8
00:00:27.396 --> 00:00:28.940
I love the big reveals.

9
00:00:28.940 --> 00:00:33.980
It's gonna turn out when we return
a function from another function,

10
00:00:33.980 --> 00:00:36.800
we get so
much more than just the function.

11
00:00:36.800 --> 00:00:42.760
We're gonna get a ton of,
well, a single profound bonus.

12
00:00:42.760 --> 00:00:48.194
And that's gonna be critical for
us to build out our own.

13
00:00:48.194 --> 00:00:54.740
Functions that when we call them, give us
our next element from our flow of data.

14
00:00:54.740 --> 00:00:57.260
And I might call them iterators or
what strange name, but

15
00:00:57.260 --> 00:00:59.637
it said give us our next
element from our flow of name.

16
00:00:59.637 --> 00:01:00.668
Let's see it here.

17
00:01:00.668 --> 00:01:05.245
So we wanna create a function that holds,
you want a great function that has

18
00:01:05.245 --> 00:01:08.820
the ability to return our next
element from a list of data.

19
00:01:10.320 --> 00:01:11.910
4, 5, 6 for example.

20
00:01:11.910 --> 00:01:15.339
But then, also, bundled on that function,

21
00:01:15.339 --> 00:01:19.502
it must have the underlying
data to grab from, right?

22
00:01:19.502 --> 00:01:21.100
Otherwise, where is it getting data from?

23
00:01:21.100 --> 00:01:26.530
And it must have the ability to track
which element it was on before,

24
00:01:26.530 --> 00:01:28.070
so that when we run that function again,

25
00:01:28.070 --> 00:01:32.390
it doesn't give us the old element,
the previous element.

26
00:01:32.390 --> 00:01:33.700
How the hell is it gonna do that?

27
00:01:33.700 --> 00:01:37.910
These functions, when they're called,
do not remember their prior invocation.

28
00:01:37.910 --> 00:01:40.290
They do not remember data that was
created in their prior running.

29
00:01:41.320 --> 00:01:44.550
The local execution context,
if we run this function again,

30
00:01:44.550 --> 00:01:46.380
brand new function, add2 created.

31
00:01:46.380 --> 00:01:48.097
There's no memory of previous runnings.

32
00:01:48.097 --> 00:01:51.497
So how can we have a function, that
when run, somehow remembers its previous

33
00:01:51.497 --> 00:01:54.710
running that has been run before and
had the previous element given out?

34
00:01:57.210 --> 00:01:58.050
We shall see.

35
00:01:58.050 --> 00:01:59.463
But that's what we gotta try and do.

36
00:01:59.463 --> 00:02:03.975
It's gonna start with cooling this create
a function that's gonna return out

37
00:02:03.975 --> 00:02:06.580
an inner function into
return next element.

38
00:02:07.880 --> 00:02:12.430
And then, we're going to
hopefully get our first element.

39
00:02:12.430 --> 00:02:13.240
Who knows how?

40
00:02:13.240 --> 00:02:14.530
We shall see.
All right,

41
00:02:14.530 --> 00:02:18.440
we're gonna walk through this very,
very precisely because this is

42
00:02:18.440 --> 00:02:22.340
pretty much our main, really our
only code on this whole section.

43
00:02:23.640 --> 00:02:24.552
But it's very important code.

44
00:02:24.552 --> 00:02:29.592
And honestly,
it can be considered quite hard for

45
00:02:29.592 --> 00:02:35.600
folk, especially who've not
seen hard parts before.

46
00:02:35.600 --> 00:02:38.960
For folk who have,
there might be a section that you remember

47
00:02:38.960 --> 00:02:43.980
that this is starting to remind you of
involving something called a backpack.

48
00:02:43.980 --> 00:02:45.830
All right, good.

49
00:02:45.830 --> 00:02:51.600
Line one, I would like to call this
instead create flow because it is

50
00:02:51.600 --> 00:02:55.060
kind of creating the flow, we will call it
create in function here, create function.

51
00:02:55.060 --> 00:02:58.312
So what are we doing in line one, Victor?

52
00:02:58.312 --> 00:03:03.580
&gt;&gt; Victor: We're creating a function
called create function in memory.

53
00:03:03.580 --> 00:03:04.793
&gt;&gt; Will Sentance: There it is, excellent.

54
00:03:04.793 --> 00:03:05.500
Thank you, Victor.

55
00:03:06.580 --> 00:03:08.460
Next line, James?

56
00:03:08.460 --> 00:03:12.050
&gt;&gt; James: You're creating a new
constant called return next element.

57
00:03:12.050 --> 00:03:14.907
&gt;&gt; Will Sentance: Excellent,
do we know what it's gonna be yet?

58
00:03:14.907 --> 00:03:16.730
What's gonna be stored there yet?

59
00:03:16.730 --> 00:03:17.310
&gt;&gt; James: Not yet.
&gt;&gt; Will Sentance: So

60
00:03:17.310 --> 00:03:18.960
it's gonna default in JavaScript to?

61
00:03:18.960 --> 00:03:20.640
&gt;&gt; James: Undefined.
&gt;&gt; Will Sentance: Undefined, excellent.

62
00:03:20.640 --> 00:03:25.996
So here we go, I'm trying to get
my board positioning right here.

63
00:03:25.996 --> 00:03:30.499
So return next element is going to be

64
00:03:30.499 --> 00:03:35.903
the output of calling, create function,

65
00:03:35.903 --> 00:03:42.220
where we're passing the array 4,
5, 6 to it.

66
00:03:42.220 --> 00:03:44.920
We're gonna create what, Paul?

67
00:03:44.920 --> 00:03:46.202
A new?

68
00:03:46.202 --> 00:03:47.200
&gt;&gt; Paul: Local execution context?

69
00:03:47.200 --> 00:03:48.500
&gt;&gt; Will Sentance: New execution context.

70
00:03:48.500 --> 00:03:49.390
Excellent, what an old man.

71
00:03:49.390 --> 00:03:51.650
I have the same enthusiasm for it as you.

72
00:03:51.650 --> 00:03:52.600
There it is.

73
00:03:52.600 --> 00:03:54.000
Into it we go.

74
00:03:54.000 --> 00:03:58.240
And Sonny, it has of course our thread.

75
00:03:58.240 --> 00:04:03.160
Our thread's winded its way in and
it has a memory just for

76
00:04:03.160 --> 00:04:07.250
stuff that's declared
inside this function.

77
00:04:07.250 --> 00:04:11.260
And Sonny, what's the first thing that
is declared inside this function?

78
00:04:13.990 --> 00:04:16.200
&gt;&gt; Sonny: The array is [INAUDIBLE]
&gt;&gt; Will Sentance: Good job, array.

79
00:04:16.200 --> 00:04:19.720
Yeah, which is set to what,
that's permitted to what argument value?

80
00:04:19.720 --> 00:04:20.490
&gt;&gt; Sonny: 4, 5, 6.

81
00:04:20.490 --> 00:04:21.483
&gt;&gt; Will Sentance: 4, 5, 6.

82
00:04:24.000 --> 00:04:25.180
&gt;&gt; Will Sentance: Thank you.

83
00:04:25.180 --> 00:04:26.360
That's very good, Sonny.

84
00:04:26.360 --> 00:04:29.633
And what's our next thing
inside of our local memory?

85
00:04:29.633 --> 00:04:31.265
Yeah.
Go ahead.

86
00:04:31.265 --> 00:04:34.770
&gt;&gt; Victor: [INAUDIBLE]
&gt;&gt; Will Sentance: Set 2, 0, good.

87
00:04:34.770 --> 00:04:40.183
And Ben,
next thing we set up in our local memory?

88
00:04:40.183 --> 00:04:42.170
&gt;&gt; Ben: Declare the function inner.

89
00:04:42.170 --> 00:04:43.678
&gt;&gt; Will Sentance: Excellent,
and there it is.

90
00:04:43.678 --> 00:04:47.081
Just so we can keep track of it,
I'm gonna do it in different color,

91
00:04:47.081 --> 00:04:49.493
because it is really weird,
I recognize that.

92
00:04:49.493 --> 00:04:52.780
It's weird to define functions inside
of other functions and return them out.

93
00:04:52.780 --> 00:04:53.697
I recognized, so

94
00:04:53.697 --> 00:04:57.370
I wanna make sure we're really
keeping track of how that's evolving.

95
00:04:57.370 --> 00:04:59.807
There's the function.

96
00:04:59.807 --> 00:05:01.960
Are we going to call it, Ben?

97
00:05:01.960 --> 00:05:02.684
Are we going to evoke it?

98
00:05:02.684 --> 00:05:03.687
&gt;&gt; Ben: No.

99
00:05:03.687 --> 00:05:05.240
&gt;&gt; Will Sentance: No,
what are we going to do instead?

100
00:05:05.240 --> 00:05:06.420
&gt;&gt; Ben: We're going to return it.

101
00:05:06.420 --> 00:05:07.970
&gt;&gt; Will Sentance: Return
its entire definition out.

102
00:05:10.140 --> 00:05:10.940
Now, there it is.

103
00:05:10.940 --> 00:05:11.849
Out it returns.

104
00:05:13.360 --> 00:05:15.294
And store it where then?

105
00:05:15.294 --> 00:05:18.273
&gt;&gt; Ben: We're gonna store
it in return next element.

106
00:05:18.273 --> 00:05:18.990
&gt;&gt; Will Sentance: Exactly,

107
00:05:18.990 --> 00:05:24.094
return next element is now a function
that was formerly known as what, Ben?

108
00:05:24.094 --> 00:05:26.420
&gt;&gt; Ben: Create function?

109
00:05:26.420 --> 00:05:27.293
No.

110
00:05:27.293 --> 00:05:29.420
&gt;&gt; Will Sentance: See how hard
it is to keep track of this.

111
00:05:29.420 --> 00:05:32.100
It was formerly known
as that inner function.

112
00:05:32.100 --> 00:05:35.010
Inside of create function,
it was known as inner.

113
00:05:35.010 --> 00:05:38.080
Now, we've hit the return
statement of create function.

114
00:05:38.080 --> 00:05:43.116
So all the labels in here,
all the data in here, what happens to it?

115
00:05:43.116 --> 00:05:44.139
&gt;&gt; Ben: It goes back in.

116
00:05:44.139 --> 00:05:45.720
&gt;&gt; Will Sentance: Gone.

117
00:05:45.720 --> 00:05:50.820
Just the function that got returned out,
passed out to return next element.

118
00:05:50.820 --> 00:05:52.072
Perfect.

119
00:05:52.072 --> 00:05:56.730
We've popped the other call stack and
we're back out to return next element.

120
00:05:56.730 --> 00:05:59.250
Let's just make sure we keep
track of our call stack.

121
00:05:59.250 --> 00:06:01.858
Our call stack,
we're back in what execution context?

122
00:06:01.858 --> 00:06:03.530
&gt;&gt; [INAUDIBLE]
&gt;&gt; Will Sentance: Global, excellent,

123
00:06:03.530 --> 00:06:04.070
into global.

124
00:06:05.870 --> 00:06:07.660
So we've done return next element.

125
00:06:08.930 --> 00:06:13.324
Okay, so how can we, now, in theory,
what do we hope that calling

126
00:06:13.324 --> 00:06:17.724
the return next element function's
gonna do, in theory, Abdi?

127
00:06:17.724 --> 00:06:20.876
&gt;&gt; [INAUDIBLE]
&gt;&gt; Will Sentance: What do we

128
00:06:20.876 --> 00:06:23.960
hope in theory, Bryan, it's gonna do?

129
00:06:23.960 --> 00:06:25.301
&gt;&gt; Bryan: It's gonna be 4.
&gt;&gt; Will Sentance: 4, that's what we hope.

130
00:06:25.301 --> 00:06:27.158
If we run it again, hope it would return?

131
00:06:27.158 --> 00:06:28.172
&gt;&gt; Bryan: 5.
&gt;&gt; Will Sentance: And again?

132
00:06:28.172 --> 00:06:28.741
&gt;&gt; Bryan: 6.

133
00:06:28.741 --> 00:06:30.482
&gt;&gt; Will Sentance: And again,
undefined and so forth.

134
00:06:30.482 --> 00:06:31.131
Yeah, okay.

135
00:06:31.131 --> 00:06:33.073
That's what we're hoping for desperately.

136
00:06:33.073 --> 00:06:38.011
Cuz that allows us to rethink our
collection of data as a flow.

137
00:06:38.011 --> 00:06:39.746
I'll run a function, and
get my next element.

138
00:06:39.746 --> 00:06:40.958
I'll run a function, and
get my next element.

139
00:06:40.958 --> 00:06:41.808
I'll run a function, and
get my next element.

140
00:06:41.808 --> 00:06:43.870
That's a beautiful way for your data.

141
00:06:43.870 --> 00:06:47.382
No more, I have a collection
statically of data memory,

142
00:06:47.382 --> 00:06:50.466
I gotta go and look at it,
get an element, use it.

143
00:06:50.466 --> 00:06:52.790
Look at it, get an element, use it.

144
00:06:52.790 --> 00:06:55.290
Now, I just run my function and I give in.

145
00:06:55.290 --> 00:06:56.630
I'm given my next element.

146
00:06:57.650 --> 00:07:00.940
It's a really beautiful way of
thinking about my collections of data.

147
00:07:00.940 --> 00:07:03.350
As flows of element after
element after element.

148
00:07:03.350 --> 00:07:05.404
Everyone got that mentality shift?

149
00:07:05.404 --> 00:07:07.000
It's a beautiful way of thinking.

150
00:07:07.000 --> 00:07:08.240
So you're right.

151
00:07:08.240 --> 00:07:12.030
We use to run call return next element.

152
00:07:12.030 --> 00:07:13.653
So let's do just that.

153
00:07:13.653 --> 00:07:17.481
So left-hand side there,
Abdi, it says to do what?

154
00:07:17.481 --> 00:07:18.753
&gt;&gt; Abdi: Const element one.

155
00:07:18.753 --> 00:07:21.312
&gt;&gt; Will Sentance: Okay,
element one is declared.

156
00:07:21.312 --> 00:07:21.958
Yep, good.

157
00:07:21.958 --> 00:07:23.497
Do we know what to assign to it yet?

158
00:07:23.497 --> 00:07:24.266
&gt;&gt; Abdi: No.

159
00:07:24.266 --> 00:07:28.703
&gt;&gt; Will Sentance: What are we going
to have to do to figure out what to

160
00:07:28.703 --> 00:07:30.015
assign to it?

161
00:07:30.015 --> 00:07:32.040
&gt;&gt; Abdi: We're going to have to call it.

162
00:07:32.040 --> 00:07:33.240
&gt;&gt; Will Sentance: Call what?

163
00:07:33.240 --> 00:07:34.480
&gt;&gt; Abdi: Return next element.

164
00:07:34.480 --> 00:07:35.560
&gt;&gt; Will Sentance: Good, yeah.

165
00:07:35.560 --> 00:07:37.770
What symbols tell me I've
got recall next element?

166
00:07:37.770 --> 00:07:38.500
&gt;&gt; Abdi: Parenthesis.

167
00:07:38.500 --> 00:07:39.361
&gt;&gt; Will Sentance: Excellent.

168
00:07:39.361 --> 00:07:43.114
Return next element, call it,

169
00:07:43.114 --> 00:07:48.120
I get to create my
favorite thing on Earth.

170
00:07:49.630 --> 00:07:51.649
So element one, for now, is undefined.

171
00:07:51.649 --> 00:07:54.664
My favorite thing on Earth,
everyone together.

172
00:07:54.664 --> 00:07:56.748
&gt;&gt; Abdi: [CROSSTALK]
&gt;&gt; Will Sentance: Don't say local,

173
00:07:56.748 --> 00:07:58.979
don't ruin the phraseology.

174
00:08:00.050 --> 00:08:03.524
A new-
&gt;&gt; Abdi: Execution context.

175
00:08:03.524 --> 00:08:05.794
&gt;&gt; Will Sentance: Yeah,
I like the type of slightly tired tone,

176
00:08:05.794 --> 00:08:08.836
like a kinda slightly exhausted
please stop doing this tone.

177
00:08:08.836 --> 00:08:09.914
So you did great.

178
00:08:09.914 --> 00:08:15.874
All right, so,
&gt;&gt; Will Sentance: There it is.

179
00:08:15.874 --> 00:08:21.012
It has a local memory,
&gt;&gt; Will Sentance: In which we're gonna

180
00:08:21.012 --> 00:08:25.640
store anything that gets declared in here.

181
00:08:25.640 --> 00:08:28.151
Now we have to visually
look back up to inner, but

182
00:08:28.151 --> 00:08:31.356
know that that's actually code
here in returnNextElement.

183
00:08:31.356 --> 00:08:38.652
So maybe even write element equals
array[i], i++, return element.

184
00:08:38.652 --> 00:08:40.784
That's the code of returnNextElement.

185
00:08:40.784 --> 00:08:42.758
But were gonna visually
just save ourselves and

186
00:08:42.758 --> 00:08:44.395
just look up in there to know what it is.

187
00:08:44.395 --> 00:08:47.533
So with that in mind, Shawn,
what is the first line of code, or

188
00:08:47.533 --> 00:08:50.876
what is the first thing we're going
to do inside return x element?

189
00:08:50.876 --> 00:08:52.711
Left hand side first.

190
00:08:52.711 --> 00:08:54.082
&gt;&gt; Abdi: Create a constant called element.

191
00:08:54.082 --> 00:08:58.494
&gt;&gt; Will Sentance: Excellent,
there it is, constant called element.

192
00:08:58.494 --> 00:09:02.603
Element is going to be

193
00:09:02.603 --> 00:09:07.860
the ith position of array.

194
00:09:07.860 --> 00:09:10.427
What the hell are these?

195
00:09:10.427 --> 00:09:15.010
Well, let's start to figure it out.

196
00:09:15.010 --> 00:09:20.278
Where do we look first for
something that we don't have?

197
00:09:20.278 --> 00:09:24.279
We called it returnNextElement so it goes
in our call stack of course, there it is,

198
00:09:24.279 --> 00:09:25.379
returnNextElement.

199
00:09:25.379 --> 00:09:28.973
We'll putting it inside the global.

200
00:09:28.973 --> 00:09:33.844
So we're inside of here right now.

201
00:09:33.844 --> 00:09:38.276
Where do we look first for
our array and our i?

202
00:09:38.276 --> 00:09:39.816
Local memory.

203
00:09:39.816 --> 00:09:42.262
Yeah, Abdi?

204
00:09:42.262 --> 00:09:44.555
Sorry, you were correct.

205
00:09:44.555 --> 00:09:46.022
Very good.

206
00:09:46.022 --> 00:09:47.365
Do we find?

207
00:09:47.365 --> 00:09:49.188
Do we find them, James?

208
00:09:49.188 --> 00:09:49.991
&gt;&gt; James: No.

209
00:09:49.991 --> 00:09:51.456
&gt;&gt; Will Sentance: No.

210
00:09:51.456 --> 00:09:55.396
I'm calling returnNextElement to global so
where are my,

211
00:09:55.396 --> 00:09:58.404
all my intuitions implying
that I look next?

212
00:09:58.404 --> 00:09:59.458
Ben?

213
00:09:59.458 --> 00:10:04.339
&gt;&gt; Ben: That's the definition of-
&gt;&gt; Will Sentance: Okay, stop, stop.

214
00:10:04.339 --> 00:10:05.380
The definition of what?

215
00:10:05.380 --> 00:10:08.462
&gt;&gt; Ben: returnNextElement.

216
00:10:08.462 --> 00:10:10.277
&gt;&gt; Will Sentance: Definition hm,
yeah okay.

217
00:10:10.277 --> 00:10:11.905
Yeah, because you watch, that's okay.

218
00:10:11.905 --> 00:10:14.157
All right, raise your hand if you
know what Hard Parts are for,

219
00:10:14.157 --> 00:10:15.744
cuz those are the people
I'm gonna call on.

220
00:10:15.744 --> 00:10:16.987
You've never watched Hard Parts before.

221
00:10:16.987 --> 00:10:19.730
&gt;&gt; Ben: [LAUGH]
&gt;&gt; Will Sentance: Okay, Rick.

222
00:10:19.730 --> 00:10:24.321
Where would everything suggest,
I'm calling returnNextElement, so

223
00:10:24.321 --> 00:10:28.171
where would everything suggest
the next memory is I look at?

224
00:10:28.171 --> 00:10:30.199
I don't find it in this local one,
where do I look next?

225
00:10:30.199 --> 00:10:30.887
&gt;&gt; Rick: In global.

226
00:10:30.887 --> 00:10:35.281
&gt;&gt; Will Sentance: In global,
exactly, into global I go,

227
00:10:35.281 --> 00:10:39.948
looking desperately for my array and my i.

228
00:10:39.948 --> 00:10:42.910
Do I find them, Rick?

229
00:10:42.910 --> 00:10:45.379
No, so I get an error, right, Rick?

230
00:10:47.420 --> 00:10:49.552
&gt;&gt; Will Sentance: Is that
the answer's no voice?

231
00:10:49.552 --> 00:10:53.216
Okay, I need to get better at that voice,
right?

232
00:10:53.216 --> 00:10:55.374
That's not much better either.

233
00:10:55.374 --> 00:10:58.367
I get an error, okay.

234
00:10:58.367 --> 00:10:59.551
I get an error.

235
00:10:59.551 --> 00:11:01.181
Now see, that was more convincing, right?

236
00:11:01.181 --> 00:11:02.415
Again, error.

237
00:11:05.635 --> 00:11:09.917
&gt;&gt; Will Sentance: Yes I looked for
these, not there.

238
00:11:18.064 --> 00:11:21.005
&gt;&gt; Will Sentance: There's another hard
part where we focus mainly on this

239
00:11:21.005 --> 00:11:23.833
concept, and I'd like to drag it out for
a long time.

240
00:11:23.833 --> 00:11:27.136
Here, we may not have time.

241
00:11:27.136 --> 00:11:30.177
But maybe a little bit of time, you know.

242
00:11:30.177 --> 00:11:31.615
I can drag it out for a little bit longer.

243
00:11:33.520 --> 00:11:36.303
&gt;&gt; Will Sentance: Do you mind, Brian,
passing me my coffee, my mocha?

244
00:11:36.303 --> 00:11:39.423
Thank you, I can't walk out of this
area otherwise my head gets cut off,

245
00:11:39.423 --> 00:11:40.922
my head's been cut off right now.

246
00:11:40.922 --> 00:11:44.776
&gt;&gt; Bryan: [LAUGH]
&gt;&gt; Will Sentance: I just

247
00:11:44.776 --> 00:11:47.622
want to sip this for a bit.

248
00:11:47.622 --> 00:11:52.955
So I got an error on the horizon here,
right?

249
00:11:52.955 --> 00:11:56.232
&gt;&gt; Bryan: How long do you want us to
wait before we give you the answer?

250
00:11:56.232 --> 00:12:02.522
&gt;&gt; Will Sentance: James has the sound
of a confident person about him.

251
00:12:02.522 --> 00:12:05.179
Where is that array in i?

252
00:12:05.179 --> 00:12:06.251
Cuz I am certain,

253
00:12:06.251 --> 00:12:11.121
do not at any point think I can go back
into my createFunction execution context.

254
00:12:11.121 --> 00:12:13.593
This has long gone.

255
00:12:13.593 --> 00:12:16.358
I cannot suddenly I'll just go up and
createFunction.

256
00:12:16.358 --> 00:12:19.454
That is long gone.

257
00:12:19.454 --> 00:12:21.162
So where's my?

258
00:12:21.162 --> 00:12:23.145
All right, not gonna drag it out any more.

259
00:12:23.145 --> 00:12:23.957
It turns out,

260
00:12:23.957 --> 00:12:28.378
in case James shouts out the answer before
I get to give the punchline myself.

261
00:12:28.378 --> 00:12:33.056
It turns out that,
&gt;&gt; Will Sentance: As soon as I

262
00:12:33.056 --> 00:12:37.448
define my inner function
inside a createFunction,

263
00:12:37.448 --> 00:12:42.536
while I was still back in createFunction,
before I exited,

264
00:12:42.536 --> 00:12:48.551
as soon as I defined it, I got a bond
to all the surrounding live memory.

265
00:12:48.551 --> 00:12:52.708
The surrounding data, you can call it
state, you can the variable environment.

266
00:12:52.708 --> 00:12:57.110
The live memory,
the data around the function definition.

267
00:12:57.110 --> 00:12:58.426
A lot of bombs to it.

268
00:12:58.426 --> 00:13:00.720
And then a link,
a reference to all the surrounding data.

269
00:13:02.390 --> 00:13:04.740
We'll talk about what
property in a moment.

270
00:13:04.740 --> 00:13:07.194
I got a bond this surrounding
data immediately.

271
00:13:07.194 --> 00:13:10.673
Meaning, when I return that function out,

272
00:13:10.673 --> 00:13:14.066
I brought with it on
the back of a function.

273
00:13:14.066 --> 00:13:15.882
As the function got returned out,

274
00:13:15.882 --> 00:13:18.893
out on the back of it came all
that surrounding live data.

275
00:13:18.893 --> 00:13:20.792
When I return that function out.

276
00:13:20.792 --> 00:13:25.489
Return data use of the label
inner into returnNextElement.

277
00:13:25.489 --> 00:13:26.884
On the back of the function,

278
00:13:26.884 --> 00:13:29.683
I brought all the surrounding
data from when it was born.

279
00:13:29.683 --> 00:13:33.921
And it got stored in this new label,
we got given a new label,

280
00:13:33.921 --> 00:13:36.180
globally returnNextElement.

281
00:13:36.180 --> 00:13:43.278
But my surrounding data is
attached to that very definition,

282
00:13:43.278 --> 00:13:48.608
with array literally in the memory as 456.

283
00:13:48.608 --> 00:13:51.008
Not it will be, but
literally stored in memory.

284
00:13:51.008 --> 00:13:54.979
I, as literally storing memory
as the number zero, and

285
00:13:54.979 --> 00:13:58.031
it's attached to the back of my function.

286
00:13:58.031 --> 00:14:00.749
There it is on the definition itself.

287
00:14:00.749 --> 00:14:03.271
And so Ben was hinting to this,

288
00:14:03.271 --> 00:14:09.389
when I don't find a RNI on my local
memory I do not go to global immediately.

289
00:14:09.389 --> 00:14:13.041
Instead, I go look at my
definition of my function,

290
00:14:13.041 --> 00:14:18.031
I see is there a backpack of data that
was brought out with the function?

291
00:14:18.031 --> 00:14:20.128
And look, there it is.

292
00:14:20.128 --> 00:14:22.334
And Ben, what do I grab?

293
00:14:22.334 --> 00:14:26.173
&gt;&gt; Ben: You grab four.

294
00:14:26.173 --> 00:14:29.701
&gt;&gt; Will Sentance: Correct, but
specifically my array becomes?

295
00:14:29.701 --> 00:14:35.259
&gt;&gt; [INAUDIBLE]
&gt;&gt; Will Sentance: And my i becomes?

296
00:14:35.259 --> 00:14:36.168
&gt;&gt; Ben: Zero.

297
00:14:36.168 --> 00:14:37.570
&gt;&gt; Will Sentance: Zero.

298
00:14:37.570 --> 00:14:39.536
I'm not looking at it
from my local memory,

299
00:14:39.536 --> 00:14:42.738
I'm looking on the function definition
that's being called itself.

300
00:14:42.738 --> 00:14:45.484
And there attached to it is my persistent,

301
00:14:45.484 --> 00:14:48.306
we'll give it posher names in a moment,
but

302
00:14:48.306 --> 00:14:53.590
my backpack of data from when the function
was returned out from where it was born.

303
00:14:53.590 --> 00:14:58.192
As soon as it was born it got a link
to all the surrounding data from

304
00:14:58.192 --> 00:15:00.758
the memory in which it was defined.

305
00:15:00.758 --> 00:15:03.451
When I return the function
out that bond didn't break,

306
00:15:03.451 --> 00:15:07.072
that bond pulled out on the back of
the function all that surrounding data.

307
00:15:07.072 --> 00:15:11.931
And when I call that function by
it's new global label here and

308
00:15:11.931 --> 00:15:16.699
doesn't find some,
it refers to labels in the find data of,

309
00:15:16.699 --> 00:15:19.976
in the local memory, it doesn't panic.

310
00:15:19.976 --> 00:15:24.952
It looks first to the function's
definition and finds attach to

311
00:15:24.952 --> 00:15:30.769
the function, our persistent live data
from where the function was born.

312
00:15:30.769 --> 00:15:35.558
All right, which means exactly as Ben
said, what am I storing in element?

313
00:15:35.558 --> 00:15:39.409
I'm gonna take the zeroth position of
array, four five six which is, Ben?

314
00:15:39.409 --> 00:15:40.089
&gt;&gt; Ben: Four.

315
00:15:40.089 --> 00:15:40.841
&gt;&gt; Will Sentance: Four.

316
00:15:40.841 --> 00:15:44.293
And what am I gonna do as my next line,
Ben inside my body of the function?

317
00:15:44.293 --> 00:15:46.270
&gt;&gt; Ben: You're going to increment i.

318
00:15:46.270 --> 00:15:48.491
&gt;&gt; Will Sentance: Right,
do I find i in local memory?

319
00:15:48.491 --> 00:15:49.027
&gt;&gt; Ben: No.

320
00:15:49.027 --> 00:15:50.015
&gt;&gt; Will Sentance: Where do I go?

321
00:15:50.015 --> 00:15:51.177
&gt;&gt; Ben: You go to the backend.

322
00:15:51.177 --> 00:15:52.285
&gt;&gt; Will Sentance: Use my name, yes, good.

323
00:15:52.285 --> 00:15:53.161
Not my name, sorry.

324
00:15:53.161 --> 00:15:58.384
&gt;&gt; Ben: [LAUGH]
&gt;&gt; Will Sentance: And i goes to One and

325
00:15:58.384 --> 00:16:03.079
then we hit return element,
which is really return what?

326
00:16:03.079 --> 00:16:04.410
&gt;&gt; Ben: Four.
&gt;&gt; Will Sentance: Four,

327
00:16:04.410 --> 00:16:10.436
we return out four into
what global constant?

328
00:16:10.436 --> 00:16:11.088
&gt;&gt; Ben: Element one.

329
00:16:11.088 --> 00:16:14.868
&gt;&gt; Will Sentance: Element one and
look at that.

330
00:16:14.868 --> 00:16:19.788
Look at that, element one is not four,
is not one, is four,

331
00:16:19.788 --> 00:16:24.726
exactly what we wanted from
calling return next element.

332
00:16:24.726 --> 00:16:26.940
Let's call it one more time
to see what happens, and

333
00:16:26.940 --> 00:16:30.720
then we'll talk about what
concept this backpack is.

334
00:16:30.720 --> 00:16:35.899
You may already know its posher name, or
its more unintuitive name, or its name

335
00:16:35.899 --> 00:16:40.869
that I'm hoping is going to be replaced
with backpack in the spec very soon.

336
00:16:43.142 --> 00:16:45.110
&gt;&gt; Will Sentance: I believe it will be.

337
00:16:45.110 --> 00:16:47.630
All right, return x element
popped off the cool stack.

338
00:16:47.630 --> 00:16:50.442
All of it in context cleared, right, so

339
00:16:50.442 --> 00:16:56.010
we'd better not be having this information
in here because it's all deleted.

340
00:16:56.010 --> 00:17:01.430
And we hit our next global line of code,
which is what Abdi?

341
00:17:03.270 --> 00:17:05.825
&gt;&gt; Abdi: Element two,
declaring that in memory.

342
00:17:05.825 --> 00:17:07.250
&gt;&gt; Will Sentance: Yeah, exactly.

343
00:17:07.250 --> 00:17:10.500
So let's just try being precise
in our telecommunications.

344
00:17:10.500 --> 00:17:14.565
So Abdi do you want to give
another shot on that, declare the?

345
00:17:14.565 --> 00:17:15.257
&gt;&gt; Abdi: Function.

346
00:17:15.257 --> 00:17:16.919
&gt;&gt; Will Sentance: Declare the constant.

347
00:17:16.919 --> 00:17:19.655
&gt;&gt; Abdi: Declare the constant element two.

348
00:17:19.655 --> 00:17:22.340
&gt;&gt; Will Sentance: Excellent,
in global memory.

349
00:17:22.340 --> 00:17:27.730
And then we know it's going to be
the return value of calling what function,

350
00:17:27.730 --> 00:17:28.245
Abdi?

351
00:17:28.245 --> 00:17:28.975
&gt;&gt; Abdi: Return next element.

352
00:17:28.975 --> 00:17:34.823
&gt;&gt; Will Sentance: Good, so for now,
element 2 will default to, everyone?

353
00:17:34.823 --> 00:17:35.999
&gt;&gt; Abdi: Undefined.

354
00:17:35.999 --> 00:17:39.160
&gt;&gt; Will Sentance: Excellent, so let's
create that execution context, people.

355
00:17:39.160 --> 00:17:41.527
Almost there, I wanna have a sit down.

356
00:17:41.527 --> 00:17:43.350
Let's create execution context.

357
00:17:43.350 --> 00:17:49.590
In we go, in our local memory,
what's the first thing we declare, Victor?

358
00:17:50.690 --> 00:17:51.660
&gt;&gt; Victor: Element.

359
00:17:51.660 --> 00:17:56.714
&gt;&gt; Will Sentance: Element,
which is going to be set to a array,

360
00:17:56.714 --> 00:18:00.320
these mysterious array(i).

361
00:18:00.320 --> 00:18:03.670
What are these mysterious
things you might be asking?

362
00:18:03.670 --> 00:18:07.233
Well, where do I look for

363
00:18:07.233 --> 00:18:11.490
array in (i) first Victor?

364
00:18:11.490 --> 00:18:13.220
&gt;&gt; Victor: In the local execution context.

365
00:18:13.220 --> 00:18:14.624
&gt;&gt; Will Sentance: Always in
the local execution context first,

366
00:18:14.624 --> 00:18:16.400
nothing there though, right?

367
00:18:16.400 --> 00:18:17.730
So do I panic?

368
00:18:17.730 --> 00:18:19.010
No, I mean I wouldn't panic anyway.

369
00:18:19.010 --> 00:18:21.390
Where might I intuitively look next?

370
00:18:21.390 --> 00:18:25.508
&gt;&gt; Victor: You would intuitively
go to global [CROSSTALK].

371
00:18:25.508 --> 00:18:28.950
&gt;&gt; Will Sentance: Right.
&gt;&gt; Victor: But there is a enclosed.

372
00:18:28.950 --> 00:18:30.790
&gt;&gt; Will Sentance: Okay, getting,
I like that sort of term,

373
00:18:30.790 --> 00:18:31.870
I like that sort of term.

374
00:18:31.870 --> 00:18:34.235
There's an enclosed backpack,
good, got it.

375
00:18:34.235 --> 00:18:37.850
&gt;&gt; Victor: [LAUGH]
&gt;&gt; Will Sentance: Where I find arrays

376
00:18:37.850 --> 00:18:39.130
four, five, six, and (i) is?

377
00:18:40.700 --> 00:18:41.427
&gt;&gt; Victor: One.
&gt;&gt; Will Sentance: One,

378
00:18:41.427 --> 00:18:45.150
our live data here persists attached
to the function definition.

379
00:18:45.150 --> 00:18:48.560
It's persisting attached to our
function definition here in memory.

380
00:18:48.560 --> 00:18:54.045
So (i) is one, so array is four,
five, six and (i) is one,

381
00:18:54.045 --> 00:18:59.220
because return its elements is
stored in global memory, so

382
00:18:59.220 --> 00:19:05.540
it's not suddenly deleting all
the data attached to it at each stop.

383
00:19:05.540 --> 00:19:07.310
It doesn't care about the running
of this function, except,

384
00:19:07.310 --> 00:19:08.330
what do you store in here?

385
00:19:08.330 --> 00:19:09.617
This is like persistent data,

386
00:19:09.617 --> 00:19:12.388
just like return next element
function is a persistent function,

387
00:19:12.388 --> 00:19:15.560
as long as the application's running,
can't suddenly be deleted.

388
00:19:15.560 --> 00:19:18.585
So too is its attached backpack of data,
persistent.

389
00:19:18.585 --> 00:19:20.407
That just means it sticks around,
it doesn't change.

390
00:19:20.407 --> 00:19:22.968
Or we change it, but
it doesn't get removed.

391
00:19:22.968 --> 00:19:27.019
Okay, so
position one vector of [4,5,6] is what?

392
00:19:27.019 --> 00:19:30.216
&gt;&gt; Victor: Five.
&gt;&gt; Will Sentance: Five, good job, five.

393
00:19:30.216 --> 00:19:33.354
And then we hit the next line
inside the body vector, which is?

394
00:19:34.823 --> 00:19:35.920
&gt;&gt; Victor: Five plus plus?

395
00:19:35.920 --> 00:19:38.645
&gt;&gt; Will Sentance: And
right here we find it in the backpack and

396
00:19:38.645 --> 00:19:39.358
do-
&gt;&gt; Victor: Two.

397
00:19:39.358 --> 00:19:43.199
&gt;&gt; Will Sentance: Two,
and then we hit return.

398
00:19:43.199 --> 00:19:44.863
Return what vector?

399
00:19:44.863 --> 00:19:45.555
&gt;&gt; Victor: Return 5.

400
00:19:45.555 --> 00:19:52.016
&gt;&gt; Will Sentance: Return 5,
the value of element into element 2.

401
00:19:52.016 --> 00:19:53.353
Excellent there it is.

402
00:19:53.353 --> 00:19:55.585
And look at that.

403
00:19:55.585 --> 00:19:56.396
All right, that's pretty beautiful.

404
00:19:56.396 --> 00:20:03.050
We have a function now that when born
got attached to its very definition.

405
00:20:03.050 --> 00:20:08.470
The underlying state, the underlying data
from which it's going to extract and

406
00:20:08.470 --> 00:20:11.630
return to us on its call,

407
00:20:11.630 --> 00:20:16.050
one by one, the individual elements
from that underlying collection of data.

408
00:20:16.050 --> 00:20:20.777
And it's keeping track of which ones
up next using this little tracking

409
00:20:20.777 --> 00:20:25.051
value also all bundled up on
this returnNextElement function.

410
00:20:25.051 --> 00:20:26.404
I think that's very, very beautfiful.

411
00:20:26.404 --> 00:20:29.479
We'll talk about it in a second, but
I think it's very beautiful that you can

412
00:20:29.479 --> 00:20:32.750
have a function return its element
that has everything you need.

413
00:20:32.750 --> 00:20:36.670
It has the ability when called
to return our next element.

414
00:20:36.670 --> 00:20:41.730
It has bundled on it the underlying
data that it knows to extract from and

415
00:20:41.730 --> 00:20:47.780
it has bundled on it the information
about what next element to return out.

416
00:20:47.780 --> 00:20:50.270
All bundled up in a single function.

417
00:20:50.270 --> 00:20:52.122
That's a very, very beautiful design.

418
00:20:52.122 --> 00:20:54.877
All right, let's have thumbs and

419
00:20:54.877 --> 00:21:00.586
one of the thumbs on medium might be
what do we call the backpack of data?

420
00:21:00.586 --> 00:21:04.470
Everybody's thumbs out, you lost me,
unclear, I have clarifications.

421
00:21:04.470 --> 00:21:07.511
Everyone's thumbs out and proud.

422
00:21:07.511 --> 00:21:09.550
Everyone knows what the backpack's called?

423
00:21:09.550 --> 00:21:12.945
No one has medium thumbs, all right.

424
00:21:12.945 --> 00:21:14.050
&gt;&gt; Victor: What's the backpack called?

425
00:21:14.050 --> 00:21:14.930
&gt;&gt; Will Sentance: Good, good job, Alec.

