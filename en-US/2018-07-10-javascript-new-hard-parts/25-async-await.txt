[00:00:04]
>> Will Sentance: Async Await simplifies this entire process. Async/await, I would say finally fixes the inversion control problem of callbacks. Actually, this does as well. Async/await we're not gonna need to have a function here that triggers the return back into the generator functions execution context, the createFlow. We're not gonna need that anymore.

[00:00:35]
Instead, what's gonna be triggered from here is just come straight back in here. With a return value. No more triggering of that happening via another function. We're gonna work through it line by line, and this is our final code. We're running slightly long, this is our very, very final code of all of hard parts, all of the beauty of asynchronicity.

[00:01:00]
By the way though, can we just appreciate for a second, appreciate yourselves for a second. You've incorporated into your mental model, every hard part of the JavaScript engine here. The entire web browser features part, the micro-task queue, the only person who talks about microtask queue really is a guy called Jake Archibald, truly gifted.

[00:01:22]
I highly recommend him. Brilliant British speaker who's a developer at Google. Truly gifted explainer of concepts and sharer of entertaining, humble anecdotes, as is the wont of my people. And he talked about the Microsoft queue, the only person who does. That's how advanced this stuff is. And you've combined all that with a feature of JavaScript just got released.

[00:01:55]
Generated async/await. And you built async/await from scratch. This is async/await built. If you get a senior dev interview, the question is gonna come up more and more I think. Can you build async/await from scratch? We just did it. We just built async/await from scratch.
>> Speaker 2: We just built React Saga, basically.

[00:02:14]

>> Will Sentance: Even better, we just built React Saga from scratch. Let's try and inflate our achievement even more.
>> Speaker 2: [LAUGH]
>> Will Sentance: We just built the JavaScript engine from scratch.
>> Speaker 2: [LAUGH]
>> Will Sentance: There we go. I feel particularly proud of all of you. All right, so we're gonna do this though final code is going to be doing the nicely prettily wrapped version of this, using the async/await or the async function decoration style, which is going to just prettify this slightly more for us.

[00:02:53]
And this is our final code. I gotta say, I guess I'm just feeling exhaustion when I'm. For the first time, my beautiful people, for the first time we are able to return back into a function's execution context after we've left it. We'll be able to do so using our returnNextElement.next method, that guides us back into the createFlow's execution context.

[00:03:25]
We manually do so using our next method core, which was triggered. By the triggering of our do when data received callback. That was attached to our future data promise object. But this flow, inwards and outwards, and it gets complex. And so JavaScript gives us a, async function that's gonna automate that process of going back into the createFlow function.

[00:04:03]
It's gonna say don't worry, we don't have to trigger going back into it. Instead, we're gonna go automatically back into it. We're gonna pass the response object value back in, as the evaluated result of the yield expression, and store that straight in data. It's gonna simplify all of this code for us with the help of the async functions.

[00:04:32]
Async/await simplifies all of this and finally cleans out our inversion of control problem of callbacks. We're gonna see that now, for the first time we don't define a task to be done beyond our control much later on, instead we're gonna go into createFlow, set up some work, set up a task that takes a long time.

[00:04:55]
That is our speaking to the web browser that speaks to the internet, gets our tweet, 200 milliseconds, brings it back. And then we're gonna somehow get back into createFlow, to continue running our code sequentially. No need for triggered function on the promise resolution, and so we auto trigger the resumption of the createFlow execution.

[00:05:18]
That functionality is still added to the micro task queue though. Right, so here we go lessing. Line one. What are we doing?
>> Speaker 3: We're going to declare an async function called createFlow.
>> Will Sentance: Excellent. createFlow is defined, it is a function, it is an async, a brand new type of function, an asynchronous function, good.

[00:05:46]
Line two, Blessing.
>> Speaker 3: Are we going to be invoking the function we just created which is create from function.
>> Will Sentance: Excellent, we're gonna invoke createFlow, and we are going to immediately enter it's execution context. Immediately enter it's execution context, there it is. And what is the first thing blessing, that it tells us to do in this execution context?

[00:06:20]
Let's say at about 1 millisecond.
>> Speaker 3: To consider log manifest.
>> Will Sentance: Excellent, so about 1 millisecond, we hit our console log. Me first. So we do go into the crypt. This is not like our generator function. We have to trigger going into using the next method, the call to the generator function returned out the next method on that object, instead we're gonna go into it directly ourselves.

[00:06:50]
Just by calling it. So the first thing we do is indeed a console log of the string me first. Perfect. And in our memory, what is the next line of code Blessing, that we are going to encounter?
>> Speaker 3: We declare constant data.
>> Will Sentance: Perfect, there it is, and for now-

[00:07:12]

>> Speaker 3: It's undefined.
>> Will Sentance: Undefined, exactly, so we set data is going to be the evaluated result of that expression on the right-hand side. So there it is on the right hand side, we say await and then fetch, ha-ha, the return of our wonderful, our final call to our fetch facade function, a two pronged function, that in JavaScript returns out a what, Blessing?

[00:07:51]

>> Speaker 3: Impromied objects.
>> Will Sentance: Impromised object, but it also spins out a bunch of work in the web browser itself. So let's do the JavaScript piece first, we are going to return out a promise object, just as Blessing said, with two, we have a few properties, but two important properties, value and un-fulfillment, which is an empty array.

[00:08:20]
Both right now with nothing interesting in them yet. The value is gonna be also filled in with whatever comes back from the web browser features background work, and the own fulfillment array, well we'll see what's that's going to do here. Good, but and that object here, we're gonna hold it here for now, but in the web browser, what are we spinning up?

[00:08:48]
We are spinning up the background feature XHR. There it is, XHR is spun up. And it has some important properties. The URL, Twitter.com, the path/will/1. Something like that, whatever it is. And the type of request we're making. And it's a git request. And we are sending off an HTTP.

[00:09:20]
That's the H in the XHR, HDP message off to Twitter itself. Their server. There it is. The beautiful Twitter server. And is it at this moment at about 1 millisecond Blessing, is it complete yet?
>> Speaker 3: No.
>> Will Sentance: It is not. But when our data comes back, it will be complete.

[00:09:49]
What do we want to update on the completion? We want to update this value property. Now we have not assigned this object to any particular place. It's just a position in memory. So we know that we are referring to this object we defined, its value property. That's what we're going to update.

[00:10:12]
We didn't give it a label in JavaScript. But the web browser knows where that object is stored. And that's the value property is gonna update. Okay, perfect, good. And now the all powerful await is going to throw us out of our createFlow execution.
>> Will Sentance: Gonna throw us out of the createFlow execution context.

[00:10:41]
You have a very clean eye. And for that out of our createFlow execution context, where we are going to encounter what line next. Blessing.
>> Speaker 3: Console.log (me second).
>> Will Sentance: Me second, exactly. At about let's say maybe 2 milliseconds. Something like that, about 2 milliseconds. In other words, the most important thing we wanted to do with any asynchronous work, is set up a task that takes a bunch of time.

[00:11:17]
That's the web browser feature task. That doesn't take 200 milliseconds. Set it up but be able to continue running our synchronous code afterwards. But now, do we see to do it we're stepping out of our function. And wouldn't it be wonderful if we could step back in to our function, to when we get the value from the request back as a response, hopefully it's gonna be stored in data, and we can then continue running our code, and log that data.

[00:11:50]
Wouldn't that be wonderful, let's hope it is possible. So in JavaScript now, in JavaScript now we don't really have much interesting stuff to do, we're done. We're done. But, there's our core stack. But in the background after about 200 milliseconds, interesting stuff is happening. About 200 milliseconds later.

[00:12:21]
Say 200 more milliseconds, our background work is complete. And we get a glorious response. Pen is already dead. We got a glorious response. Let's use red. A glorious response. The string hi and what is that gonna update? That is gonna update a value property of the promised object that's being stored in memory, and referred to its position in memory from the web browser feature ready to update that value.

[00:13:10]
At which point, what are we gonna do? We are going to trigger, and we can think of in our own fulfillment array as effectively the continuation of our createFlow execution context. We're gonna trigger at that moment the continuation of our createFlow institution context and at about 201 milliseconds, re-enter where we effectively paused.

[00:13:42]
We're gonna get to re-enter and createFlow back on our call stack and come back in, and await was super powerful. It threw us straight out. We never even got to assign anything to data. That's not a bad thing. We're hoping that data is gonna be filled with whatever this right-hand side evaluates to.

[00:14:05]
And what does it evaluate it to, Blessing?
>> Speaker 4: Hi.
>> Will Sentance: To the value from the request of the Internet that came back with hi. That is what our await expression evaluates to, hi. And we assign it to what label? To data, exactly. And so when we hit our next line in the body of our createFlow function, console.log(data), data is going to be evaluated to high and look at that.

[00:14:42]
At about 200, no 202 milliseconds, we get to continue running the rest of our code. We get to continue running the rest of our code inside our createFlow function. All that work of returning a value or the response object that we saw before into the promise object that we stored in future data.

[00:15:13]
That we then triggered a do when data receive function, that then triggered .next on the return next element call, or return its element object next function that triggered us to go back into createFlow. All of that automated, the async function definition is gonna handle all of that for us.

[00:15:37]
The await still behaves similar to a yield, so await is similar to a yield, that we're going to hold on storing anything in the left-hand side until we get something back from this background work. But now when the value comes back, we're just gonna go straight down in createFlow and store it in data.

[00:15:54]
This is a beautifully cleaned up version of that highly complex set up we had, but we've nevertheless a very powerful set up. But now, we have a cleaned up version, and by the way, these cleaned up version behind the scenes, is doing all of this. So if you want to emulate, if you wanna emulate the async/await function definition and call, we can do it ourselves with generators.

[00:16:26]
And this is the senior dev interview question of the next few years.

