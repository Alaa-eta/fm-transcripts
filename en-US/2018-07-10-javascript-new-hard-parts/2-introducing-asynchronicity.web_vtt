WEBVTT

1
00:00:03.437 --> 00:00:07.403
&gt;&gt; Will Sentance: We are going to
move on to now the wonderful world of

2
00:00:07.403 --> 00:00:08.918
asynchronicity.

3
00:00:08.918 --> 00:00:12.028
Asynchronicity is going to
change up this whole model.

4
00:00:12.028 --> 00:00:18.769
It's going to change it up,
it's gonna augment this whole model.

5
00:00:18.769 --> 00:00:22.424
This whole model is going to
continue to exist In fact,

6
00:00:22.424 --> 00:00:27.429
the reason we're gonna need to augment
our model, is this model is going to

7
00:00:27.429 --> 00:00:32.926
fundamentally untenable in how you think
about doing tasks that take a long time.

8
00:00:32.926 --> 00:00:37.149
So let 's just confirm,
JavaScript is single threaded,

9
00:00:37.149 --> 00:00:40.176
one line of code of executing at the time.

10
00:00:40.176 --> 00:00:42.280
When I start running multiple by two,

11
00:00:42.280 --> 00:00:45.056
I'm not allowed to continue
on in my global code.

12
00:00:47.107 --> 00:00:50.780
&gt;&gt; Will Sentance: To executing
the context comprising at the same time.

13
00:00:50.780 --> 00:00:53.140
Not allowed to, single threaded.

14
00:00:53.140 --> 00:00:58.975
But simultaneously, I'm also not allowed
to move on to the next line regardless,

15
00:00:58.975 --> 00:01:03.845
because until I finish multiply by 2's
call, because JavaScript is synchronous.

16
00:01:03.845 --> 00:01:05.805
All that means is I go from top to bottom,

17
00:01:05.805 --> 00:01:08.525
I never move on to the next line
until I finish on the previous line.

18
00:01:08.525 --> 00:01:12.035
I never, ever move on to the next line.

19
00:01:12.035 --> 00:01:15.480
If you see a function call,
I must return out of it,

20
00:01:15.480 --> 00:01:19.104
I must finish executing it
before I hit the next line.

21
00:01:19.104 --> 00:01:24.088
Well this implies a big problem, what if
our multiply by two call were a call to

22
00:01:24.088 --> 00:01:27.551
a server that was going
to take 300 milliseconds?

23
00:01:27.551 --> 00:01:32.187
I'm not allowed to move on from that
line to run any more Javascript until

24
00:01:32.187 --> 00:01:33.329
that comes back.

25
00:01:33.329 --> 00:01:38.058
What if I click view more tweets and
it runs Javascript code that says go get

26
00:01:38.058 --> 00:01:41.110
more tweets Is gonna
take 300 millisecond or

27
00:01:41.110 --> 00:01:44.410
200 milliseconds before
the tweets come back.

28
00:01:44.410 --> 00:01:48.601
But in the mean time, I'm clicking like
on a tweet which is gonna run more

29
00:01:48.601 --> 00:01:50.662
JavaScript code to turn it to pink,

30
00:01:50.662 --> 00:01:55.013
and to increase the number of likes on
that tweet in my state, in my memory.

31
00:01:55.013 --> 00:01:58.044
That can't happen,
I'll be sitting there clicking,

32
00:01:58.044 --> 00:02:02.450
because I'm still busy waiting on
the line saying, go get more tweets.

33
00:02:02.450 --> 00:02:04.760
Because I've gotta wait till it
returns back the tweets, right?

34
00:02:04.760 --> 00:02:08.050
Before I can move on to my next
line that says color the heart pink

35
00:02:08.050 --> 00:02:08.780
cuz I click the button.

36
00:02:08.780 --> 00:02:11.660
This is gonna be a profound issue.

37
00:02:13.400 --> 00:02:16.330
What is we wanna wait some time before
we can execute some bits of code?

38
00:02:16.330 --> 00:02:21.380
We want to wait until our data
comes back from Twitter before we

39
00:02:21.380 --> 00:02:26.532
can then display and
run the functionality display that data.

40
00:02:28.760 --> 00:02:32.150
That mean to get more data in API or
even a timer to complete and

41
00:02:32.150 --> 00:02:34.910
then wanna run some code,
we have a conundrum

42
00:02:34.910 --> 00:02:39.180
a tension between wanting to delay some
code running because we're waiting for

43
00:02:39.180 --> 00:02:43.110
data to come back so we wanna have the
next line of code be Display those tweets.

44
00:02:43.110 --> 00:02:45.140
We want to have the data
actually come back.

45
00:02:45.140 --> 00:02:49.370
But we do know how to block our single
thread from continuing to run code,

46
00:02:49.370 --> 00:02:51.620
this is going to be a profound conundrum.

47
00:02:51.620 --> 00:02:56.350
It is going to be the essence of why we
have to introduce in JavaScript a whole

48
00:02:56.350 --> 00:03:01.900
a complimentary model to our
beautiful synchronous world.

49
00:03:01.900 --> 00:03:04.920
These three parts of JavaScript
alone are not enough.

50
00:03:06.340 --> 00:03:09.340
What's particularly interesting
is asynchronicity in Java,

51
00:03:09.340 --> 00:03:11.736
asynchronous what Java is
the interesting stuff.

52
00:03:11.736 --> 00:03:16.670
I love our pure simple JavaScript engine,
but everything we love about

53
00:03:16.670 --> 00:03:21.950
web application development is
not happening in pure JavaScript.

54
00:03:21.950 --> 00:03:24.520
Pure JavaScript does not know
how to speak to the Internet,

55
00:03:24.520 --> 00:03:28.030
that is not a feature of JavaScript
to speak to the Internet.

56
00:03:28.030 --> 00:03:33.777
Instead all those features
are sitting outside of JavaScript.

57
00:03:33.777 --> 00:03:37.248
They're sitting outside
of JavaScript in where?

58
00:03:37.248 --> 00:03:37.880
What's your name, dude?

59
00:03:37.880 --> 00:03:38.417
Alec.

60
00:03:38.417 --> 00:03:39.320
&gt;&gt; Alec: Alec.

61
00:03:39.320 --> 00:03:41.874
&gt;&gt; Will Sentance: Alec,
where are they sitting?

62
00:03:41.874 --> 00:03:43.477
&gt;&gt; Will Sentance: Where are those
features of JavaScript that are not,

63
00:03:43.477 --> 00:03:45.089
that are doing things like
speaking to the Internet.

64
00:03:45.089 --> 00:03:45.825
Where are they?

65
00:03:45.825 --> 00:03:46.554
&gt;&gt; Alec: APIs?

66
00:03:46.554 --> 00:03:49.355
&gt;&gt; Will Sentance: Well not
features of JavaScript, I'm sorry.

67
00:03:49.355 --> 00:03:50.884
Where are the features that speak to
the internet that JavaScript uses?

68
00:03:50.884 --> 00:03:52.529
Yeah, what does that mean?

69
00:03:52.529 --> 00:03:53.396
&gt;&gt; Alec: I don't know.

70
00:03:53.396 --> 00:03:56.147
Restful web services and.

71
00:03:56.147 --> 00:03:58.230
&gt;&gt; Will Sentance: Michelle,
where are all those features that can for

72
00:03:58.230 --> 00:03:59.515
example speak to the Internet?

73
00:03:59.515 --> 00:04:00.370
&gt;&gt; Michelle: Are they in the browser area?

74
00:04:00.370 --> 00:04:01.683
&gt;&gt; Will Sentance: They're in the browser.

75
00:04:01.683 --> 00:04:09.159
The browser is a wealth of features
that we in JavaScript get access to.

76
00:04:09.159 --> 00:04:14.746
We write JavaScript code that
is essentially a facade.

77
00:04:14.746 --> 00:04:17.211
We're gonna see these our facades for

78
00:04:17.211 --> 00:04:23.040
a bunch of features that are not in
JavaScript but instead in the web browser.

79
00:04:23.040 --> 00:04:26.700
That's what we're gonna end up spending
most of our time this morning doing,

80
00:04:26.700 --> 00:04:31.560
is writing JavaScript code that
interfaces APIs, Alex is right.

81
00:04:31.560 --> 00:04:34.030
Interfaces, the I in API stands for

82
00:04:34.030 --> 00:04:37.700
interface that interacts with
stuff outside of JavaScript.

83
00:04:39.060 --> 00:04:43.680
Okay, we need a whole
new bunch of features.

84
00:04:43.680 --> 00:04:44.910
In JavaScript, and

85
00:04:44.910 --> 00:04:49.160
outside of JavaScript, in order to
understand how this is working.

86
00:04:49.160 --> 00:04:52.748
So, here we go, here's our first solution.

87
00:04:52.748 --> 00:04:55.530
And I'll pre-tell you that it's
fundamentally untenable, but

88
00:04:55.530 --> 00:05:00.980
here's our first solution for
how to go and do a task that's

89
00:05:00.980 --> 00:05:04.520
going to take a long time, like speaking
to Twitter and getting our tweets back.

90
00:05:05.640 --> 00:05:08.800
And nevertheless,
be able to continue running code, but

91
00:05:08.800 --> 00:05:11.130
know where that data is whn it comes back.

92
00:05:11.130 --> 00:05:16.160
This first solution here is
going to be untenable, but

93
00:05:17.170 --> 00:05:22.990
it is nevertheless going
to be fairly intuitive, but

94
00:05:22.990 --> 00:05:26.290
completely untenable, all right.

95
00:05:26.290 --> 00:05:28.000
Line one, and by the way, so

96
00:05:28.000 --> 00:05:32.350
far we are still seeing things that
are very analagous to first hard parts.

97
00:05:32.350 --> 00:05:37.085
But we need to get these foundations down
to understand the harder pieces to come.

98
00:05:37.085 --> 00:05:38.510
All right, line one.

99
00:05:40.770 --> 00:05:41.412
Abdi?

100
00:05:41.412 --> 00:05:46.285
&gt;&gt; Abdi: Yeah, we're declaring
display in our variable environment.

101
00:05:46.285 --> 00:05:47.643
&gt;&gt; Will Sentance: Yeah
very nicely put Abdi.

102
00:05:47.643 --> 00:05:48.499
Display is declared.

103
00:05:48.499 --> 00:05:50.516
Excellent.

104
00:05:50.516 --> 00:05:52.055
Next line of code.

105
00:05:52.055 --> 00:05:55.500
Alec, do the left hand side first.

106
00:05:56.570 --> 00:06:00.560
&gt;&gt; Alec: We are declaring data from API.

107
00:06:00.560 --> 00:06:03.277
&gt;&gt; Will Sentance: Yeah, and
what's it gonna be assigned?

108
00:06:03.277 --> 00:06:05.124
&gt;&gt; Alec: The faction weight function?

109
00:06:05.124 --> 00:06:08.638
&gt;&gt; Will Sentance: No we never
assign function, if we just had,

110
00:06:08.638 --> 00:06:10.583
we had no parends there.

111
00:06:10.583 --> 00:06:13.013
It could be assigned,
it would say whats fetch and weight,

112
00:06:13.013 --> 00:06:14.723
it would assign it to that whatever it is.

113
00:06:14.723 --> 00:06:17.339
But Java scripts not doing
that on the right hand.

114
00:06:17.339 --> 00:06:20.946
What are parends always tell me to do,
blessing?

115
00:06:20.946 --> 00:06:21.694
&gt;&gt; Blessing: To call a function.

116
00:06:21.694 --> 00:06:22.658
&gt;&gt; Will Sentance: To call.

117
00:06:22.658 --> 00:06:26.783
The right-hand side here is a command,
it is unfinished work, so

118
00:06:26.783 --> 00:06:30.680
be really clear with yourself
in no way are we assigning.

119
00:06:30.680 --> 00:06:34.410
Data API has zero
interest in fetchAndWait.

120
00:06:34.410 --> 00:06:39.572
It's only interest is in whatever
gets returned from fetchAndWait,

121
00:06:39.572 --> 00:06:42.199
which we hope, we'll be at tweet.

122
00:06:42.199 --> 00:06:48.140
Okay, so fetch and
wait here is a made up function,

123
00:06:48.140 --> 00:06:52.015
but let's just see what it does.

124
00:06:52.015 --> 00:06:58.012
So dated from API is going
to be return of fetch and

125
00:06:58.012 --> 00:07:01.390
wait, to our Twitter URL.

126
00:07:01.390 --> 00:07:08.970
So we're hoping it's gonna return a nice
tweet for us, that's what we're hoping.

127
00:07:08.970 --> 00:07:12.854
So let's start tracking our time parsing.

128
00:07:12.854 --> 00:07:15.643
We're at about 1 millisecond here,

129
00:07:15.643 --> 00:07:20.621
let's say this thing here takes
200 milliseconds to complete.

130
00:07:23.778 --> 00:07:30.889
&gt;&gt; Will Sentance: 200 millisecond,
200 milliseconds later,

131
00:07:30.889 --> 00:07:34.600
finally our data comes back.

132
00:07:34.600 --> 00:07:37.706
It could be 200 milliseconds, it could
be half a second, we don't even know.

133
00:07:37.706 --> 00:07:42.209
In that time, are we allowed to move
on and run any further jobs for code?

134
00:07:43.380 --> 00:07:46.820
Absolutely not,
we are not allowed to move on.

135
00:07:46.820 --> 00:07:50.170
We are blocked because our
JavaScript thread is synchronous,

136
00:07:50.170 --> 00:07:53.510
there is work we are still doing
on the right hand side here.

137
00:07:53.510 --> 00:07:55.588
We are not aloud and we wouldn't want to.

138
00:07:55.588 --> 00:07:58.460
Because the next line says,
display the data API, so

139
00:07:58.460 --> 00:08:01.320
we better have that data
back to display it.

140
00:08:01.320 --> 00:08:02.575
Is that solution one?

141
00:08:02.575 --> 00:08:07.420
To be clear, this is not the right
solution, but this is a solution.

142
00:08:07.420 --> 00:08:14.300
So 200 milliseconds passes and
our request to Twitter returns out.

143
00:08:14.300 --> 00:08:19.374
Let's just say very nicely,
it returns out our data and it is the,

144
00:08:19.374 --> 00:08:24.373
it is a single tweet, and
it's not even coming back as an object.

145
00:08:24.373 --> 00:08:27.841
Of course, they come back as objects,
but just a tweet, hi.

146
00:08:27.841 --> 00:08:30.271
And we go to store hi where, Michelle?

147
00:08:30.271 --> 00:08:35.888
&gt;&gt; Michelle: [LAUGH] Sorry, I was
distracted by laughing at your topic.

148
00:08:35.888 --> 00:08:38.156
&gt;&gt; Will Sentance: We're going to
return that from fetchAndWait, hi.

149
00:08:38.156 --> 00:08:39.460
Where is it going to be stored?

150
00:08:39.460 --> 00:08:41.069
&gt;&gt; [INAUDIBLE]
&gt;&gt; Will Sentance: Yeah,

151
00:08:41.069 --> 00:08:43.530
Michelle where is it gonna be stored?

152
00:08:43.530 --> 00:08:44.450
&gt;&gt; Michelle: In data from API.

153
00:08:44.450 --> 00:08:47.235
&gt;&gt; Will Sentance: In
data from API exactly.

154
00:08:47.235 --> 00:08:48.081
I apologise for

155
00:08:48.081 --> 00:08:52.061
saying like I'm correcting all of
your pronunciations of data to data.

156
00:08:52.061 --> 00:08:57.639
But I, I'm not,
I embrace your mispronounciations, okay.

157
00:08:57.639 --> 00:09:01.068
Well done all of you for
corrupt no, no corrupting.

158
00:09:01.068 --> 00:09:04.695
Good.

159
00:09:04.695 --> 00:09:06.216
[INAUDIBLE] amazing.

160
00:09:06.216 --> 00:09:08.386
A beautiful language, all right.

161
00:09:08.386 --> 00:09:09.058
Okay, good.

162
00:09:09.058 --> 00:09:12.720
So [INAUDIBLE] where we are API has high,

163
00:09:12.720 --> 00:09:18.980
the string high stored in it,
200 milliseconds later.

164
00:09:18.980 --> 00:09:23.400
In that time no further JavaScript code
could run, this is absolutely disastrous.

165
00:09:23.400 --> 00:09:27.040
Whatever, now we hit our next line
which is, who haven't I called on yet?

166
00:09:28.360 --> 00:09:33.703
Sonny, what's our next
line of code say to do?

167
00:09:33.703 --> 00:09:36.392
&gt;&gt; Sonny: We'll pass
that data API to display.

168
00:09:36.392 --> 00:09:37.091
&gt;&gt; Will Sentance: Right, so

169
00:09:37.091 --> 00:09:42.430
we parse out to recalling the display
function with our argument being.

170
00:09:42.430 --> 00:09:43.770
The value of data for APR,

171
00:09:43.770 --> 00:09:46.290
remember everything in jobs
gets evaluated immediately.

172
00:09:46.290 --> 00:09:52.595
Data from API here is a string high,
we throw it straight in and

173
00:09:52.595 --> 00:09:59.023
we create an execution context
to run it where, in the memory,

174
00:09:59.023 --> 00:10:04.117
the parameter data is set
to that argument Hi, and

175
00:10:04.117 --> 00:10:09.333
so we're going to log in
our console at about 201

176
00:10:09.333 --> 00:10:14.223
milliseconds, we're going to log hi, okay.

177
00:10:14.223 --> 00:10:16.921
And now finally, what line do we hit next?

178
00:10:16.921 --> 00:10:17.652
Gentleman what's your name?

179
00:10:17.652 --> 00:10:18.435
&gt;&gt; Ben: Ben.

180
00:10:18.435 --> 00:10:19.731
&gt;&gt; Will Sentance: Ben, sorry Ben.

181
00:10:19.731 --> 00:10:21.667
&gt;&gt; Ben: We're gonna log.

182
00:10:21.667 --> 00:10:27.547
&gt;&gt; Will Sentance: Me later is
gonna be logged at the much

183
00:10:27.547 --> 00:10:33.435
later time of 202 milliseconds.

184
00:10:33.435 --> 00:10:36.510
Me later is logged.

185
00:10:41.326 --> 00:10:43.710
&gt;&gt; Will Sentance: Raise your hand if
you're a huge fan of this solution.

186
00:10:44.850 --> 00:10:45.967
I'm a huge fan of this.

187
00:10:45.967 --> 00:10:47.210
No, I don't mind this solution.

188
00:10:47.210 --> 00:10:51.330
Here's why I don't mind this solution,
it is profoundly intuitive.

189
00:10:52.890 --> 00:10:55.411
Three goals we have.

190
00:10:55.411 --> 00:11:00.293
Be able to do tasks that take a long time,
slow tasks like getting data from Twitter.

191
00:11:00.293 --> 00:11:03.912
We have to be able to do that, otherwise
our web app is very, very boring.

192
00:11:03.912 --> 00:11:08.172
Our best we can make a hangman game, very
nice hangman game in the command line,

193
00:11:08.172 --> 00:11:10.031
well, that's the best we can do.

194
00:11:10.031 --> 00:11:14.276
But we wanna be able to continue running
our JavaScript code in the meantime,

195
00:11:14.276 --> 00:11:15.727
we could not do that here.

196
00:11:15.727 --> 00:11:19.523
Look at this, in the meantime,
no JavaScript code was allowed to run for

197
00:11:19.523 --> 00:11:21.350
200 milliseconds.

198
00:11:21.350 --> 00:11:25.040
When our slow task completes though we
should be able to run functionality

199
00:11:25.040 --> 00:11:27.080
knowing the task is done and
data is ready.

200
00:11:27.080 --> 00:11:27.790
That's the hard bit,

201
00:11:27.790 --> 00:11:31.640
it's gonna turn out every other
solution we have that's the hard bit.

202
00:11:31.640 --> 00:11:35.220
In this solution, not a hard bit,
this solution is effortless.

203
00:11:35.220 --> 00:11:38.520
I can see where my data is
synchronously in order, in memory.

204
00:11:38.520 --> 00:11:41.458
I've got no issues when my
display function's gonna run,

205
00:11:41.458 --> 00:11:45.353
it ain't gonna run literally in my single
thread until I've got my data back.

206
00:11:45.353 --> 00:11:48.499
I'm dealing only in the synchronous
world here, in order.

207
00:11:48.499 --> 00:11:49.483
In order of top to bottom.

208
00:11:49.483 --> 00:11:53.846
That's why we love Java's single frame
model, that's the, the vision behind it is

209
00:11:53.846 --> 00:11:57.070
it's highly predictable and
easy to work with as a developer.

210
00:11:57.070 --> 00:12:02.289
But all this leaves fundamentally
untenable blocks our single javascript

211
00:12:02.289 --> 00:12:06.856
thread from running any further
code while this task completes.

212
00:12:06.856 --> 00:12:10.449
Benefits it's definitely easy to
reason about, but it's untenable.

