WEBVTT

1
00:00:03.413 --> 00:00:07.503
&gt;&gt; Will Sentance: We're going to move
on to now the wonderful world of

2
00:00:07.503 --> 00:00:09.032
asynchronicity.

3
00:00:09.032 --> 00:00:15.026
Asynchronicity is going to
change up this whole model.

4
00:00:15.026 --> 00:00:18.450
I'm gonna change it up,
it's going to augment this model.

5
00:00:18.450 --> 00:00:20.950
This whole model is
gonna continue to exist.

6
00:00:20.950 --> 00:00:26.782
In fact, the reason we're gonna need to
augment our model is this model is gonna

7
00:00:26.782 --> 00:00:32.894
be fundamentally untenable in how we think
about doing tasks that take a long time.

8
00:00:32.894 --> 00:00:34.153
So let's just confirm.

9
00:00:34.153 --> 00:00:36.690
JavaScript is single threaded.

10
00:00:36.690 --> 00:00:40.230
One line of code executing at a time.

11
00:00:40.230 --> 00:00:43.876
When I start running multiplyBy2,
I'm not allowed to continue on in my

12
00:00:43.876 --> 00:00:48.409
global code,
&gt;&gt; Will Sentance: To executing

13
00:00:48.409 --> 00:00:50.780
the next multiplyBy2 at the same time.

14
00:00:50.780 --> 00:00:51.733
Not allowed to.

15
00:00:51.733 --> 00:00:54.590
Single threaded, but simultaneously,

16
00:00:54.590 --> 00:00:58.757
I'm also not allowed to move on
to the next line regardless.

17
00:00:58.757 --> 00:01:03.659
because until I finished multiplyBy2's
call, because JavaScript is synchronous.

18
00:01:03.659 --> 00:01:05.805
So what that means is I
go from top to bottom.

19
00:01:05.805 --> 00:01:08.597
I never move onto the next line until
I've finished all the previous lines.

20
00:01:08.597 --> 00:01:11.859
I never ever move onto the next line.

21
00:01:11.859 --> 00:01:15.968
If you see a function call,
I must return out of it.

22
00:01:15.968 --> 00:01:19.390
I must finish executing it,
before I hit the next line.

23
00:01:19.390 --> 00:01:21.150
All this implies a big problem.

24
00:01:21.150 --> 00:01:23.930
What if our multiplyBy2 call,
were a call to a server?

25
00:01:25.356 --> 00:01:29.670
There was gonna take 300 milliseconds,
I'm not allowed to move on from that line

26
00:01:29.670 --> 00:01:31.700
to run any more JavaScript
until that comes back.

27
00:01:32.740 --> 00:01:35.364
What if I couldn't view more tweets,

28
00:01:35.364 --> 00:01:39.062
it runs JavaScript code that
says go get more tweets?

29
00:01:39.062 --> 00:01:43.620
It's gonna take 300 milliseconds or 200
milliseconds before the tweets come back.

30
00:01:43.620 --> 00:01:47.257
But in the meantime,
I'm clicking Like on all the tweets,

31
00:01:47.257 --> 00:01:50.841
which is gonna run more JavaScript
code to turn it to pink.

32
00:01:50.841 --> 00:01:55.227
And to increase the number of likes on
that tweet in my state, in my memory,

33
00:01:55.227 --> 00:01:56.492
that can't happen.

34
00:01:56.492 --> 00:02:00.906
I'll be sitting there clicking because I'm
still busy waiting on the line saying,

35
00:02:00.906 --> 00:02:02.450
go get more tweets.

36
00:02:02.450 --> 00:02:04.585
Because I've got to wait until it
returns about the tweets, right?

37
00:02:04.585 --> 00:02:07.414
Before I can move onto my next
line that says color the heart

38
00:02:07.414 --> 00:02:10.677
pink cuz I clicked the button.
&gt;&gt; Will Sentance: This is gonna be

39
00:02:10.677 --> 00:02:14.041
a profound issue.
&gt;&gt; Will Sentance: What if we want to wait

40
00:02:14.041 --> 00:02:16.330
some time before we can
execute certain bits of code?

41
00:02:16.330 --> 00:02:21.253
We want to wait until our data
comes back from Twitter before

42
00:02:21.253 --> 00:02:26.077
we can then display and
run the functionality display that

43
00:02:26.077 --> 00:02:29.532
data.
&gt;&gt; Will Sentance: Perhaps we need to get

44
00:02:29.532 --> 00:02:33.640
more data in the API or even a timer to
complete, and then we wanna run some code.

45
00:02:33.640 --> 00:02:37.903
We have a conundrum, a tension between
wanting to delay some code running because

46
00:02:37.903 --> 00:02:39.891
we're waiting for data to come back.

47
00:02:39.891 --> 00:02:42.945
So we wanna have the next line
of code be display those tweets,

48
00:02:42.945 --> 00:02:45.140
we want to have the data
actually come back.

49
00:02:45.140 --> 00:02:50.231
But we do know to block our single
thread from continuing to run code.

50
00:02:50.231 --> 00:02:52.764
This is gonna be a profound conundrum,

51
00:02:52.764 --> 00:02:57.523
it's gonna be the essence of why we
have to introduce in JavaScript a whole

52
00:02:57.523 --> 00:03:01.900
complimentary model to our
beautiful synchronous world.

53
00:03:01.900 --> 00:03:06.162
These three parts of JavaScript
alone are not enough.

54
00:03:06.162 --> 00:03:09.170
What's particularly interesting
is asynchronicity in Java,

55
00:03:09.170 --> 00:03:11.514
asynchronous word of Java
is interesting stuff.

56
00:03:11.514 --> 00:03:16.878
I love our pure, simple JavaScript engine,
but everything we love about

57
00:03:16.878 --> 00:03:21.825
web application development is
not happening in pure JavaScript.

58
00:03:21.825 --> 00:03:24.570
Pure JavaScript does not know
how to speak to the Internet.

59
00:03:24.570 --> 00:03:28.030
It is not a feature of JavaScript
to speak to the Internet.

60
00:03:28.030 --> 00:03:33.724
Instead, all those features
are sitting outside of JavaScript.

61
00:03:33.724 --> 00:03:37.215
They're sitting outside
of JavaScript in where?

62
00:03:37.215 --> 00:03:37.744
What's your name dude?

63
00:03:37.744 --> 00:03:38.393
Aleck.
&gt;&gt; Alec: Aleck.

64
00:03:38.393 --> 00:03:39.072
&gt;&gt; Will Sentance: Aleck,

65
00:03:39.072 --> 00:03:41.112
where are they sitting?

66
00:03:41.112 --> 00:03:44.042
What are those feature of JavaScript
that are not doing things like

67
00:03:44.042 --> 00:03:45.253
speaking to the Internet.

68
00:03:45.253 --> 00:03:46.268
Where are they?
&gt;&gt; Alec: APIs?

69
00:03:46.268 --> 00:03:46.825
&gt;&gt; Will Sentance: Or not features of

70
00:03:46.825 --> 00:03:47.535
JavaScript, sorry.

71
00:03:47.535 --> 00:03:51.516
What are the features that speak to
the Internet, that Java's reviewed, yeah,

72
00:03:51.516 --> 00:03:53.805
what does that mean?
&gt;&gt; Alec: I don't know,

73
00:03:53.805 --> 00:03:57.022
restful web services and-
&gt;&gt; Will Sentance: Michelle where are those

74
00:03:57.022 --> 00:03:59.385
features that, for example,
can speak to the Internet?

75
00:03:59.385 --> 00:04:00.290
&gt;&gt; Speaker 3: Are they in the browser?

76
00:04:00.290 --> 00:04:01.421
&gt;&gt; Will Sentance: They're in the browser.

77
00:04:01.421 --> 00:04:09.180
The browser is a wealth of features
that we in JavaScript get access to.

78
00:04:09.180 --> 00:04:14.818
We write JavaScript code that
is essentially a facade.

79
00:04:14.818 --> 00:04:19.302
We're gonna see these are facades for
a bunch of features that are not in

80
00:04:19.302 --> 00:04:23.040
JavaScript, but
instead in the web browser.

81
00:04:23.040 --> 00:04:27.494
That's what we're gonna end up spending
most of our time this morning doing,

82
00:04:27.494 --> 00:04:30.473
is writing JavaScript code
that interfaces, API.

83
00:04:30.473 --> 00:04:32.002
Alex, right, interfaces.

84
00:04:32.002 --> 00:04:34.770
The I in API stands for interface,

85
00:04:34.770 --> 00:04:38.882
that interacts with stuff
outside of JavaScript.

86
00:04:38.882 --> 00:04:43.502
Okay, we need a whole new bunch
of features in JavaScript and

87
00:04:43.502 --> 00:04:49.160
outside of JavaScript in order to
understand how this is working.

88
00:04:49.160 --> 00:04:49.920
So here we go.

89
00:04:51.120 --> 00:04:52.455
Here's our first solution.

90
00:04:52.455 --> 00:04:55.440
I'm gonna pre-tell you that
it's fundamentally untenable.

91
00:04:55.440 --> 00:05:00.297
But here's our first solution for
how to go and do a task that's gonna

92
00:05:00.297 --> 00:05:05.425
take a long time, like speaking to
Twitter and getting our tweets back.

93
00:05:05.425 --> 00:05:08.444
And nevertheless be able to
continue running code but

94
00:05:08.444 --> 00:05:10.872
know where that data
is when it comes back.

95
00:05:10.872 --> 00:05:16.700
This first solution here is
going to be untenable but

96
00:05:16.700 --> 00:05:21.734
it is nevertheless gonna fairly intuitive,

97
00:05:21.734 --> 00:05:24.922
but completely untenable.

98
00:05:24.922 --> 00:05:27.675
All right, line one,
and by the way, so far,

99
00:05:27.675 --> 00:05:32.350
we're still seeing things that are very
analagous to first hard parts.

100
00:05:32.350 --> 00:05:37.051
But we need to get these foundations down
to understand the harder pieces to come.

101
00:05:37.051 --> 00:05:40.458
All right, line one.

102
00:05:40.458 --> 00:05:43.198
RD?
&gt;&gt; Abdi: Yeah, well we're declaring

103
00:05:43.198 --> 00:05:47.079
display in our variable environment.
&gt;&gt; Will Sentance: Yeah, very nice, you

104
00:05:47.079 --> 00:05:52.099
put, RD, display is declared, excellent.
&gt;&gt; Will Sentance: Next line of code,

105
00:05:52.099 --> 00:05:55.938
Alec?
&gt;&gt; Will Sentance: Do the left hand

106
00:05:55.938 --> 00:06:00.231
side first.
&gt;&gt; Abdi: We're declaring data from API.

107
00:06:00.231 --> 00:06:00.972
&gt;&gt; Will Sentance: Yep, and

108
00:06:00.972 --> 00:06:04.196
what's it gonna be assigned?
&gt;&gt; Abdi: The fetch and

109
00:06:04.196 --> 00:06:05.456
wait function.
&gt;&gt; Will Sentance: No,

110
00:06:05.456 --> 00:06:07.060
we never assign function.

111
00:06:07.060 --> 00:06:10.106
If we had no parenthesis there,
it could be assigned,

112
00:06:10.106 --> 00:06:14.762
it would say, let's fetch and wait, and
it would assign it to whatever it is.

113
00:06:14.762 --> 00:06:17.223
But JavaScript is not doing
that on the right hand side.

114
00:06:17.223 --> 00:06:19.813
What are parenthesis always tell me to do?

115
00:06:19.813 --> 00:06:21.553
Blessing?
&gt;&gt; Speaker 5: To call a function.

116
00:06:21.553 --> 00:06:22.324
&gt;&gt; Will Sentance: To call.

117
00:06:22.324 --> 00:06:26.472
The right-hand side here is a command,
it is unfinished work.

118
00:06:26.472 --> 00:06:29.797
So be really clear with yourself,

119
00:06:29.797 --> 00:06:34.162
data API has zero interest in fetch and
wait.

120
00:06:34.162 --> 00:06:39.600
It's only interest is in whatever
gets returned from fetch and wait.

121
00:06:39.600 --> 00:06:42.311
We hope will be our tweet, okay?

122
00:06:42.311 --> 00:06:47.554
So fetchAndWait here is a made up
function, but let's just see what it does.

123
00:06:47.554 --> 00:06:52.453
So data from API is going to

124
00:06:52.453 --> 00:06:57.130
be the return of fetch and

125
00:06:57.130 --> 00:07:01.820
wait to our Twitter URL.

126
00:07:01.820 --> 00:07:08.970
So we're hoping it's gonna return a nice
Tweet for us, that's what we're hoping.

127
00:07:08.970 --> 00:07:12.494
So let's start tracking our time passing.

128
00:07:12.494 --> 00:07:16.240
We're at about one millisecond here.

129
00:07:16.240 --> 00:07:21.793
Let's say this thing here takes

130
00:07:21.793 --> 00:07:27.969
200 milliseconds to complete.

131
00:07:27.969 --> 00:07:34.955
200 milliseconds later,
&gt;&gt; Will Sentance: Finally comes back.

132
00:07:34.955 --> 00:07:37.795
Could be 300 milliseconds, could be
half a second, we don't even know.

133
00:07:37.795 --> 00:07:43.202
In that time, are we allowed to move
on and run any further jobs from code?

134
00:07:43.202 --> 00:07:46.820
Absolutely not,
we are not allowed to move on.

135
00:07:46.820 --> 00:07:51.140
We are blocked because our
JavaScript thread is synchronous.

136
00:07:51.140 --> 00:07:53.384
There's work we're still doing
on the right-hand side here,

137
00:07:53.384 --> 00:07:55.722
we're not allowed to be one of
the next line, and we would want to.

138
00:07:55.722 --> 00:07:58.577
Cuz the next line says
display the data reveal API.

139
00:07:58.577 --> 00:08:01.320
So we better have that data
back to be able to display it.

140
00:08:01.320 --> 00:08:02.660
Is that solution one?

141
00:08:02.660 --> 00:08:07.203
Be clear this is not the right solution,
but this is a solution.

142
00:08:07.203 --> 00:08:11.185
So 200 milliseconds passes and

143
00:08:11.185 --> 00:08:15.443
our request to Twitter returns out.

144
00:08:15.443 --> 00:08:22.763
Let's just say very nicely it returns
out our data and it is a single tweet.

145
00:08:22.763 --> 00:08:25.276
And it's not even coming back
as an object, and of course,

146
00:08:25.276 --> 00:08:27.403
they come back as objects,
but just a tweet, hi.

147
00:08:27.403 --> 00:08:30.831
And we're going to store hi,

148
00:08:30.831 --> 00:08:33.182
where Michelle?
&gt;&gt; Speaker 6: Sorry,

149
00:08:33.182 --> 00:08:35.919
I was distracted, [INAUDIBLE]
&gt;&gt; Will Sentance: We're going to return

150
00:08:35.919 --> 00:08:40.484
that from fetch and wait, hi,
where's it gonna be stored?

151
00:08:40.484 --> 00:08:43.475
Yeah, Michelle,
where's it gonna be stored?

152
00:08:43.475 --> 00:08:44.450
&gt;&gt; Speaker 6: In data from API.

153
00:08:44.450 --> 00:08:45.980
&gt;&gt; Will Sentance: In data from API,

154
00:08:45.980 --> 00:08:46.902
exactly.

155
00:08:46.902 --> 00:08:51.540
I apologize for sounding like I'm
correcting all of your pronunciations of

156
00:08:51.540 --> 00:08:53.283
data to data, but I'm not.

157
00:08:53.283 --> 00:08:57.362
I embrace your mispronunciations, okay.

158
00:08:57.362 --> 00:09:00.338
Well done all of you for corrupt node,

159
00:09:00.338 --> 00:09:04.801
not corrupting.
&gt;&gt; Will Sentance: Good,

160
00:09:04.801 --> 00:09:07.732
customizing, a beautiful language.

161
00:09:07.732 --> 00:09:09.106
All right, okay, good.

162
00:09:09.106 --> 00:09:14.100
So data API has hi,
the string hi stored in

163
00:09:14.100 --> 00:09:18.610
it.
&gt;&gt; Will Sentance: 200 milliseconds later,

164
00:09:18.610 --> 00:09:21.512
in that time,
no further jobs recorded run.

165
00:09:21.512 --> 00:09:24.110
This is absolutely disastrous,
but whatever.

166
00:09:24.110 --> 00:09:29.132
Now we hit our next line which is
we want to call it yet, Sonny?

167
00:09:29.132 --> 00:09:34.105
What does our next line of code say to do?
&gt;&gt; Speaker 7: It will pass

168
00:09:34.105 --> 00:09:37.183
the data API to display.
&gt;&gt; Will Sentance: Right, so

169
00:09:37.183 --> 00:09:41.807
we're calling the display function with
our argument being the value of data for

170
00:09:41.807 --> 00:09:46.034
API, rememeber everything in
JavaScript gets evaluated immediately.

171
00:09:46.034 --> 00:09:50.673
Data from API here is a string high,
we throw it straight in.

172
00:09:50.673 --> 00:09:53.660
And we create a execution
context to run it,

173
00:09:53.660 --> 00:09:59.091
where in the memory it's supposed to be
really clear here, in the memory data.

174
00:09:59.091 --> 00:10:04.156
The parameter data is set
to that argument hi, and

175
00:10:04.156 --> 00:10:08.980
so we're going to log
in console at about 201

176
00:10:08.980 --> 00:10:14.055
milliseconds, we're going to log,
hi, okay?

177
00:10:14.055 --> 00:10:16.802
And now finally, what line do we hit next?

178
00:10:16.802 --> 00:10:18.056
Gentleman what was your name?
&gt;&gt; Ben: Ben.

179
00:10:18.056 --> 00:10:20.037
&gt;&gt; Will Sentance: Ben, sorry Ben.

180
00:10:20.037 --> 00:10:21.654
&gt;&gt; Ben: Me later.

181
00:10:21.654 --> 00:10:25.257
&gt;&gt; Will Sentance: Me later, it's gonna be

182
00:10:25.257 --> 00:10:33.163
logged at the much later
time of 202 milliseconds.

183
00:10:33.163 --> 00:10:41.849
Me later is logged.
&gt;&gt; Will Sentance: Raise your hand,

184
00:10:41.849 --> 00:10:44.592
if you're a huge fan of this solution.
&gt;&gt; Ben: [LAUGH]

185
00:10:44.592 --> 00:10:45.421
&gt;&gt; Will Sentance: I'm a huge fan of this.

186
00:10:45.421 --> 00:10:46.273
No, I'm not really.

187
00:10:46.273 --> 00:10:47.450
No, I don't mind the solution.

188
00:10:47.450 --> 00:10:52.750
Here's why I dont mind the solution
is it is profoundly intuitive.

189
00:10:52.750 --> 00:10:55.253
Three goals we have.

190
00:10:55.253 --> 00:10:57.960
Be able to do tasks that take a long time.

191
00:10:57.960 --> 00:11:00.520
Slow tasks like getting data from Twitter.

192
00:11:00.520 --> 00:11:01.840
We have to be able to do that.

193
00:11:01.840 --> 00:11:03.690
Otherwise our web app is very,
very boring.

194
00:11:03.690 --> 00:11:05.790
At best, we can make a hangman game.

195
00:11:05.790 --> 00:11:10.001
Very nice hangman game, in the command
line, but that's the best we can do.

196
00:11:10.001 --> 00:11:13.232
But we wanna be able to continue running
our JavaScript code in the meantime.

197
00:11:13.232 --> 00:11:14.960
We could not do that here.

198
00:11:14.960 --> 00:11:16.192
Look at this.

199
00:11:16.192 --> 00:11:21.350
In the meantime, no JavaScript code was
allowed to run for 200 milliseconds.

200
00:11:21.350 --> 00:11:25.170
When our slow task completes though,
we should be able to run functionality

201
00:11:25.170 --> 00:11:28.463
knowing the task is done and
data is ready, that's the hard bit.

202
00:11:28.463 --> 00:11:31.424
So it turns out, every other solution
we have, that's the hard bit.

203
00:11:31.424 --> 00:11:33.602
In this solution, not a hard bit.

204
00:11:33.602 --> 00:11:35.220
This solution's effortless.

205
00:11:35.220 --> 00:11:38.343
I can see where my data is
synchronously in order and memory.

206
00:11:38.343 --> 00:11:41.176
I've got no issues when my
display function's gonna run,

207
00:11:41.176 --> 00:11:45.590
it ain't gonna run literally in my single
thread until I've got my data back.

208
00:11:45.590 --> 00:11:49.710
I'm dealing only in the synchronous world
here, in order, in order top to bottom.

209
00:11:49.710 --> 00:11:52.910
That's what we love JavaScript singe
thread and model, that's the vision behind

210
00:11:52.910 --> 00:11:56.090
it, is it's highly predictable and
easy to work with a developer.

211
00:11:57.130 --> 00:11:59.755
But obviously it's
fundamentally untenable.

212
00:12:01.170 --> 00:12:02.152
&gt;&gt; Will Sentance: Blocks our single

213
00:12:02.152 --> 00:12:06.599
JavaScript thread from running any
further code while this task completes.

214
00:12:06.599 --> 00:12:10.449
Benefits, it's definitely easy to
reason about, but it's untenable.

