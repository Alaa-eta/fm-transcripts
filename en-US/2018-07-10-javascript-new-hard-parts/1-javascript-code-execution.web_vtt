WEBVTT

1
00:00:00.160 --> 00:00:05.050
&gt;&gt; Will Sentance: Here we are,
hard parts of JavaScript.

2
00:00:05.050 --> 00:00:08.600
The foundations we have to understand
though to get to the hard parts

3
00:00:08.600 --> 00:00:13.597
are gonna feel at times a little
bit trite, a little bit trivial.

4
00:00:13.597 --> 00:00:18.270
I have a part you've been to hard parts
before, you even gonna feel hold on,

5
00:00:18.270 --> 00:00:20.230
I've seen these stuff before.

6
00:00:20.230 --> 00:00:22.680
Our first about 30 minutes or so

7
00:00:22.680 --> 00:00:26.310
is gonna be material that if you've been
to hard parts before, you'll recognize.

8
00:00:27.600 --> 00:00:32.970
Because that is the JavaScript engine and
how it works.

9
00:00:32.970 --> 00:00:36.462
It's a universal, but
we gotta lay these foundations out.

10
00:00:36.462 --> 00:00:39.170
And by the way, you're gonna see code
where you're gonna go, yeah, yeah, thanks.

11
00:00:39.170 --> 00:00:40.900
I get how this code is running.

12
00:00:40.900 --> 00:00:42.138
I get what it's doing.

13
00:00:42.138 --> 00:00:44.051
But we're gonna see it, and

14
00:00:44.051 --> 00:00:48.456
it's going to empower us to then
solve all the hard parts to come.

15
00:00:48.456 --> 00:00:54.702
All right, let's go, here it is.

16
00:00:54.702 --> 00:00:59.060
We're gonna whiteboard through
all of our code's execution just

17
00:00:59.060 --> 00:01:01.720
as the JavaScript engine runs it.

18
00:01:01.720 --> 00:01:05.810
We do that, they're can be no
gaps in our understanding.

19
00:01:05.810 --> 00:01:09.189
We're gonna step through line by line.

20
00:01:09.189 --> 00:01:11.520
And we're gonna map it up on
the white board the whole time.

21
00:01:11.520 --> 00:01:15.882
So, with that in mind what happens
when JavaScript executes runs my code?

22
00:01:15.882 --> 00:01:19.266
It's two-halves, and
I'll tell you straight away,

23
00:01:19.266 --> 00:01:22.509
it's two-halves to the process
of executing code.

24
00:01:22.509 --> 00:01:27.175
One is literally the ability
to walk through the code line,

25
00:01:27.175 --> 00:01:32.450
by line, by line,
that is known as the thread of execution.

26
00:01:32.450 --> 00:01:37.500
That all that is, is the processing
ability to take line one, do it,

27
00:01:37.500 --> 00:01:38.550
whatever it says to do.

28
00:01:38.550 --> 00:01:40.980
Take line two, do it,
whatever it says to do.

29
00:01:40.980 --> 00:01:44.080
Take line three, do it,
whatever it is, it's executing doing

30
00:01:44.080 --> 00:01:48.060
the code line by line, and
it's threading its way down our code.

31
00:01:48.060 --> 00:01:51.460
By the way, in order top to bottom.

32
00:01:51.460 --> 00:01:56.949
Simultaneously, the other part that's
required to run our code is a place to

33
00:01:56.949 --> 00:02:02.531
store the bits of data that we announce
as we go through our code's execution.

34
00:02:02.531 --> 00:02:04.173
So you can see in line one,

35
00:02:04.173 --> 00:02:08.963
we're announcing that we're gonna store
num as the label for some data 3.

36
00:02:08.963 --> 00:02:11.841
So we're gonna map these
on the white board,

37
00:02:11.841 --> 00:02:14.500
which will be a fascinating experience.

38
00:02:14.500 --> 00:02:19.983
Let's see how it goes line by line,
starting with line 1.

39
00:02:19.983 --> 00:02:22.341
I'm gonna call on Paul.

40
00:02:22.341 --> 00:02:24.296
What are we doing here in line 1?

41
00:02:24.296 --> 00:02:25.900
What are we actually doing?

42
00:02:25.900 --> 00:02:30.330
&gt;&gt; Speaker 2: Were saying,
allocate some data, the global

43
00:02:31.510 --> 00:02:36.590
to a constant called num, and
then toss an integer 3 onto that?

44
00:02:36.590 --> 00:02:39.410
&gt;&gt; Will Sentance: Well, that seems
like a very intuitive description.

45
00:02:39.410 --> 00:02:42.770
So we are in our memory,

46
00:02:43.890 --> 00:02:48.830
in our memory we are declaring a constant.

47
00:02:48.830 --> 00:02:51.660
Just remember that means
a piece of data where

48
00:02:51.660 --> 00:02:53.750
we're not allowed to change
it's position in memory.

49
00:02:53.750 --> 00:02:58.360
So we can't suddenly replace
nums value with full.

50
00:02:58.360 --> 00:03:01.670
It's now set for
the running of our application.

51
00:03:01.670 --> 00:03:04.610
Num is set to the value of 3.

52
00:03:04.610 --> 00:03:08.123
Excellent, Michelle, what is our
next line of code here say to do?

53
00:03:08.123 --> 00:03:11.347
&gt;&gt; Speaker 2: The next line of
code is also creating something in

54
00:03:11.347 --> 00:03:13.275
memory that we're calling.

55
00:03:13.275 --> 00:03:15.620
&gt;&gt; Will Sentance: All right,
everybody, we're being very precise.

56
00:03:15.620 --> 00:03:17.580
Just this [LAUGH] go on.

57
00:03:17.580 --> 00:03:18.090
What is it called?

58
00:03:18.090 --> 00:03:19.540
Core ability, excellent.

59
00:03:19.540 --> 00:03:21.470
Called, named multiplyBy2.

60
00:03:21.470 --> 00:03:25.283
We're declaring the function multiplyBy2.

61
00:03:25.283 --> 00:03:30.547
In JavaScript functions,
that means the entire functionality,

62
00:03:30.547 --> 00:03:33.570
is, are assigned as values.

63
00:03:33.570 --> 00:03:37.830
Just like the number 3,
we're storing in memory the functionality,

64
00:03:37.830 --> 00:03:40.130
the function definition of multiplyBy2.

65
00:03:40.130 --> 00:03:42.558
I'm not gonna write the whole
function definition out on the right

66
00:03:42.558 --> 00:03:43.470
hand side here.

67
00:03:43.470 --> 00:03:46.960
Instead, I'm gonna represent it
with this little box with an fn.

68
00:03:46.960 --> 00:03:49.880
That represents my entire
function definition.

69
00:03:49.880 --> 00:03:55.813
If I do in my console, now log
multiplyBy2, what would I see, James?

70
00:03:58.314 --> 00:04:02.310
&gt;&gt; Speaker 3: You would see the actual
source code for a function.

71
00:04:02.310 --> 00:04:03.758
&gt;&gt; Will Sentance: Yeah, exactly,

72
00:04:03.758 --> 00:04:08.493
I'd see the block of code
itself function multiplyBy2.

73
00:04:08.493 --> 00:04:12.170
I'd see the whole thing with
the code in my console.

74
00:04:12.170 --> 00:04:15.340
That is what we mean when
we say declare a function.

75
00:04:15.340 --> 00:04:16.350
We are literally,

76
00:04:16.350 --> 00:04:19.190
sometimes we think we're just sort
of going there's a function in code.

77
00:04:19.190 --> 00:04:24.730
No, no, no, the keyword function
literally means go save in memory.

78
00:04:24.730 --> 00:04:28.380
Go save in memory this
particular functionality.

79
00:04:28.380 --> 00:04:29.410
All right, excellent.

80
00:04:29.410 --> 00:04:35.096
What's our third line of
code that executes, Shawn?

81
00:04:35.096 --> 00:04:39.873
&gt;&gt; Speaker 4: It's doing the same thing
as our first constant declaration,

82
00:04:39.873 --> 00:04:41.606
just creating a-
&gt;&gt; Will Sentance: Yup.

83
00:04:41.606 --> 00:04:43.970
&gt;&gt; Speaker 4: Piece of memory called name,
setting it to-

84
00:04:43.970 --> 00:04:44.690
&gt;&gt; Will Sentance: Excellent, Shawn,

85
00:04:44.690 --> 00:04:48.350
what was not our third line of code?

86
00:04:48.350 --> 00:04:49.020
&gt;&gt; Speaker 4: Const results.

87
00:04:49.020 --> 00:04:50.340
&gt;&gt; Will Sentance: Right, why not?

88
00:04:50.340 --> 00:04:53.560
&gt;&gt; Speaker 4: Because that
is not being called yet.

89
00:04:53.560 --> 00:04:54.340
&gt;&gt; Will Sentance: Exactly,

90
00:04:54.340 --> 00:04:57.179
we do not go into the body of
a function until what, Shawn?

91
00:04:58.340 --> 00:04:59.050
&gt;&gt; Speaker 4: Until it's called?

92
00:04:59.050 --> 00:04:59.770
&gt;&gt; Will Sentance: Until it's called.

93
00:04:59.770 --> 00:05:01.160
Excellent, all right.

94
00:05:01.160 --> 00:05:02.060
Shawn is spot on there.

95
00:05:02.060 --> 00:05:06.590
And folk,
this may seem profoundly trivial.

96
00:05:06.590 --> 00:05:09.130
Okay, I get how to store stuff in memory.

97
00:05:09.130 --> 00:05:11.300
But this foundation is what we need.

98
00:05:11.300 --> 00:05:16.340
This level of precision is absolutely
vital for everything that follows.

99
00:05:16.340 --> 00:05:21.700
All the way up to re-building
a single weight with generators.

100
00:05:21.700 --> 00:05:24.900
It all in the end depends
on these foundations.

101
00:05:24.900 --> 00:05:26.690
All right, excellent.

102
00:05:26.690 --> 00:05:31.163
So, as soon as we start running our code,
we spin up two things.

103
00:05:31.163 --> 00:05:33.773
One, the ability to go through
our code line by line,

104
00:05:33.773 --> 00:05:35.920
that's our thread of execution remember.

105
00:05:35.920 --> 00:05:40.902
Threading it's way through and
executing a code line by line,

106
00:05:40.902 --> 00:05:45.133
and simultaneously we spin
up [INAUDIBLE] A live memory

107
00:05:45.133 --> 00:05:50.410
of variables with data live
store of labels with data.

108
00:05:50.410 --> 00:05:52.530
Posh name for
that is a variable environment.

109
00:05:52.530 --> 00:05:56.250
We can call this a variable environment.

110
00:05:56.250 --> 00:06:00.860
Think of it as being environment
is the things around me

111
00:06:00.860 --> 00:06:03.943
these are the variables around
me the variable environment.

112
00:06:03.943 --> 00:06:09.708
Now, these two-halves together,
are known these two-halves the thread that

113
00:06:09.708 --> 00:06:15.405
we are gonna walk we didn't copy out the
lines and the threads there is no point.

114
00:06:15.405 --> 00:06:20.670
But these two-halves together
are known as an execution context.

115
00:06:20.670 --> 00:06:25.570
That is a context, is a space to do
something, a space of context so must we

116
00:06:25.570 --> 00:06:33.130
do something, what so space in which we
execute a code is an execution context.

117
00:06:33.130 --> 00:06:37.190
And itâ€™s the global one, these gonna
discover whenever we wanna run code

118
00:06:37.190 --> 00:06:41.850
including for example when we wanna
execute the code inside the function

119
00:06:41.850 --> 00:06:46.610
we're gonna create a little baby
local execution context, just for

120
00:06:46.610 --> 00:06:48.540
running the code inside a function.

121
00:06:48.540 --> 00:06:51.380
We call it the local one, just for
the stuff inside a function.

122
00:06:51.380 --> 00:06:53.780
So this though, is for our overall code.

123
00:06:53.780 --> 00:06:57.420
It's called the global execution context.

124
00:06:57.420 --> 00:07:01.740
All right, people, let's see what's next?

125
00:07:01.740 --> 00:07:06.850
All right, as Shawn rightly said,
we did not execute,

126
00:07:06.850 --> 00:07:10.830
we did not call,
we did not invoke multiplyBy2.

127
00:07:10.830 --> 00:07:14.190
So we stayed in which execution context,
Shawn?

128
00:07:14.190 --> 00:07:15.230
&gt;&gt; Speaker 5: Global.
&gt;&gt; Will Sentance: Global, excellent.

129
00:07:16.560 --> 00:07:21.530
But now, we are going to execute
a function and see what happens,

130
00:07:21.530 --> 00:07:24.050
so we've declared numbers 3.

131
00:07:24.050 --> 00:07:25.860
Declared motivators of a function.

132
00:07:25.860 --> 00:07:28.792
What is our next line of code?

133
00:07:28.792 --> 00:07:29.896
Mr. Anderson?

134
00:07:29.896 --> 00:07:30.608
&gt;&gt; Anderson: Yes.

135
00:07:30.608 --> 00:07:32.096
&gt;&gt; Will Sentance: What is our
next line of code, Brian?

136
00:07:32.096 --> 00:07:36.279
&gt;&gt; Brian: We are creating a new
label in memory called outlook.

137
00:07:36.279 --> 00:07:36.924
&gt;&gt; Will Sentance: Excellent.

138
00:07:38.140 --> 00:07:39.840
Do we know what to assign to it yet?

139
00:07:39.840 --> 00:07:41.670
&gt;&gt; Brian: It's undefined at this point.

140
00:07:41.670 --> 00:07:45.570
&gt;&gt; Will Sentance: Very good,
because what's the right-hand side?

141
00:07:45.570 --> 00:07:48.551
Is the right-hand side
a value that we can store?

142
00:07:48.551 --> 00:07:49.191
&gt;&gt; Speaker 8: Yeah, no,

143
00:07:49.191 --> 00:07:51.500
it's calling the execution of-
&gt;&gt; Will Sentance: Exactly,

144
00:07:51.500 --> 00:07:53.580
it's a command to go and do something.

145
00:07:53.580 --> 00:07:56.450
It's actually not a value we can
store in the right-hand side.

146
00:07:56.450 --> 00:07:59.390
Output has zero interest in multiplyBy2.

147
00:07:59.390 --> 00:08:02.080
That is a command to go and run some code.

148
00:08:02.080 --> 00:08:06.470
Whatever gets returned out,
known as the, what Brian?

149
00:08:06.470 --> 00:08:10.037
What's a generic name for
what gets returned out of a function?

150
00:08:10.037 --> 00:08:11.400
&gt;&gt; Speaker 8: The return value.

151
00:08:11.400 --> 00:08:12.990
&gt;&gt; Will Sentance: Return value, exactly.

152
00:08:12.990 --> 00:08:15.940
Quite literal, the returned value.

153
00:08:15.940 --> 00:08:18.370
That's what's gonna be assigned to output.

154
00:08:18.370 --> 00:08:21.360
All right, let's do it.

155
00:08:21.360 --> 00:08:25.475
So, output is going to be the result,

156
00:08:25.475 --> 00:08:32.302
the return value of calling
multiplyBy2 with the input of 4.

157
00:08:32.302 --> 00:08:33.060
There we go.

158
00:08:34.100 --> 00:08:38.280
So, what did I say we create
whenever we have code to execute?

159
00:08:39.595 --> 00:08:41.180
&gt;&gt; Speaker 9: [INAUDIBLE]
execution content.

160
00:08:41.180 --> 00:08:42.524
&gt;&gt; Will Sentance: An execution content.

161
00:08:42.524 --> 00:08:44.020
I'm gonna represent that.

162
00:08:44.020 --> 00:08:45.650
This is a Big Ol' Box with two parts.

163
00:08:45.650 --> 00:08:50.070
I'm gonna represent that with a little
box with two parts, here it is.

164
00:08:50.070 --> 00:08:53.745
I'm taking it slowly because these
are genuinely over the next 10,

165
00:08:53.745 --> 00:08:58.680
15 minutes we're gonna see the 3 pieces
of synchronize JavaScript execution.

166
00:08:58.680 --> 00:09:01.890
If we don't get these pieces down,
nothing else follows.

167
00:09:01.890 --> 00:09:05.650
So, into this execution context we go.

168
00:09:05.650 --> 00:09:08.615
And just like our global one for
running the main code,

169
00:09:08.615 --> 00:09:12.046
now we're gonna run the code for
just inside multipliedBy2.

170
00:09:12.046 --> 00:09:16.200
We're gonna have a little memory just for
the code, just for

171
00:09:16.200 --> 00:09:21.578
the things that get announced,
get declared, the variables and functions,

172
00:09:21.578 --> 00:09:27.230
and parameters and arguments that get
declared inside of multiplyBy2's body.

173
00:09:27.230 --> 00:09:28.590
They're just gonna be stored in here.

174
00:09:28.590 --> 00:09:33.040
By the way, when this function
finishes executing, all those pieces,

175
00:09:33.040 --> 00:09:37.270
unless they're returned
out will be deleted.

176
00:09:38.420 --> 00:09:42.030
Automatically, garbage collected.

177
00:09:42.030 --> 00:09:46.220
It's stuff that we cannot access again,
we cannot reference those names again, so

178
00:09:46.220 --> 00:09:49.224
it's garbage,
it's memory that's being wasted.

179
00:09:49.224 --> 00:09:53.240
We're gonna automatically clean
it out in JavaScript, except for

180
00:09:53.240 --> 00:09:55.030
in one special condition.

181
00:09:55.030 --> 00:09:58.890
Which we will see a little bit later on,
cuz it's my favorite thing in JavaScript.

182
00:09:58.890 --> 00:10:01.860
Those times when all our
data is not necessarily

183
00:10:01.860 --> 00:10:05.780
deleted when we exit a function,
the most beautiful concept in JavaScript.

184
00:10:05.780 --> 00:10:10.190
And even though we're not gonna
go through it as the focal point,

185
00:10:10.190 --> 00:10:14.490
inevitably we have to come
to it In it's raters.

186
00:10:14.490 --> 00:10:16.310
Okay, good, so in we go.

187
00:10:16.310 --> 00:10:18.080
And what is the first thing,

188
00:10:18.080 --> 00:10:23.320
Rick, inside our local execution
context that we're gonna do?

189
00:10:23.320 --> 00:10:27.350
&gt;&gt; Speaker 10: Defining constant
variable called result.

190
00:10:27.350 --> 00:10:30.070
&gt;&gt; Will Sentance: So
that's our second thing, Rick.

191
00:10:30.070 --> 00:10:33.440
What's the very first thing
we put in our local memory?

192
00:10:33.440 --> 00:10:34.510
&gt;&gt; Speaker 10: The function.

193
00:10:34.510 --> 00:10:35.410
&gt;&gt; Will Sentance: Not, the function.

194
00:10:35.410 --> 00:10:36.340
Michelle?

195
00:10:36.340 --> 00:10:37.360
&gt;&gt; Michelle: The input number.

196
00:10:37.360 --> 00:10:41.610
&gt;&gt; Will Sentance: Exactly, input number
which is known as our parameter.

197
00:10:41.610 --> 00:10:45.870
Remember the placeholder we defined
a function which is to say,

198
00:10:45.870 --> 00:10:47.570
we will run this thing later on.

199
00:10:47.570 --> 00:10:50.790
When you run me better make
sure you fill in that blank.

200
00:10:50.790 --> 00:10:53.370
That placeholder and
put a number with an argument.

201
00:10:53.370 --> 00:10:55.470
Parameter is the place holder.

202
00:10:55.470 --> 00:10:57.620
Argument is the actual
value that gets passed in.

203
00:10:57.620 --> 00:10:59.450
Michelle, what's argument?

204
00:10:59.450 --> 00:11:00.720
&gt;&gt; Michelle: Argument is 4.

205
00:11:00.720 --> 00:11:01.580
&gt;&gt; Will Sentance: 4, excellent.

206
00:11:01.580 --> 00:11:02.640
And so result is 8,

207
00:11:02.640 --> 00:11:07.140
and the final line in the body of
the function says do what, Josh?

208
00:11:08.720 --> 00:11:09.930
&gt;&gt; Speaker 12: To return 8?

209
00:11:09.930 --> 00:11:13.320
&gt;&gt; Will Sentance: To return 8,
I like that, return the value of result 8.

210
00:11:13.320 --> 00:11:17.946
It's not returning result, it returns
the value of result which is the number 8.

211
00:11:17.946 --> 00:11:20.600
I do not say return result kind
of implies the whole thing,

212
00:11:20.600 --> 00:11:24.550
it's JavaScript C is return result and
goes, what's the result?

213
00:11:24.550 --> 00:11:30.150
8t, okay, perfect, return it out to where,
what's your name, dude?

214
00:11:30.150 --> 00:11:31.910
&gt;&gt; Brady: Brady.
&gt;&gt; Will Sentance: Brady, sorry Brady.

215
00:11:31.910 --> 00:11:32.950
Brady, to return now to where?

216
00:11:34.410 --> 00:11:39.310
&gt;&gt; Brady: To the label output?

217
00:11:39.310 --> 00:11:41.080
&gt;&gt; Will Sentance: But
to which execution context?

218
00:11:41.080 --> 00:11:41.580
&gt;&gt; Brady: To the global.

219
00:11:41.580 --> 00:11:42.890
&gt;&gt; Will Sentance: To the global, exactly.

220
00:11:42.890 --> 00:11:48.939
Return out 8 into the global
execution context.

221
00:11:50.190 --> 00:11:52.050
Where it's stored in output.

222
00:11:52.050 --> 00:11:57.060
Perfect, folk,
I know this may seem procedural.

223
00:11:57.060 --> 00:12:01.650
But I know you can this and go well yeah,
yeah, I get that output's gonna be 8.

224
00:12:01.650 --> 00:12:05.200
I got that, but
we need to have the precision.

225
00:12:05.200 --> 00:12:08.380
So now, notice by the way,

226
00:12:08.380 --> 00:12:13.890
that we weren't allowed to move on to the
next line in global declaring new output

227
00:12:13.890 --> 00:12:19.110
until we'd finished running
multipleBy2 with the input of 4.

228
00:12:19.110 --> 00:12:25.965
A thread of execution, the ability
to go through the code line by line,

229
00:12:25.965 --> 00:12:32.030
it when did,
its way in to the called multipliedBy2,

230
00:12:32.030 --> 00:12:34.290
where it's spent time going
through the code line by line.

231
00:12:34.290 --> 00:12:37.100
And then hit what keyword to exit?

232
00:12:37.100 --> 00:12:39.690
What keyword, Mike, said to exit?

233
00:12:39.690 --> 00:12:40.960
&gt;&gt; Speaker 8: Return?
&gt;&gt; Will Sentance: Return.

234
00:12:40.960 --> 00:12:43.040
And then there's no
return statement there.

235
00:12:43.040 --> 00:12:46.980
The closing curly brace which implies an
implicit return is going to insert return

236
00:12:46.980 --> 00:12:51.340
for us an out we return.

237
00:12:51.340 --> 00:12:55.530
In other words, JavaScript,
how many things can I do at a time?

238
00:12:55.530 --> 00:12:58.040
One, its thread is singular.

239
00:12:58.040 --> 00:13:01.559
It's not going to continue down in global
code while simultaneously running more

240
00:13:01.559 --> 00:13:02.426
probabilities..

241
00:13:02.426 --> 00:13:05.430
It's almost to say, okay,
let's keep going down here and

242
00:13:05.430 --> 00:13:07.242
continuing here simultaneously.

243
00:13:07.242 --> 00:13:11.119
One of the beautiful things about
JavaScript is it's so predictable,

244
00:13:11.119 --> 00:13:14.995
because it's always one thing after
another in order, top to bottom,

245
00:13:14.995 --> 00:13:17.294
at least in its core synchronous nature.

246
00:13:17.294 --> 00:13:21.080
We will see when that doesn't apply,
of course.

247
00:13:21.080 --> 00:13:25.080
So JavaScript's really synchronous, in
order top to bottom, and single threaded.

248
00:13:25.080 --> 00:13:27.660
We can't suddenly do two things
at the same time, excellent.

249
00:13:27.660 --> 00:13:32.330
So now, we do return out to the global
execution context where we encounter

250
00:13:32.330 --> 00:13:37.740
declaring new output which is gonna
be the return value of another

251
00:13:37.740 --> 00:13:40.080
function pool to multiplyBy2.

252
00:13:40.080 --> 00:13:43.348
We're gonna create
an execution context for

253
00:13:43.348 --> 00:13:48.259
it in to it we go what is the first thing,
Rick, in our local memory?

254
00:13:50.955 --> 00:13:52.270
&gt;&gt; Speaker 14: The input number.

255
00:13:52.270 --> 00:13:56.620
&gt;&gt; Will Sentance: Which is known as our,
what is the posh name for a place holder?

256
00:13:56.620 --> 00:13:57.620
&gt;&gt; Speaker 14: Argument.

257
00:13:57.620 --> 00:13:58.840
&gt;&gt; Will Sentance: So that's the argument.

258
00:13:58.840 --> 00:14:00.930
That's the-
&gt;&gt; Speaker 14: Parameter.

259
00:14:00.930 --> 00:14:02.170
&gt;&gt; Will Sentance: Parameter.

260
00:14:02.170 --> 00:14:04.360
Okay, so Rick, what is our argument?

261
00:14:04.360 --> 00:14:06.090
You're right to say our
parameter is input number.

262
00:14:06.090 --> 00:14:07.305
What's our argument here?

263
00:14:07.305 --> 00:14:09.318
&gt;&gt; Speaker 14: 10.
&gt;&gt; Will Sentance: 10, excellent,

264
00:14:09.318 --> 00:14:10.240
all right.

265
00:14:10.240 --> 00:14:14.964
And then result will be,
&gt;&gt; Will Sentance: 20, and

266
00:14:14.964 --> 00:14:21.210
we return that out back out to,
&gt;&gt; Will Sentance: Global.

267
00:14:21.210 --> 00:14:26.150
The 20 is returned out to the global
variable, sorry, the global constant.

268
00:14:26.150 --> 00:14:29.175
New output is 20.

269
00:14:29.175 --> 00:14:33.100
So our thread when did its way in and
when did its way back out again.

270
00:14:35.670 --> 00:14:41.460
Okay, but there's a final piece to
this synchronous JavaScript model.

271
00:14:41.460 --> 00:14:45.370
We have our memory posh name,
variable environment.

272
00:14:45.370 --> 00:14:47.160
We have our thread of execution,

273
00:14:47.160 --> 00:14:50.580
the ability to go through
the code line by line.

274
00:14:50.580 --> 00:14:54.355
These together are known
as an execution context,

275
00:14:54.355 --> 00:14:57.261
the two things we need to execute code.

276
00:14:57.261 --> 00:15:00.999
The context of the things
we need to execute code.

277
00:15:02.440 --> 00:15:06.010
But we've got a whole bunch of these
execution contexts being created,

278
00:15:06.010 --> 00:15:09.260
deleted, created, and then we run
another function inside of that one.

279
00:15:09.260 --> 00:15:11.220
It's another little mini one
being created inside of there.

280
00:15:12.370 --> 00:15:17.460
Keeping track of those,
to us is visually easy.

281
00:15:17.460 --> 00:15:19.073
I finished calling multiplyBy2.

282
00:15:19.073 --> 00:15:23.585
I come out of it, and I'm back where I was
before when I started coding multiplyBy2.

283
00:15:23.585 --> 00:15:25.140
We can visually see that very easily.

284
00:15:26.850 --> 00:15:31.290
JavaScript doesn't have that
same ability to visually see,

285
00:15:31.290 --> 00:15:34.970
I was previously,
I called this function in global,

286
00:15:34.970 --> 00:15:38.380
and I was in the big box,
when I moved into the little box.

287
00:15:38.380 --> 00:15:41.170
When I finished in the little box,
I can go back out of the big box.

288
00:15:41.170 --> 00:15:43.220
JavaScript doesn't that ability.

289
00:15:43.220 --> 00:15:47.760
It needs keep track of where it is
in the code right now, where it was,

290
00:15:47.760 --> 00:15:50.760
when it before it started being
inside this function.Where

291
00:15:50.760 --> 00:15:53.490
it's going to go back to when it
finishes inside this function.

292
00:15:53.490 --> 00:15:55.600
What, this is a knowledge thing,

293
00:15:55.600 --> 00:16:01.230
does anyone know what, data, we can sort
all that sort of information any format.

294
00:16:01.230 --> 00:16:05.000
But there's a particularly nice
structure with structuring data,

295
00:16:05.000 --> 00:16:08.800
that will store that
information very cleanly.

296
00:16:08.800 --> 00:16:11.090
Anyone know what that structure might be?

297
00:16:11.090 --> 00:16:12.545
&gt;&gt; Speaker 9: Stack.

298
00:16:12.545 --> 00:16:14.310
&gt;&gt; Will Sentance: It's a stack, exactly.

299
00:16:14.310 --> 00:16:16.320
It's called the, in fact,
it's gonna be a stack of call.

300
00:16:16.320 --> 00:16:19.250
A stack is a,
we have a raise, a raise say,

301
00:16:19.250 --> 00:16:22.820
a list of data I wanna be able to grab
an element at any random position.

302
00:16:22.820 --> 00:16:25.420
That's not reflected in
what we want to do here.

303
00:16:25.420 --> 00:16:28.480
Here, we want tona say just
like a stack of plates.

304
00:16:28.480 --> 00:16:33.480
I put the first one in, I start off
in the global execution context.

305
00:16:33.480 --> 00:16:36.100
That's one of my first
element in my stack.

306
00:16:36.100 --> 00:16:39.490
And then, when I start running
multiplyBy2, I add it on top.

307
00:16:41.130 --> 00:16:42.910
And that's like adding my next plate.

308
00:16:42.910 --> 00:16:45.590
If I had to run another function
inside that I'd add that one on top.

309
00:16:45.590 --> 00:16:48.795
When I finish in that one, all I care
is that when I take that one away

310
00:16:48.795 --> 00:16:51.450
the previous one that was
there before is still there.

311
00:16:51.450 --> 00:16:53.250
And that is the essence of a stack.

312
00:16:53.250 --> 00:16:55.910
Is that when I take the last
thing that was there off,

313
00:16:55.910 --> 00:16:57.630
I'm back to where I was before.

314
00:16:57.630 --> 00:17:02.010
And so, our stack is gonna be
a stack of cools to functions.

315
00:17:02.010 --> 00:17:07.175
Starting off, here is the call stack.

316
00:17:07.175 --> 00:17:09.000
The stack of calls to functions.

317
00:17:09.000 --> 00:17:12.760
Starting off with
a representation of our overall,

318
00:17:12.760 --> 00:17:16.150
think of our whole code base
as a function called global.

319
00:17:16.150 --> 00:17:19.710
That as soon as we start running our code,
we're running global.

320
00:17:19.710 --> 00:17:24.550
So starting off with global as
soon as we start running our code.

321
00:17:24.550 --> 00:17:28.238
When we start running multipleBy2.

322
00:17:28.238 --> 00:17:30.996
Paul, what would it make
sense to add call stack?

323
00:17:30.996 --> 00:17:32.480
&gt;&gt; Paul: Add on the new
execution function.

324
00:17:32.480 --> 00:17:35.610
&gt;&gt; Will Sentance: Add on the new
execution context, exactly.

325
00:17:35.610 --> 00:17:39.990
Add on the call to multiplyBy2
with the input of 4.

326
00:17:39.990 --> 00:17:47.090
Meaning, while I am in my multiplyBy2
function, while my thread

327
00:17:47.090 --> 00:17:52.520
is in my multiplyBy2 function, multiplyBy2
is gonna be top of my stack of calls.

328
00:17:52.520 --> 00:17:54.110
My one simple rule is,

329
00:17:54.110 --> 00:17:57.440
whatever's top of my call stack,
that's where I am right now.

330
00:17:57.440 --> 00:18:02.885
And then as soon as I return out, what's
gonna happen, Paul, to my call stack?

331
00:18:02.885 --> 00:18:05.340
&gt;&gt; Speaker 14: MultiplyBy2,
that execution context disappears,

332
00:18:05.340 --> 00:18:07.321
you go back into the global and
then you get.

333
00:18:07.321 --> 00:18:10.960
&gt;&gt; Will Sentance: Excellent, I'm gonna
get rid of multiplyBy2 of my call stack.

334
00:18:11.960 --> 00:18:15.960
And we may know, therefore return out to
global execution context and output, but

335
00:18:15.960 --> 00:18:16.773
Josh, it doesn't.

336
00:18:16.773 --> 00:18:20.440
JavaScript should knows that because look,
what's on my call stack now?

337
00:18:20.440 --> 00:18:24.640
Don't panic, it's global,
I'm back out to global.

338
00:18:24.640 --> 00:18:28.940
This allows JavaScript to keep
track of where is it in its code

339
00:18:28.940 --> 00:18:30.390
what line it's running.

340
00:18:30.390 --> 00:18:32.940
And then, when I finish in
the code execution context,

341
00:18:32.940 --> 00:18:34.170
where am I gonna return back to?

342
00:18:35.360 --> 00:18:39.176
Well, get rid of where I was, and the next
layer down is where I'm returning back to,

343
00:18:39.176 --> 00:18:39.710
all right.

344
00:18:42.287 --> 00:18:46.219
&gt;&gt; Will Sentance: By the way, posh name
for adding to a stack is not to add,

345
00:18:46.219 --> 00:18:47.830
is not to throw on.

346
00:18:47.830 --> 00:18:48.730
Is to what Shawn?

347
00:18:50.180 --> 00:18:50.780
Victor?

348
00:18:50.780 --> 00:18:52.884
What's a posh name to add
to a stack anyone know?

349
00:18:52.884 --> 00:18:53.610
&gt;&gt; Speaker 14: Push.

350
00:18:53.610 --> 00:18:57.200
&gt;&gt; Will Sentance: Push, that's
the computer science technical term for

351
00:18:57.200 --> 00:18:58.180
adding to a stack.

352
00:18:58.180 --> 00:18:59.710
And what's the posh name?

353
00:18:59.710 --> 00:19:01.403
Josh you know for
getting from the Office FAQ?

354
00:19:01.403 --> 00:19:02.680
&gt;&gt; Speaker 14: Pop.
&gt;&gt; Will Sentance: Pop, exactly.

355
00:19:02.680 --> 00:19:04.050
Push and pop.

356
00:19:04.050 --> 00:19:06.159
Excellent, all right, good.

357
00:19:06.159 --> 00:19:07.480
Yet, we talked about this.

358
00:19:07.480 --> 00:19:10.370
So let's have thumbs on
these core foundations.

359
00:19:10.370 --> 00:19:15.005
Thumbs is a widely used
pedagogical techniques to indicate

360
00:19:15.005 --> 00:19:17.210
one's understanding.

361
00:19:17.210 --> 00:19:20.470
You lost me, I am very clear.

362
00:19:20.470 --> 00:19:24.370
I have a clarification question,
everybody's thumbs out, right now.

363
00:19:24.370 --> 00:19:27.550
It's okay to have clarifications, nobody?

364
00:19:28.900 --> 00:19:32.050
Very frustrating, all right, good, good.

