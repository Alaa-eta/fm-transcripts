WEBVTT

1
00:00:00.617 --> 00:00:04.009
&gt;&gt; Will Sentance: Here we are,
Hard Parts of JavaScript.

2
00:00:04.009 --> 00:00:08.698
The foundations we have to understand
though to get to the Hard Parts

3
00:00:08.698 --> 00:00:13.234
are gonna feel at times a little
bit trite, a little bit trivial.

4
00:00:13.234 --> 00:00:17.622
And have a few of you've been to
Hard Parts before, you're even gonna feel,

5
00:00:17.622 --> 00:00:19.795
hold on I've seen this stuff before.

6
00:00:19.795 --> 00:00:22.797
Our first about 30 minutes or
so, is gonna be material,

7
00:00:22.797 --> 00:00:26.122
that if you've been to Hard Parts before,
you'll recognize.

8
00:00:26.122 --> 00:00:32.529
Because, that is the JavaScript engine and
how it works.

9
00:00:32.529 --> 00:00:36.315
It's a universal, but
we've gotta lay these foundations out.

10
00:00:36.315 --> 00:00:40.851
And by the way, you're gonna see Coby and
you're gonna go, yeah, yeah, thanks.

11
00:00:40.851 --> 00:00:42.323
I get how this code is running,
I get what its doing.

12
00:00:42.323 --> 00:00:44.038
But we're gonna see it, and

13
00:00:44.038 --> 00:00:47.837
it's gonna empower us to then
solve all the hard parts to come.

14
00:00:47.837 --> 00:00:53.473
All right, let's go, here it is.

15
00:00:53.473 --> 00:00:58.242
We're gonna whiteboard through
all of our code's execution,

16
00:00:58.242 --> 00:01:01.164
just as the JavaScript engine runs it.

17
00:01:01.164 --> 00:01:05.810
We do that,
there can be no gaps in our understanding.

18
00:01:05.810 --> 00:01:08.430
We're gonna step through line by line, and

19
00:01:08.430 --> 00:01:11.520
we're gonna map it up on
the whiteboard the whole time.

20
00:01:11.520 --> 00:01:16.010
So, with that it mind, what happens
when JavaScript executes runs my codes?

21
00:01:16.010 --> 00:01:18.070
There's two halves,
I'll tell you straight away.

22
00:01:18.070 --> 00:01:22.550
It's two halves to the process
of executing code.

23
00:01:22.550 --> 00:01:29.330
One, is literally the ability to walk
through the code, line by line by line.

24
00:01:29.330 --> 00:01:32.490
That is known as the thread of execution.

25
00:01:32.490 --> 00:01:36.290
All that is is the processing ability.

26
00:01:36.290 --> 00:01:38.550
Take line one, do it,
whatever it says to do.

27
00:01:38.550 --> 00:01:40.980
Take line two, do it,
whatever it says to do.

28
00:01:40.980 --> 00:01:42.309
Take line three, do it, whatever.

29
00:01:42.309 --> 00:01:47.491
It's executing doing the code and
it's threading its way down our code.

30
00:01:47.491 --> 00:01:50.456
By the way, in order, top to bottom.

31
00:01:50.456 --> 00:01:56.656
Simultaneously, the other part that's
required to run our code, is a place to

32
00:01:56.656 --> 00:02:02.686
store the bits of data that we announced
as we go through our codes execution.

33
00:02:02.686 --> 00:02:04.169
So you can see in line one,

34
00:02:04.169 --> 00:02:08.491
we're announcing that we're gonna store
num as a label for sum data three.

35
00:02:08.491 --> 00:02:11.730
And so
we're gonna map these on the whiteboard,

36
00:02:11.730 --> 00:02:14.500
which will be a fascinating experience.

37
00:02:14.500 --> 00:02:17.330
Let's see how it goes, line by line.

38
00:02:17.330 --> 00:02:18.920
Starting with line one.

39
00:02:18.920 --> 00:02:22.000
I'm gonna call on Paul.

40
00:02:22.000 --> 00:02:24.080
What are we doing here in line one?

41
00:02:24.080 --> 00:02:25.900
What are we actually doing?

42
00:02:25.900 --> 00:02:29.590
&gt;&gt; Paul: We're saying allocate some data

43
00:02:31.510 --> 00:02:36.590
to a constant called num, and
then toss an integer three onto that?

44
00:02:36.590 --> 00:02:39.410
&gt;&gt; Will Sentance: Well, that seems
like a very intuitive description.

45
00:02:39.410 --> 00:02:42.770
So we are, in our memory,

46
00:02:43.890 --> 00:02:48.830
in our memory,
we are declaring a constant.

47
00:02:48.830 --> 00:02:51.660
Just remember,
that means a piece of data where

48
00:02:51.660 --> 00:02:53.830
we're not allowed to change
its position and memories.

49
00:02:53.830 --> 00:02:57.761
We can't suddenly replace
numbers value with full.

50
00:02:57.761 --> 00:03:01.695
It's now set for
the running of our application,

51
00:03:01.695 --> 00:03:04.795
num is set to the value 3, excellent.

52
00:03:04.795 --> 00:03:07.468
Michelle, what is our next line
of code here [INAUDIBLE] to do?

53
00:03:07.468 --> 00:03:11.777
&gt;&gt; Michelle: The next line of code
is also creating something in memory

54
00:03:11.777 --> 00:03:14.344
that we're calling-
&gt;&gt; Will Sentance: All right, but

55
00:03:14.344 --> 00:03:19.240
be very precise, just [INAUDIBLE] [LAUGH]
saying that, go on, what is it called?

56
00:03:19.240 --> 00:03:19.838
Excellent.

57
00:03:19.838 --> 00:03:25.120
The name multiplied by 2, we're
declaring the function multiplied by 2.

58
00:03:25.120 --> 00:03:28.820
In JavaScript functions,
that means the entire functionality

59
00:03:30.040 --> 00:03:33.570
are assigned as values.

60
00:03:33.570 --> 00:03:37.830
Just like the number 3, we're storing
in memory, the functionality,

61
00:03:37.830 --> 00:03:40.046
the function definition
of multiplied by two.

62
00:03:40.046 --> 00:03:42.680
I'm not gonna write the whole function
definition out on the right-hand

63
00:03:42.680 --> 00:03:46.960
side here, instead, I'm gonna represent
it with this little box, with an f in it.

64
00:03:46.960 --> 00:03:49.880
That represents my entire
function definition.

65
00:03:49.880 --> 00:03:55.653
If I go into my console, now log
multiplied by 2, what would I see James?

66
00:03:58.343 --> 00:04:02.086
&gt;&gt; James: You would see
the actual source code for-

67
00:04:02.086 --> 00:04:03.346
&gt;&gt; Will Sentance: Yeah, exactly,

68
00:04:03.346 --> 00:04:08.490
I'd see the block of code itself,
function multiplied by 2.

69
00:04:08.490 --> 00:04:12.160
I'd see the whole thing with
the code in my console.

70
00:04:12.160 --> 00:04:15.340
That is what we mean when
we say declare a function.

71
00:04:15.340 --> 00:04:17.000
We are literally, sometimes we think, or

72
00:04:17.000 --> 00:04:19.214
we're just sort of going,
there's a function in code.

73
00:04:19.214 --> 00:04:24.730
No, no, the keyword function
literally means, go save in memory,

74
00:04:24.730 --> 00:04:28.380
go save in memory,
this particular functionality.

75
00:04:28.380 --> 00:04:33.468
All right, excellent, what's our third
line of code that executes, Shawn?

76
00:04:35.216 --> 00:04:39.131
&gt;&gt; Shawn: It's doing the same thing
as our first constant declaration.

77
00:04:39.131 --> 00:04:39.908
&gt;&gt; Will Sentance: Yep.

78
00:04:39.908 --> 00:04:43.219
&gt;&gt; Shawn: Just creating a piece of
memory called name sending it to-

79
00:04:43.219 --> 00:04:44.759
&gt;&gt; Will Sentance: Excellent, Shawn,

80
00:04:44.759 --> 00:04:47.328
what was not our third line of code?

81
00:04:47.328 --> 00:04:49.059
&gt;&gt; Shawn: Constant results.

82
00:04:49.059 --> 00:04:49.633
&gt;&gt; Will Sentance: Right, why not?

83
00:04:49.633 --> 00:04:52.267
&gt;&gt; Shawn: Because that's
not being called yet.

84
00:04:52.267 --> 00:04:56.360
&gt;&gt; Will Sentance: Exactly, we do not go
into the body of a function until what,

85
00:04:56.360 --> 00:04:56.933
Shawn?

86
00:04:56.933 --> 00:04:58.511
&gt;&gt; Shawn: Until it's called.

87
00:04:58.511 --> 00:05:00.205
&gt;&gt; Will Sentance: Until it's called,
excellent, all right.

88
00:05:00.205 --> 00:05:05.738
Shawn is spot on there, and folk,
this may seem profoundly trivial.

89
00:05:05.738 --> 00:05:08.484
Okay, I get how to store stuff in memory.

90
00:05:08.484 --> 00:05:13.362
But this foundation is what we need,
there's a level of precision

91
00:05:13.362 --> 00:05:17.470
that is absolutely vital for
everything that follows.

92
00:05:17.470 --> 00:05:20.233
All the way up to rebuilding
a with generators.

93
00:05:20.233 --> 00:05:24.612
It all in the end depends
on these foundations.

94
00:05:24.612 --> 00:05:29.096
All right, excellent, so
as soon as we start running our code,

95
00:05:29.096 --> 00:05:30.684
we spin up two things.

96
00:05:30.684 --> 00:05:33.552
One, the ability to go through
our code line by line.

97
00:05:33.552 --> 00:05:35.425
ThatÂ´s our thread of execution.

98
00:05:35.425 --> 00:05:38.718
Remember, threading its way through,
and executing the code line by line.

99
00:05:38.718 --> 00:05:43.004
And simultaneously, we spin up,
[INAUDIBLE] student policy, and

100
00:05:43.004 --> 00:05:44.391
student code alike.

101
00:05:44.391 --> 00:05:49.232
A live memory of variables with
a live store of labels with data.

102
00:05:49.232 --> 00:05:52.101
Posh name for
that is a variable environment.

103
00:05:52.101 --> 00:05:55.846
We can call this a variable environment.

104
00:05:55.846 --> 00:06:00.333
Think of it as being,
environment is the things around me.

105
00:06:00.333 --> 00:06:03.606
These are the variables around me,
the variable environment.

106
00:06:03.606 --> 00:06:08.365
Now, these two halves together are known.

107
00:06:08.365 --> 00:06:12.850
These two halves together, the thread
of it, we're gonna walk through.

108
00:06:12.850 --> 00:06:15.310
We didn't copy out the lines and
the thread, there's no point.

109
00:06:15.310 --> 00:06:19.668
But these two halves together
are known as an execution context.

110
00:06:19.668 --> 00:06:24.289
That is, a context is a space to do
something, a space of context in

111
00:06:24.289 --> 00:06:29.086
which we do something, or
it's a space in which we execute our code.

112
00:06:29.086 --> 00:06:31.720
It's an execution context.

113
00:06:31.720 --> 00:06:36.875
And it's the global one, who's gonna
discover whenever we run our own code.

114
00:06:36.875 --> 00:06:41.874
Including, for example, when we wanna
execute the code inside a function.

115
00:06:41.874 --> 00:06:46.190
We're gonna create a little
baby local execution context.

116
00:06:46.190 --> 00:06:48.540
Just or
running the code inside a function.

117
00:06:48.540 --> 00:06:49.700
We call it the local one.

118
00:06:49.700 --> 00:06:51.380
Just for the stuff inside a function.

119
00:06:51.380 --> 00:06:53.780
So this though is for our overall code.

120
00:06:53.780 --> 00:06:57.420
It's called the global execution context.

121
00:06:57.420 --> 00:07:01.810
All right people, let's see what's next?

122
00:07:01.810 --> 00:07:06.850
All right, as Shawn rightly said,
we did not execute,

123
00:07:06.850 --> 00:07:09.790
we did not call,
we did not invoke multiply by two.

124
00:07:10.830 --> 00:07:14.190
So we stayed in which execution context,
Shawn?

125
00:07:14.190 --> 00:07:15.230
&gt;&gt; Shawn: Global.
&gt;&gt; Will Sentance: Global, excellent.

126
00:07:16.560 --> 00:07:21.530
But now, we are going to execute
a function, and see what happens.

127
00:07:21.530 --> 00:07:23.620
So, we've declared num is 3,

128
00:07:23.620 --> 00:07:28.015
declared multiply by 2 as a function,
what is our next line of code?

129
00:07:28.015 --> 00:07:30.200
Mr. Henderson.

130
00:07:30.200 --> 00:07:30.790
&gt;&gt; Brian: Yes.

131
00:07:30.790 --> 00:07:32.070
&gt;&gt; Will Sentance: What is our
next line of code, Brian.

132
00:07:32.070 --> 00:07:36.320
&gt;&gt; Brian: We are creating a new
label in memory called output.

133
00:07:36.320 --> 00:07:36.870
&gt;&gt; Will Sentance: Excellent.

134
00:07:38.140 --> 00:07:40.300
Do we know what to assign to it yet?

135
00:07:40.300 --> 00:07:41.670
&gt;&gt; Brian: Undefined at this point.

136
00:07:41.670 --> 00:07:42.190
&gt;&gt; Will Sentance: Very good.

137
00:07:43.220 --> 00:07:45.153
Because, what's the right-hand side,

138
00:07:45.153 --> 00:07:47.413
is the right-hand side
a value that we can store?

139
00:07:47.413 --> 00:07:50.210
&gt;&gt; Brian: Yeah, no,
it's calling the execution of-

140
00:07:50.210 --> 00:07:50.802
&gt;&gt; Will Sentance: Exactly,

141
00:07:50.802 --> 00:07:52.979
it's a command to go and do something.

142
00:07:52.979 --> 00:07:56.450
There's absolutely not a value we
can store on the right-hand side.

143
00:07:56.450 --> 00:07:58.870
Output has zero interest in multiple by 2.

144
00:07:58.870 --> 00:08:00.550
That is a command to go and

145
00:08:00.550 --> 00:08:05.490
run some code, whatever gets returned out,
known as the, what Brian?

146
00:08:05.490 --> 00:08:09.880
What's the generic name for
what gets returned out of a function?

147
00:08:09.880 --> 00:08:11.310
&gt;&gt; Brian: The return value.

148
00:08:11.310 --> 00:08:12.028
&gt;&gt; Will Sentance: The return value,
exactly.

149
00:08:12.028 --> 00:08:14.892
Quite literal, the returned value.

150
00:08:14.892 --> 00:08:17.569
That's what's gonna be assigned to output.

151
00:08:17.569 --> 00:08:20.714
All right, let's do it.

152
00:08:20.714 --> 00:08:26.199
So output is going to be the result,
the return value

153
00:08:26.199 --> 00:08:31.324
of calling multiplied by
2 with the input of 4.

154
00:08:31.324 --> 00:08:34.828
There we go so.

155
00:08:34.828 --> 00:08:38.720
So, what did I say we create
whenever we have code to execute?

156
00:08:38.720 --> 00:08:39.930
Blessing?

157
00:08:39.930 --> 00:08:41.410
&gt;&gt; Blessing: Look like
an execution context.

158
00:08:41.410 --> 00:08:42.580
&gt;&gt; Will Sentance: An execution context.

159
00:08:42.580 --> 00:08:44.020
I'm gonna represent that.

160
00:08:44.020 --> 00:08:45.650
This is a big old box with two parts.

161
00:08:45.650 --> 00:08:49.010
I'm gonna represent that with
a little box with two parts.

162
00:08:49.010 --> 00:08:50.739
Here it is.
And we're taking it slowly,

163
00:08:50.739 --> 00:08:53.986
cuz these are genuinely,
over the next ten, 15 minutes,

164
00:08:53.986 --> 00:08:57.883
we're gonna see the three pieces of
synchronous Javas from execution.

165
00:08:57.883 --> 00:09:01.154
And if we don't get these pieces down,
nothing else follows.

166
00:09:01.154 --> 00:09:05.343
So, into this execution context, we go.

167
00:09:05.343 --> 00:09:08.727
And just like that global one for
running the main code,

168
00:09:08.727 --> 00:09:12.543
now we're gonna run the code
just inside multiplied by 2, but

169
00:09:12.543 --> 00:09:15.718
we're gonna have a little memory just for
the code.

170
00:09:15.718 --> 00:09:20.906
Just for the things that get announced,
get declared, the variables and functions,

171
00:09:20.906 --> 00:09:26.040
and parameters, and arguments that get
declared inside of multiply by two's body.

172
00:09:26.040 --> 00:09:28.036
They're just going to be stored in here.

173
00:09:28.036 --> 00:09:31.920
By the way,
when this function finishes executing,

174
00:09:31.920 --> 00:09:36.768
all those pieces unless they're
returned out, will be deleted.

175
00:09:36.768 --> 00:09:42.030
Automatically, garbage collected.

176
00:09:42.030 --> 00:09:44.340
It's stuff that we can't access again.

177
00:09:44.340 --> 00:09:46.090
We can't reference those names again.

178
00:09:46.090 --> 00:09:46.980
So it's garbage.

179
00:09:46.980 --> 00:09:48.937
It's memory that's being wasted.

180
00:09:48.937 --> 00:09:52.514
We're gonna automatically clean
it out in JavaScript, okay,

181
00:09:52.514 --> 00:09:56.634
except in one special condition,
which we'll see a little bit later on.

182
00:09:56.634 --> 00:10:00.628
Because my favorite thing in JavaScript,
there's times when all our data is not

183
00:10:00.628 --> 00:10:03.168
necessarily deleted,
when we answer a function.

184
00:10:03.168 --> 00:10:05.161
The most beautiful concept in Javascript.

185
00:10:05.161 --> 00:10:10.251
And even though we're not gonna go
through it, as the focal point,

186
00:10:10.251 --> 00:10:13.929
inevitably, we have to
come to it in iterators.

187
00:10:13.929 --> 00:10:18.149
So in we go, and
what is the first thing, Rich,

188
00:10:18.149 --> 00:10:23.395
inside our local execution
context that we're gonna do?

189
00:10:23.395 --> 00:10:26.765
&gt;&gt; Rich: Defining a constant
variable called result.

190
00:10:26.765 --> 00:10:30.070
&gt;&gt; Will Sentance: So
that's our second thing, Rick.

191
00:10:30.070 --> 00:10:32.106
What's the very first thing
we put in our local memory?

192
00:10:32.106 --> 00:10:33.731
&gt;&gt; Rich: The function?

193
00:10:33.731 --> 00:10:35.488
&gt;&gt; Will Sentance: Not the function,
Michelle?

194
00:10:35.488 --> 00:10:36.653
&gt;&gt; Michelle: The input number.

195
00:10:36.653 --> 00:10:40.673
&gt;&gt; Will Sentance: Exactly, input number,
which is known as our parameter.

196
00:10:40.673 --> 00:10:44.857
Remember, the placeholder,
we defined a function, which is to say,

197
00:10:44.857 --> 00:10:46.755
we will run this thing later on.

198
00:10:46.755 --> 00:10:50.005
When you run me,
better make sure you fill in that blank,

199
00:10:50.005 --> 00:10:52.869
that placeholder input
number with an argument.

200
00:10:52.869 --> 00:10:57.620
Parameter is the placeholder, argument's,
the actual value that gets passed in.

201
00:10:57.620 --> 00:10:59.520
Michelle, what's the argument?

202
00:10:59.520 --> 00:11:00.690
&gt;&gt; Michelle: Argument is 4.

203
00:11:00.690 --> 00:11:02.730
&gt;&gt; Will Sentance: 4, excellent.
And so the result is 8.

204
00:11:02.730 --> 00:11:07.140
And the final line in the body of
the function says do what, Josh?

205
00:11:08.720 --> 00:11:09.304
&gt;&gt; Josh: To return 8?

206
00:11:09.304 --> 00:11:10.650
&gt;&gt; Will Sentance: To return 8,
I like that.

207
00:11:10.650 --> 00:11:13.150
Return the value of result, 8.

208
00:11:13.150 --> 00:11:14.850
It's not returning result.

209
00:11:14.850 --> 00:11:17.510
It returns the value of result,
which is a number, 8.

210
00:11:17.510 --> 00:11:19.040
I don't like saying return result.

211
00:11:19.040 --> 00:11:20.245
It kind of implies the whole fit.

212
00:11:20.245 --> 00:11:23.728
JavaScript sees return result and
goes, what's result?

213
00:11:23.728 --> 00:11:25.089
8, okay, perfect.

214
00:11:25.089 --> 00:11:26.590
Return it out.

215
00:11:26.590 --> 00:11:29.652
To where, what's your name dude?

216
00:11:29.652 --> 00:11:30.253
&gt;&gt; Brady: Brady.

217
00:11:30.253 --> 00:11:30.793
&gt;&gt; Will Sentance: Brady, sorry, Brady.

218
00:11:30.793 --> 00:11:32.546
Brady, return out to where?

219
00:11:32.546 --> 00:11:38.138
&gt;&gt; Brady: To the label output.

220
00:11:38.138 --> 00:11:40.070
&gt;&gt; Will Sentance: To the but
to which execution context?

221
00:11:40.070 --> 00:11:41.531
&gt;&gt; Brady: To the global.

222
00:11:41.531 --> 00:11:42.625
&gt;&gt; Will Sentance: To the global, exactly.

223
00:11:42.625 --> 00:11:48.190
Return out 8 into the global
execution context,

224
00:11:48.190 --> 00:11:51.645
where it's stored in output.

225
00:11:51.645 --> 00:11:55.587
Perfect, so
I know this may seem procedural.

226
00:11:55.587 --> 00:11:58.636
But I know you can see this and
go, yeah, yeah,

227
00:11:58.636 --> 00:12:01.247
well, I get that output's gonna be 8.

228
00:12:01.247 --> 00:12:01.838
I got that.

229
00:12:01.838 --> 00:12:04.418
But we need to have the precision.

230
00:12:04.418 --> 00:12:06.641
So now, notice by the way,

231
00:12:06.641 --> 00:12:11.671
that we weren't allowed to move
on to the next line in global,

232
00:12:11.671 --> 00:12:18.563
declaring new output until we'd finished
running multiply by 2, the input of 4.

233
00:12:18.563 --> 00:12:24.625
At thread of execution, the ability
to go through the code line by line.

234
00:12:27.032 --> 00:12:31.643
&gt;&gt; Will Sentance: It's weigh in to the
column multiply by 2, where it spend time

235
00:12:31.643 --> 00:12:37.128
going through the code line by line,
and then hit what keyword to the exit?

236
00:12:37.128 --> 00:12:39.690
What keyword, Mike, so to exit?

237
00:12:39.690 --> 00:12:41.120
&gt;&gt; Mike: Return.
&gt;&gt; Will Sentance: Return, and

238
00:12:41.120 --> 00:12:44.220
if there's no return statement there,
the closing curly brace,

239
00:12:44.220 --> 00:12:47.566
which implies an implicit return
is gonna insert return for us.

240
00:12:47.566 --> 00:12:51.340
And out be returned.

241
00:12:51.340 --> 00:12:55.085
In other words, JavaScript,
how many things can it do at a time?

242
00:12:55.085 --> 00:12:57.415
One, its thread is singular.

243
00:12:57.415 --> 00:13:02.692
It's not going to continue down in global
code, while simultaneously [INAUDIBLE].

244
00:13:02.692 --> 00:13:06.042
Okay, let's keep going down here and
continue in here simultaneously.

245
00:13:06.042 --> 00:13:10.633
Uh-huh, one of the beautiful things
about Javascript is it's so predictable,

246
00:13:10.633 --> 00:13:14.758
because it's always one thing after
another, in order, top to bottom,

247
00:13:14.758 --> 00:13:17.150
at least in its core synchronous nature.

248
00:13:17.150 --> 00:13:19.746
We will see when that doesn't apply,
of course.

249
00:13:19.746 --> 00:13:25.080
So JavaScript is synchronous in order
top to bottom, and single threaded.

250
00:13:25.080 --> 00:13:26.195
We can't simply do two
things at the same time.

251
00:13:26.195 --> 00:13:30.489
Excellent, so now we do return out
to the global execution context,

252
00:13:30.489 --> 00:13:33.163
where we encounter declaring new output.

253
00:13:33.163 --> 00:13:39.980
Which is gonna be the return value of
another function call to multiply by 2.

254
00:13:39.980 --> 00:13:42.460
We're gonna create
an execution context for it.

255
00:13:43.610 --> 00:13:44.279
Into it we go.

256
00:13:44.279 --> 00:13:47.873
What is the first thing,
Rick, in our local memory?

257
00:13:47.873 --> 00:13:49.946
&gt;&gt; Rich: The input number.

258
00:13:49.946 --> 00:13:52.853
&gt;&gt; Will Sentance: Which is known as our?

259
00:13:52.853 --> 00:13:54.505
Are we postulating for a placeholder?

260
00:13:54.505 --> 00:13:56.745
&gt;&gt; Rich: Argument?

261
00:13:56.745 --> 00:13:58.718
&gt;&gt; Will Sentance: So
that's the argument, that's the?

262
00:13:58.718 --> 00:14:00.537
&gt;&gt; Rich: Parameter.

263
00:14:00.537 --> 00:14:01.318
&gt;&gt; Will Sentance: Parameter.

264
00:14:01.318 --> 00:14:04.259
Okay so, Rick, what is our argument?

265
00:14:04.259 --> 00:14:05.858
You're right to say our
parameter's input number.

266
00:14:05.858 --> 00:14:07.005
What's our argument here?

267
00:14:07.005 --> 00:14:07.679
&gt;&gt; Rich: 10.

268
00:14:07.679 --> 00:14:08.897
&gt;&gt; Will Sentance: 10, excellent.

269
00:14:08.897 --> 00:14:14.148
All right, and then result will be 20.

270
00:14:14.148 --> 00:14:21.210
And we return that out,
back out to global.

271
00:14:21.210 --> 00:14:26.150
The 20 is returned out
to the global constant.

272
00:14:26.150 --> 00:14:27.520
New output is 20.

273
00:14:27.520 --> 00:14:33.100
So our thread went this way in,
and went this way back out again.

274
00:14:35.670 --> 00:14:40.969
Okay, but there's a final piece to
this synchronous JavaScript model.

275
00:14:40.969 --> 00:14:44.402
We have our memory, posh name,
variable environment.

276
00:14:44.402 --> 00:14:46.587
We have our thread of execution,

277
00:14:46.587 --> 00:14:49.714
the ability to go through
the code line by line.

278
00:14:49.714 --> 00:14:54.215
These together are known
as an execution context.

279
00:14:54.215 --> 00:14:56.461
The two things we need to execute code,

280
00:14:56.461 --> 00:15:00.691
the context in which we need the context
of things we need to execute code.

281
00:15:00.691 --> 00:15:05.026
But we got a whole bunch of these
execution context being created,

282
00:15:05.026 --> 00:15:09.838
deleted, created, and then we run
another function inside of that one.

283
00:15:09.838 --> 00:15:12.391
It's another little mini one
being created inside of there.

284
00:15:12.391 --> 00:15:17.460
Keeping track of those,
to us is visually easy.

285
00:15:17.460 --> 00:15:20.186
I've finished calling multiply by 2,
I come out of it, and

286
00:15:20.186 --> 00:15:21.527
I'm back where I was before.

287
00:15:21.527 --> 00:15:24.832
When I started coding multi-property,
we can visually see that very easily.

288
00:15:24.832 --> 00:15:30.558
JavaScript doesn't have that
same ability to visually see.

289
00:15:30.558 --> 00:15:34.499
I was previously,
I called this function in global, and

290
00:15:34.499 --> 00:15:38.380
that I was in the big box when
I moved into the little box.

291
00:15:38.380 --> 00:15:41.170
When I finish in the little box,
I go back out to the big box.

292
00:15:41.170 --> 00:15:43.220
JavaScript doesn't have that ability.

293
00:15:43.220 --> 00:15:46.940
It needs to keep track of where
it is in the code right now,

294
00:15:46.940 --> 00:15:50.530
where it was before it started
being inside this function.

295
00:15:50.530 --> 00:15:52.482
Where it's gonna go back to when
it finishes inside this function.

296
00:15:52.482 --> 00:15:58.597
What, this is a knowledge thing,
does anyone know what data.

297
00:15:58.597 --> 00:16:03.499
I guess all that store information in any
format, but there's a particularly nice

298
00:16:03.499 --> 00:16:08.554
structure, way of structuring data that
will store that information very cleanly.

299
00:16:08.554 --> 00:16:10.546
Anyone know what that structure might be?

300
00:16:10.546 --> 00:16:11.529
&gt;&gt; Paul: Stack.

301
00:16:11.529 --> 00:16:13.808
&gt;&gt; Will Sentance: It is a stack, exactly.

302
00:16:13.808 --> 00:16:15.688
In fact, it's gonna be a stack of code.

303
00:16:15.688 --> 00:16:18.601
You have arrays, arrays,
say a list of data,

304
00:16:18.601 --> 00:16:22.820
I wanna be able to grab an element
at any random position.

305
00:16:22.820 --> 00:16:25.070
That's not reflecting
what we wanna do here.

306
00:16:25.070 --> 00:16:28.490
Here, we wanna say just
like a stack of plates.

307
00:16:28.490 --> 00:16:33.480
I put the first one, and I start off
in the global execution context.

308
00:16:33.480 --> 00:16:36.100
That's on my first element in my stack.

309
00:16:36.100 --> 00:16:39.617
And then, when I start running
multiply by 2, I had it on top.

310
00:16:39.617 --> 00:16:41.781
And that's adding my next plate.

311
00:16:41.781 --> 00:16:44.988
If I had to run another function inside
of that, I would have that one on top.

312
00:16:44.988 --> 00:16:48.223
When I am finishing that one, all I
care is that when I take that one away,

313
00:16:48.223 --> 00:16:50.738
the previous one that was
there before was still there.

314
00:16:50.738 --> 00:16:52.627
And that is the essence of a stag.

315
00:16:52.627 --> 00:16:56.839
When I take the last thing that was there
off, I'm back to where I was before.

316
00:16:56.839 --> 00:17:00.942
And so our stack is gonna be
a stack of calls to functions.

317
00:17:00.942 --> 00:17:04.977
Starting off, here is the pool stack,

318
00:17:04.977 --> 00:17:09.000
the stack of pools, the functions.

319
00:17:09.000 --> 00:17:12.760
Starting off with a kind of
representation of our overall,

320
00:17:12.760 --> 00:17:16.150
think of our whole code base
of a function called global,

321
00:17:16.150 --> 00:17:19.710
that as soon as we start running our code,
we're running global.

322
00:17:19.710 --> 00:17:24.550
So starting off with global,
as soon as we start running our code.

323
00:17:24.550 --> 00:17:25.940
When we start running multiply by two,

324
00:17:25.940 --> 00:17:30.240
Paul what would it make sense
to do to our callstack?

325
00:17:32.480 --> 00:17:33.611
&gt;&gt; Paul: Add on the new execution context.

326
00:17:33.611 --> 00:17:35.050
&gt;&gt; Will Sentance: Add on the new
execution context, exactly.

327
00:17:35.050 --> 00:17:39.990
Add on the call to multiply by 2,
with the input of 4.

328
00:17:39.990 --> 00:17:46.570
Meaning, well,
I am in my multiply by 2 function.

329
00:17:46.570 --> 00:17:48.650
My thread is in my multiply by 2 function.

330
00:17:48.650 --> 00:17:52.720
Multiply by 2 is gonna be top of my stack,
of course.

331
00:17:52.720 --> 00:17:55.810
My one simple rule is,
whatever stuff is in my callstack,

332
00:17:55.810 --> 00:17:57.440
that's where I am right now.

333
00:17:57.440 --> 00:18:02.860
And then as soon as I return out,
what's gonna happen Paul to my call stack?

334
00:18:02.860 --> 00:18:05.026
&gt;&gt; Paul: Multiply by two,
that execution, context disappears,

335
00:18:05.026 --> 00:18:07.409
you go back into the global, and then you-
&gt;&gt; Will Sentance: Excellent,

336
00:18:07.409 --> 00:18:10.609
I'm gonna get rid of multiply
by two of my callstack.

337
00:18:10.609 --> 00:18:14.561
And we may know, therefore, return out
to global execution context and output,

338
00:18:14.561 --> 00:18:17.170
but doesn't, knows that.

339
00:18:17.170 --> 00:18:20.440
Because look, what's in my callstack now?

340
00:18:20.440 --> 00:18:23.869
Don't panic, it's global,
and back out to global.

341
00:18:23.869 --> 00:18:28.246
This allows JavaScript to keep
track of where is it in its code,

342
00:18:28.246 --> 00:18:29.825
what line is running.

343
00:18:29.825 --> 00:18:33.212
And then, when I finish in
the current execution context,

344
00:18:33.212 --> 00:18:36.870
where am I going to return back
to when I get rid of where I was?

345
00:18:36.870 --> 00:18:38.243
And the next layer down is
where I'm returning back to.

346
00:18:38.243 --> 00:18:42.185
All right, by the way, posh name for

347
00:18:42.185 --> 00:18:47.214
adding to a stack is not to add,
is not to throw on.

348
00:18:47.214 --> 00:18:48.730
It's to what Shawn?

349
00:18:50.180 --> 00:18:52.460
Victor?
What's important to add to a stack?

350
00:18:52.460 --> 00:18:53.111
Anyone know?

351
00:18:53.111 --> 00:18:53.632
&gt;&gt; Paul: [LAUGH]
&gt;&gt; Will Sentance: Push,

352
00:18:53.632 --> 00:18:57.785
that's the computer science technical
term for adding to a stack.

353
00:18:57.785 --> 00:18:59.710
And what's a posh name?

354
00:18:59.710 --> 00:19:01.850
Josh, you know about getting
something off a stack?

355
00:19:01.850 --> 00:19:02.680
&gt;&gt; Josh: A pop?
&gt;&gt; Will Sentance: Pop, exactly.

356
00:19:02.680 --> 00:19:03.309
Push and pop.

357
00:19:03.309 --> 00:19:04.897
Excellent, all right, good.

358
00:19:04.897 --> 00:19:07.480
Yeah, we talked about this.

359
00:19:07.480 --> 00:19:10.380
So let's have thumbs on
these core foundations.

360
00:19:10.380 --> 00:19:17.210
Thumbs is a widely used pedagogical
technique to indicate one's understanding.

361
00:19:17.210 --> 00:19:21.665
You lost me, I'm very clear,
I have a clarification question,

362
00:19:21.665 --> 00:19:23.480
everybody's thumbs out right now.

363
00:19:23.480 --> 00:19:25.740
It's okay to have clarifications.

364
00:19:27.010 --> 00:19:27.550
Nobody?

365
00:19:28.900 --> 00:19:30.730
Mm, very frustrating.

366
00:19:30.730 --> 00:19:31.325
All right, good.

367
00:19:31.325 --> 00:19:32.050
&gt;&gt; Paul: [LAUGH]
&gt;&gt; Will Sentance: Good.

