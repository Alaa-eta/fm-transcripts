WEBVTT

1
00:00:00.250 --> 00:00:05.900
&gt;&gt; Brian Holt: So far we've just kind of
been executing just little statements.

2
00:00:05.900 --> 00:00:09.120
If we had to do everything like this,
there's a term for what we're doing,

3
00:00:09.120 --> 00:00:10.620
it's called procedural programming.

4
00:00:10.620 --> 00:00:13.010
Again, one of those words that
you do not have to remember.

5
00:00:13.010 --> 00:00:16.070
It's just kind of FYI.

6
00:00:16.070 --> 00:00:20.850
If we had to do everything this way,
it would be kind of crappy [LAUGH], right.

7
00:00:20.850 --> 00:00:25.060
Because we'd have to write our programs
just entirely like a procedure, and

8
00:00:25.060 --> 00:00:27.050
that's far less fun.

9
00:00:27.050 --> 00:00:30.690
There's a thing in JavaScript called
functions, which is pretty common.

10
00:00:30.690 --> 00:00:35.190
Most programming languages have them,
and they basically encapsulate

11
00:00:35.190 --> 00:00:38.280
little pieces of logic that you
can reuse all over the place.

12
00:00:40.070 --> 00:00:42.559
So let's just dive right into it and
see what it looks like.

13
00:00:44.160 --> 00:00:50.001
So I have a function here called addTwo,
that accepts a number, right?

14
00:00:50.001 --> 00:00:51.976
So inside of these parentheses,

15
00:00:51.976 --> 00:00:55.651
this is all the input that this
function would accept, okay?

16
00:00:55.651 --> 00:01:03.063
So this one accepts one number and
then it returns that number plus two.

17
00:01:03.063 --> 00:01:07.057
So as you might imagine,
if I do addTwo to 5,

18
00:01:07.057 --> 00:01:12.648
what do you think I'm gonna get
down here for the final answer?

19
00:01:12.648 --> 00:01:13.985
7, right?

20
00:01:13.985 --> 00:01:17.652
Cuz it takes 5,
5 then becomes the number right here.

21
00:01:17.652 --> 00:01:22.556
So then it returns 5 plus 2,

22
00:01:22.556 --> 00:01:25.900
you get 7, right?

23
00:01:25.900 --> 00:01:28.739
I can go down here and

24
00:01:28.739 --> 00:01:37.970
say console.log(addTwo(100)).
&gt;&gt; Brian Holt: So

25
00:01:37.970 --> 00:01:42.476
what's cool about addTwo now is I
have this function that I can reuse

26
00:01:42.476 --> 00:01:43.830
all over the place.

27
00:01:43.830 --> 00:01:47.820
I write it once, and I get to reuse this
function over and over and over again.

28
00:01:47.820 --> 00:01:48.960
Which is really nice,

29
00:01:48.960 --> 00:01:52.550
because then I don't have to rewrite
this a bunch of different times.

30
00:01:52.550 --> 00:01:55.720
Now, this is totally worthless.

31
00:01:55.720 --> 00:01:57.940
There is absolutely no reason
that I would write addTwo.

32
00:01:57.940 --> 00:01:59.710
I would just normally
add two to something.

33
00:01:59.710 --> 00:02:04.151
That's not really that useful, but you can
make these functions quite involved that

34
00:02:04.151 --> 00:02:09.561
do a lot of things.
&gt;&gt; Brian Holt: So

35
00:02:09.561 --> 00:02:10.814
here's a really good one.

36
00:02:10.814 --> 00:02:14.483
I wrote this function called
greet that takes in a first name,

37
00:02:14.483 --> 00:02:16.190
a last name, an honorific.

38
00:02:16.190 --> 00:02:20.280
That's the term for
like mister, missus, miss,

39
00:02:20.280 --> 00:02:23.890
all of those things that's, doctor,
that's considered an honorific.

40
00:02:25.680 --> 00:02:27.240
And a greeting.

41
00:02:27.240 --> 00:02:31.060
And I return this really long string here,
right?

42
00:02:31.060 --> 00:02:36.120
So I can console.log down here greet
Brian, Holt, Lord and Salutations.

43
00:02:36.120 --> 00:02:39.023
And so
you see down here Salutations Lord Holt.

44
00:02:39.023 --> 00:02:41.659
I was having fun [LAUGH].

45
00:02:41.659 --> 00:02:44.700
I'm extremely pleased that you could join
us Brian, I hope you enjoy Lord Holt.

46
00:02:45.920 --> 00:02:50.880
Okay, and then down here, I do with
Jack Sparrow, Captain, and A-hoy.

47
00:02:50.880 --> 00:02:53.900
It says A-hoy Captain Sparrow.

48
00:02:53.900 --> 00:02:56.199
I feel ridiculous reading this out loud.
&gt;&gt; Group: [LAUGH]

49
00:02:56.199 --> 00:02:56.828
&gt;&gt; Brian Holt: Doesn't matter,

50
00:02:56.828 --> 00:02:57.645
we're still doing it.

51
00:02:57.645 --> 00:02:59.560
A-hoy Captain Sparrow.

52
00:02:59.560 --> 00:03:01.220
I'm extremely pleased you could join us,
Jack.

53
00:03:01.220 --> 00:03:04.824
I hope you enjoy your stay,
Captain Sparrow.

54
00:03:04.824 --> 00:03:06.710
But you can see that here,

55
00:03:06.710 --> 00:03:09.310
I didn't have to rewrite that
whole string every single time.

56
00:03:09.310 --> 00:03:13.610
I was able to use template strings and
just plug in the various variables, right?

57
00:03:15.880 --> 00:03:17.440
So does that make sense?

58
00:03:17.440 --> 00:03:19.600
See a little bit more how
functions can be useful.

59
00:03:19.600 --> 00:03:21.440
And they get even more involved than this.

60
00:03:21.440 --> 00:03:23.080
You can start doing some
really cool stuff with them.

61
00:03:25.160 --> 00:03:30.112
No questions so far?
&gt;&gt; Brian Holt: Okay.

62
00:03:33.350 --> 00:03:35.142
&gt;&gt; Brian Holt: So let's just kind of

63
00:03:35.142 --> 00:03:36.800
break mechanics.

64
00:03:36.800 --> 00:03:40.200
You say function to declare that
you're making a new function.

65
00:03:40.200 --> 00:03:41.770
This is the name of
the function right here.

66
00:03:41.770 --> 00:03:43.540
So this is something that you name.

67
00:03:43.540 --> 00:03:47.650
And again, try and
give this a really descriptive name.

68
00:03:48.750 --> 00:03:52.100
So greet is a pretty good one, because you
know that whatever comes back out of greet

69
00:03:52.100 --> 00:03:54.740
is going to be some sort of greeting,
right?

70
00:03:54.740 --> 00:03:56.310
Also a kind of a rule of thumb.

71
00:03:56.310 --> 00:03:59.520
This is not a hard and fast rule but
it's kind of a useful one.

72
00:03:59.520 --> 00:04:02.431
Generally, function names are verbs,
right,

73
00:04:02.431 --> 00:04:05.273
because the function does something,
right?

74
00:04:05.273 --> 00:04:09.671
So greet is a verb, add to you're
doing something to something, right?

75
00:04:09.671 --> 00:04:13.846
So a function is generally a verb, whereas
variable names are typically nouns, right,

76
00:04:13.846 --> 00:04:15.752
because it represents a thing, right?

77
00:04:15.752 --> 00:04:19.773
So firstName is a thing,
lastName is a thing, honorific is a thing.

78
00:04:19.773 --> 00:04:24.594
So generally variables are nouns,
generally functions

79
00:04:24.594 --> 00:04:30.542
are verbs.
&gt;&gt; Brian Holt: There's

80
00:04:30.542 --> 00:04:32.400
nothing that's gonna
make you do it that way.

81
00:04:32.400 --> 00:04:34.880
It's just a useful practice to get into.

82
00:04:38.000 --> 00:04:41.140
Let's talk about how you call functions.

83
00:04:41.140 --> 00:04:45.710
So whenever you invoke a function,
whenever you're using a function,

84
00:04:45.710 --> 00:04:48.740
the way that you say that is
you are calling a function.

85
00:04:48.740 --> 00:04:51.150
I don't actually really
know where that came from.

86
00:04:51.150 --> 00:04:53.651
That's just the name for it.

87
00:04:53.651 --> 00:04:56.624
Or you can say invoke, but
generally people say call.

88
00:04:56.624 --> 00:05:01.440
The way you do that is you
put parentheses after it.

89
00:05:01.440 --> 00:05:06.645
So even if this took in nothing.
&gt;&gt; Brian Holt: You would just

90
00:05:06.645 --> 00:05:11.566
do this.
&gt;&gt; Brian Holt: Let's just say this is 5.

91
00:05:13.180 --> 00:05:16.030
So even if I'm not giving it anything,
you just put

92
00:05:16.030 --> 00:05:20.180
empty parentheses at the end to signify
that you are calling the functions.

93
00:05:20.180 --> 00:05:22.396
So that's what those
parentheses at the end mean,

94
00:05:22.396 --> 00:05:24.330
it means that a function is being invoked.

95
00:05:24.330 --> 00:05:26.600
It makes sense?

96
00:05:28.250 --> 00:05:28.820
Okay.

97
00:05:28.820 --> 00:05:31.360
That will become important later

98
00:05:31.360 --> 00:05:34.070
because you can actually pass
around functions as well.

99
00:05:34.070 --> 00:05:36.350
We'll see that how that works in a bit.

100
00:05:36.350 --> 00:05:39.445
But you do need to put the parentheses
there if you're intending to call it.

101
00:05:39.445 --> 00:05:44.334
If I just put addTwo right here,
this is not useful.

102
00:05:44.334 --> 00:05:47.984
Because actually what happens is
now finalAnswer actually represents

103
00:05:47.984 --> 00:05:52.330
the function addTwo and
it's not actually invoking the function.

104
00:05:52.330 --> 00:05:53.781
It's a little confusing.

105
00:05:53.781 --> 00:05:55.795
And now final answer is
actually the function.

106
00:05:55.795 --> 00:05:59.750
So I can call finalAnswer,
which then will call the function.

107
00:06:01.230 --> 00:06:02.015
Again, we'll get there.

108
00:06:02.015 --> 00:06:05.120
If that doesn't make a ton of sense,
I have a section on this.

109
00:06:05.120 --> 00:06:11.923
So make sure you putting parentheses.
&gt;&gt; Brian Holt: Okay.

110
00:06:17.482 --> 00:06:18.909
&gt;&gt; Brian Holt: Call, yeah that's called

111
00:06:18.909 --> 00:06:21.920
calling a function, and
just look out for parentheses.

112
00:06:21.920 --> 00:06:23.550
Anytime you see a parentheses,

113
00:06:23.550 --> 00:06:25.700
you know that functions
are being invoked somewhere.

114
00:06:27.520 --> 00:06:30.421
Like for example, you've noticed
that console.log here, right,

115
00:06:30.421 --> 00:06:32.390
you put parentheses there.

116
00:06:32.390 --> 00:06:34.110
Log is a function, right?

117
00:06:34.110 --> 00:06:40.060
It's a function that's being called.
&gt;&gt; Brian Holt: Okay.

118
00:06:40.060 --> 00:06:41.870
So, log out your home.

119
00:06:41.870 --> 00:06:43.230
This is another function that I wrote.

120
00:06:43.230 --> 00:06:46.670
I put my home city, my home state,
my home country, right.

121
00:06:46.670 --> 00:06:48.720
And then I call log out your home here.

122
00:06:48.720 --> 00:06:51.949
I call it with my home city,
my home state, my come country, right.

123
00:06:51.949 --> 00:06:54.610
And then this gets passed
into logoutYourHome, right?

124
00:06:54.610 --> 00:06:58.524
It has city, state, and country.

125
00:06:58.524 --> 00:07:03.189
I'm calling consoleLog here,

126
00:07:03.189 --> 00:07:08.198
but I could have just as easily said

127
00:07:08.198 --> 00:07:13.554
logoutYourHome with I don't know,

128
00:07:13.554 --> 00:07:18.391
you could have said like Torino,

129
00:07:18.391 --> 00:07:21.845
which is in Piemonte and

130
00:07:21.845 --> 00:07:27.867
Italy.
&gt;&gt; Brian Holt: You are from Torino,

131
00:07:27.867 --> 00:07:29.690
Piemonte, Italy.

132
00:07:29.690 --> 00:07:35.110
I guess at that Italia,
cuz I did it in Italian, right?

133
00:07:37.080 --> 00:07:39.430
So you can either pass variables
into there, that works, or

134
00:07:39.430 --> 00:07:41.630
you can put strings directly in there.

135
00:07:41.630 --> 00:07:42.990
Both of those things work.

136
00:07:42.990 --> 00:07:48.180
Because myHomeCity represents a string,
so that those things you can

137
00:07:48.180 --> 00:07:52.080
put either the representation of it, or
you can put the direct raw data in there.

138
00:07:52.080 --> 00:07:52.790
Both of those work

