[00:00:00]
>> Brian Holt: Let's go onto arrays.
>> Brian Holt: Arrays are an ordered list of something, or anything. So here I have daysOfTheWeek, and I have them in order here. So that's a big key about arrays is there's order to an array, right? This is the first thing, this is the second thing, this is the third thing, right?

[00:00:26]
Whereas objects have no order, despite the fact that like I declared these in some order, inside of that object they're not stored in that order, right? So once it's declared in that order I can't them back out in that order, there's no guarantee of order at all with an object where as with arrays, it's very ordered.

[00:00:45]
So I can be guaranteed that if this the first thing here, this is the first thing I'm gonna get out of it as well.
>> Brian Holt: So if I look down here, when I console that logged out I get this array back that looks like that.
>> Brian Holt: Array's start at 0, okay?

[00:01:01]
So when I say days of the week 0, index 0 is the first element in the array. I know that's a little weird, but programmers always start at 0. If you remember when I was starting I said let i equal 0, just in general everyone starts at 0 and that's just the way it is and get use to it.

[00:01:23]
There is like one programming language that starts at 1 and everyone makes fun of it. [LAUGH] So anyway, just get used to the 0 index is the first thing, which makes index 1,as you can see here, index 1 is the second element in the array, so if I ask for index 1, I'm getting Tuesday.

[00:01:46]

>> Brian Holt: This actually makes a lot of the math easier, so in the end it will you will end up being grateful for this but just be aware that indexes start at 0, okay? So index 6 is the last element of the array, it's the seventh thing, so that will be Sunday.

[00:02:03]

>> Brian Holt: Questions?
>> Brian Holt: Okay, so this is how you access something in like the in the array, use the square brackets and you put a number in there.
>> Brian Holt: That's just how it works.
>> Brian Holt: So that's what those square brackets are for. Anything between square brackets, you'll notice that we declared these using square brackets, those are gonna be arrays.

[00:02:36]
Notice they don't have a key, they actually are getting a key. The key for this one it's implied by the order, so I gave this as the first thing, so it's key is actually 0. This one gets 1, this one gets 2. But I don't actually have to declare those things, they just get put there depending on what order I put them in, so it's implicit.

[00:03:02]

>> Brian Holt: Questions about that? Does it make sense? I think most people are looking pretty tired at this point in the day. [LAUGH] I don't blame you, it's okay.
>> Brian Holt: So arrays have a bunch of additional pieces of information, they have a bunch of those built-ins, right? That we were talking about before, they have a bunch of them.

[00:03:24]
So for example, I can ask, how many are there? So I can say prime numbers.length and I get 8. There are eight things in this array, so that means it goes from 0 to 7, cuz 7 would be the last thing of length 8.
>> Brian Holt: You can count 1, 2, 3, 4, 5, 6, 7, 8.

[00:03:48]

>> Brian Holt: So that's what length will give you, it's a property. So note, this is not a function, right? This is a property. There's no parenthesis at the end, it's not calling a function, it's just a property that's set on it, it's called length. Now, there is a function called join, if you wanna take an entire array and you wanna make one string out of it, you can call join.

[00:04:08]
And what join does, you give it some sort of delimiter, it's what it's technically called. But whatever I'm gonna put between each elements in the array, so I gave it this pipe space, right? So you can see here between each one of these, there's a space pipe space.

[00:04:28]
I could have easily put, I don't know, asterisks between it.
>> Brian Holt: I didn't know my font did that. [LAUGH] That's my font that makes it like the cute little wreath-looking thing. That's adorable.
>> Speaker 2: [LAUGH]
>> Brian Holt: But you can put whatever you want in here. If I was super vain I could put my name or something like that.

[00:04:50]
[LAUGH] Right, that's how it joins them together.
>> Speaker 2: [LAUGH]
>> Brian Holt: I'm not vain, though, right?
>> Brian Holt: Nope, not at all. Okay, questions?
>> Brian Holt: Okay.
>> Brian Holt: So what happens if I wanna add an element to an array? So I've created an array, and I wanna start putting things into it.

[00:05:12]
There's a thing called push, and what push does is it puts another element on the end of the array. So I have these courses right here, right? A bunch of courses that are on Frontend Masters, and then what I'll do is I'll do courses.push, and then I'll push another one on.

[00:05:30]
So I give it another object to put on there. And then if I look down here, you'll see that Sean Larkinn's course is on the end here and that's the one I pushed on here. So that's what push does, it just shoves another one on the end.
>> Brian Holt: You might ask, what happens if I wanna put it on the front?

[00:05:52]
There's a function, I'm not kidding, unshift, I think it is, is literally the worst name for that. Why is it called unshift? Well, if you wanna remove something from the front of the array, it's called shift. And I'm sure they were in a room, someone was like, well, what's the opposite of shifting?

[00:06:10]
Unshifting and so they called it that. [LAUGH] Anyway, you never use it, but just so you know it's out there, you use push quite a bit, because it's just putting something on the end, okay? What happens if I want to overwrite something? So on here I have my course Complete Intro to React, I'm about to come back and do v4 a bit, so what I can do here is I can reference, courses[2] =, right?

[00:06:36]
So is assigned, if you remember, that's what we said that that's gonna be. And so if I look down here you can see it's overwritten that one by setting that to be something else. Makes sense?
>> Brian Holt: I actually could have even gone in here and done this. So rather than assigning that I could have said course two, and then I could have said .course.

[00:07:01]

>> Brian Holt: And then just change that part.
>> Brian Holt: So the only thing I changed, because the teacher name didn't change, I have not changed my name since the last time I was here, as far as I know. And so now I can just say, course2.course equals this.
>> Brian Holt: And if you go down here and look, sure enough, just the course name has changed, does that make sense?

[00:07:29]

>> Brian Holt: Cool, because course2 is an object, right? Maybe that will make more sense with like Brian's course.
>> Brian Holt: Courses[2] and then done BrianCourse.
>> Brian Holt: Sometimes it's like if that helps you to separate it into two lines. Like to pull it out in one line, and then the second line to modify it, go right ahead.

[00:08:04]

>> Brian Holt: Make your code as readable as possible for yourself, and you can see it down here it still works the same way.
>> Brian Holt: So we talked about push, we had talked about overriding. That's a good one. [LAUGH] So yeah, if you override something it will throw away what was there before and it will replace it with something else.

[00:08:32]

>> Brian Holt: So what happens if I wanted to go through and individually log something in the array? Well, I've actually already given you all the tools to do this, we can use a for loop to do it.
>> Brian Holt: So if we go right here and I say for, let i equal 0, i is less than cities.length, right?

[00:08:48]
Because cities.length in this particular case is five, right? That means the last element in the array is index 4, right? Cuz it's always length minus 1 is the last element in the array. So don't go past cities.length i ++ and I can do console.log cities of i, right?

[00:09:10]
Because that's going to change every single iteration of the array. So it's gonna do it on index 0, then index 1, then index 2, 3, 4, and then it's gonna finish. So that's how you get down here, the first ones, Seattle, San Francisco, Salt Lake, Amsterdam, Hong Kong.

[00:09:28]

>> Brian Holt: Any questions about method one here?
>> Brian Holt: I'm trying to decide if people are asleep or if this is just being perfectly explained.
>> Speaker 2: [LAUGH]
>> Speaker 3: I guess I don't understand why fully, or how you'd utilize that. Are you just saying, to pull one of those items out of the list or-

[00:09:56]

>> Speaker 3: To add.
>> Brian Holt: Like, why are we doing this?
>> Speaker 3: Yeah, that part, method one versus method two, maybe I just messed up.
>> Brian Holt: Yeah, ignore method two for the moment.
>> Speaker 3: Okay.
>> Brian Holt: So const city = cities[i], so this is one individual city right now. I'm doing console.log city and say like city.toUpperCase.

[00:10:25]
There you go and you can see the difference. So this little bit right here pulls out for one iteration, one loop, right? It pulls out the city that's at that particular index, right? So, for city of 0, it pulls out Seattle, right? So now, city of Seattle, and it console.log city Seattle toUpperCase, so that's why you get Seattle, right here.

[00:10:49]
That loop finishes, this get's i ++, right? So now it's index 1, right? We go back again. Cities of i, this is gonna be cities of 1, right? So it pulls out San Francisco. Then it's gonna do console.log, San Fransisco, toUpperCase and that's how we get the San Fransico down here.

[00:11:07]
Make sense?
>> Speaker 3: Yep.
>> Brian Holt: Cool.
>> Brian Holt: So you can shortcut that by just saying cities of i right here. Cities[i], and then we can cut this out here.
>> Brian Holt: It's just a little bit more compressed
>> Speaker 3: Okay.
>> Brian Holt: But if you find it more readable to do the other way, please do.

[00:11:32]

>> Brian Holt: Okay, so that is using a for loop. This is something we've used before. We're used to seeing i and for loops and things like that. Let's talk about method two. Method two is a thing called forEach. This is a function that's built into arrays, right? And every array has a method on it.

[00:11:53]
Let's talk about the word method for just a second. I probably have been using that before. A function is just a function. We've talked about that. A method is a function on an object.
>> Brian Holt: Or you can also just use method to mean pretty much function. Technically it's a function on an object, but I hear people use the word method just all the time.

[00:12:15]
So more or less when I say the words method just assume that I mean function. There's also like procedure, there's a bunch of words for functions. Most of the time people say either function or method. It varies language by language. There's some languages that use the word like method more.

[00:12:31]
Does that make sense? Okay, sometimes it's just that vocabulary that sometimes I just have a hard time unraveling.
>> Brian Holt: Okay, so forEach is technically a method, it's a function, okay? And it's a function that you give another function to, right? So this is what we would call an anonymous function.

[00:12:55]
And this function is going to be run once on every item in the array, right? In fact let's just do this. If I do let numberOfTimesRan, right now it's been done zero times. And I'm gonna do NumberOfTimesRan++, so every time this function gets run, this is gonna get incremented.

[00:13:23]
So if I come down here at the bottom and I say console.log[numberOfTimesRan], what's that number gonna be?
>> Brian Holt: How many items are in the array? Five. So down here, five, right? So this function gets run five times. One time for each item in the array and then down here I'm saying, console.log(city).

[00:13:49]
City is being injected as a parameter from cities and that's what forEach does for you, that's the point of forEach. So that´s why you´re able to see Seattle, San Francisco. Let's just make this to make it even more clear, toLowerCase.
>> Brian Holt: And you can see here these are the ones that are being logged out by forEach.

[00:14:15]
This is two different ways to accomplish the same goal. And this is what forEach does for you.
>> Brian Holt: Questions about forEach?
>> Speaker 4: Is there a preferred method when you're programming to use forEach or, forLoop?
>> Brian Holt: It depends on who you ask for sure. It's definitely a matter of preference.

[00:14:34]
I use forEach constantly and use for loops far less. This is a personal preference. This is more towards what they call functional programming, which I'm a big fan of and there are other people that don't like it quite as much. If you ask, like for example, a hardcore Java developer, probably far less a fan of functional programming.

[00:14:56]
But if you ask someone that's like a Haskell programmer or something like that, they would laugh at you for using a for loop because they're a jerk. [LAUGH] So do what works for you. If one of these methods feels better or looks better to you then absolutely do that one.

[00:15:17]

>> Brian Holt: In fact, I'm curious, who prefers method one? Just raise your hands here in the room. And who here prefers method two? And who here just wants to go home? [LAUGH].
>> Speaker 4: [LAUGH]
>> Brian Holt: Okay, most of you, cool.
>> Speaker 5: I'm used to method one, so I just have to get used to a forEach-

[00:15:32]

>> Brian Holt: Yeah.
>> Speaker 5: Index, you can show right there you can use an index just by creating your own counter for it, right?
>> Brian Holt: Yeah, so actually what you can do, there's a phantom other parameter here. That it's also injecting, and I here to have been ignoring. And this index, if I just did index, you can see here it actually is injecting the index as well.

[00:15:59]

>> Brian Holt: This is the tip of an iceberg of functional programming. There's another Kyle Simpson course called Functional Programming Light. There's also Brian Longster's course which are both phenomenal courses on Frontend Masters. Brian Longster also has a book, so does Kyle. They're all really good ways of getting into functional programming.

[00:16:20]
It's more stuff like this, like method two up here. I will say that I've never taught this to developers on the first time that they're learning to program. And it's because I used to be scared of functional programming. And at some point I realized that this is actually a really good way for people to get into it and get exposed to it early.

[00:16:39]
Because it took me probably five years into my career before I started doing programming like this. And my code is much better now, I think.
>> Speaker 3: That's why I'd actually recommend Bianca's, fundamentals to functional JavaScript course.
>> Brian Holt: Okay, she has this, too, I forgot that.
>> Speaker 3: Because she tries to cover that bridge between the basics of JavaScript to starting to use functional methods.

[00:16:59]

>> Brian Holt: Totally, so yeah, definitely check out Bianca's course.
>> Brian Holt: I definitely endorse Bianca as a teacher in general. A lot of my teaching style is based on hers. So I like to say I borrowed it but I definitely just stole it. [LAUGH] She’s phenomenal.
>> Brian Holt: Questions about this?

[00:17:21]
I don't really test you on this. There's a lot more deeper rabbit hole to go down here, I just wanted to expose it to you early. So the journey will feel impossible to you sometimes, so if this feels hard it's because it is. That's okay, but Jerome is a really awesome guy.

[00:17:37]
That is Objects and Arrays.

