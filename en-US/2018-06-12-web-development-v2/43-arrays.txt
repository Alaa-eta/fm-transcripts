[00:00:00]
>> Brian Holt: Let's go onto arrays.
>> Brian Holt: Arrays are an ordered list of something, or anything. So here I have days of the week, and I have them in order here. So that's a big key about arrays, is there's order to an array. This is the first thing, this is the second thing, this is the third thing.

[00:00:26]
Whereas objects have no order. Despite the fact that I declared this in some order, inside of that object they're not stored in that order. So, once it's declared in that order, I can't get them back out in that order. There's no guarantee of order at all with an object, whereas with arrays, it's very ordered.

[00:00:45]
So I can be guaranteed that if this is the first thing here, this is the first thing I'm going to get out of it as well. So if I look down here when I console, log that, I get this array back that looks like that.
>> Brian Holt: Arrays start at zero.

[00:01:01]
So when I say days of the week zero this is, index zero is the first element in the array. I know it's a little weird, but programmers always start at zero. If you remember when I was doing my for loop, I said for or let i equal zero just in general everyone starts at zero.

[00:01:19]
And that's just the way it is, and get used to it. There's like, one programming language that starts at one, and everyone makes fun of it. [LAUGH] So anyway, just get used to the zero index is the first sting, which makes index one. As you can see here, index one is the second element of the array, so if I ask for index1, I'm getting Tuesday.

[00:01:46]
This actually makes a lot of the math easier. So in the end you'll be end up being grateful for this, but just be aware that index is started 0. So index6 is the last element of the array, it's the 7th things that will be Sunday
>> Brian Holt: Questions?
>> Brian Holt: So this is how you access something in the array.

[00:02:13]
You use these square brackets, and you put a number in there, that's just how it works.
>> Brian Holt: So that's what those square brackets are for. Anything between square brackets, you notice that we declare these using square brackets. Those are gonna be arrays. Notice they don't have a key, they actually are getting a key.

[00:02:39]
The key for this one It's implied by the order, so I gave this as the first thing, so it's key is actually zero. This one gets one, this one gets two. But I don't actually have to declare those things. They just get put there depending on what order I put them in, so it's implicit.

[00:03:02]
Questions about that? Does it make sense? I think most people are looking pretty tired at this point of the day. I don't blame you, it's okay.
>> Brian Holt: So arrays have a bunch of additional pieces of information. They have a bunch those built-ins, that we were talking about before.

[00:03:23]
They have a bunch of them. So, for example, I can ask How many are there? So I can say prime numbers dot length, and I get eight, there are eight things in this array. So that means it goes from zero to seven, because seven would be the last thing of length eight.

[00:03:41]

>> Brian Holt: You can count one, two, three, four, five, six, seven, eight.
>> Brian Holt: So that's what length will give you, it's a property. So note this is not a function, this is a property. There's not parenthesis at the end, it's not calling a function. It's just a property that's set on it's called length.

[00:04:01]
Now there is a function called join. If you wanna take an entire array, and you wanna make one string out of it, you can call join. And what join does, you give it some sort of, what do they call, delimiter is what it's technically called. But it's whatever I'm gonna put between each element in the array.

[00:04:18]
So I gave it this space pipe space. So you can see here between each one of these there's a space, pipe space. I could have easily put like, I don't know, asterisk between it.
>> Brian Holt: I didn't know my font did that. That's my font that makes it like a cute little re-flicking thing, that's adorable.

[00:04:44]

>> Speaker 2: [LAUGH]
>> Brian Holt: But you can put whatever you want in here, if I was super vain I could put my name or something like that. Right, that's how it joins in together. I'm not vain though, right? No, not at all. Okay, questions? Okay. So what happens if I wanna add an element to an array?

[00:05:08]
So I've created an array and I wanna start putting things in to it, there's a thing called Push. And what Push does is, it puts another element on the end of the array. So I have these courses right here, a bunch of courses that are on front of Master's.

[00:05:25]
And what I'll do is I'll do courses.push and then I'll push another one on. So I'll give it another object to put on there. And if I look down here, you'll see that Sean Larkinn's course is on the end here, and that's the one I push on here.

[00:05:41]
So that's what Push does, it just shoves another one on the end.
>> Brian Holt: You might ask, what happens if I wanna put it on the front? There's a function, I'm not kidding, Unshift, I think. It is literally the worst name for that. Why is it called unshift? Well, if you want to remove something from the front of an array it's called shift, and I'm sure in a room somewhere, well, what's the opposite of shifting?

[00:06:11]
Unshifting! And so they called it that, anyway, you never use it, but just so you know it's out there. You use push quite a bit, cuz it's just putting something on the end. What happens if I want to overwrite something there? So like on here I have like my course here, complete intro to react.

[00:06:29]
I'm about to come back and do v4 of it so what I can do here, is I can reference courses two equals, right. So is assigned, if you remember, that's what we said that that's going to be. And so, if I look down here, you can see it's overwritten that one, and yeah, by setting that to be something else, make sense?

[00:06:50]
I actually could have even gone in here and done this, so rather than assigning that I could have said course 2, and then I could have said .course, and then just change that part.
>> Brian Holt: So the only thing I changed, because the teacher name didn't change. I have not changed my name since last time I was here, as far as I know, and so now I can just say course[2].course equals this.

[00:07:20]
If you go down here and look, sure enough just the course name has changed. Does that make sense?
>> Brian Holt: Cool, cuz course[2] is an object, right? Maybe it would make more sense if briansCourse = courses[2] and then briansCourse
>> Brian Holt: Sometimes, if that helps you to separate it into two lines, pull it out in one line and then the second line to modify it, go right ahead.

[00:08:04]
Make your code as readable as possible for yourself, you can see it down here it still works the same way.
>> Brian Holt: So we talked about Push, we talked about overriding, well, that's a good one [LAUGH]. Yeah, if you override something, it'll throw away what was there before, and it will replace it with something else.

[00:08:32]

>> Brian Holt: So what happens if I wanted to go through and individually log something in the array? Well I've actually already given you all the tools to do this, we can use a for loop to do it. So if we go right here and I say for {let i = 0; i < cities.length;, because cities.length in this particular case is five, right.

[00:08:53]
That means the last element in the array is index four, because it's always length minus one is the last element in the array. So don't go past cities.length i++ and I can do console.log cities of i, cuz that's gonna change every single iteration of the array. So it's gonna do it on index 0, then index 1, then index 2, 3, 4, and it's gonna finish.

[00:09:17]
So that's how you get down here, the first ones, Seattle, San Francisco, Salt Lake, and Hong Kong.
>> Brian Holt: Any questions about method 1 here?
>> Brian Holt: I'm trying to decide if people are asleep or if this is just being perfectly explained.
>> Speaker 2: [LAUGH]
>> Speaker 3: I guess I don't understand why fully, or how you utilize that.

[00:09:49]
Are you just saying to to pull one of those items out of the list or to add.
>> Brian Holt: Like why are we doing this?
>> Speaker 3: Yeah, that part. Method one versus method two, maybe I just missed it.
>> Brian Holt: Yeah, ignore method two for the moment. So CONST CITY equals cities[i].

[00:10:12]
So this is one individual city right now. I'm doing console.log(city). Let's say city.toUpperCase for, there you go, and you can see the difference. So this little bit right here pulls out for one iteration, one loop. It pulls out the city that's at that particular index, so for a city of zero, it pulls out Seattle.

[00:10:41]
So now city is Seattle and it console.logs Seattle to upper case, so that's why you get Seattle right here. That loop finishes, this gets i plus plus. So now it's index one, we go back again. Cities of i, this is going to be cities of one, so it pulls out San Francisco.

[00:11:00]
Then it's going to be console.log San Francisco, two uppercase. And that's how we get San Francisco down here.
>> Speaker 3: Okay.
>> Brian Holt: Make sense?
>> Speaker 3: Yep.
>> Brian Holt: Cool so that's, you can short cut that by just saying, cities of I right here. Cities of i, and then we can cut this out right here, it's just a little bit more compressed.

[00:11:27]
But if you find it more readable to do it the other way, please do
>> Brian Holt: Okay, so that is using a for loop. This is something that we've used before, we're used to seeing i in for loops and things like that. Let's talk about method two. Method two is a thing called for each, this is a function that's built into arrays.

[00:11:50]
So every array has a method on it. Let's talk about the word method for just a second. I probably have been using that before, a function is just a function, we've talked about that. A method is a function on a object, or you can also just use method to mean pretty much function.

[00:12:08]
Technically it's a function on an object, but I hear people use the word method just all the time. So more or less, when I say the word method, just assume that I mean function. There's also procedure, there's a bunch of words for functions. Most of the time, people either say function or method, and it varies language by language.

[00:12:28]
There's some languages that use the word method more, does that make sense? Sometime it's just that vocabulary that sometimes I just have a hard time unraveling. So for h is technically a method it's a function, and it's a function that you give another function to. So this is what we would call an anonymous function.

[00:12:55]
And this function is going to be run once on every item in the array, so this method, in fact let's just do this. If I do, let numberofTimesRan, right now it's been done zero times. And I'm gonna do numberOfTimesRan++. So every time this function gets run, this is gonna get incremented.

[00:13:23]
So if I come down here at the bottom and I say console.log(numberOfTimesRan), what's that number gonna be? How many items are in the array? Five so down here five, so this function gets run five times. One time for each item in the array, and then down here I'm seeing console.logcity.

[00:13:49]
City is being injected as a parameter from cities. And that's four each does for you, that's the point of four each. So that why you're able to see Seattle, San francisco, let just make this, to make it even more clear to lower case
>> Brian Holt: And you can see here, this is the ones been logged out by four each.

[00:14:15]
This is two different ways to accomplish the same goal. And this is what for each does for you. Questions about for each?
>> Speaker 4: Is there a preferred method when you're programming, to use the for each or the loop?
>> Brian Holt: It depends on who you ask, for sure. It's definitely a matter of preference.

[00:14:34]
I use for each constantly and use for loops far less, this is a personal preference. This is more towards what they call functional programming, which I'm a big fan of, and there are other people that don't like it quite as much. If you ask, for example, a hard core Java developer, probably far less a fan of functional programming.

[00:14:56]
But if you ask someone that's a Haskell programmer, or something like that. They would laugh at you for using the four loop because they're a jerk. [LAUGH] So, do what works for you. If one of these methods feels better or looks better, then you then absolutely do that one.

[00:15:17]
In fact I'm curious, who prefers method one? Just raise the hands here in the room, and who here prefers method 2? And who here just wants to go home? [LAUGH] Okay, most of you. Cool.
>> Speaker 5: [CROSSTALK] used method 1, does that have to be used for each?
>> Brian Holt: Yeah.

[00:15:33]

>> Speaker 5: Index, you just showed right there, you can use an index just by creating your own counter for it.
>> Brian Holt: Yeah, actually, what you can do, there's a phantom other parameter here. That it's also injecting, and I've hereto been ignoring, and this index if I just did index comma space, you can see here it actually is injecting the index as well.

[00:16:00]
This is like the tip of an iceberg of functional programming. There's another Kyle Simpson course, called Functional Programming Lite. There's also Brian Lonsdorf's course, which are both phenomenal courses on Frontend Masters. Brian Lonsdorf also has a book, so does Kyle. They're all really good ways of getting into functional programming.

[00:16:21]
It's more stuff like this, like method two up here. I will say that I've never taught this to developers on the first time that they're learning to program, and it's because I used to be scared of functional programming. And that at some point, I realized this is actually a really good way for people to get into it and to get exposed to it early.

[00:16:39]
Because it took me probably five years into my career, before I started doing programming like this. And my code is much better now, I think.
>> Speaker 6: That's why I'd actually recommend Bianca's Fundamentals to Functional Javascript course-
>> Brian Holt: Okay. She has this, but I forgot about it.
>> Speaker 6: Because it kinda tries to cover that bridge between the basics of Javascript, to starting to use functional methods.

[00:16:59]

>> Brian Holt: Totally, so yeah, definitely check out Bianca's course. I definitely endorse Bianca as a teacher in general. A lot of my teaching style is based on hers. So I like to say I borrowed it, but I definitely just stole it. [LAUGH] She's phenomenal.
>> Brian Holt: Questions about this? I don't really test you on this.

[00:17:23]
There's a lot more deeper rabbit hole to go down here, I just wanted to expose it to you early on. So the journey will feel impossible some times, so if this feels hard, it's cuz it is. That's okay. But Jerome's a really awesome guy. That is objects and arrays.

