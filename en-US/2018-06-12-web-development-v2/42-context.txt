[00:00:00]
>> Brian Holt: Okay, so let's talk about context. You're gonna find context has a similar feel to scope. They are different. But you apply a lot of the same thinking. Okay, so I have this me object. It has a name. It has a location. And then it has a getAddress function associated with it.

[00:00:29]
It would be really nice if this getAddress function could reference other pieces of data attached to my object, right? That would make sense. Because I wanna be able to return to a well-formatted address. So that's what this getAddress does, it does something you could put on a post label.

[00:00:48]
So the way that you do that is you use something called this. And this refers to whatever object it's on. So when I use this inside of getAddress, it refers to me, right? Because that's what it's on. If I had a function inside a location.
>> Brian Holt: I could even do like I don't know getCityAndState function

[00:01:21]

>> Brian Holt: And that would return this.city, this.state, right? Cuz what's this doing, this refers to, so this this. [LAUGH] This this refers to location cuz that function is on the location object here, so it refers to not the whole object, it refers to just the location object. The general rule of thumb, which, this is an imperfect rule, is it's the closest object, right?

[00:02:12]
Or like the nearest object that it's within, that that's what this refers to. Now, that's not always true. And I would invite you to take Kyle Simpson's courses. He explains this really well for Frontend Masters. He also has a book series called You Don't Know JavaScript, and it goes into that really well.

[00:02:34]
It's free on GitHub. Or you can buy it from O'Reilly. And he really gets deep into this. Context in JavaScript, it's a deep rabbit hole. It's a really deep rabbit hole. But suffice to say, in this particular thing, your intuition here is going to be correct, that this refers to me up here.

[00:02:58]

>> Brian Holt: Do we follow so far? Okay. So what happens if I refer to this outside of an object? Like right here, on line 1, where I just refer to this, it's not inside of an object. Well, JavaScript executes in what's called a global scope, right? If you're in a browser, the name of that is window.

[00:03:22]
That's just what it happens to be called, it refers to the entire window. So if I like, I'm in here and I say window, right, window is like the entire window that I'm inside of. It's the global context, and if I do this, notice that it's the same.

[00:03:40]
In fact I can say this === window, and it's gonna say true.
>> Brian Holt: Okay? So the global context in this particular case is window. We're gonna get into Node at the end of the course today, in a couple of hours. And in that case, it's not called window, it's called global.

[00:04:05]
But it depends on where you're running. And everything we've done so far has so far been inside of a browser. So window has been the global context this entire time. So window has like a bunch of stuff for you. It has more of these kind of quote unquote built-ins.

[00:04:23]
So for example, it has like this scrollY. When you're scrolling up and down on a browser, it has your scroll position and you can actually ask the window for that. So, this executes as soon as I open the page, so when I first open the page it's at 0, 0.

[00:04:40]
If I change this right now, it's going to rerun the code, and this is gonna be a different number. It's gonna be how far down the page I am, so if I hit Delete, notice that I'm a lot further down the page now. Now, if I change this right now, it still says that because I haven't scrolled any.

[00:04:58]
If I scroll a little bit more and I change it again, it's gonna be a different number, right? So that's my scroll position on the page. That's how many pixels I'm down on the page. There's also a scrollX as well, as you might imagine. And that's how far I've been scrolling side to side.

[00:05:13]
If you notice, I actually have disallows you from scrolling side to side, so that's why it's always going to be 0. But, if I didn't disallow that it would also tell you where you're scroll is on the x-axis, as well. Make sense? So, there is a bunch of stuff like this, if you come in here again, if you say window., you can see here, it's got a ton of stuff on it, a ton.

[00:05:41]

>> Brian Holt: Okay? I don't even know what a fifth of those are. So you don't have to know what they are.
>> Brian Holt: Yeah, I gave you a link down here to Kyle's,
>> Brian Holt: House course on it. I didn't. I need to go fix that. I will put a link to Kyle's course on here, but you can also just check out Frontend Masters, they've got a bunch of stuff from Kyle Simpson.

[00:06:08]
And he is the king of teaching this stuff. Questions about objects, or context, that's what we were talking about. Or objects, you can ask about objects, I'm okay with that too.
>> Brian Holt: Context is hard, and it gets harder because,
>> Brian Holt: When context breaks down, and it's really not obvious.

[00:06:38]

>> Brian Holt: So the deeper rule of thumb is it matters where a function's called. And in what context a function is called and how a function is called. So there's a bunch of ways you can fiddle with context, and it's subtle and insidious. And so my advice to you is as much as possible do not rely on this and in context.

[00:07:05]
Rather, pass those things in as variables, right. So what I could have done here for this getAddress, I could have made getAddress a function that you passed in an object to that read things off of the object, right? So I would have pulled getAddress totally off as its own function.

[00:07:25]

>> Brian Holt: That took him some sort of person, right? And then, it returned this for that person, right? This would be a far better design pattern than putting a getAddress function on the person. Personal opinion, but also, it's right, so just do that. [LAUGH] Just kidding. [LAUGH] Cool. Does that make sense?

[00:07:48]
It's just a better programming practice for JavaScript because this is really easy to mess up.

