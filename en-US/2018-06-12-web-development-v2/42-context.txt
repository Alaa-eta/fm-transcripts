[00:00:00]
>> Brian Holt: Okay, so let's talk about context. You're gonna find context has a similar feel to scope. They are different. But you apply a lot of the same thinking. Okay, so I have this me object. Has a name. It has a location. And then it has a getAddress function associated with it.

[00:00:29]
It'd be really nice if this getAddress function could reference other pieces of data attached to my object, right? That would make sense. Because I wanna be able to return to a well-formatted address. So that's what this getAddress does, it does something you can put on a posting label.

[00:00:48]
So the way that you do that is you use something called this, and this refers to whatever object it's on, so when I use this inside of getAddress, it refers to me because that's what it's on. If I had a function inside a location, I can even do getCityandState function.

[00:01:21]

>> Brian Holt: And I'll write return.
>> Brian Holt: This, dot, city,
>> Brian Holt: Comma,
>> Brian Holt: This, dot, State,
>> Brian Holt: Right? Cuz what's this doing? This refers to, so this this. [LAUGH] This this refers to location, cuz that function is on the location object here so it refers to not the whole object, it refers to just the location object.

[00:02:04]
The general rule of thumb, which this is an imperfect rule, is it's the closest object right? Or the nearest object that it is within, that that is what this refers to. Now, that's not always true
>> Brian Holt: I will invite you to take Kyle Simpson's courses. He explains this really well, for Front End Masters.

[00:02:30]
He also has a book series called You Don't Know JavaScript and it goes into that really well. It's free on GitHub or you can buy it from O'Riley. And he really gets deep into this. Context in JavaScript can be, it's a deep rabbit hole. It's a really deep rabbit hole.

[00:02:47]
But suffice to say, in this particular thing, your intuition here is going to be correct, that this refers to me up here.
>> Brian Holt: We follow so far? Okay.
>> Brian Holt: So what happens if I refer to this outside of an object, right? Select right here on line one, where I just referred to this.

[00:03:11]
It's not inside of an object. Well, JavaScript executes in what's called the global scope, right? If you're in a browser the name of that is Window. That's just what it happens to be called, it refers to the entire window. So if I like I'm in here and I say, Window, right?

[00:03:31]
Window is like the entire window that I'm inside of. It's the global context. And if I do this, notice that it's the same. In fact I can say this === window. And it's gonna say true.
>> Brian Holt: Okay. So the global context in this particular case is window. We're gonna get into node at the end of the course today.

[00:03:58]
In a couple hours and in that case it's not called window, it's called global. It depends on where you're running. And everything we've done so far has so far been inside of a browser, so window has been the global context this entire time. So Window has a bunch of stuff on it for you.

[00:04:20]
It has more of these, kind of, quote, unquote built-in's. So, for example, it has this scroll y, when you're scrolling up and down on a browser it has your scroll position and you can actually ask the window for that. So, that this executes as soon as I run the, open the page, so when I first open the page, it's at zero, zero.

[00:04:40]
If I change this right now, it's going to rerun the code and this is going to be a different number, it's gonna be how far down the page I am. So if I hit delete, notice that I'm a lot further down the page now. Now, if I change this right now, it still says that because I haven't scrolled any.

[00:04:57]
If I scroll a little bit more, and I change it again, it's gonna be a different number, right? So it's my scroll position on the page. That's how many pixels I'm down on the page. There's also a scroll x as well, as you might imagine. That's how far I've been scrolling side to side.

[00:05:13]
If you noticed, I actually have disallowed you from scrolling side to side. So that's why it's always going to be zero. But if I didn't disallow that, it would also tell you where your scroll is on the x-axis as well.
>> Brian Holt: Make sense? So there's a bunch of stuff like this.

[00:05:29]
If you come in here again, if you say window., you can see here it's got a ton of stuff on it, a ton.
>> Brian Holt: Okay, I don't even know what a fifth of those are. So you don't have to know what they are.
>> Brian Holt: Yeah, I give you a link down here to Kyle's,

[00:05:58]

>> Brian Holt: Kyle's course on, I didn't I need to go fix that. I will put a link to Kyle's course on here but you can also just check out Front End Masters. They got a bunch of stuff from Kyle Simpson and he is the king of teaching this stuff.

[00:06:14]

>> Brian Holt: Questions about objects, or context? That's what we were talking about [LAUGH]. Or objects you can have some with objects I'm okay with that too.
>> Brian Holt: Context is hard and it gets harder because when context breaks down and it's really not obvious.
>> Brian Holt: So the deeper rule of thumb, is it matters where a function's called.

[00:06:45]
And in what context a function is called, and how a function is called, so there's a bunch of ways you can fiddle with context, and it's subtle and insidious. And so my advice to you is as much as possible, do not rely on this and in context, rather pass those things in as variables, right?

[00:07:09]
So, what I could have done here for this getAddress, I could have made getAddress a function that you passed in an object to that read things off of the object, right? So I would've pulled getAddress off totally as it's own function.
>> Brian Holt: That took in some sort of person, right?

[00:07:30]
And then it returned this for that person. Thus we have a far better design pattern than putting a getAddress function on the person, personal opinion, but also, it's right, so just do that. [LAUGH] Just kidding. [LAUGH] Cool, that make sense? It's just a better programming practice for JavaScript because this is really easy to mess up.

