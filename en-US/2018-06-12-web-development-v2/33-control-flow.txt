[00:00:00]
>> Brian Holt: So lets get into something called control flow. You don't really have to remember the word control flow. It is what is called but it's not really important. More commonly is just called if statements. So, here's a really really simple one, so I have this const called skyIsBlue.

[00:00:19]
And I set it to true, so then I say here, I ask a question, that's what if statements allow you to do. They're called conditionals because if something is true than it'll do one thing, if something is not true it will do something else. I think it follows, so if, and then I ask is sky is blue?

[00:00:38]
And sky is blue is true, right? So it's going to do the first block. So it's gonna go into here and say console.log ("The sky is blue!");. Otherwise, it's gonna say console.log ("The sky is _ not blue?");. And it's gonna ask a question, because you have problems if that's not true.

[00:01:00]
So you can see here only one thing is logged, only this first block. That is a word that you should probably remember, block. This first block is run, so everything between the curly braces, I could have multiple things here, too. So if I have five of those, you notice that it's gonna log out a bunch of those, and it doesn't log out anything there.

[00:01:18]
How do we feel about that so far? Nothing in the else block gets run, that's what the else block does. It says, if this thing is not true, then do this. Now if I change skyIsBlue to false, what do you expect to happen?
>> Brian Holt: It doesn't run this block, and it only runs this block.

[00:01:46]

>> Brian Holt: So that's what conditionals are for, for doing something given some sort of condition.
>> Brian Holt: Now, you can have anything in here that evaluates to true or false in some ways. Whatever happens inside the parenthesis, the condition as you would probably call it, has to eventually come down to, is this true or is this false.

[00:02:08]
So you might imagine what happens if you were trying to log out for temperatures. Sure, whatever, we're just gonna do it right here, so if I had const temperature
>> Brian Holt: Today =. I think I saw in Minneapolis, it's gonna get up to be 86, which is way too hot.

[00:02:31]
[LAUGH] So if temperatureToday,
>> Brian Holt: === That's annoying, I should probably change the font on this. So I have a special font that works here, if I put three equal signs together, so these are three equal signs. It combines them into this like special triple equals thing, let me just change this, cuz this is gonna confuse people.

[00:03:04]
That's a what did I decided the was a good idea? Bryan was not thinking, okay, body, I don't think I even did that. I think that's what this comes with, how annoying. Code mirror Rules, code, no. Okay, now you can see it's three equal signs. [LAUGH] My special font combines them into that one glyph, that's like three equal signs, it's really nice for me but it's probably terrible to teach with.

[00:03:43]
So just so you know, this is three equal signs. So if temperature === 86, then I'm gonna console.log
>> Brian Holt: it's too, let's do double quotes, it's too damn hot.
>> Brian Holt: Okay, so === is asking the question, is this temperatureToday equal to this. So the answer, is it equal to that?

[00:04:24]
Yes, what is it saying here? Yeah, you need to close that. So now here it's saying it's too damn hot. That \ is for, don't worry about it. It's escaping the variable to make sure that it doesn't break anything. But, suffice it to say it's not something you really need to care about, at this juncture in time.

[00:04:46]
You know what? Now you definitely don't have to worry about it.
>> Brian Holt: Now this isn't really terribly useful, because this only works in one temperature. It can be any number of temperatures
>> Brian Holt: So what would actually might be useful is, if it is greater than or equal to, let's say 80, then it says it's too damn hot.

[00:05:17]
Otherwise, it says it's fine.
>> Brian Holt: Does that make sense? So you can do comparisons inside of here. Let's talk about triple equals, a second longer. So triple equals, you might not be asking like why is it not just equal to 80s. I don't want you to actually think about a single equal signs as being equal to.

[00:05:45]
Think of this as, is assigned, so temperature today is assigned 80. So when you see one equal signs, mentally replace that in your head with, is assigned. And then when you see double or triple equals. You're gonna say, is temperature equal to 80?
>> Speaker 2: Is there a difference between the double and triple equals in Java?

[00:06:12]

>> Brian Holt: There is. So in this particular case, you would see no difference.
>> Brian Holt: You can see it does exactly the same thing, I want you to always use ===. I will explain to you why they are different, but just know that the one that you are suppose to use is ===.

[00:06:33]
There's a thing in JavaScript called coercion. So let's just,
>> Brian Holt: I will show you, let's just say that this was string 86 instead of just 86. So I put quotes around this, so now this is equal to a string. And this is a number, right? So it's asking is this number 86 triple equals to string 86?

[00:07:01]
And obviously they are not, but if I did double equals, then they are equal. So double equals does this thing called coercion, that it, it's like if you're trying to compare a number against a string. It's gonna try and make it work as much as possible. And then if you do triple equals it's gonna say, if you're not the same type, if you're not of both numbers, I don't care, you are not equals.

[00:07:21]
And I will promise you that if you do triple equals, you will save hours and hours and hours of your life. I know that because it has happened to me. So please just take my wisdom from me, because I, it's just not a fun bug to find, because it's very subtle.

[00:07:38]
Like trying to figure out that these two things are different. Imagine those things are like hundreds of lines apart it's pretty subtle and pretty difficult to figure that out. So just always use triple equals.
>> Brian Holt: Questions?
>> Brian Holt: You feel okay about that?
>> Brian Holt: Okay.
>> Brian Holt: So this is more talking about triple, or quadruple, or, there is no quadruple equals, triple equals.

[00:08:13]
If you do 2+2 === 4, it says, thank god, the fundamental principles of mathematics still hold true. You can tell how late at night I was writing some of these [LAUGH].
>> Brian Holt: So you can see here that this is how that works. Whereas, if I put, made this string four, this would not be true, it would tell you to panic.

[00:08:39]

>> Brian Holt: Here I tell you about, is Brian cool? That's assigned true because it's definitely true, sunglasses, just kidding. So yeah, just think of that is assigned to true. And so, if you want to ask the question, is not equal to, that's also a question you can ask. And here I also talk about coercion.

[00:09:07]

>> Brian Holt: So lets up here, there is another thing you can do. If you replace the first equal series with an exclamation point like that, this is asking the question is not equal to. So if two plus two is not equal to four, then you probably want to move this up here.

[00:09:28]
But this is how you ask is not equals to. There's that as well, but again, you wanna use exclamation equals equals always.
>> Brian Holt: So that is something else you can do. And then you have the ability to ask more than one question as well. So if you have friendsAtYourParty is assigned 10.

[00:09:53]
So If friendsAtYourParty triple equals 0, it says cool, now I have a lot of nachos to myself. I was hungry when I wrote this one. [LAUGH] I also wanted nachos which is usually true.
>> Brian Holt: If friends at your party is greater than or equal to 4, then you have perfect amount to play Mario Kart.

[00:10:20]

>> Brian Holt: Let's see, I probably meant to do this, less than or equal to, oops.
>> Brian Holt: So if you have less than or equal to 4, I get this mixed up all the time by the way. [LAUGH] So if this is like 3, then I would say perfect amount of players in Mario Kart, and then if I change this to be 10, then it says, we'll turn on the dance music.

[00:10:55]

>> Brian Holt: But I kinda want it to be 0 right now cuz I want nachos to myself.
>> Brian Holt: Any questions about that? So you use is, else, if to ask another question
>> Brian Holt: So it's gonna say if this parts true do this, if this part is true then do this, otherwise do this.

[00:11:18]
That's kind of like the logical progression here.
>> Brian Holt: Make sense? Please.
>> Speaker 2: I know you said that it's not necessary, but it's like standard to use colons in Javascript.
>> Brian Holt: I would say on the whole, most people write their semi colons. If you wanna know what actually like in practice happens for me, if I have this cut over here, I actually don't usually hit the semi colons myself.

[00:11:49]
So if I, I'm gonna hit Command Save right now. And watch the semi colons, my editor actually puts them in for me. And that way, I don't have to write them, because I'm all about saving that key stroke economy. Which is a term that people use, and it is ridiculous.

[00:12:07]
[LAUGH] But they get put in there so everyone's happy I think. Or no one's happy that also don't care, in the end, it doesn't particularly matter.
>> Brian Holt: I guess what I should say is, there's some very strong held opinions by some people on this subject. And actually one of the workshops that I teach in for friendly masters, it was the first version of complete intro to React.

[00:12:36]
I did not use semi colons at all during that workshop. So like even myself I kind of gone back and forth, I don't like writing semi colon. That's the fundamental premise, but when they came out with the thing called Prettier, that just does it for you. I was like, cool i never have to think about this again or have this argument again.

[00:12:54]
So I don't care, yeah.
>> Speaker 2: Question for the chat room. If we use three equal signs. Why don't we use <==?
>> Brian Holt: It doesn't work, I think is the answer. That's a good question, I think the answer to that question would be, I'm gonna say first I don't know, I don't actually know.

[00:13:30]
If I were to speculate, it's because this has to be a number. The only way that this works, it's called a comparator, sot his is comparing one thing to the other. It has to be a number, so no matter what it's gonna be coerced. Which is what you call it when you change a string to a number, or a number to a string.

[00:13:46]
When you're changing types, it's called coercion. So it has to be coerced to a number no matter what. So if this is not a number, it's gotta be a number, so it's gonna try anyway, that would be my guess. The person to ask would probably be, well it'd probably be Brendan Eich, the person that wrote JavaScript ,so.

[00:14:05]

>> Brian Holt: Good question though.
>> Brian Holt: Cool, now I have a lot of nachos to myself.

