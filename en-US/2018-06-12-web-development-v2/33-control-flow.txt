[00:00:00]
>> Brian Holt: So let's get into something called control flow, you don't really have to remember the word control flow. It is what it's called, but it's not really important. More commonly, it's just called if statements. So here's a really, really simple one. So I have this const called skyIsBlue, and I set it to true.

[00:00:21]
So then I say here, I ask a question. That's what if statements allow you to do. They're called conditionals because if something is true, then it'll do one thing. If something is not true, it will do something else. I think it follows, right? So if, and then I ask is skyIsBlue, and skyIsBlue is true, right, so it's going to do the first block.

[00:00:45]
So it's gonna go into here and say consult.log("The sky is blue!"). Otherwise it's gonna say console.log("The sky is _ not blue?"), and it's gonna ask a question because you have problems if that's not true. So you can see here only one thing is logged. Only this first block, that is a word that you should probably remember, block.

[00:01:07]
This first block is run, so everything between the curly braces. I can have multiple things here, too. So, if I have like five of those, notice that it's gonna log out a bunch of those and it doesn't log out anything there, right? How do we feel about that so far?

[00:01:21]

>> Brian Holt: So nothing in the else block gets run, so that's what the else block does. It says if this thing is not true, then do this.
>> Brian Holt: Now if I change skyIsBlue to false, what do you expect to happen?
>> Brian Holt: It doesn't run this block and it only runs this block.

[00:01:46]

>> Brian Holt: So, that's what conditionals are for. For doing something given some sort of condition.
>> Brian Holt: You can have anything in here that evaluates to true or false in some ways, right? Whatever happens inside the parentheses, the condition as you would probably call it, has to eventually come down to is this true or is this false?

[00:02:07]
So you might imagine what happens if you were trying to log out for temperatures?
>> Brian Holt: Sure, whatever, we're just gonna do it right here. So if I had const temperatureToday =, I think I saw in Minneapolis it's going to get to be 86, which is way too hot.

[00:02:31]
[LAUGH] So, if temperatureToday,
>> Brian Holt: Triple equals, that's annoying, I should probably change the font on this. So I have a special font that works here. If I put three equal signs together, so these are three equal signs, right? It combines them into this special triple equals thing. Let me just change this cuz this is gonna confuse people.

[00:03:04]
That's annoying. Why did I decide that fear was a good idea? Brian was not thinking. Okay, body. I don't think I even did that. I think that's what this comes with, how annoying?
>> Brian Holt: Code, mirror, rules, FireCode, no do Monaco.
>> Brian Holt: Okay, now you can see it's three equal signs.

[00:03:33]
[LAUGH] My special font combines them into that one glyph that's three equal signs. It's really nice for me but it's probably terrible to teach with. So, just so you know, this is three equal signs. So if temperature triple equals 86 then I'm going to console.log.
>> Brian Holt: It's too, let's do double quotes, it's too damn hot.

[00:04:11]

>> Brian Holt: So triple equals is asking the question, is this temperatureToday equal to this? So is it equal to that? Yes, what is it saying here? Yeah, you need to close that. So now here it's saying it's too damn hot. That backslash is for, don't worry about it, it's escaping the variable to make sure that it doesn't break anything but suffice it to say it's not something you really need to care about at this juncture in time.

[00:04:46]
You know what? Now you definitely don't have to worry about it. [LAUGH]
>> Brian Holt: Now, this isn't really terribly useful because this only works in one temperature, which it can be any number of temperatures.
>> Brian Holt: So, what would actually might be useful is if it is greater than or equal to, let's say, 80, then it says it's too damn hot.

[00:05:17]
Otherwise, it says it's fine.
>> Brian Holt: Does that make sense? So you can do comparisons inside of here. Let's talk about triple equals just a second longer. So triple equals, you might be asking, why is it just not equal to 80s? I don't want you to actually think about a single equals signs being equal to.

[00:05:43]
Think of this as is assigned. So temperatureToday is assigned 80. So when you see one equal signs, mentally replace that in your head with, is assigned. And then when you see double or triple equals, you're going to say, is temperature equal to 80.
>> Speaker 2: Is there a difference between the double and triple equals in Java?

[00:06:12]

>> Brian Holt: There is. So in this particular case, you would see no difference.
>> Brian Holt: You can see it does exactly the same thing. I want you to always use triple equals. I will explain to you why they are different, but just know that the one that you're supposed to use is triple equals.

[00:06:32]
There is a thing in JavaScript called coercion, so let's just, I will show you.
>> Brian Holt: Let's just say that this was string 86 instead of 86. So I put quotes around it, so now this is equal to a string. And this is a number, right? So it's asking, is this number 86 triple equals to string 86?

[00:07:00]
And obviously, they are not, right? But if I did double equals, then they are equal. So double equals does this thing called coercion, that, if you're trying to compare a number against a string, it's gonna try and make it work as much as possible. And then if you do triple equals, it's gonna say, if you're not the same type, if you're not both numbers, I don't care, you are not equals.

[00:07:20]
And I will promise you that if you do triple equals, you will save hours and hours and hours of your life. I know that because it has happened to me. So please, just take my wisdom from me cuz it's just not a fun bug to find. Because it's very subtle, right?

[00:07:36]
Like trying to figure out that these two things are different. Imagine those things are hundreds of lines apart? It's pretty subtle and pretty difficult to figure that out. So, just always use triple equals.
>> Brian Holt: Questions? You feel okay about that? Okay, so, this is more talking about triple or quadruple, there is no quadruple equals, triple equals.

[00:08:13]
If you do 2 + 2 = 4, it says thank god, the fundamental principles of mathematics still hold true. You can tell how late at night I was writing some of these.
>> Brian Holt: So you can see here, this is how that works. Or else if I made this string 4, this would not be true, it would tell you panic.

[00:08:39]

>> Brian Holt: Here I tell you about, isBrianCool. That's assigned true because it's definitely true. Sunglasses, just kidding.
>> Brian Holt: So yeah, just think of that is assigned to true.
>> Brian Holt: And so if you want to ask the question, is not equal to, that's also a question you can ask. And here I also talk about coercion.

[00:09:06]

>> Brian Holt: So let's go up here. There's another thing you can do. If you replace the first equals here with an exclamation point, like that, this is asking the question, is not equal to? So if 2 + 2 is not equal to 4, then you would probably want to move this up here, right?

[00:09:28]
But this is how you ask is not equals to. There is that as well, but again you wanna use !== always.
>> Brian Holt: So that is something else you can do. And then you have the ability to ask more than one question, as well. So if you have friendsAtYourParty is assigned 10, so if (friendsAtYourParty === 0), it says cool, now I have a lot of nachos to myself.

[00:09:59]
I was hungry when I wrote this one. [LAUGH] And I also wanted nachos, which is usually true. if friends at your party is greater than or equal to 4, then you have perfect amount to play Mario Kart.
>> Brian Holt: Let's see, I probably meant to do this. Less than or equal to.

[00:10:28]

>> Brian Holt: So if you had less than equal to 4, I get these mixed up all the time, by the way. So if this was like 3, then it would say, perfect amount to play some Mario Kart. And then if I change this to be 10, then it says, woo, turn on the dance music.

[00:10:54]

>> Brian Holt: But I kinda want it to be 0 right now cuz I want nachos to myself.
>> Brian Holt: Any questions about that? So you use else if to ask another question.
>> Brian Holt: So it's going to say, if this part's true, do this. If this part is true, then do this.

[00:11:16]
Otherwise, do this. That's kinda the logical progression here.
>> Brian Holt: Make sense? Please.
>> Speaker 2: I know you said that it's not necessary, but is it standard to use semi-colons in JavaScript?
>> Brian Holt: I would say on the whole, most people write their semi-colons. If you want to know what actually in practice happens for me, if I had this code over here, I actually don't usually hit the semicolons myself.

[00:11:49]
So I'm going to hit command save right now and watch these semicolons. My editor actually puts them in for me. And that way I don't have to write them because I'm all about saving that keystroke economy. Which is a term that people use and it's ridiculous [LAUGH]. But they get put in there, so everyone's happy, I think, or no one's happy, and I also don't care.

[00:12:18]

>> Brian Holt: In the end, it doesn't particularly matter.
>> Brian Holt: I guess what I should say is there's some very strong held opinions by some people on this subject. And actually one of the workshops that I teach for Frontend Masters, it was the first version of complete intro to React.

[00:12:36]
I did not use semicolons at all during that workshop. Like even myself I kinda go back and forth. I don't like writing semicolon. That's the fundamental promise. But when they came out with a thing called prettier that just does it for you, I was like, cool. I never have to think about this again, or have this argument again.

[00:12:54]
So, I don't care. Yeah.
>> Speaker 3: I have a question for the chatroom. If we use three equal signs, why don't we use less than equals to and then two equal signs?
>> Brian Holt: It doesn't work I think is the answer. That's a good question, I think the answer to that question would be,

[00:13:27]

>> Brian Holt: I'm gonna say first, I don't know. I don't actually know. If I were to speculate, it's because this has to be a number. The only way that this works is, it's called a comparator, so this is comparing one thing to another. It has to be a number.

[00:13:39]
So, no matter what it's going to be coerced which is what you call it when you change a string to a number or a number to a string. When you're changing types it's called coercion. So it has to be coerced to a number no matter what. So if this is not a number, it's gotta be a number, so it's gonna try anyway.

[00:13:55]
That would be my guess. The person to ask would probably be, well, probably Brenda and I [INAUDIBLE] JavaScript. So, good question though.
>> Brian Holt: Cool, and now I have a lot of nachos to myself.

