WEBVTT

1
00:00:00.260 --> 00:00:06.019
&gt;&gt; Brian Holt: Let's go onto arrays.
&gt;&gt; Brian Holt: Arrays

2
00:00:06.019 --> 00:00:11.450
are an ordered list of something,
or anything.

3
00:00:13.430 --> 00:00:18.180
So here I have days of the week,
and I have them in order here.

4
00:00:18.180 --> 00:00:22.320
So that's a big key about arrays,
is there's order to an array.

5
00:00:22.320 --> 00:00:26.330
This is the first thing, this is
the second thing, this is the third thing.

6
00:00:26.330 --> 00:00:28.820
Whereas objects have no order.

7
00:00:28.820 --> 00:00:32.650
Despite the fact that I
declared this in some order,

8
00:00:32.650 --> 00:00:35.700
inside of that object they're
not stored in that order.

9
00:00:35.700 --> 00:00:39.340
So, once it's declared in that order,
I can't get them back out in that order.

10
00:00:39.340 --> 00:00:43.660
There's no guarantee of order at all
with an object, whereas with arrays,

11
00:00:43.660 --> 00:00:45.610
it's very ordered.

12
00:00:45.610 --> 00:00:48.350
So I can be guaranteed that if
this is the first thing here,

13
00:00:48.350 --> 00:00:50.230
this is the first thing I'm
going to get out of it as well.

14
00:00:52.060 --> 00:00:55.722
So if I look down here when I console,
log that, I get this array back that looks

15
00:00:55.722 --> 00:01:01.560
like that.
&gt;&gt; Brian Holt: Arrays start at zero.

16
00:01:01.560 --> 00:01:04.850
So when I say days of
the week zero this is,

17
00:01:04.850 --> 00:01:07.460
index zero is the first
element in the array.

18
00:01:07.460 --> 00:01:12.070
I know it's a little weird, but
programmers always start at zero.

19
00:01:12.070 --> 00:01:14.730
If you remember when I was doing my for
loop, I said for or

20
00:01:14.730 --> 00:01:19.620
let i equal zero just in general
everyone starts at zero.

21
00:01:19.620 --> 00:01:24.130
And that's just the way it is,
and get used to it.

22
00:01:24.130 --> 00:01:26.874
There's like, one programming
language that starts at one, and

23
00:01:26.874 --> 00:01:27.957
everyone makes fun of it.

24
00:01:27.957 --> 00:01:33.910
[LAUGH] So anyway, just get used to
the zero index is the first sting,

25
00:01:33.910 --> 00:01:36.010
which makes index one.

26
00:01:36.010 --> 00:01:40.574
As you can see here, index one is
the second element of the array, so

27
00:01:40.574 --> 00:01:43.630
if I ask for index1, I'm getting Tuesday.

28
00:01:46.530 --> 00:01:48.440
This actually makes a lot
of the math easier.

29
00:01:48.440 --> 00:01:51.410
So in the end you'll be end up
being grateful for this, but

30
00:01:51.410 --> 00:01:53.880
just be aware that index is started 0.

31
00:01:54.960 --> 00:01:59.298
So index6 is the last element of the
array, it's the 7th things that will be

32
00:01:59.298 --> 00:02:04.741
Sunday
&gt;&gt; Brian Holt: Questions?

33
00:02:10.813 --> 00:02:12.313
&gt;&gt; Brian Holt: So this is how you access

34
00:02:12.313 --> 00:02:13.890
something in the array.

35
00:02:13.890 --> 00:02:19.831
You use these square brackets,
and you put a number in there,

36
00:02:19.831 --> 00:02:26.267
that's just how it works.
&gt;&gt; Brian Holt: So

37
00:02:26.267 --> 00:02:28.380
that's what those square brackets are for.

38
00:02:28.380 --> 00:02:30.140
Anything between square brackets,

39
00:02:30.140 --> 00:02:32.950
you notice that we declare
these using square brackets.

40
00:02:34.400 --> 00:02:36.350
Those are gonna be arrays.

41
00:02:36.350 --> 00:02:39.400
Notice they don't have a key,
they actually are getting a key.

42
00:02:39.400 --> 00:02:43.290
The key for
this one It's implied by the order, so

43
00:02:43.290 --> 00:02:48.246
I gave this as the first thing,
so it's key is actually zero.

44
00:02:48.246 --> 00:02:50.430
This one gets one, this one gets two.

45
00:02:50.430 --> 00:02:52.790
But I don't actually have
to declare those things.

46
00:02:52.790 --> 00:02:57.260
They just get put there depending on what
order I put them in, so it's implicit.

47
00:03:02.500 --> 00:03:03.150
Questions about that?

48
00:03:03.150 --> 00:03:03.829
Does it make sense?

49
00:03:05.640 --> 00:03:08.080
I think most people are looking pretty
tired at this point of the day.

50
00:03:09.550 --> 00:03:14.991
I don't blame you, it's okay.
&gt;&gt; Brian Holt: So

51
00:03:14.991 --> 00:03:20.140
arrays have a bunch of additional
pieces of information.

52
00:03:20.140 --> 00:03:23.480
They have a bunch those built-ins,
that we were talking about before.

53
00:03:23.480 --> 00:03:24.950
They have a bunch of them.

54
00:03:24.950 --> 00:03:29.770
So, for example,
I can ask How many are there?

55
00:03:29.770 --> 00:03:31.660
So I can say prime numbers dot length, and

56
00:03:31.660 --> 00:03:35.120
I get eight,
there are eight things in this array.

57
00:03:35.120 --> 00:03:38.623
So that means it goes from zero to seven,
because seven would be the last thing of

58
00:03:38.623 --> 00:03:43.585
length eight.
&gt;&gt; Brian Holt: You can count one, two,

59
00:03:43.585 --> 00:03:48.831
three, four, five, six, seven, eight.
&gt;&gt; Brian Holt: So

60
00:03:48.831 --> 00:03:50.860
that's what length will give you,
it's a property.

61
00:03:50.860 --> 00:03:54.810
So note this is not a function,
this is a property.

62
00:03:54.810 --> 00:03:57.720
There's not parenthesis at the end,
it's not calling a function.

63
00:03:57.720 --> 00:03:59.960
It's just a property that's
set on it's called length.

64
00:04:01.940 --> 00:04:04.220
Now there is a function called join.

65
00:04:04.220 --> 00:04:05.650
If you wanna take an entire array, and

66
00:04:05.650 --> 00:04:08.190
you wanna make one string out of it,
you can call join.

67
00:04:08.190 --> 00:04:12.780
And what join does, you give it
some sort of, what do they call,

68
00:04:12.780 --> 00:04:15.160
delimiter is what it's technically called.

69
00:04:15.160 --> 00:04:18.150
But it's whatever I'm gonna put
between each element in the array.

70
00:04:18.150 --> 00:04:23.240
So I gave it this space pipe space.

71
00:04:23.240 --> 00:04:28.910
So you can see here between each one
of these there's a space, pipe space.

72
00:04:28.910 --> 00:04:30.875
I could have easily put like,
I don't know,

73
00:04:30.875 --> 00:04:35.977
asterisk between it.
&gt;&gt; Brian Holt: I

74
00:04:35.977 --> 00:04:38.560
didn't know my font did that.

75
00:04:38.560 --> 00:04:43.357
That's my font that makes it like
a cute little re-flicking thing,

76
00:04:43.357 --> 00:04:45.880
that's adorable.
&gt;&gt; Speaker 2: [LAUGH]

77
00:04:45.880 --> 00:04:46.570
&gt;&gt; Brian Holt: But you can put whatever

78
00:04:46.570 --> 00:04:49.890
you want in here, if I was super vain I
could put my name or something like that.

79
00:04:52.100 --> 00:04:53.375
Right, that's how it joins in together.

80
00:04:53.375 --> 00:04:58.455
I'm not vain though, right?

81
00:04:58.455 --> 00:04:59.680
No, not at all.

82
00:04:59.680 --> 00:05:01.010
Okay, questions?

83
00:05:03.530 --> 00:05:04.030
Okay.

84
00:05:05.580 --> 00:05:08.350
So what happens if I wanna
add an element to an array?

85
00:05:08.350 --> 00:05:10.240
So I've created an array and

86
00:05:10.240 --> 00:05:15.250
I wanna start putting things in to it,
there's a thing called Push.

87
00:05:15.250 --> 00:05:19.740
And what Push does is, it puts another
element on the end of the array.

88
00:05:19.740 --> 00:05:21.050
So I have these courses right here,

89
00:05:22.610 --> 00:05:25.220
a bunch of courses that
are on front of Master's.

90
00:05:25.220 --> 00:05:30.700
And what I'll do is I'll do courses.push
and then I'll push another one on.

91
00:05:30.700 --> 00:05:32.580
So I'll give it another
object to put on there.

92
00:05:34.010 --> 00:05:38.770
And if I look down here, you'll see that
Sean Larkinn's course is on the end here,

93
00:05:38.770 --> 00:05:40.630
and that's the one I push on here.

94
00:05:41.820 --> 00:05:42.722
So that's what Push does,

95
00:05:42.722 --> 00:05:48.947
it just shoves another one on the end.
&gt;&gt; Brian Holt: You might ask,

96
00:05:48.947 --> 00:05:50.500
what happens if I wanna
put it on the front?

97
00:05:52.060 --> 00:05:55.960
There's a function,
I'm not kidding, Unshift, I think.

98
00:05:57.030 --> 00:06:02.130
It is literally the worst name for that.

99
00:06:02.130 --> 00:06:04.080
Why is it called unshift?

100
00:06:04.080 --> 00:06:07.220
Well, if you want to remove something from
the front of an array it's called shift,

101
00:06:07.220 --> 00:06:11.020
and I'm sure in a room somewhere,
well, what's the opposite of shifting?

102
00:06:11.020 --> 00:06:12.460
Unshifting!

103
00:06:12.460 --> 00:06:16.440
And so they called it that, anyway,

104
00:06:16.440 --> 00:06:19.230
you never use it, but just so
you know it's out there.

105
00:06:19.230 --> 00:06:23.110
You use push quite a bit, cuz it's
just putting something on the end.

106
00:06:24.450 --> 00:06:26.480
What happens if I want to
overwrite something there?

107
00:06:26.480 --> 00:06:29.830
So like on here I have like my course
here, complete intro to react.

108
00:06:29.830 --> 00:06:31.500
I'm about to come back and do v4 of it so

109
00:06:31.500 --> 00:06:36.590
what I can do here, is I can
reference courses two equals, right.

110
00:06:36.590 --> 00:06:39.500
So is assigned, if you remember, that's
what we said that that's going to be.

111
00:06:39.500 --> 00:06:45.070
And so, if I look down here, you can see
it's overwritten that one, and yeah,

112
00:06:45.070 --> 00:06:50.206
by setting that to be something else,
make sense?

113
00:06:50.206 --> 00:06:55.982
I actually could have even gone in here
and done this, so rather than assigning

114
00:06:55.982 --> 00:07:01.145
that I could have said course 2,
and then I could have said .course,

115
00:07:01.145 --> 00:07:06.794
and then just change that part.
&gt;&gt; Brian Holt: So

116
00:07:06.794 --> 00:07:10.470
the only thing I changed,
because the teacher name didn't change.

117
00:07:10.470 --> 00:07:15.280
I have not changed my name since last
time I was here, as far as I know, and so

118
00:07:15.280 --> 00:07:20.950
now I can just say
course[2].course equals this.

119
00:07:20.950 --> 00:07:23.850
If you go down here and look, sure
enough just the course name has changed.

120
00:07:23.850 --> 00:07:29.559
Does that make sense?
&gt;&gt; Brian Holt: Cool,

121
00:07:29.559 --> 00:07:33.220
cuz course[2] is an object, right?

122
00:07:33.220 --> 00:07:38.129
Maybe it would make more

123
00:07:38.129 --> 00:07:42.793
sense if briansCourse

124
00:07:42.793 --> 00:07:47.212
= courses[2] and

125
00:07:47.212 --> 00:07:56.697
then briansCourse
&gt;&gt; Brian Holt: Sometimes,

126
00:07:56.697 --> 00:08:00.217
if that helps you to separate it into
two lines, pull it out in one line and

127
00:08:00.217 --> 00:08:02.730
then the second line to modify it,
go right ahead.

128
00:08:04.800 --> 00:08:07.750
Make your code as readable as possible for
yourself, you can see it down here it

129
00:08:07.750 --> 00:08:13.906
still works the same way.
&gt;&gt; Brian Holt: So

130
00:08:13.906 --> 00:08:18.928
we talked about Push,
we talked about overriding,

131
00:08:18.928 --> 00:08:22.167
well, that's a good one [LAUGH].

132
00:08:22.167 --> 00:08:25.262
Yeah, if you override something, it'll
throw away what was there before, and

133
00:08:25.262 --> 00:08:32.255
it will replace it with something else.
&gt;&gt; Brian Holt: So

134
00:08:32.255 --> 00:08:35.490
what happens if I wanted to go through and
individually log something in the array?

135
00:08:36.660 --> 00:08:40.050
Well I've actually already given you all
the tools to do this, we can use a for

136
00:08:40.050 --> 00:08:42.050
loop to do it.

137
00:08:42.050 --> 00:08:47.946
So if we go right here and I say for
{let i = 0; i &lt; cities.length;,

138
00:08:47.946 --> 00:08:53.840
because cities.length in this
particular case is five, right.

139
00:08:53.840 --> 00:08:57.240
That means the last element
in the array is index four,

140
00:08:57.240 --> 00:09:01.560
because it's always length minus one
is the last element in the array.

141
00:09:01.560 --> 00:09:07.639
So don't go past cities.length i++ and
I can do console.log cities of i,

142
00:09:07.639 --> 00:09:12.610
cuz that's gonna change every
single iteration of the array.

143
00:09:12.610 --> 00:09:15.740
So it's gonna do it on index 0,
then index 1, then index 2, 3, 4,

144
00:09:15.740 --> 00:09:17.380
and it's gonna finish.

145
00:09:17.380 --> 00:09:21.609
So that's how you get down here,
the first ones,

146
00:09:21.609 --> 00:09:25.234
Seattle, San Francisco, Salt Lake, and

147
00:09:25.234 --> 00:09:30.023
Hong Kong.
&gt;&gt; Brian Holt: Any questions about method

148
00:09:30.023 --> 00:09:36.053
1 here?
&gt;&gt; Brian Holt: I'm

149
00:09:36.053 --> 00:09:40.275
trying to decide if people are asleep or
if this is just being perfectly explained.

150
00:09:40.275 --> 00:09:41.800
&gt;&gt; Speaker 2: [LAUGH]

151
00:09:41.800 --> 00:09:43.410
&gt;&gt; Speaker 3: I guess I don't understand

152
00:09:43.410 --> 00:09:49.290
why fully, or how you utilize that.

153
00:09:49.290 --> 00:09:54.160
Are you just saying to to pull
one of those items out of

154
00:09:54.160 --> 00:09:59.720
the list or to add.
&gt;&gt; Brian Holt: Like why are we doing this?

155
00:09:59.720 --> 00:10:00.970
&gt;&gt; Speaker 3: Yeah, that part.

156
00:10:02.410 --> 00:10:04.140
Method one versus method two,

157
00:10:04.140 --> 00:10:06.020
maybe I just missed it.
&gt;&gt; Brian Holt: Yeah,

158
00:10:06.020 --> 00:10:08.270
ignore method two for the moment.

159
00:10:08.270 --> 00:10:12.620
So CONST CITY equals cities[i].

160
00:10:12.620 --> 00:10:15.852
So this is one individual city right now.

161
00:10:15.852 --> 00:10:19.874
I'm doing console.log(city).

162
00:10:19.874 --> 00:10:26.460
Let's say city.toUpperCase for, there
you go, and you can see the difference.

163
00:10:27.610 --> 00:10:33.580
So this little bit right here pulls
out for one iteration, one loop.

164
00:10:33.580 --> 00:10:38.590
It pulls out the city that's at
that particular index, so for

165
00:10:38.590 --> 00:10:41.940
a city of zero, it pulls out Seattle.

166
00:10:41.940 --> 00:10:46.890
So now city is Seattle and
it console.logs Seattle to upper case, so

167
00:10:46.890 --> 00:10:49.170
that's why you get Seattle right here.

168
00:10:49.170 --> 00:10:52.380
That loop finishes, this gets i plus plus.

169
00:10:52.380 --> 00:10:55.950
So now it's index one, we go back again.

170
00:10:55.950 --> 00:11:00.700
Cities of i, this is going to be cities
of one, so it pulls out San Francisco.

171
00:11:00.700 --> 00:11:04.640
Then it's going to be console.log
San Francisco, two uppercase.

172
00:11:04.640 --> 00:11:05.320
And that's how we get

173
00:11:05.320 --> 00:11:07.280
San Francisco down here.

174
00:11:07.280 --> 00:11:07.980
&gt;&gt; Speaker 3: Okay.
&gt;&gt; Brian Holt: Make

175
00:11:07.980 --> 00:11:08.930
sense?
&gt;&gt; Speaker 3: Yep.

176
00:11:08.930 --> 00:11:11.980
&gt;&gt; Brian Holt: Cool so that's,

177
00:11:11.980 --> 00:11:16.080
you can short cut that by just saying,
cities of I right here.

178
00:11:17.230 --> 00:11:22.060
Cities of i, and
then we can cut this out right here,

179
00:11:22.060 --> 00:11:25.610
it's just a little bit more compressed.

180
00:11:27.760 --> 00:11:29.787
But if you find it more readable
to do it the other way,

181
00:11:29.787 --> 00:11:33.372
please do
&gt;&gt; Brian Holt: Okay, so

182
00:11:33.372 --> 00:11:35.340
that is using a for loop.

183
00:11:35.340 --> 00:11:39.100
This is something that we've used before,
we're used to seeing i in for loops and

184
00:11:39.100 --> 00:11:40.490
things like that.

185
00:11:40.490 --> 00:11:42.230
Let's talk about method two.

186
00:11:42.230 --> 00:11:45.170
Method two is a thing called for each,

187
00:11:45.170 --> 00:11:50.480
this is a function that's
built into arrays.

188
00:11:50.480 --> 00:11:53.450
So every array has a method on it.

189
00:11:53.450 --> 00:11:55.420
Let's talk about the word method for
just a second.

190
00:11:55.420 --> 00:11:59.840
I probably have been using that before,
a function is just a function,

191
00:11:59.840 --> 00:12:00.680
we've talked about that.

192
00:12:00.680 --> 00:12:05.540
A method is a function on a object, or

193
00:12:05.540 --> 00:12:08.950
you can also just use method
to mean pretty much function.

194
00:12:08.950 --> 00:12:11.620
Technically it's a function on an object,
but

195
00:12:11.620 --> 00:12:14.160
I hear people use the word
method just all the time.

196
00:12:15.250 --> 00:12:19.760
So more or less, when I say the word
method, just assume that I mean function.

197
00:12:19.760 --> 00:12:23.150
There's also procedure,
there's a bunch of words for functions.

198
00:12:24.170 --> 00:12:27.030
Most of the time,
people either say function or method, and

199
00:12:27.030 --> 00:12:28.400
it varies language by language.

200
00:12:28.400 --> 00:12:32.390
There's some languages that use the word
method more, does that make sense?

201
00:12:34.490 --> 00:12:37.380
Sometime it's just that
vocabulary that sometimes I just

202
00:12:37.380 --> 00:12:38.650
have a hard time unraveling.

203
00:12:40.830 --> 00:12:43.250
So for h is technically
a method it's a function, and

204
00:12:43.250 --> 00:12:48.240
it's a function that you
give another function to.

205
00:12:49.900 --> 00:12:53.800
So this is what we would
call an anonymous function.

206
00:12:55.030 --> 00:13:00.580
And this function is going to be run
once on every item in the array, so

207
00:13:00.580 --> 00:13:03.080
this method, in fact let's just do this.

208
00:13:03.080 --> 00:13:08.556
If I do, let numberofTimesRan,

209
00:13:08.556 --> 00:13:14.820
right now it's been done zero times.

210
00:13:14.820 --> 00:13:18.550
And I'm gonna do numberOfTimesRan++.

211
00:13:18.550 --> 00:13:23.820
So every time this function gets run,
this is gonna get incremented.

212
00:13:23.820 --> 00:13:25.530
So if I come down here at the bottom and

213
00:13:25.530 --> 00:13:31.960
I say console.log(numberOfTimesRan),
what's that number gonna be?

214
00:13:34.050 --> 00:13:35.150
How many items are in the array?

215
00:13:36.420 --> 00:13:43.960
Five so down here five, so
this function gets run five times.

216
00:13:43.960 --> 00:13:49.670
One time for each item in the array, and
then down here I'm seeing console.logcity.

217
00:13:49.670 --> 00:13:53.920
City is being injected as
a parameter from cities.

218
00:13:53.920 --> 00:13:57.700
And that's four each does for you,
that's the point of four each.

219
00:13:57.700 --> 00:14:02.418
So that why you're able to see Seattle,
San francisco,

220
00:14:02.418 --> 00:14:06.839
let just make this,
to make it even more clear to lower

221
00:14:06.839 --> 00:14:11.802
case
&gt;&gt; Brian Holt: And

222
00:14:11.802 --> 00:14:15.350
you can see here, this is the ones
been logged out by four each.

223
00:14:15.350 --> 00:14:18.570
This is two different ways
to accomplish the same goal.

224
00:14:18.570 --> 00:14:20.040
And this is what for each does for you.

225
00:14:21.900 --> 00:14:23.230
Questions about for each?
&gt;&gt; Speaker 4: Is

226
00:14:24.400 --> 00:14:26.850
there a preferred method when
you're programming, to use the for

227
00:14:26.850 --> 00:14:31.040
each or the loop?
&gt;&gt; Brian Holt: It depends on who you ask,

228
00:14:31.040 --> 00:14:31.650
for sure.

229
00:14:31.650 --> 00:14:33.470
It's definitely a matter of preference.

230
00:14:34.950 --> 00:14:38.490
I use for each constantly and use for

231
00:14:38.490 --> 00:14:41.470
loops far less,
this is a personal preference.

232
00:14:42.610 --> 00:14:47.920
This is more towards what they
call functional programming, which

233
00:14:47.920 --> 00:14:50.570
I'm a big fan of, and there are other
people that don't like it quite as much.

234
00:14:50.570 --> 00:14:51.670
If you ask, for example,

235
00:14:51.670 --> 00:14:56.540
a hard core Java developer, probably far
less a fan of functional programming.

236
00:14:56.540 --> 00:15:01.710
But if you ask someone that's a Haskell
programmer, or something like that.

237
00:15:01.710 --> 00:15:04.410
They would laugh at you for using
the four loop because they're a jerk.

238
00:15:04.410 --> 00:15:09.280
[LAUGH] So, do what works for you.

239
00:15:09.280 --> 00:15:12.460
If one of these methods feels better or

240
00:15:12.460 --> 00:15:15.000
looks better,
then you then absolutely do that one.

241
00:15:17.080 --> 00:15:19.500
In fact I'm curious,
who prefers method one?

242
00:15:19.500 --> 00:15:24.960
Just raise the hands here in the room,
and who here prefers method 2?

243
00:15:24.960 --> 00:15:27.420
And who here just wants to go home?

244
00:15:27.420 --> 00:15:29.420
[LAUGH] Okay, most of you.

245
00:15:29.420 --> 00:15:30.864
Cool.
&gt;&gt; Speaker 5: [CROSSTALK] used method 1,

246
00:15:30.864 --> 00:15:33.270
does that have to be used for each?
&gt;&gt; Brian Holt: Yeah.

247
00:15:33.270 --> 00:15:33.880
&gt;&gt; Speaker 5: Index, you just

248
00:15:33.880 --> 00:15:36.910
showed right there, you can use an index
just by creating your own counter for

249
00:15:36.910 --> 00:15:38.570
it.
&gt;&gt; Brian Holt: Yeah, actually,

250
00:15:38.570 --> 00:15:42.410
what you can do,
there's a phantom other parameter here.

251
00:15:42.410 --> 00:15:46.300
That it's also injecting, and
I've hereto been ignoring, and

252
00:15:46.300 --> 00:15:51.340
this index if I just did index

253
00:15:51.340 --> 00:15:55.940
comma space, you can see here it
actually is injecting the index as well.

254
00:16:00.080 --> 00:16:03.310
This is like the tip of an iceberg
of functional programming.

255
00:16:04.790 --> 00:16:08.110
There's another Kyle Simpson course,
called Functional Programming Lite.

256
00:16:08.110 --> 00:16:11.170
There's also Brian Lonsdorf's course,

257
00:16:11.170 --> 00:16:15.360
which are both phenomenal
courses on Frontend Masters.

258
00:16:15.360 --> 00:16:18.220
Brian Lonsdorf also has a book,
so does Kyle.

259
00:16:18.220 --> 00:16:21.300
They're all really good ways of
getting into functional programming.

260
00:16:21.300 --> 00:16:23.740
It's more stuff like this,
like method two up here.

261
00:16:24.780 --> 00:16:27.952
I will say that I've never taught
this to developers on the first

262
00:16:27.952 --> 00:16:30.183
time that they're learning to program, and

263
00:16:30.183 --> 00:16:33.252
it's because I used to be scared
of functional programming.

264
00:16:33.252 --> 00:16:36.699
And that at some point, I realized
this is actually a really good way for

265
00:16:36.699 --> 00:16:39.183
people to get into it and
to get exposed to it early.

266
00:16:39.183 --> 00:16:41.702
Because it took me probably
five years into my career,

267
00:16:41.702 --> 00:16:44.410
before I started doing
programming like this.

268
00:16:44.410 --> 00:16:47.890
And my code is much better now, I think.
&gt;&gt; Speaker 6: That's why I'd actually

269
00:16:47.890 --> 00:16:52.410
recommend Bianca's Fundamentals
to Functional Javascript

270
00:16:52.410 --> 00:16:53.100
course-
&gt;&gt; Brian Holt: Okay.

271
00:16:53.100 --> 00:16:54.770
She has this, but I forgot about it.
&gt;&gt; Speaker 6: Because it kinda tries to

272
00:16:54.770 --> 00:16:57.010
cover that bridge between
the basics of Javascript,

273
00:16:57.010 --> 00:17:00.340
to starting to use functional methods.
&gt;&gt; Brian Holt: Totally, so

274
00:17:00.340 --> 00:17:02.158
yeah, definitely check
out Bianca's course.

275
00:17:02.158 --> 00:17:07.340
I definitely endorse Bianca
as a teacher in general.

276
00:17:07.340 --> 00:17:09.430
A lot of my teaching
style is based on hers.

277
00:17:09.430 --> 00:17:13.805
So I like to say I borrowed it,
but I definitely just stole it.

278
00:17:13.805 --> 00:17:20.639
[LAUGH] She's phenomenal.
&gt;&gt; Brian Holt: Questions about this?

279
00:17:21.880 --> 00:17:23.170
I don't really test you on this.

280
00:17:23.170 --> 00:17:26.200
There's a lot more deeper
rabbit hole to go down here,

281
00:17:26.200 --> 00:17:29.300
I just wanted to expose
it to you early on.

282
00:17:29.300 --> 00:17:31.090
So the journey will feel
impossible some times,

283
00:17:31.090 --> 00:17:34.230
so if this feels hard, it's cuz it is.

284
00:17:34.230 --> 00:17:35.660
That's okay.

285
00:17:35.660 --> 00:17:36.730
But Jerome's a really awesome guy.

286
00:17:37.730 --> 00:17:39.900
That is objects and arrays.

