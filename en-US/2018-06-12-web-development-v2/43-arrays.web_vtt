WEBVTT

1
00:00:00.000 --> 00:00:02.203
&gt;&gt; Brian Holt: Let's go onto arrays.

2
00:00:04.986 --> 00:00:12.977
&gt;&gt; Brian Holt: Arrays are an ordered
list of something, or anything.

3
00:00:12.977 --> 00:00:18.151
So here I have daysOfTheWeek,
and I have them in order here.

4
00:00:18.151 --> 00:00:22.314
So that's a big key about arrays is
there's order to an array, right?

5
00:00:22.314 --> 00:00:24.722
This is the first thing,
this is the second thing,

6
00:00:24.722 --> 00:00:26.292
this is the third thing, right?

7
00:00:26.292 --> 00:00:31.266
Whereas objects have no order, despite the
fact that like I declared these in some

8
00:00:31.266 --> 00:00:35.756
order, inside of that object they're
not stored in that order, right?

9
00:00:35.756 --> 00:00:40.087
So once it's declared in that order
I can't them back out in that order,

10
00:00:40.087 --> 00:00:44.489
there's no guarantee of order at all
with an object where as with arrays,

11
00:00:44.489 --> 00:00:45.774
it's very ordered.

12
00:00:45.774 --> 00:00:48.266
So I can be guaranteed that
if this the first thing here,

13
00:00:48.266 --> 00:00:50.715
this is the first thing I'm
gonna get out of it as well.

14
00:00:51.829 --> 00:00:53.152
&gt;&gt; Brian Holt: So if I look down here,

15
00:00:53.152 --> 00:00:57.423
when I console that logged out I get
this array back that looks like that.

16
00:00:58.976 --> 00:01:01.722
&gt;&gt; Brian Holt: Array's start at 0, okay?

17
00:01:01.722 --> 00:01:08.183
So when I say days of the week 0,
index 0 is the first element in the array.

18
00:01:08.183 --> 00:01:12.167
I know that's a little weird, but
programmers always start at 0.

19
00:01:12.167 --> 00:01:17.290
If you remember when I was starting
I said let i equal 0, just in

20
00:01:17.290 --> 00:01:23.499
general everyone starts at 0 and that's
just the way it is and get use to it.

21
00:01:23.499 --> 00:01:27.207
There is like one programming
language that starts at 1 and

22
00:01:27.207 --> 00:01:28.845
everyone makes fun of it.

23
00:01:28.845 --> 00:01:33.810
[LAUGH] So anyway, just get used
to the 0 index is the first thing,

24
00:01:33.810 --> 00:01:38.687
which makes index 1,as you can see here,
index 1 is the second

25
00:01:38.687 --> 00:01:44.046
element in the array, so if I ask for
index 1, I'm getting Tuesday.

26
00:01:46.483 --> 00:01:49.141
&gt;&gt; Brian Holt: This actually makes
a lot of the math easier, so

27
00:01:49.141 --> 00:01:52.396
in the end it will you will end
up being grateful for this but

28
00:01:52.396 --> 00:01:54.996
just be aware that indexes start at 0,
okay?

29
00:01:54.996 --> 00:01:58.876
So index 6 is the last element of
the array, it's the seventh thing, so

30
00:01:58.876 --> 00:02:00.031
that will be Sunday.

31
00:02:03.852 --> 00:02:04.988
&gt;&gt; Brian Holt: Questions?

32
00:02:09.295 --> 00:02:13.777
&gt;&gt; Brian Holt: Okay, so this is how you
access something in like the in the array,

33
00:02:13.777 --> 00:02:17.393
use the square brackets and
you put a number in there.

34
00:02:21.616 --> 00:02:22.733
&gt;&gt; Brian Holt: That's just how it works.

35
00:02:26.315 --> 00:02:28.324
&gt;&gt; Brian Holt: So
that's what those square brackets are for.

36
00:02:28.324 --> 00:02:31.647
Anything between square brackets,
you'll notice

37
00:02:31.647 --> 00:02:36.411
that we declared these using square
brackets, those are gonna be arrays.

38
00:02:36.411 --> 00:02:39.409
Notice they don't have a key,
they actually are getting a key.

39
00:02:39.409 --> 00:02:43.710
The key for
this one it's implied by the order, so

40
00:02:43.710 --> 00:02:48.840
I gave this as the first thing,
so it's key is actually 0.

41
00:02:48.840 --> 00:02:50.994
This one gets 1, this one gets 2.

42
00:02:50.994 --> 00:02:53.722
But I don't actually have
to declare those things,

43
00:02:53.722 --> 00:02:57.941
they just get put there depending on what
order I put them in, so it's implicit.

44
00:03:02.384 --> 00:03:03.187
&gt;&gt; Brian Holt: Questions about that?

45
00:03:03.187 --> 00:03:05.618
Does it make sense?

46
00:03:05.618 --> 00:03:08.033
I think most people are looking pretty
tired at this point in the day.

47
00:03:08.033 --> 00:03:11.895
[LAUGH] I don't blame you, it's okay.

48
00:03:14.941 --> 00:03:19.178
&gt;&gt; Brian Holt: So arrays have a bunch
of additional pieces of information,

49
00:03:19.178 --> 00:03:22.510
they have a bunch of those built-ins,
right?

50
00:03:22.510 --> 00:03:24.922
That we were talking about before,
they have a bunch of them.

51
00:03:24.922 --> 00:03:29.775
So for example, I can ask,
how many are there?

52
00:03:29.775 --> 00:03:33.018
So I can say prime numbers.length and
I get 8.

53
00:03:33.018 --> 00:03:37.392
There are eight things in this array,
so that means it goes from 0 to 7,

54
00:03:37.392 --> 00:03:39.994
cuz 7 would be the last thing of length 8.

55
00:03:42.029 --> 00:03:47.165
&gt;&gt; Brian Holt: You can count 1,
2, 3, 4, 5, 6, 7, 8.

56
00:03:48.881 --> 00:03:50.852
&gt;&gt; Brian Holt: So that's what length
will give you, it's a property.

57
00:03:50.852 --> 00:03:53.302
So note, this is not a function, right?

58
00:03:53.302 --> 00:03:54.694
This is a property.

59
00:03:54.694 --> 00:03:58.412
There's no parenthesis at the end,
it's not calling a function,

60
00:03:58.412 --> 00:04:01.882
it's just a property that's set on it,
it's called length.

61
00:04:01.882 --> 00:04:05.726
Now, there is a function called join,
if you wanna take an entire array and

62
00:04:05.726 --> 00:04:08.546
you wanna make one string out of it,
you can call join.

63
00:04:08.546 --> 00:04:12.574
And what join does,
you give it some sort of delimiter,

64
00:04:12.574 --> 00:04:15.416
it's what it's technically called.

65
00:04:15.416 --> 00:04:20.910
But whatever I'm gonna put between
each elements in the array,

66
00:04:20.910 --> 00:04:24.075
so I gave it this pipe space, right?

67
00:04:24.075 --> 00:04:28.725
So you can see here between each one
of these, there's a space pipe space.

68
00:04:28.725 --> 00:04:32.275
I could have easily put,
I don't know, asterisks between it.

69
00:04:35.641 --> 00:04:37.984
&gt;&gt; Brian Holt: I didn't
know my font did that.

70
00:04:37.984 --> 00:04:42.860
[LAUGH] That's my font that makes it like
the cute little wreath-looking thing.

71
00:04:42.860 --> 00:04:43.897
That's adorable.

72
00:04:43.897 --> 00:04:45.948
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Brian Holt: But

73
00:04:45.948 --> 00:04:47.586
you can put whatever you want in here.

74
00:04:47.586 --> 00:04:50.414
If I was super vain I could put my name or
something like that.

75
00:04:50.414 --> 00:04:53.624
[LAUGH] Right,
that's how it joins them together.

76
00:04:53.624 --> 00:04:56.257
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Brian Holt: I'm not vain,

77
00:04:56.257 --> 00:04:56.980
though, right?

78
00:04:58.740 --> 00:04:59.734
&gt;&gt; Brian Holt: Nope, not at all.

79
00:04:59.734 --> 00:05:01.015
Okay, questions?

80
00:05:03.105 --> 00:05:04.047
&gt;&gt; Brian Holt: Okay.

81
00:05:05.802 --> 00:05:08.401
&gt;&gt; Brian Holt: So what happens if I
wanna add an element to an array?

82
00:05:08.401 --> 00:05:12.442
So I've created an array, and
I wanna start putting things into it.

83
00:05:12.442 --> 00:05:14.965
There's a thing called push, and

84
00:05:14.965 --> 00:05:19.669
what push does is it puts another
element on the end of the array.

85
00:05:19.669 --> 00:05:23.178
So I have these courses right here, right?

86
00:05:23.178 --> 00:05:26.063
A bunch of courses that
are on Frontend Masters, and

87
00:05:26.063 --> 00:05:30.600
then what I'll do is I'll do courses.push,
and then I'll push another one on.

88
00:05:30.600 --> 00:05:33.909
So I give it another
object to put on there.

89
00:05:33.909 --> 00:05:38.651
And then if I look down here, you'll
see that Sean Larkinn's course is on

90
00:05:38.651 --> 00:05:41.796
the end here and
that's the one I pushed on here.

91
00:05:41.796 --> 00:05:44.289
So that's what push does,
it just shoves another one on the end.

92
00:05:48.479 --> 00:05:52.170
&gt;&gt; Brian Holt: You might ask, what
happens if I wanna put it on the front?

93
00:05:52.170 --> 00:05:57.102
There's a function,
I'm not kidding, unshift,

94
00:05:57.102 --> 00:06:02.044
I think it is,
is literally the worst name for that.

95
00:06:02.044 --> 00:06:04.057
Why is it called unshift?

96
00:06:04.057 --> 00:06:07.109
Well, if you wanna remove something from
the front of the array, it's called shift.

97
00:06:07.109 --> 00:06:09.164
And I'm sure they were in a room,
someone was like,

98
00:06:09.164 --> 00:06:10.862
well, what's the opposite of shifting?

99
00:06:10.862 --> 00:06:13.652
Unshifting and so they called it that.

100
00:06:13.652 --> 00:06:18.136
[LAUGH] Anyway, you never use it,
but just so you know it's out there,

101
00:06:18.136 --> 00:06:23.401
you use push quite a bit, because it's
just putting something on the end, okay?

102
00:06:23.401 --> 00:06:26.426
What happens if I want
to overwrite something?

103
00:06:26.426 --> 00:06:31.368
So on here I have my course Complete Intro
to React, I'm about to come back and

104
00:06:31.368 --> 00:06:36.560
do v4 a bit, so what I can do here is
I can reference, courses[2] =, right?

105
00:06:36.560 --> 00:06:39.535
So is assigned, if you remember,
that's what we said that that's gonna be.

106
00:06:39.535 --> 00:06:43.868
And so if I look down here
you can see it's overwritten

107
00:06:43.868 --> 00:06:47.636
that one by setting that
to be something else.

108
00:06:47.636 --> 00:06:48.790
Makes sense?

109
00:06:50.531 --> 00:06:53.660
&gt;&gt; Brian Holt: I actually could have
even gone in here and done this.

110
00:06:53.660 --> 00:06:57.484
So rather than assigning that
I could have said course two,

111
00:06:57.484 --> 00:06:59.861
and then I could have said .course.

112
00:07:01.490 --> 00:07:03.936
&gt;&gt; Brian Holt: And
then just change that part.

113
00:07:06.807 --> 00:07:08.463
&gt;&gt; Brian Holt: So
the only thing I changed,

114
00:07:08.463 --> 00:07:10.947
because the teacher name didn't change,

115
00:07:10.947 --> 00:07:15.165
I have not changed my name since the last
time I was here, as far as I know.

116
00:07:15.165 --> 00:07:19.448
And so now I can just say,
course2.course equals this.

117
00:07:20.766 --> 00:07:22.452
&gt;&gt; Brian Holt: And
if you go down here and look,

118
00:07:22.452 --> 00:07:26.215
sure enough, just the course name
has changed, does that make sense?

119
00:07:29.117 --> 00:07:33.119
&gt;&gt; Brian Holt: Cool,
because course2 is an object, right?

120
00:07:33.119 --> 00:07:36.395
Maybe that will make more sense
with like Brian's course.

121
00:07:43.625 --> 00:07:47.135
&gt;&gt; Brian Holt: Courses[2] and

122
00:07:47.135 --> 00:07:51.743
then done BrianCourse.

123
00:07:56.191 --> 00:07:59.115
&gt;&gt; Brian Holt: Sometimes it's like if that
helps you to separate it into two lines.

124
00:07:59.115 --> 00:08:02.229
Like to pull it out in one line, and
then the second line to modify it,

125
00:08:02.229 --> 00:08:02.999
go right ahead.

126
00:08:04.661 --> 00:08:06.844
&gt;&gt; Brian Holt: Make your code as
readable as possible for yourself, and

127
00:08:06.844 --> 00:08:08.807
you can see it down here it
still works the same way.

128
00:08:13.805 --> 00:08:19.062
&gt;&gt; Brian Holt: So we talked about push,
we had talked about overriding.

129
00:08:19.062 --> 00:08:19.956
That's a good one.

130
00:08:19.956 --> 00:08:24.747
[LAUGH] So yeah, if you override something
it will throw away what was there before

131
00:08:24.747 --> 00:08:27.362
and it will replace it
with something else.

132
00:08:32.231 --> 00:08:34.395
&gt;&gt; Brian Holt: So
what happens if I wanted to go through and

133
00:08:34.395 --> 00:08:36.571
individually log something in the array?

134
00:08:36.571 --> 00:08:40.489
Well, I've actually already given you all
the tools to do this, we can use a for

135
00:08:40.489 --> 00:08:42.027
loop to do it.

136
00:08:42.027 --> 00:08:45.830
&gt;&gt; Brian Holt: So if we go right here and
I say for, let i equal 0,

137
00:08:45.830 --> 00:08:48.919
i is less than cities.length, right?

138
00:08:48.919 --> 00:08:53.804
Because cities.length in this
particular case is five, right?

139
00:08:53.804 --> 00:08:57.347
That means the last element in
the array is index 4, right?

140
00:08:57.347 --> 00:09:01.595
Cuz it's always length minus 1 is
the last element in the array.

141
00:09:01.595 --> 00:09:06.004
So don't go past cities.length i ++ and

142
00:09:06.004 --> 00:09:10.415
I can do console.log cities of i, right?

143
00:09:10.415 --> 00:09:12.612
Because that's going to change every
single iteration of the array.

144
00:09:12.612 --> 00:09:16.494
So it's gonna do it on index 0,
then index 1, then index 2, 3, 4, and

145
00:09:16.494 --> 00:09:17.852
then it's gonna finish.

146
00:09:17.852 --> 00:09:22.569
So that's how you get down here,
the first ones, Seattle,

147
00:09:22.569 --> 00:09:26.746
San Francisco, Salt Lake,
Amsterdam, Hong Kong.

148
00:09:28.564 --> 00:09:30.762
&gt;&gt; Brian Holt: Any questions
about method one here?

149
00:09:35.663 --> 00:09:38.059
&gt;&gt; Brian Holt: I'm trying to
decide if people are asleep or

150
00:09:38.059 --> 00:09:40.468
if this is just being perfectly explained.

151
00:09:40.468 --> 00:09:44.731
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Speaker 3: I guess I don't understand

152
00:09:44.731 --> 00:09:49.218
why fully, or how you'd utilize that.

153
00:09:49.218 --> 00:09:54.033
Are you just saying,
to pull one of those items out of

154
00:09:54.033 --> 00:09:57.792
the list or-
&gt;&gt; Speaker 3: To add.

155
00:09:57.792 --> 00:09:59.595
&gt;&gt; Brian Holt: Like,
why are we doing this?

156
00:09:59.595 --> 00:10:05.432
&gt;&gt; Speaker 3: Yeah, that part, method one
versus method two, maybe I just messed up.

157
00:10:05.432 --> 00:10:07.613
&gt;&gt; Brian Holt: Yeah,
ignore method two for the moment.

158
00:10:07.613 --> 00:10:08.344
&gt;&gt; Speaker 3: Okay.

159
00:10:08.344 --> 00:10:12.460
&gt;&gt; Brian Holt: So
const city = cities[i], so

160
00:10:12.460 --> 00:10:17.316
this is one individual city right now.

161
00:10:17.316 --> 00:10:21.474
I'm doing console.log city and

162
00:10:21.474 --> 00:10:25.340
say like city.toUpperCase.

163
00:10:25.340 --> 00:10:27.538
There you go and
you can see the difference.

164
00:10:27.538 --> 00:10:33.941
So this little bit right here pulls out
for one iteration, one loop, right?

165
00:10:33.941 --> 00:10:37.571
It pulls out the city that's at
that particular index, right?

166
00:10:37.571 --> 00:10:41.841
So, for city of 0,
it pulls out Seattle, right?

167
00:10:41.841 --> 00:10:46.476
So now, city of Seattle, and it
console.log city Seattle toUpperCase, so

168
00:10:46.476 --> 00:10:49.061
that's why you get Seattle, right here.

169
00:10:49.061 --> 00:10:52.328
That loop finishes,
this get's i ++, right?

170
00:10:52.328 --> 00:10:54.693
So now it's index 1, right?

171
00:10:54.693 --> 00:10:55.870
We go back again.

172
00:10:55.870 --> 00:10:58.702
Cities of i,
this is gonna be cities of 1, right?

173
00:10:58.702 --> 00:11:01.135
So it pulls out San Francisco.

174
00:11:01.135 --> 00:11:05.079
Then it's gonna do console.log,
San Fransisco, toUpperCase and

175
00:11:05.079 --> 00:11:07.738
that's how we get
the San Fransico down here.

176
00:11:07.738 --> 00:11:08.434
Make sense?

177
00:11:08.434 --> 00:11:09.035
&gt;&gt; Speaker 3: Yep.

178
00:11:09.035 --> 00:11:10.125
&gt;&gt; Brian Holt: Cool.

179
00:11:11.159 --> 00:11:16.628
&gt;&gt; Brian Holt: So you can shortcut that
by just saying cities of i right here.

180
00:11:16.628 --> 00:11:22.351
Cities[i], and
then we can cut this out here.

181
00:11:24.183 --> 00:11:25.979
&gt;&gt; Brian Holt: It's just
a little bit more compressed

182
00:11:25.979 --> 00:11:27.689
&gt;&gt; Speaker 3: Okay.

183
00:11:27.689 --> 00:11:30.814
&gt;&gt; Brian Holt: But if you find it more
readable to do the other way, please do.

184
00:11:32.673 --> 00:11:35.447
&gt;&gt; Brian Holt: Okay, so
that is using a for loop.

185
00:11:35.447 --> 00:11:36.814
This is something we've used before.

186
00:11:36.814 --> 00:11:40.416
We're used to seeing i and for
loops and things like that.

187
00:11:40.416 --> 00:11:42.168
Let's talk about method two.

188
00:11:42.168 --> 00:11:45.136
Method two is a thing called forEach.

189
00:11:45.136 --> 00:11:50.928
This is a function that's
built into arrays, right?

190
00:11:50.928 --> 00:11:53.301
And every array has a method on it.

191
00:11:53.301 --> 00:11:55.366
Let's talk about the word method for
just a second.

192
00:11:55.366 --> 00:11:57.304
I probably have been using that before.

193
00:11:57.304 --> 00:11:59.872
A function is just a function.

194
00:11:59.872 --> 00:12:00.661
We've talked about that.

195
00:12:00.661 --> 00:12:03.769
A method is a function on an object.

196
00:12:05.283 --> 00:12:08.869
&gt;&gt; Brian Holt: Or you can also just use
method to mean pretty much function.

197
00:12:08.869 --> 00:12:11.887
Technically it's a function on an object,
but

198
00:12:11.887 --> 00:12:15.136
I hear people use the word
method just all the time.

199
00:12:15.136 --> 00:12:19.728
So more or less when I say the words
method just assume that I mean function.

200
00:12:19.728 --> 00:12:24.061
There's also like procedure,
there's a bunch of words for functions.

201
00:12:24.061 --> 00:12:26.881
Most of the time people say
either function or method.

202
00:12:26.881 --> 00:12:28.337
It varies language by language.

203
00:12:28.337 --> 00:12:31.620
There's some languages that
use the word like method more.

204
00:12:31.620 --> 00:12:32.911
Does that make sense?

205
00:12:32.911 --> 00:12:37.639
Okay, sometimes it's just that vocabulary
that sometimes I just have a hard

206
00:12:37.639 --> 00:12:38.812
time unraveling.

207
00:12:40.128 --> 00:12:44.690
&gt;&gt; Brian Holt: Okay, so forEach is
technically a method, it's a function,

208
00:12:44.690 --> 00:12:45.212
okay?

209
00:12:45.212 --> 00:12:49.897
And it's a function that you
give another function to, right?

210
00:12:49.897 --> 00:12:55.045
So this is what we would
call an anonymous function.

211
00:12:55.045 --> 00:13:01.775
And this function is going to be run
once on every item in the array, right?

212
00:13:01.775 --> 00:13:02.972
In fact let's just do this.

213
00:13:02.972 --> 00:13:08.230
If I do let numberOfTimesRan,

214
00:13:08.230 --> 00:13:14.708
right now it's been done zero times.

215
00:13:14.708 --> 00:13:18.304
And I'm gonna do NumberOfTimesRan++, so

216
00:13:18.304 --> 00:13:23.708
every time this function gets run,
this is gonna get incremented.

217
00:13:23.708 --> 00:13:26.487
So if I come down here at the bottom and

218
00:13:26.487 --> 00:13:32.236
I say console.log[numberOfTimesRan],
what's that number gonna be?

219
00:13:33.903 --> 00:13:35.610
&gt;&gt; Brian Holt: How many
items are in the array?

220
00:13:35.610 --> 00:13:37.496
Five.

221
00:13:37.496 --> 00:13:40.297
So down here, five, right?

222
00:13:40.297 --> 00:13:43.871
So this function gets run five times.

223
00:13:43.871 --> 00:13:47.941
One time for each item in the array and
then down here I'm saying,

224
00:13:47.941 --> 00:13:49.581
console.log(city).

225
00:13:49.581 --> 00:13:53.121
City is being injected as
a parameter from cities and

226
00:13:53.121 --> 00:13:57.633
that's what forEach does for you,
that's the point of forEach.

227
00:13:57.633 --> 00:14:01.753
So that´s why you´re able to see Seattle,
San Francisco.

228
00:14:01.753 --> 00:14:06.971
Let's just make this to make it
even more clear, toLowerCase.

229
00:14:11.700 --> 00:14:14.447
&gt;&gt; Brian Holt: And you can see here
these are the ones that are being logged

230
00:14:14.447 --> 00:14:15.241
out by forEach.

231
00:14:15.241 --> 00:14:18.478
This is two different ways
to accomplish the same goal.

232
00:14:18.478 --> 00:14:20.145
And this is what forEach does for you.

233
00:14:21.659 --> 00:14:23.807
&gt;&gt; Brian Holt: Questions about forEach?

234
00:14:23.807 --> 00:14:28.765
&gt;&gt; Speaker 4: Is there a preferred method
when you're programming to use forEach or,

235
00:14:28.765 --> 00:14:29.505
forLoop?

236
00:14:29.505 --> 00:14:31.498
&gt;&gt; Brian Holt: It depends
on who you ask for sure.

237
00:14:31.498 --> 00:14:34.783
It's definitely a matter of preference.

238
00:14:34.783 --> 00:14:40.215
I use forEach constantly and
use for loops far less.

239
00:14:40.215 --> 00:14:42.603
This is a personal preference.

240
00:14:42.603 --> 00:14:46.008
This is more towards what they
call functional programming,

241
00:14:46.008 --> 00:14:50.532
which I'm a big fan of and there are other
people that don't like it quite as much.

242
00:14:50.532 --> 00:14:53.689
If you ask, like for example,
a hardcore Java developer,

243
00:14:53.689 --> 00:14:56.479
probably far less a fan of
functional programming.

244
00:14:56.479 --> 00:15:00.884
But if you ask someone that's like a
Haskell programmer or something like that,

245
00:15:00.884 --> 00:15:04.594
they would laugh at you for using a for
loop because they're a jerk.

246
00:15:04.594 --> 00:15:09.189
[LAUGH] So do what works for you.

247
00:15:09.189 --> 00:15:11.877
If one of these methods feels better or

248
00:15:11.877 --> 00:15:15.326
looks better to you then
absolutely do that one.

249
00:15:17.159 --> 00:15:19.381
&gt;&gt; Brian Holt: In fact, I'm curious,
who prefers method one?

250
00:15:19.381 --> 00:15:22.252
Just raise your hands here in the room.

251
00:15:22.252 --> 00:15:25.645
And who here prefers method two?

252
00:15:25.645 --> 00:15:27.528
And who here just wants to go home?

253
00:15:27.528 --> 00:15:28.039
[LAUGH].

254
00:15:28.039 --> 00:15:29.863
&gt;&gt; Speaker 4: [LAUGH]
&gt;&gt; Brian Holt: Okay, most of you, cool.

255
00:15:29.863 --> 00:15:32.486
&gt;&gt; Speaker 5: I'm used to method one,
so I just have to get used to a forEach-

256
00:15:32.486 --> 00:15:33.163
&gt;&gt; Brian Holt: Yeah.

257
00:15:33.163 --> 00:15:35.495
&gt;&gt; Speaker 5: Index, you can show right
there you can use an index just by

258
00:15:35.495 --> 00:15:37.216
creating your own counter for it, right?

259
00:15:37.216 --> 00:15:37.840
&gt;&gt; Brian Holt: Yeah, so

260
00:15:37.840 --> 00:15:42.375
actually what you can do,
there's a phantom other parameter here.

261
00:15:42.375 --> 00:15:45.894
That it's also injecting, and
I here to have been ignoring.

262
00:15:45.894 --> 00:15:49.790
And this index, if I just did index,

263
00:15:49.790 --> 00:15:56.087
you can see here it actually is
injecting the index as well.

264
00:15:59.959 --> 00:16:04.257
&gt;&gt; Brian Holt: This is the tip of
an iceberg of functional programming.

265
00:16:04.257 --> 00:16:08.341
There's another Kyle Simpson course
called Functional Programming Light.

266
00:16:08.341 --> 00:16:13.333
There's also Brian Longster's course
which are both phenomenal courses

267
00:16:13.333 --> 00:16:14.846
on Frontend Masters.

268
00:16:14.846 --> 00:16:18.051
Brian Longster also has a book,
so does Kyle.

269
00:16:18.051 --> 00:16:20.922
They're all really good ways of
getting into functional programming.

270
00:16:20.922 --> 00:16:24.655
It's more stuff like this,
like method two up here.

271
00:16:24.655 --> 00:16:28.625
I will say that I've never taught this
to developers on the first time that

272
00:16:28.625 --> 00:16:30.368
they're learning to program.

273
00:16:30.368 --> 00:16:33.323
And it's because I used to be
scared of functional programming.

274
00:16:33.323 --> 00:16:36.861
And at some point I realized that this
is actually a really good way for

275
00:16:36.861 --> 00:16:39.362
people to get into it and
get exposed to it early.

276
00:16:39.362 --> 00:16:43.049
Because it took me probably five years
into my career before I started doing

277
00:16:43.049 --> 00:16:44.285
programming like this.

278
00:16:44.285 --> 00:16:47.158
And my code is much better now, I think.

279
00:16:47.158 --> 00:16:49.923
&gt;&gt; Speaker 3: That's why I'd
actually recommend Bianca's,

280
00:16:49.923 --> 00:16:52.873
fundamentals to functional
JavaScript course.

281
00:16:52.873 --> 00:16:54.454
&gt;&gt; Brian Holt: Okay,
she has this, too, I forgot that.

282
00:16:54.454 --> 00:16:57.254
&gt;&gt; Speaker 3: Because she tries to
cover that bridge between the basics of

283
00:16:57.254 --> 00:16:59.730
JavaScript to starting to
use functional methods.

284
00:16:59.730 --> 00:17:02.212
&gt;&gt; Brian Holt: Totally, so yeah,
definitely check out Bianca's course.

285
00:17:03.834 --> 00:17:07.305
&gt;&gt; Brian Holt: I definitely endorse
Bianca as a teacher in general.

286
00:17:07.305 --> 00:17:09.388
A lot of my teaching
style is based on hers.

287
00:17:09.388 --> 00:17:13.806
So I like to say I borrowed it but
I definitely just stole it.

288
00:17:13.806 --> 00:17:16.622
[LAUGH] She’s phenomenal.

289
00:17:19.390 --> 00:17:21.590
&gt;&gt; Brian Holt: Questions about this?

290
00:17:21.590 --> 00:17:23.111
I don't really test you on this.

291
00:17:23.111 --> 00:17:26.676
There's a lot more deeper
rabbit hole to go down here,

292
00:17:26.676 --> 00:17:29.244
I just wanted to expose it to you early.

293
00:17:29.244 --> 00:17:32.172
So the journey will feel
impossible to you sometimes, so

294
00:17:32.172 --> 00:17:34.192
if this feels hard it's because it is.

295
00:17:34.192 --> 00:17:37.701
That's okay, but
Jerome is a really awesome guy.

296
00:17:37.701 --> 00:17:39.900
That is Objects and Arrays.

