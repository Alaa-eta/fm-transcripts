[00:00:00]
>> Brian Holt: So floats and flex.
>> Brian Holt: We talked a little bit about floats.
>> Brian Holt: Do I do it here?
>> Brian Holt: So yeah, we'll talk about floats here in just a second. What I want to say is, for the rest of this page, we're gonna be talking a lot about how to get things to lay out, how to get them to stay in relation to each other the way that you want to.

[00:00:29]
So the entire time, I'm gonna be using three different boxes, Box 1, Box 2, and Box 3. Box 1 is both tall and wide. Box 2 is just wide and box 3 is just tall. So this is the CSS I used to make them. So just so you know, I'm gonna be reusing these boxes over and over again.

[00:00:51]
This is where they're styled.
>> Brian Holt: So floats does the old, bullet-proof way of laying things out. If you need to support Windows XP, you're gonna be using floats. I'm sorry.
>> Brian Holt: Internet Explorer 6 has literally taken years of my life. [LAUGH] I used to work at a company that worked on a website and a good quarter of our people browsing our website were from the state of Utah, board state employees.

[00:01:25]
And all of the computers, I think, for the state of Utah are still on Windows XP. So we had to support Windows XP, which means we have to support Internet Explorer 6. Now if you're just getting in to web development, you will hopefully never have to know the woes of supporting IE6, but it's hard.

[00:01:44]
I never had to support IE5, which I am told it was yet worse. But IE6 was pretty damn bad. Now you just have to deal with IE11, which is has its own problems, just not necessarily as bad. It supports flex. So [LAUGH], okay. So floats. If you would use floats typically when you could not use flex, this isn't totally true.

[00:02:09]
There are still occasions where floats can be useful, nonetheless. If I do floated div, so all these divs in here. I guess I didn't talk about descendents, did I? I guess that bears mentioning for just a second. So this is all the divs inside of floated. Typically, I would not tell you to do this, typically I would tell you to select each one of these like I would may be just give each of these like box, box, box.

[00:02:44]
If I was doing this from my production website, this is what I would do instead.
>> Brian Holt: So if you put that space there you're saying a descendent of this, right? So .floated .box is a box inside of floated. Do we follow? Does that make sense?
>> Brian Holt: Now if I even have boxes nested deeply inside, it doesn't matter how far nested.

[00:03:17]
It's just any box that's inside of any floated, any box that's inside of any floated, right? Cool. If you wanted to limit it to just the immediate descendent, so it has to be the first layer underneath here, you can use this little arrow, and that will say, only directly inside of it.

[00:03:40]
So that is actually possible. But don't, usually these are called structural selectors, and there are a few of them. For the most part, you want to steer clear of them because as soon as someone changes the structure of your HTML, all of your CSS breaks. That's a bad thing.

[00:03:58]
So okay, so I have this blue floated right here. So this is box 1, it's blue, floats to the left, right? So it pushes as far to the left as it possibly can. Then at box 2 which is the red one, pushes as far to the left as it possibly can and then box 3 does not fit here on the right.

[00:04:21]
So then it wraps to the next line as and it goes here and it pushes against the blue one and then since it did hit it there, it stops there, just kind of curious, right? So it doesn't go down here, it actually goes here, right? Now if I zoom out enough, you'll see here that it actually, because it can still fit on that line, it's still trying to float left, it'll stay on that line.

[00:04:48]
But if I zoom in further,
>> Brian Holt: Where am I? Okay, there we go. So now, this one wraps because it doesn't fit, right, but what's curious is this number three one. This is one of the limitations of float. You would think that this would just push up all the way up here, right?

[00:05:14]
I thought it would, but it doesn't because it will never push up higher than a box that comes before it, right. So this is box 3. Box 3 will never be higher than box 2, so that's why it stops here. Why? I don't know, it's the way it is.

[00:05:37]
And in case you're wondering, if I make it even smaller,
>> Brian Holt: It just pushes the next line. Makes sense?
>> Brian Holt: Okay, cool.
>> Brian Holt: That should be enough for floats. You can also float right as well. That's the opposite.
>> Brian Holt: So let's get into display flex then, which is fun stuff.

[00:06:22]

>> Brian Holt: So, a key thing to know about flex is if I put display flex on some element. When I set the properties, I am controlling all of the children of it. I'm not controlling that element itself which is different from floating, right. I said here, this box, right, I told that to float left which means it's controlling itself and pushing itself to the left.

[00:06:48]
When I'm doing flex, I'm then controlling everything inside of it, right? So you put display flex on the parent container, that's a key thing. And we'll get there and I'll show you. So I have flex-container right here, right? And here on flex-container I'm saying, display flex and right now, all that's doing is just making everything lay out on the same line.

[00:07:13]
But what's curious about this compared to float, notice that if I make this smaller,
>> Brian Holt: With display flex, it squishes it rather. These even have width, right? Remember, up top that we set widths on these. But with this display flex, I did not give it permission to wrap.

[00:07:36]

>> Brian Holt: Not like the hip hop style, I also did not give it permission to rap that way. But in this particular case, it just squishes them proportionally. I could come up here and say,
>> Brian Holt: Flex-wrap and wrap, and then it would wrap at that point.
>> Brian Holt: But by default, it thinks like, no, you want to try and squish as much onto the same line as possible.

[00:08:12]

>> Brian Holt: Which is pretty cool I think, right.
>> Brian Holt: So now we're gonna mess with three things pretty extensively. I think, in my opinion, these are the most useful things from flex are flex-direction, justify-content, and align-items. These are kinda three that you toy around with. There are far more powerful things that you can do with display flex and you should definitely watch Jen's course on it, on Frontend Masters.

[00:08:38]
I think she goes more into depth on some of these things. I'm giving you the 90% use, she will definitely give you the 10% use as well.
>> Brian Holt: So flex-direction. Something that you could not previously really do, I can tell it's like hey, reverse. So notice that one comes first, but it's also the furthest to the right.

[00:09:05]
This was really difficult/impossible to do previously, but with flex, you can just say yeah, reverse that, and it just works. Just blows my mind still to this day, super cool.
>> Brian Holt: It knows I'm still using flex-container. Everything is still the same from what was up here. So right now, I'm just adding just flex-direction and then it just reverses.

[00:09:29]
So trying to show to kinda isolate these things to show you them in a vacuum. Questions about any of this so far? Again, notice that I'm messing with the parent container. I'm not messing with the boxes at all. All of the boxes in all of these flex examples are exactly the same.

[00:09:50]
I'm just messing with the parent container. That's a key thing to kinda keep in your head. With flex, you're messing with the parent.
>> Brian Holt: Okay? Now I can say rather than go in backwards or forward in a row, I want you to go in a column. So I want you to go up and down.

[00:10:12]
So you just say, flex-direction column and it just goes in the column, and it just works.
>> Brian Holt: I think you can even do column reverse and you have 3, 2, 1. That's also possible as well, you can just keep doing that. Again, really cool stuff, really difficult slash impossible, in fact this was impossible to do before.

[00:10:39]
You could not do this with floats.
>> Brian Holt: So let's put this back to column.
>> Brian Holt: Yeah, column-reverse also works. So I think that that's it for flex-direction. I don't think there's really much else you can do with it. So justify-content.
>> Brian Holt: Let me make this, I'm just gonna zoom out of this a little bit, so you can see these a little bit more.

[00:11:18]
Otherwise, it's hard to see. So justify-content right, I do justify-content flex-end. And when I say flex-end, it moves everything as far to the right as possible. And that's what flex-end does, move everything to the right. As you might imagine flex-start is everything to the left. If you don't change anything, it's flex-start.

[00:11:41]
So by default, it's flex-start which is why you don't typically see it. Okay, justify-content center as you might imagine, squishes everything into the middle. Now notice, we're not doing anything vertically at all yet, and you can see this box here. This shows you that this is how tall the element is, right?

[00:12:03]
Cuz it's as tall as number three is, but we're just moving things left and right. We're not moving anything up and down yet. So this is what justify-content center does, it moves everything to the middle. I want you to be extremely grateful right now that this is how easy it is to center things.

[00:12:20]
The like goats I had to sacrifice [LAUGH] to get things to center previously, not proud of what I did. [LAUGH] Centering used to be an extremely difficult thing to do. But now with flex, it's just really simple. Or I'll go with more simple than it was before.
>> Brian Holt: So now if I want to space things out evenly, where the left and the right are as far to the left and right as they possibly can, and then have equal space in between, you can do space between.

[00:12:59]
So it will optimize to make these things as evenly spaced as it possibly can.
>> Brian Holt: And then space around, what it's going to do is it's going to put space between the flex-start and the flex-end, as well as space between these things. So there's a space around where the beginning and the end is half of these ones, if that makes sense.

[00:13:28]
You can also do space evenly, and then everything will be spaced literally evenly.
>> Brian Holt: I tend to use space between more.
>> Brian Holt: Not space-between but space-around, rather.
>> Brian Holt: Any questions about justify-content? So again, that's left and right not up and down. Now we're gonna do align-items which is up and down.

[00:14:05]

>> Brian Holt: So align-items.
>> Brian Holt: I don't know why needed to do that, should just be able to do that. Anyway, so flex-end, align-items flex-end. That's moving everything from the top. It's actually gonna be on the bottom now, so this is aligned against the bottom, it's not aligned against the top.

[00:14:32]

>> Brian Holt: Again, previously this would have been extremely difficult and now it's just like one property. It's just align-items flex-end, and everything just moves down to the bottom. It moves down to the bottom, right. Notice that this container is as big as number 3, right, cuz that's the tallest one, and it moves everything to the bottom of 3.

[00:14:52]
So I could say here like,
>> Brian Holt: padding-top, 20 pixels. And notice that everything continues moving down to the bottom as far as it could possibly go.
>> Brian Holt: So that make sense? Cool.
>> Brian Holt: Align-items, center, so now this is going to vertically center it.
>> Brian Holt: So this one has equal space here to equal space there.

[00:15:30]
Equal space, equal space, right? And this one's up against the top and the bottom.
>> Brian Holt: Okay? Align-items, stretch. This is the only one that I had to modify, actually, the boxes themselves because if you set a height, it will actually respect the height. And I wanted it to actually just stretch everything out.

[00:15:50]
So if you say align-items, stretch, anything that doesn't have a height necessarily, it's going to stretch out to fit inside of that div, right. So this stretches from the top to the bottom, top to the bottom, top to the bottom.
>> Brian Holt: So I had to set a height here of how much I want this to stretch.

[00:16:07]
So if I set this to 400, it'll be stretched even further. Really, really cool stuff that's really easy to change with just a couple of properties.
>> Brian Holt: Or I mean, really just awesome stuff you could do here. If I said get rid of that no height thing, and I got rid of this height thing, so now this container doesn't actually have any sort of height set on the parent.

[00:16:44]
But if I come in here and say box-3,
>> Brian Holt: And I set just the heights of box-3 to be 250 pixels.
>> Brian Holt: Yeah, no, I messed up a lot of things by doing that. Notice that, it's stretched its sibling containers to match the height of the tallest element, which is awesome.

[00:17:13]
It's really cool that you can just set one of the heights and all of them stretch to match that. You might be thinking like, okay, cool, I don't care, it was so hard to do that before. So, so hard. So I'm using the cascade like I told you not to.

[00:17:33]
[LAUGH] And I'm telling it, hey, you previously had height set on you, ignore it. So it's saying that you had something set on you, ignore it, and just get whatever the parent, the ancestor height was previously. Make sense?
>> Speaker 2: Because the ancestor inside the parent?
>> Brian Holt: Either. So it's in this case like I have up here box 1, box 2, and box 3.

[00:18:01]
So their heights set way up there, I'm telling you to ignore those.
>> Speaker 2: And then whatever is after it to pick, why did you do the inherit?
>> Brian Holt: Cuz if I do this then they're gonna have height. And so the stretch isn't gonna work.
>> Speaker 2: Okay.
>> Brian Holt: And that stretch is only gonna work when they don't have height set.

[00:18:22]

>> Speaker 2: Okay.
>> Brian Holt: Good question.
>> Speaker 2: And then I'm assuming once we get further into it, instead of saying height is 200 pixels, you'll be able to set it according to your device size, right? So you could do some sort of variable?
>> Brian Holt: Sure, you can say things like width 50%.

[00:18:46]

>> Speaker 2: Okay.
>> Brian Holt: Yeah, and that's actually probably what we're gonna use the most. I don't really talk too much about responsive webdesign, like responsive coding. That's the name of that technique, is making things like fit screens. Cuz scrolling side to side on a phone is like the great evil, [LAUGH] I don't like it.

[00:19:05]

>> Brian Holt: You do that using percentages and another thing called media queries, which are kind of an advanced feature in CSS worth investigation and understanding. You do have a responsive course, don't you?
>> Speaker 3: Yeah, the title of the course is responsive design with CSS and flexible apps.
>> Brian Holt: Cool.

[00:19:27]
Yeah, and grid in particular, is really, really cool cuz you can make your page into like a grid of things, and you say okay, this takes up one unit, this takes up two units, and this takes up one unit. And it just kind of like, figures out all those spacing for you, which is really cool.

[00:19:44]
So yes, the answer for your question is yes.
>> Brian Holt: Other questions? Great questions so far.
>> Brian Holt: Cool, so what I wanted to show you here is you can start combining these things to get really cool effects. So one that I will use quite often is I'll have a div that's gonna be of a certain size.

[00:20:08]
And I want to make sure everything is horizontally centered and vertically centered. So I will justify center and align item center. And that just makes everything sit in the middle. If you remember at the top, if you go up here to the top of the page.
>> Brian Holt: See how this box 2 is sitting exactly in the middle of the div?

[00:20:29]
The way that I did that, if you notice, display flex, align item center, justify content center. And that make everything just be exactly in the middle of the box at all times. And what's nice about that, if I make this width 400, still centered. If I do this height 400, still centered.

[00:20:48]
If you want to make this width,
>> Brian Holt: Let's say 50%. No, that's too big because there's margins around it. But let's say 40%. Everything is still totally centered in terms of the box 2 inside of it. So, that's the trick for centering something inside of something, is display flex, align-item center, and justify-content center.

[00:21:18]
You'll use that quite a bit.
>> Brian Holt: Cool, so yeah. This is a line item, center, reverse, and justify content space around. That's what that looks like or if I do flex-container, align items, flex end, and column looks like that pushed up in a column on the right.
>> Brian Holt: So I'm teaching you a bunch of these individual properties in a vacuum, and the truth is, you don't really use them in a vacuum too much.

[00:21:54]
It's usually in conjunction with a bunch of these properties to achieve some effects that you're trying to see, right? I don't know why you would make something look like that, but for some reason, some day, you're gonna have to, and that's how you do it, right? Cuz you combine all these things together to get everything pushed to the right and in a column.

[00:22:14]

>> Brian Holt: Questions?
>> Brian Holt: Cool, we talked a hot second about flex wrap which is right now, if you have too many things on a line, it squishes them together, and it starts squishing their widths. And if you wanted to say no, if this is too wide, if I have too many things on this line, go down to the next line, that's flex wrap, that's what that does.

[00:22:43]
And then the last thing is you can start doing crazy stuff with order. So everything I showed you right now goes on the container. The container, the parent level. There's actually properties that you can do on the children themselves. So I'm wondering if I can just do this and show you.

[00:23:07]
I'm going to do it on this one actually. So if I do another style here, and I do box-2, dangers of live coding. If I do box-2 and I say align self flex-end. I can actually individually move boxes and I can even start messing with the order. I can say order 5, and move that to the beginning from, whereas if I do .box-1 here,

[00:23:51]

>> Brian Holt: I can use order to move that like 10, and that'll move it to the beginning. So the higher ones are gonna be ordered first. Or but if I do like one then it's gonna move it back, right. So now, you have two then one, then one that's unordered.

[00:24:09]
Again, this was totally impossible before. Like without flex and being able to set order on these things. And again, you could do like align-self here as well, align-self, flex-start. So now, this is in the bottom, this is on the top, and this one's technically in the middle. So, crazy stuff.

[00:24:34]
Pretty cool stuff anyway. I don't wanna get too much more into that. Well, you can see, this got really messed up. [LAUGH] The place to look on this, something I find myself constantly referring to CSS tricks, a complete guide to flex box. I was talking to the guy that writes this blog, this is by far their most popular page.

[00:25:03]
Like literally like ten times more than any other page, it's because there's a ton of stuff on here, it's impossible to keep all these stuff in your head. There's just too much that you can do with the flex-box. So this page is like a definitive reference for it, and it's all really clear to understand, which is what I like about it.

[00:25:21]
So flex-directions on here. I didn't even talk about flex-grow, you can have things like grow to take up their space. That's really interesting. You can tell them like, this one should be twice as big as the next one. You can give them ratios like that, which is really cool.

[00:25:36]
There's some really, really cool stuff you can do with it. So become familiar with this page. They have one for grid, as well, which is quite good.

