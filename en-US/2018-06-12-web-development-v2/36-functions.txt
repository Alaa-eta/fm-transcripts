[00:00:00]
>> Brian Holt: So far we've just kind of been executing just little statements. If we had to do everything like this, there's actually a term for what we're doing, it's called procedural programming. Again one of those words that you do not have to remember, it's just kind of an FYI.

[00:00:16]
If we had to do everything this way it would be kind of crappy [LAUGH] right? Because we would have to like write our program just entirely like a procedure and that's far less fun. There is a thing in JavaScript called functions. Which is pretty common, most programming languages have them.

[00:00:33]
And they basically encapsulate little pieces of logic that you can reuse all over the place. So let's just dive right into it and see what it looks like. So I have a function here called add to that accepts a number, right. So inside of this parenthesis, this is all the input that this function would accept, okay.

[00:00:55]
So this one accepts one number and then it returns that number plus two. So as you might imagine, if I do add two to five, what do you think I'm gonna get down here for the final answer? Seven, right? Cuz it takes five, five then becomes the number right here.

[00:01:17]
So then it returns five plus two, you get seven, right? I can go down here and say console, dot, log, add 2 to 100.
>> Brian Holt: So, what's cool about add two now is I have this function that I can reuse all over the place. I write it once and I get to reuse this function over and over and over again, which is really nice because then I don't have to rewrite this a bunch of different times.

[00:01:52]
Now this is totally worthless. There's absolutely no reason that I would write, add two, I would just normally add two to something, that's not really that useful. But you can make these functions quite involved that do a lot of things.
>> Brian Holt: So here's a really good one, I wrote this function called greet that takes in a first name, a last name, an honorific, that's the term for like Mr., Mrs., Ms, all those things, that's called, Dr., that's considered an honorific.

[00:02:25]
And a greeting. And I return this really long string here, right? So I can console.log down here greet, Brian, holt, lord and salutations. And so you can see down here, salutations, lord, holt. I was having fun. [LAUGH] I'm extremely pleased that you could join us Brian. I hope you enjoy, Lord Holt.

[00:02:45]
Okay. And then down here I do with Jack Sparrow, captain, and a-hoy. It says, A-hoy Captain Sparrow. I feel ridiculous reading this out loud. It doesn't matter, I'm still doing it. A-hoy Captain Sparrow! I'm extremely pleased you could join us, Jack. I hope you enjoy your stay, Captain Sparrow.

[00:03:05]
But you can see that here, I didn't have to rewrite that whole string every single time. I was able to use template strings and just plug in the various variables, right?
>> Brian Holt: So does that make sense? See a little bit more how functions can be useful and like they get even more involved than this, you can start doing some really cool stuff with them.

[00:03:25]
No questions so far?
>> Brian Holt: Okay.
>> Brian Holt: So let's just kinda break mechanics like you say function to declare that you're making a new function. This is the name of the function right here. So this is something that you name. And again, try and give this a really descriptive name.

[00:03:48]
So greet is a pretty good one because you know that whatever comes back out of greet is going to be some sort of greeting, right? Also, kind of a rule of thumb, this is not a hard and fast rule, but it's kind of a useful one, generally, function names are verbs, right?

[00:04:03]
Because the function does something, right? So greet is a verb, add to, you're doing something to something, right? So a function is generally a verb where as variable names are typically nouns because it represents a thing, right? So, first name is a thing, last name is a thing, honorific is a thing, like.

[00:04:19]
So generally, variables are
>> Brian Holt: Nouns, generally functions are verbs.
>> Brian Holt: There's nothing that's gonna make you do it that way. It's just a useful practice to get into.
>> Brian Holt: Let's talk about how you call functions. So whenever you invoke a function, whenever you're using a function the way that you say that is you are calling a function.

[00:04:48]
I don't actually really know where that came from. That's just the name for it. Or you can say invoke, but generally people say call. The way you do that is you put parentheses after it. So even if this took in nothing,
>> Brian Holt: You would just do this.
>> Brian Holt: Let's just say this is five.

[00:05:13]
So even though I am not giving it anything, you just put empty parentheses at the end to signify that you are calling the functions. So that's what those parentheses at the end mean, it means a function is being invoked. Make sense? Okay, that will become important later, because you can actually pass around functions as well.

[00:05:34]
We'll see how that works in a bit. But you do need to put the parentheses there if you intend to call it. If I just put add two right here, this is not useful because actually what happens is now final answer actually represents the function add two. It's not actually invoking the function.

[00:05:52]
It's a little confusing that now final answer's actually the function, so I can call final answer which they'll call the function. Again, we'll get there, that'll make total sense, I like, I have a section on this. So, make sure you put in parenthesis.
>> Brian Holt: Okay,
>> Brian Holt: Call, that's, yeah, it's calling a function, and just look out for parentheses.

[00:06:21]
Any time you see parentheses, you know that functions are being invoked somewhere. Like for example, notice that console.log here, right? You put parentheses there log is a function, right? It's a function that is being called.
>> Brian Holt: Okay so logout your home. This is another function I wrote, I put my home city, my home state, my home country.

[00:06:46]
Right? And then I call logout your home here, I call it with my home city, my home state, my home country. Right? And then this gets passed into log out your home, right? As city, state and country. I'm calling console log here. But I could've just as easily said logOutYour [SOUND] HomeWith.

[00:07:11]
I don't know, you could have said like Torrino which is in Piamonte and Italy.
>> Brian Holt: You are from Torrino, Pimont Italy, I guess that, Italia. Cuz that's [INAUDIBLE] an Italian,
>> Brian Holt: Right? So you can either pass variables into there, that works, or you can put strings directly in there, both of those things work.

[00:07:42]
Because my home city represents a string. So that those things, you can put either the representation of it or you can put the direct raw data in there, both of those work.

