[00:00:00]
>> Brian Holt: So far we've just kind of been executing just little statements. If we had to do everything like this, there's a term for what we're doing, it's called procedural programming. Again, one of those words that you do not have to remember. It's just kind of FYI. If we had to do everything this way, it would be kind of crappy [LAUGH], right.

[00:00:20]
Because we'd have to write our programs just entirely like a procedure, and that's far less fun. There's a thing in JavaScript called functions, which is pretty common. Most programming languages have them, and they basically encapsulate little pieces of logic that you can reuse all over the place. So let's just dive right into it and see what it looks like.

[00:00:44]
So I have a function here called addTwo, that accepts a number, right? So inside of these parentheses, this is all the input that this function would accept, okay? So this one accepts one number and then it returns that number plus two. So as you might imagine, if I do addTwo to 5, what do you think I'm gonna get down here for the final answer?

[00:01:12]
7, right? Cuz it takes 5, 5 then becomes the number right here. So then it returns 5 plus 2, you get 7, right? I can go down here and say console.log(addTwo(100)).
>> Brian Holt: So what's cool about addTwo now is I have this function that I can reuse all over the place.

[00:01:43]
I write it once, and I get to reuse this function over and over and over again. Which is really nice, because then I don't have to rewrite this a bunch of different times. Now, this is totally worthless. There is absolutely no reason that I would write addTwo. I would just normally add two to something.

[00:01:59]
That's not really that useful, but you can make these functions quite involved that do a lot of things.
>> Brian Holt: So here's a really good one. I wrote this function called greet that takes in a first name, a last name, an honorific. That's the term for like mister, missus, miss, all of those things that's, doctor, that's considered an honorific.

[00:02:25]
And a greeting. And I return this really long string here, right? So I can console.log down here greet Brian, Holt, Lord and Salutations. And so you see down here Salutations Lord Holt. I was having fun [LAUGH]. I'm extremely pleased that you could join us Brian, I hope you enjoy Lord Holt.

[00:02:45]
Okay, and then down here, I do with Jack Sparrow, Captain, and A-hoy. It says A-hoy Captain Sparrow. I feel ridiculous reading this out loud.
>> Group: [LAUGH]
>> Brian Holt: Doesn't matter, we're still doing it. A-hoy Captain Sparrow. I'm extremely pleased you could join us, Jack. I hope you enjoy your stay, Captain Sparrow.

[00:03:04]
But you can see that here, I didn't have to rewrite that whole string every single time. I was able to use template strings and just plug in the various variables, right? So does that make sense? See a little bit more how functions can be useful. And they get even more involved than this.

[00:03:21]
You can start doing some really cool stuff with them. No questions so far?
>> Brian Holt: Okay.
>> Brian Holt: So let's just kind of break mechanics. You say function to declare that you're making a new function. This is the name of the function right here. So this is something that you name.

[00:03:43]
And again, try and give this a really descriptive name. So greet is a pretty good one, because you know that whatever comes back out of greet is going to be some sort of greeting, right? Also a kind of a rule of thumb. This is not a hard and fast rule but it's kind of a useful one.

[00:03:59]
Generally, function names are verbs, right, because the function does something, right? So greet is a verb, add to you're doing something to something, right? So a function is generally a verb, whereas variable names are typically nouns, right, because it represents a thing, right? So firstName is a thing, lastName is a thing, honorific is a thing.

[00:04:19]
So generally variables are nouns, generally functions are verbs.
>> Brian Holt: There's nothing that's gonna make you do it that way. It's just a useful practice to get into. Let's talk about how you call functions. So whenever you invoke a function, whenever you're using a function, the way that you say that is you are calling a function.

[00:04:48]
I don't actually really know where that came from. That's just the name for it. Or you can say invoke, but generally people say call. The way you do that is you put parentheses after it. So even if this took in nothing.
>> Brian Holt: You would just do this.
>> Brian Holt: Let's just say this is 5.

[00:05:13]
So even if I'm not giving it anything, you just put empty parentheses at the end to signify that you are calling the functions. So that's what those parentheses at the end mean, it means that a function is being invoked. It makes sense? Okay. That will become important later because you can actually pass around functions as well.

[00:05:34]
We'll see that how that works in a bit. But you do need to put the parentheses there if you're intending to call it. If I just put addTwo right here, this is not useful. Because actually what happens is now finalAnswer actually represents the function addTwo and it's not actually invoking the function.

[00:05:52]
It's a little confusing. And now final answer is actually the function. So I can call finalAnswer, which then will call the function. Again, we'll get there. If that doesn't make a ton of sense, I have a section on this. So make sure you putting parentheses.
>> Brian Holt: Okay.
>> Brian Holt: Call, yeah that's called calling a function, and just look out for parentheses.

[00:06:21]
Anytime you see a parentheses, you know that functions are being invoked somewhere. Like for example, you've noticed that console.log here, right, you put parentheses there. Log is a function, right? It's a function that's being called.
>> Brian Holt: Okay. So, log out your home. This is another function that I wrote.

[00:06:43]
I put my home city, my home state, my home country, right. And then I call log out your home here. I call it with my home city, my home state, my come country, right. And then this gets passed into logoutYourHome, right? It has city, state, and country. I'm calling consoleLog here, but I could have just as easily said logoutYourHome with I don't know, you could have said like Torino, which is in Piemonte and Italy.

[00:07:26]

>> Brian Holt: You are from Torino, Piemonte, Italy. I guess at that Italia, cuz I did it in Italian, right? So you can either pass variables into there, that works, or you can put strings directly in there. Both of those things work. Because myHomeCity represents a string, so that those things you can put either the representation of it, or you can put the direct raw data in there.

[00:07:52]
Both of those work

