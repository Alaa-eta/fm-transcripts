WEBVTT

1
00:00:00.340 --> 00:00:02.450
&gt;&gt; Brian Holt: So lets get into
something called control flow.

2
00:00:02.450 --> 00:00:04.410
You don't really have to
remember the word control flow.

3
00:00:04.410 --> 00:00:08.100
It is what is called but
it's not really important.

4
00:00:09.220 --> 00:00:11.460
More commonly is just
called if statements.

5
00:00:13.000 --> 00:00:19.180
So, here's a really really simple one,
so I have this const called skyIsBlue.

6
00:00:19.180 --> 00:00:21.960
And I set it to true, so

7
00:00:21.960 --> 00:00:25.960
then I say here, I ask a question,
that's what if statements allow you to do.

8
00:00:25.960 --> 00:00:30.020
They're called conditionals because if
something is true than it'll do one thing,

9
00:00:30.020 --> 00:00:33.280
if something is not true
it will do something else.

10
00:00:33.280 --> 00:00:38.730
I think it follows, so if, and
then I ask is sky is blue?

11
00:00:38.730 --> 00:00:41.940
And sky is blue is true, right?

12
00:00:41.940 --> 00:00:44.200
So it's going to do the first block.

13
00:00:45.740 --> 00:00:50.998
So it's gonna go into here and
say console.log ("The sky is blue!");.

14
00:00:50.998 --> 00:00:56.221
Otherwise, it's gonna say console.log
("The sky is _ not blue?");.

15
00:00:56.221 --> 00:00:59.510
And it's gonna ask a question, because
you have problems if that's not true.

16
00:01:00.640 --> 00:01:04.960
So you can see here only one thing
is logged, only this first block.

17
00:01:04.960 --> 00:01:07.520
That is a word that you should
probably remember, block.

18
00:01:07.520 --> 00:01:10.660
This first block is run, so
everything between the curly braces,

19
00:01:10.660 --> 00:01:12.910
I could have multiple things here, too.

20
00:01:12.910 --> 00:01:16.100
So if I have five of those, you notice
that it's gonna log out a bunch of those,

21
00:01:16.100 --> 00:01:17.310
and it doesn't log out anything there.

22
00:01:18.930 --> 00:01:20.070
How do we feel about that so far?

23
00:01:22.550 --> 00:01:26.270
Nothing in the else block gets run,
that's what the else block does.

24
00:01:26.270 --> 00:01:29.620
It says, if this thing is not true,
then do this.

25
00:01:31.660 --> 00:01:34.817
Now if I change skyIsBlue to false,
what do you expect to happen?

26
00:01:40.751 --> 00:01:42.003
&gt;&gt; Brian Holt: It doesn't run this block,

27
00:01:42.003 --> 00:01:46.393
and it only runs this block.
&gt;&gt; Brian Holt: So

28
00:01:46.393 --> 00:01:49.825
that's what conditionals are for, for
doing something given some sort of

29
00:01:49.825 --> 00:01:53.100
condition.
&gt;&gt; Brian Holt: Now,

30
00:01:53.100 --> 00:01:58.950
you can have anything in here that
evaluates to true or false in some ways.

31
00:01:58.950 --> 00:02:02.720
Whatever happens inside the parenthesis,
the condition as you would

32
00:02:02.720 --> 00:02:08.200
probably call it, has to eventually come
down to, is this true or is this false.

33
00:02:08.200 --> 00:02:12.290
So you might imagine what happens if you
were trying to log out for temperatures.

34
00:02:14.940 --> 00:02:20.300
Sure, whatever,
we're just gonna do it right here,

35
00:02:20.300 --> 00:02:27.214
so if I had const temperature
&gt;&gt; Brian Holt: Today =.

36
00:02:27.214 --> 00:02:31.385
I think I saw in Minneapolis, it's gonna
get up to be 86, which is way too hot.

37
00:02:31.385 --> 00:02:35.866
[LAUGH] So if temperatureToday,

38
00:02:43.355 --> 00:02:45.229
&gt;&gt; Brian Holt: === That's annoying,

39
00:02:45.229 --> 00:02:48.165
I should probably change the font on this.

40
00:02:48.165 --> 00:02:50.857
So I have a special font that works here,

41
00:02:50.857 --> 00:02:55.457
if I put three equal signs together,
so these are three equal signs.

42
00:02:55.457 --> 00:02:59.985
It combines them into this like
special triple equals thing,

43
00:02:59.985 --> 00:03:04.348
let me just change this,
cuz this is gonna confuse people.

44
00:03:04.348 --> 00:03:09.055
That's a what did I decided
the was a good idea?

45
00:03:09.055 --> 00:03:14.640
Bryan was not thinking, okay, body,
I don't think I even did that.

46
00:03:14.640 --> 00:03:16.970
I think that's what this comes with,
how annoying.

47
00:03:21.420 --> 00:03:26.620
Code mirror Rules, code, no.

48
00:03:26.620 --> 00:03:33.767
Okay, now you can see
it's three equal signs.

49
00:03:33.767 --> 00:03:38.690
[LAUGH] My special font combines them
into that one glyph, that's like three

50
00:03:38.690 --> 00:03:43.410
equal signs, it's really nice for me but
it's probably terrible to teach with.

51
00:03:43.410 --> 00:03:46.750
So just so you know,
this is three equal signs.

52
00:03:46.750 --> 00:03:51.212
So if temperature === 86,

53
00:03:51.212 --> 00:04:00.163
then I'm gonna console.log
&gt;&gt; Brian Holt: it's too,

54
00:04:00.163 --> 00:04:03.402
let's do double quotes, it's too damn hot.

55
00:04:11.489 --> 00:04:14.343
&gt;&gt; Brian Holt: Okay, so === is asking

56
00:04:14.343 --> 00:04:21.450
the question,
is this temperatureToday equal to this.

57
00:04:21.450 --> 00:04:23.340
So the answer, is it equal to that?

58
00:04:24.490 --> 00:04:26.360
Yes, what is it saying here?

59
00:04:26.360 --> 00:04:30.970
Yeah, you need to close that.

60
00:04:32.100 --> 00:04:34.980
So now here it's saying it's too damn hot.

61
00:04:34.980 --> 00:04:39.430
That \ is for, don't worry about it.

62
00:04:39.430 --> 00:04:42.160
It's escaping the variable to make
sure that it doesn't break anything.

63
00:04:42.160 --> 00:04:45.920
But, suffice it to say it's not
something you really need to care about,

64
00:04:45.920 --> 00:04:46.640
at this juncture in time.

65
00:04:46.640 --> 00:04:49.210
You know what?

66
00:04:49.210 --> 00:04:50.949
Now you definitely don't
have to worry about

67
00:04:50.949 --> 00:04:55.819
it.
&gt;&gt; Brian Holt: Now this isn't

68
00:04:55.819 --> 00:05:01.410
really terribly useful, because
this only works in one temperature.

69
00:05:01.410 --> 00:05:05.842
It can be any number of temperatures
&gt;&gt; Brian Holt: So

70
00:05:05.842 --> 00:05:11.022
what would actually might be useful is,
if it is greater than or

71
00:05:11.022 --> 00:05:16.030
equal to, let's say 80,
then it says it's too damn hot.

72
00:05:17.130 --> 00:05:22.620
Otherwise, it says it's fine.
&gt;&gt; Brian Holt: Does that make sense?

73
00:05:24.000 --> 00:05:26.503
So you can do comparisons inside of here.

74
00:05:26.503 --> 00:05:30.991
Let's talk about triple equals,
a second longer.

75
00:05:30.991 --> 00:05:37.310
So triple equals, you might not be asking
like why is it not just equal to 80s.

76
00:05:38.680 --> 00:05:44.340
I don't want you to actually think about
a single equal signs as being equal to.

77
00:05:45.530 --> 00:05:51.450
Think of this as, is assigned, so
temperature today is assigned 80.

78
00:05:51.450 --> 00:05:54.030
So when you see one equal signs,

79
00:05:54.030 --> 00:05:56.860
mentally replace that in your head with,
is assigned.

80
00:05:58.160 --> 00:06:01.400
And then when you see double or
triple equals.

81
00:06:01.400 --> 00:06:02.631
You're gonna say,

82
00:06:02.631 --> 00:06:07.453
is temperature equal to 80?
&gt;&gt; Speaker 2: Is there

83
00:06:07.453 --> 00:06:09.974
a difference between the double and

84
00:06:09.974 --> 00:06:13.410
triple equals in Java?
&gt;&gt; Brian Holt: There is.

85
00:06:13.410 --> 00:06:15.166
So in this particular case,

86
00:06:15.166 --> 00:06:20.052
you would see no difference.
&gt;&gt; Brian Holt: You can see

87
00:06:20.052 --> 00:06:24.672
it does exactly the same thing,
I want you to always use ===.

88
00:06:24.672 --> 00:06:28.740
I will explain to you why
they are different, but

89
00:06:28.740 --> 00:06:33.250
just know that the one that
you are suppose to use is ===.

90
00:06:33.250 --> 00:06:35.076
There's a thing in
JavaScript called coercion.

91
00:06:35.076 --> 00:06:41.585
So let's just,
&gt;&gt; Brian Holt: I will show you,

92
00:06:41.585 --> 00:06:48.770
let's just say that this was
string 86 instead of just 86.

93
00:06:48.770 --> 00:06:53.770
So I put quotes around this, so
now this is equal to a string.

94
00:06:53.770 --> 00:06:56.770
And this is a number, right?

95
00:06:56.770 --> 00:07:01.050
So it's asking is this number
86 triple equals to string 86?

96
00:07:01.050 --> 00:07:06.395
And obviously they are not, but if I
did double equals, then they are equal.

97
00:07:06.395 --> 00:07:08.776
So double equals does this
thing called coercion, that it,

98
00:07:08.776 --> 00:07:11.404
it's like if you're trying to
compare a number against a string.

99
00:07:11.404 --> 00:07:14.280
It's gonna try and
make it work as much as possible.

100
00:07:14.280 --> 00:07:17.690
And then if you do triple equals it's
gonna say, if you're not the same type,

101
00:07:17.690 --> 00:07:21.120
if you're not of both numbers,
I don't care, you are not equals.

102
00:07:21.120 --> 00:07:25.430
And I will promise you that if you do
triple equals, you will save hours and

103
00:07:25.430 --> 00:07:26.550
hours and hours of your life.

104
00:07:27.770 --> 00:07:30.240
I know that because it has happened to me.

105
00:07:30.240 --> 00:07:33.730
So please just take my wisdom from me,

106
00:07:33.730 --> 00:07:37.190
because I, it's just not a fun bug
to find, because it's very subtle.

107
00:07:38.940 --> 00:07:41.000
Like trying to figure out that
these two things are different.

108
00:07:42.870 --> 00:07:46.990
Imagine those things are like hundreds
of lines apart it's pretty subtle and

109
00:07:46.990 --> 00:07:49.220
pretty difficult to figure that out.

110
00:07:49.220 --> 00:07:53.131
So just always use triple equals.

111
00:07:57.350 --> 00:08:01.793
&gt;&gt; Brian Holt: Questions?
&gt;&gt; Brian Holt: You feel okay about that?

112
00:08:03.856 --> 00:08:04.973
&gt;&gt; Brian Holt: Okay.

113
00:08:07.231 --> 00:08:08.505
&gt;&gt; Brian Holt: So this is more talking

114
00:08:08.505 --> 00:08:13.920
about triple, or quadruple, or, there
is no quadruple equals, triple equals.

115
00:08:13.920 --> 00:08:16.460
If you do 2+2 === 4, it says, thank god,

116
00:08:16.460 --> 00:08:19.070
the fundamental principles of
mathematics still hold true.

117
00:08:20.620 --> 00:08:22.875
You can tell how late at night
I was writing some of these

118
00:08:22.875 --> 00:08:25.620
[LAUGH].
&gt;&gt; Brian Holt: So

119
00:08:25.620 --> 00:08:27.980
you can see here that
this is how that works.

120
00:08:27.980 --> 00:08:32.169
Whereas, if I put, made this string four,
this would not be true, it would tell you

121
00:08:32.169 --> 00:08:41.592
to panic.
&gt;&gt; Brian Holt: Here I tell you about,

122
00:08:41.592 --> 00:08:42.830
is Brian cool?

123
00:08:42.830 --> 00:08:47.470
That's assigned true because it's
definitely true, sunglasses, just kidding.

124
00:08:50.080 --> 00:08:52.110
So yeah,
just think of that is assigned to true.

125
00:08:55.040 --> 00:08:58.760
And so, if you want to ask the question,
is not equal to,

126
00:08:58.760 --> 00:09:00.260
that's also a question you can ask.

127
00:09:02.230 --> 00:09:07.952
And here I also talk about coercion.
&gt;&gt; Brian Holt: So

128
00:09:07.952 --> 00:09:12.910
lets up here,
there is another thing you can do.

129
00:09:12.910 --> 00:09:17.970
If you replace the first equal series
with an exclamation point like that,

130
00:09:17.970 --> 00:09:21.200
this is asking the question
is not equal to.

131
00:09:23.250 --> 00:09:25.315
So if two plus two is not equal to four,

132
00:09:25.315 --> 00:09:28.480
then you probably want
to move this up here.

133
00:09:28.480 --> 00:09:33.390
But this is how you ask is not equals to.

134
00:09:33.390 --> 00:09:37.600
There's that as well, but again,
you wanna use exclamation equals equals

135
00:09:37.600 --> 00:09:42.882
always.
&gt;&gt; Brian Holt: So

136
00:09:42.882 --> 00:09:44.390
that is something else you can do.

137
00:09:45.550 --> 00:09:48.770
And then you have the ability to
ask more than one question as well.

138
00:09:50.000 --> 00:09:53.230
So if you have friendsAtYourParty
is assigned 10.

139
00:09:53.230 --> 00:09:55.830
So If friendsAtYourParty triple equals 0,

140
00:09:55.830 --> 00:09:59.410
it says cool,
now I have a lot of nachos to myself.

141
00:09:59.410 --> 00:10:00.625
I was hungry when I wrote this one.

142
00:10:00.625 --> 00:10:04.356
[LAUGH] I also wanted
nachos which is usually

143
00:10:04.356 --> 00:10:09.738
true.
&gt;&gt; Brian Holt: If friends at your party

144
00:10:09.738 --> 00:10:14.806
is greater than or equal to 4,
then you have perfect amount to

145
00:10:14.806 --> 00:10:20.883
play Mario Kart.
&gt;&gt; Brian Holt: Let's see,

146
00:10:20.883 --> 00:10:24.052
I probably meant to do this,
less than or equal to,

147
00:10:24.052 --> 00:10:29.234
oops.
&gt;&gt; Brian Holt: So

148
00:10:29.234 --> 00:10:35.380
if you have less than or equal to 4, I get
this mixed up all the time by the way.

149
00:10:35.380 --> 00:10:37.704
[LAUGH] So if this is like 3,

150
00:10:37.704 --> 00:10:42.860
then I would say perfect amount
of players in Mario Kart, and

151
00:10:42.860 --> 00:10:48.822
then if I change this to be 10,
then it says, we'll turn on the dance

152
00:10:48.822 --> 00:10:56.137
music.
&gt;&gt; Brian Holt: But I kinda want it to be

153
00:10:56.137 --> 00:11:02.710
0 right now cuz I want nachos to myself.
&gt;&gt; Brian Holt: Any questions about that?

154
00:11:02.710 --> 00:11:04.485
So you use is, else,

155
00:11:04.485 --> 00:11:10.253
if to ask another question
&gt;&gt; Brian Holt: So

156
00:11:10.253 --> 00:11:14.108
it's gonna say if this parts true do this,

157
00:11:14.108 --> 00:11:18.950
if this part is true then do this,
otherwise do this.

158
00:11:18.950 --> 00:11:21.271
That's kind of like
the logical progression here.

159
00:11:23.404 --> 00:11:25.985
&gt;&gt; Brian Holt: Make sense?

160
00:11:25.985 --> 00:11:28.310
Please.
&gt;&gt; Speaker 2: I know you said that

161
00:11:28.310 --> 00:11:32.180
it's not necessary, but it's like
standard to use colons in Javascript.

162
00:11:34.130 --> 00:11:36.180
&gt;&gt; Brian Holt: I would say on the whole,

163
00:11:36.180 --> 00:11:38.240
most people write their semi colons.

164
00:11:39.350 --> 00:11:43.220
If you wanna know what actually
like in practice happens for me,

165
00:11:43.220 --> 00:11:49.330
if I have this cut over here, I actually
don't usually hit the semi colons myself.

166
00:11:49.330 --> 00:11:51.360
So if I,
I'm gonna hit Command Save right now.

167
00:11:51.360 --> 00:11:56.890
And watch the semi colons,
my editor actually puts them in for me.

168
00:11:56.890 --> 00:11:59.890
And that way,

169
00:11:59.890 --> 00:12:04.300
I don't have to write them, because I'm
all about saving that key stroke economy.

170
00:12:04.300 --> 00:12:07.270
Which is a term that people use,
and it is ridiculous.

171
00:12:07.270 --> 00:12:12.670
[LAUGH] But they get put in there so
everyone's happy I think.

172
00:12:13.700 --> 00:12:19.746
Or no one's happy that also don't care,
in the end, it doesn't particularly

173
00:12:19.746 --> 00:12:25.424
matter.
&gt;&gt; Brian Holt: I guess what I should

174
00:12:25.424 --> 00:12:29.670
say is, there's some very strong held
opinions by some people on this subject.

175
00:12:29.670 --> 00:12:31.840
And actually one of the workshops
that I teach in for

176
00:12:31.840 --> 00:12:36.880
friendly masters, it was the first
version of complete intro to React.

177
00:12:36.880 --> 00:12:39.960
I did not use semi colons at
all during that workshop.

178
00:12:39.960 --> 00:12:41.940
So like even myself I
kind of gone back and

179
00:12:41.940 --> 00:12:44.090
forth, I don't like writing semi colon.

180
00:12:45.200 --> 00:12:46.500
That's the fundamental premise, but

181
00:12:46.500 --> 00:12:49.390
when they came out with the thing called
Prettier, that just does it for you.

182
00:12:49.390 --> 00:12:51.870
I was like, cool i never have
to think about this again or

183
00:12:51.870 --> 00:12:52.800
have this argument again.

184
00:12:54.480 --> 00:12:58.760
So I don't care, yeah.
&gt;&gt; Speaker 2: Question for the chat room.

185
00:12:59.930 --> 00:13:02.625
If we use three equal signs.

186
00:13:02.625 --> 00:13:07.828
Why don't we

187
00:13:07.828 --> 00:13:13.990
use &lt;==?
&gt;&gt; Brian Holt: It doesn't work,

188
00:13:13.990 --> 00:13:14.900
I think is the answer.

189
00:13:17.900 --> 00:13:21.030
That's a good question, I think
the answer to that question would be,

190
00:13:27.470 --> 00:13:30.680
I'm gonna say first I don't know,
I don't actually know.

191
00:13:30.680 --> 00:13:33.800
If I were to speculate,
it's because this has to be a number.

192
00:13:33.800 --> 00:13:37.510
The only way that this works,
it's called a comparator,

193
00:13:37.510 --> 00:13:39.570
sot his is comparing
one thing to the other.

194
00:13:39.570 --> 00:13:42.740
It has to be a number, so
no matter what it's gonna be coerced.

195
00:13:42.740 --> 00:13:45.380
Which is what you call it when you
change a string to a number, or

196
00:13:45.380 --> 00:13:46.210
a number to a string.

197
00:13:46.210 --> 00:13:48.830
When you're changing types,
it's called coercion.

198
00:13:48.830 --> 00:13:51.070
So it has to be coerced to
a number no matter what.

199
00:13:51.070 --> 00:13:54.920
So if this is not a number, it's gotta
be a number, so it's gonna try anyway,

200
00:13:54.920 --> 00:13:57.060
that would be my guess.

201
00:13:58.580 --> 00:14:01.740
The person to ask would probably be,
well it'd probably be Brendan Eich,

202
00:14:01.740 --> 00:14:06.180
the person that wrote JavaScript ,so.
&gt;&gt; Brian Holt: Good question

203
00:14:06.180 --> 00:14:13.722
though.
&gt;&gt; Brian Holt: Cool,

204
00:14:13.722 --> 00:14:15.342
now I have a lot of nachos to myself.

