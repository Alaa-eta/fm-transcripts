WEBVTT

1
00:00:00.000 --> 00:00:01.818
&gt;&gt; Brian Holt: So let's get into
something called control flow,

2
00:00:01.818 --> 00:00:03.895
you don't really have to
remember the word control flow.

3
00:00:03.895 --> 00:00:08.468
It is what it's called, but
it's not really important.

4
00:00:08.468 --> 00:00:11.036
More commonly,
it's just called if statements.

5
00:00:11.036 --> 00:00:15.701
So here's a really, really simple one.

6
00:00:15.701 --> 00:00:20.419
So I have this const called skyIsBlue,
and I set it to true.

7
00:00:21.770 --> 00:00:24.130
So then I say here, I ask a question.

8
00:00:24.130 --> 00:00:25.960
That's what if statements allow you to do.

9
00:00:25.960 --> 00:00:29.200
They're called conditionals
because if something is true,

10
00:00:29.200 --> 00:00:30.040
then it'll do one thing.

11
00:00:30.040 --> 00:00:33.280
If something is not true,
it will do something else.

12
00:00:33.280 --> 00:00:34.384
I think it follows, right?

13
00:00:34.384 --> 00:00:40.495
So if, and then I ask is skyIsBlue,
and skyIsBlue is true,

14
00:00:40.495 --> 00:00:45.153
right, so
it's going to do the first block.

15
00:00:45.153 --> 00:00:49.778
So it's gonna go into here and
say consult.log("The sky is blue!").

16
00:00:49.778 --> 00:00:54.566
Otherwise it's gonna say
console.log("The sky is _ not blue?"),

17
00:00:54.566 --> 00:00:59.510
and it's gonna ask a question because
you have problems if that's not true.

18
00:01:00.640 --> 00:01:02.900
So you can see here only
one thing is logged.

19
00:01:02.900 --> 00:01:07.520
Only this first block, that is a word
that you should probably remember, block.

20
00:01:07.520 --> 00:01:10.660
This first block is run, so
everything between the curly braces.

21
00:01:10.660 --> 00:01:12.910
I can have multiple things here, too.

22
00:01:12.910 --> 00:01:15.480
So, if I have like five of those,
notice that it's gonna log out

23
00:01:15.480 --> 00:01:17.820
a bunch of those and
it doesn't log out anything there, right?

24
00:01:18.930 --> 00:01:19.761
How do we feel about that so far?

25
00:01:21.972 --> 00:01:24.286
&gt;&gt; Brian Holt: So
nothing in the else block gets run, so

26
00:01:24.286 --> 00:01:26.270
that's what the else block does.

27
00:01:26.270 --> 00:01:29.093
It says if this thing is not true,
then do this.

28
00:01:31.245 --> 00:01:34.560
&gt;&gt; Brian Holt: Now if I change skyIsBlue
to false, what do you expect to happen?

29
00:01:40.556 --> 00:01:42.979
&gt;&gt; Brian Holt: It doesn't run this
block and it only runs this block.

30
00:01:46.128 --> 00:01:48.310
&gt;&gt; Brian Holt: So,
that's what conditionals are for.

31
00:01:48.310 --> 00:01:50.237
For doing something given
some sort of condition.

32
00:01:52.642 --> 00:01:56.223
&gt;&gt; Brian Holt: You can have anything
in here that evaluates to true or

33
00:01:56.223 --> 00:01:58.141
false in some ways, right?

34
00:01:58.141 --> 00:02:02.646
Whatever happens inside the parentheses,
the condition as you would

35
00:02:02.646 --> 00:02:07.697
probably call it, has to eventually come
down to is this true or is this false?

36
00:02:07.697 --> 00:02:15.660
So you might imagine what happens if you
were trying to log out for temperatures?

37
00:02:15.660 --> 00:02:16.870
&gt;&gt; Brian Holt: Sure, whatever,
we're just gonna do it right here.

38
00:02:16.870 --> 00:02:21.695
So if I had const temperatureToday =,

39
00:02:21.695 --> 00:02:26.521
I think I saw in Minneapolis it's going

40
00:02:26.521 --> 00:02:31.385
to get to be 86, which is way too hot.

41
00:02:31.385 --> 00:02:35.577
[LAUGH] So, if temperatureToday,

42
00:02:40.151 --> 00:02:41.483
&gt;&gt; Brian Holt: Triple equals,

43
00:02:41.483 --> 00:02:46.530
that's annoying,
I should probably change the font on this.

44
00:02:48.330 --> 00:02:51.650
So I have a special font that works here.

45
00:02:51.650 --> 00:02:55.670
If I put three equal signs together,
so these are three equal signs, right?

46
00:02:55.670 --> 00:02:59.640
It combines them into this
special triple equals thing.

47
00:02:59.640 --> 00:03:02.860
Let me just change this cuz
this is gonna confuse people.

48
00:03:04.490 --> 00:03:05.180
That's annoying.

49
00:03:06.460 --> 00:03:09.080
Why did I decide that
fear was a good idea?

50
00:03:09.080 --> 00:03:10.470
Brian was not thinking.

51
00:03:10.470 --> 00:03:11.110
Okay, body.

52
00:03:11.110 --> 00:03:14.640
I don't think I even did that.

53
00:03:14.640 --> 00:03:16.787
I think that's what this comes with,
how annoying?

54
00:03:21.113 --> 00:03:27.529
&gt;&gt; Brian Holt: Code, mirror,
rules, FireCode, no do Monaco.

55
00:03:31.131 --> 00:03:33.755
&gt;&gt; Brian Holt: Okay,
now you can see it's three equal signs.

56
00:03:33.755 --> 00:03:39.132
[LAUGH] My special font combines them into
that one glyph that's three equal signs.

57
00:03:39.132 --> 00:03:42.233
It's really nice for me but
it's probably terrible to teach with.

58
00:03:42.233 --> 00:03:46.750
So, just so you know,
this is three equal signs.

59
00:03:46.750 --> 00:03:51.394
So if temperature triple equals
86 then I'm going to console.log.

60
00:03:56.140 --> 00:04:02.960
&gt;&gt; Brian Holt: It's too,
let's do double quotes, it's too damn hot.

61
00:04:11.402 --> 00:04:15.673
&gt;&gt; Brian Holt: So
triple equals is asking the question,

62
00:04:15.673 --> 00:04:19.951
is this temperatureToday equal to this?

63
00:04:19.951 --> 00:04:23.479
So is it equal to that?

64
00:04:24.490 --> 00:04:26.420
Yes, what is it saying here?

65
00:04:28.420 --> 00:04:30.970
Yeah, you need to close that.

66
00:04:32.100 --> 00:04:34.774
So now here it's saying it's too damn hot.

67
00:04:34.774 --> 00:04:39.137
That backslash is for, don't worry
about it, it's escaping the variable to

68
00:04:39.137 --> 00:04:43.697
make sure that it doesn't break anything
but suffice it to say it's not something

69
00:04:43.697 --> 00:04:46.759
you really need to care about
at this juncture in time.

70
00:04:46.759 --> 00:04:48.314
You know what?

71
00:04:48.314 --> 00:04:50.177
Now you definitely don't
have to worry about it.

72
00:04:50.177 --> 00:04:54.892
[LAUGH]
&gt;&gt; Brian Holt: Now,

73
00:04:54.892 --> 00:04:59.796
this isn't really terribly useful because
this only works in one temperature,

74
00:04:59.796 --> 00:05:02.477
which it can be any
number of temperatures.

75
00:05:05.503 --> 00:05:10.658
&gt;&gt; Brian Holt: So, what would actually
might be useful is if it is greater than

76
00:05:10.658 --> 00:05:16.030
or equal to, let's say, 80,
then it says it's too damn hot.

77
00:05:17.130 --> 00:05:18.263
Otherwise, it says it's fine.

78
00:05:21.549 --> 00:05:22.620
&gt;&gt; Brian Holt: Does that make sense?

79
00:05:24.000 --> 00:05:26.380
So you can do comparisons inside of here.

80
00:05:26.380 --> 00:05:29.270
Let's talk about triple
equals just a second longer.

81
00:05:30.420 --> 00:05:34.410
So triple equals, you might be asking,

82
00:05:34.410 --> 00:05:38.680
why is it just not equal to 80s?

83
00:05:38.680 --> 00:05:43.738
I don't want you to actually think about
a single equals signs being equal to.

84
00:05:43.738 --> 00:05:47.155
Think of this as is assigned.

85
00:05:47.155 --> 00:05:50.647
So temperatureToday is assigned 80.

86
00:05:50.647 --> 00:05:52.971
So when you see one equal signs,

87
00:05:52.971 --> 00:05:57.028
mentally replace that in your head with,
is assigned.

88
00:05:57.028 --> 00:06:01.032
And then when you see double or
triple equals,

89
00:06:01.032 --> 00:06:05.660
you're going to say,
is temperature equal to 80.

90
00:06:05.660 --> 00:06:09.780
&gt;&gt; Speaker 2: Is there a difference
between the double and

91
00:06:09.780 --> 00:06:12.580
triple equals in Java?

92
00:06:12.580 --> 00:06:13.410
&gt;&gt; Brian Holt: There is.

93
00:06:13.410 --> 00:06:16.493
So in this particular case,
you would see no difference.

94
00:06:19.104 --> 00:06:20.730
&gt;&gt; Brian Holt: You can see it
does exactly the same thing.

95
00:06:20.730 --> 00:06:23.279
I want you to always use triple equals.

96
00:06:23.279 --> 00:06:26.939
I will explain to you why
they are different, but

97
00:06:26.939 --> 00:06:32.125
just know that the one that you're
supposed to use is triple equals.

98
00:06:32.125 --> 00:06:36.900
There is a thing in
JavaScript called coercion,

99
00:06:36.900 --> 00:06:40.168
so let's just, I will show you.

100
00:06:43.275 --> 00:06:48.450
&gt;&gt; Brian Holt: Let's just say that
this was string 86 instead of 86.

101
00:06:48.450 --> 00:06:53.770
So I put quotes around it, so
now this is equal to a string.

102
00:06:53.770 --> 00:06:56.770
And this is a number, right?

103
00:06:56.770 --> 00:07:00.510
So it's asking, is this number
86 triple equals to string 86?

104
00:07:00.510 --> 00:07:02.265
And obviously, they are not, right?

105
00:07:02.265 --> 00:07:06.209
But if I did double equals,
then they are equal.

106
00:07:06.209 --> 00:07:08.713
So double equals does this
thing called coercion, that,

107
00:07:08.713 --> 00:07:11.934
if you're trying to compare a number
against a string, it's gonna try and

108
00:07:11.934 --> 00:07:13.381
make it work as much as possible.

109
00:07:13.381 --> 00:07:17.424
And then if you do triple equals, it's
gonna say, if you're not the same type,

110
00:07:17.424 --> 00:07:20.710
if you're not both numbers,
I don't care, you are not equals.

111
00:07:20.710 --> 00:07:25.521
And I will promise you that if you do
triple equals, you will save hours and

112
00:07:25.521 --> 00:07:27.473
hours and hours of your life.

113
00:07:27.473 --> 00:07:28.866
I know that because it has happened to me.

114
00:07:28.866 --> 00:07:35.393
So please, just take my wisdom from me
cuz it's just not a fun bug to find.

115
00:07:35.393 --> 00:07:36.808
Because it's very subtle, right?

116
00:07:36.808 --> 00:07:40.361
Like trying to figure out that
these two things are different.

117
00:07:40.361 --> 00:07:44.813
Imagine those things
are hundreds of lines apart?

118
00:07:44.813 --> 00:07:50.070
It's pretty subtle and
pretty difficult to figure that out.

119
00:07:50.070 --> 00:07:52.504
So, just always use triple equals.

120
00:07:57.027 --> 00:08:01.254
&gt;&gt; Brian Holt: Questions?
You feel okay about that?

121
00:08:01.254 --> 00:08:08.075
Okay, so, this is more talking
about triple or quadruple,

122
00:08:08.075 --> 00:08:13.444
there is no quadruple equals,
triple equals.

123
00:08:13.444 --> 00:08:15.499
If you do 2 + 2 = 4, it says thank god,

124
00:08:15.499 --> 00:08:18.400
the fundamental principles of
mathematics still hold true.

125
00:08:18.400 --> 00:08:21.866
You can tell how late at night
I was writing some of these.

126
00:08:25.170 --> 00:08:27.084
&gt;&gt; Brian Holt: So you can see here,
this is how that works.

127
00:08:27.084 --> 00:08:29.330
Or else if I made this string 4,

128
00:08:29.330 --> 00:08:32.754
this would not be true,
it would tell you panic.

129
00:08:39.682 --> 00:08:42.226
&gt;&gt; Brian Holt: Here I tell you about,
isBrianCool.

130
00:08:42.226 --> 00:08:45.910
That's assigned true because
it's definitely true.

131
00:08:45.910 --> 00:08:46.871
Sunglasses, just kidding.

132
00:08:49.524 --> 00:08:51.555
&gt;&gt; Brian Holt: So yeah,
just think of that is assigned to true.

133
00:08:54.181 --> 00:08:57.800
&gt;&gt; Brian Holt: And so if you want to
ask the question, is not equal to,

134
00:08:57.800 --> 00:09:00.621
that's also a question you can ask.

135
00:09:00.621 --> 00:09:03.229
And here I also talk about coercion.

136
00:09:06.284 --> 00:09:09.427
&gt;&gt; Brian Holt: So let's go up here.

137
00:09:09.427 --> 00:09:12.910
There's another thing you can do.

138
00:09:12.910 --> 00:09:16.840
If you replace the first equals
here with an exclamation point,

139
00:09:16.840 --> 00:09:21.206
like that, this is asking the question,
is not equal to?

140
00:09:21.206 --> 00:09:23.662
So if 2 + 2 is not equal to 4,

141
00:09:23.662 --> 00:09:28.300
then you would probably want
to move this up here, right?

142
00:09:28.300 --> 00:09:32.330
But this is how you ask is not equals to.

143
00:09:32.330 --> 00:09:37.722
There is that as well, but
again you wanna use !== always.

144
00:09:42.270 --> 00:09:44.439
&gt;&gt; Brian Holt: So
that is something else you can do.

145
00:09:45.550 --> 00:09:48.770
And then you have the ability to ask
more than one question, as well.

146
00:09:50.000 --> 00:09:55.077
So if you have friendsAtYourParty is
assigned 10, so if (friendsAtYourParty

147
00:09:55.077 --> 00:09:59.410
=== 0), it says cool,
now I have a lot of nachos to myself.

148
00:09:59.410 --> 00:10:00.608
I was hungry when I wrote this one.

149
00:10:00.608 --> 00:10:05.040
[LAUGH] And I also wanted nachos,
which is usually true.

150
00:10:06.050 --> 00:10:11.273
if friends at your party is
greater than or equal to 4,

151
00:10:11.273 --> 00:10:15.941
then you have perfect
amount to play Mario Kart.

152
00:10:19.495 --> 00:10:22.110
&gt;&gt; Brian Holt: Let's see,
I probably meant to do this.

153
00:10:22.110 --> 00:10:22.610
Less than or equal to.

154
00:10:28.612 --> 00:10:31.515
&gt;&gt; Brian Holt: So
if you had less than equal to 4,

155
00:10:31.515 --> 00:10:35.330
I get these mixed up all the time,
by the way.

156
00:10:37.810 --> 00:10:44.024
So if this was like 3, then it would say,
perfect amount to play some Mario Kart.

157
00:10:44.024 --> 00:10:49.064
And then if I change this to be 10, then
it says, woo, turn on the dance music.

158
00:10:54.403 --> 00:10:57.638
&gt;&gt; Brian Holt: But I kinda want it to be
0 right now cuz I want nachos to myself.

159
00:11:01.206 --> 00:11:02.710
&gt;&gt; Brian Holt: Any questions about that?

160
00:11:02.710 --> 00:11:06.186
So you use else if to
ask another question.

161
00:11:09.374 --> 00:11:13.610
&gt;&gt; Brian Holt: So it's going to say,
if this part's true, do this.

162
00:11:13.610 --> 00:11:16.720
If this part is true, then do this.

163
00:11:16.720 --> 00:11:18.950
Otherwise, do this.

164
00:11:18.950 --> 00:11:20.945
That's kinda the logical progression here.

165
00:11:22.438 --> 00:11:23.137
&gt;&gt; Brian Holt: Make sense?

166
00:11:23.137 --> 00:11:25.584
Please.

167
00:11:25.584 --> 00:11:28.345
&gt;&gt; Speaker 2: I know you said
that it's not necessary, but

168
00:11:28.345 --> 00:11:31.477
is it standard to use
semi-colons in JavaScript?

169
00:11:31.477 --> 00:11:37.334
&gt;&gt; Brian Holt: I would say on the whole,
most people write their semi-colons.

170
00:11:37.334 --> 00:11:42.294
If you want to know what actually
in practice happens for me,

171
00:11:42.294 --> 00:11:49.330
if I had this code over here, I actually
don't usually hit the semicolons myself.

172
00:11:49.330 --> 00:11:52.700
So I'm going to hit command save
right now and watch these semicolons.

173
00:11:55.000 --> 00:11:56.890
My editor actually puts them in for me.

174
00:11:56.890 --> 00:12:01.590
And that way I don't have to write them

175
00:12:01.590 --> 00:12:04.300
because I'm all about saving
that keystroke economy.

176
00:12:04.300 --> 00:12:08.740
Which is a term that people use and
it's ridiculous [LAUGH].

177
00:12:08.740 --> 00:12:13.681
But they get put in there, so everyone's
happy, I think, or no one's happy, and

178
00:12:13.681 --> 00:12:14.889
I also don't care.

179
00:12:18.030 --> 00:12:19.971
&gt;&gt; Brian Holt: In the end,
it doesn't particularly matter.

180
00:12:23.986 --> 00:12:27.445
&gt;&gt; Brian Holt: I guess what I should say
is there's some very strong held opinions

181
00:12:27.445 --> 00:12:29.670
by some people on this subject.

182
00:12:29.670 --> 00:12:31.920
And actually one of
the workshops that I teach for

183
00:12:31.920 --> 00:12:36.880
Frontend Masters, it was the first
version of complete intro to React.

184
00:12:36.880 --> 00:12:40.300
I did not use semicolons at
all during that workshop.

185
00:12:40.300 --> 00:12:42.640
Like even myself I kinda go back and
forth.

186
00:12:42.640 --> 00:12:44.090
I don't like writing semicolon.

187
00:12:45.200 --> 00:12:46.260
That's the fundamental promise.

188
00:12:46.260 --> 00:12:49.390
But when they came out with a thing called
prettier that just does it for you,

189
00:12:49.390 --> 00:12:50.580
I was like, cool.

190
00:12:50.580 --> 00:12:52.800
I never have to think about this again,
or have this argument again.

191
00:12:54.480 --> 00:12:56.770
So, I don't care.

192
00:12:56.770 --> 00:12:57.440
Yeah.

193
00:12:57.440 --> 00:12:58.724
&gt;&gt; Speaker 3: I have a question for
the chatroom.

194
00:12:58.724 --> 00:13:01.316
If we use three equal signs,

195
00:13:01.316 --> 00:13:06.945
why don't we use less than equals to and
then two equal signs?

196
00:13:12.198 --> 00:13:14.900
&gt;&gt; Brian Holt: It doesn't
work I think is the answer.

197
00:13:17.900 --> 00:13:20.166
That's a good question,
I think the answer to that question would

198
00:13:20.166 --> 00:13:27.479
be,
&gt;&gt; Brian Holt: I'm

199
00:13:27.479 --> 00:13:28.182
gonna say first, I don't know.

200
00:13:28.182 --> 00:13:29.455
I don't actually know.

201
00:13:29.455 --> 00:13:33.023
If I were to speculate,
it's because this has to be a number.

202
00:13:33.023 --> 00:13:36.099
The only way that this works is,
it's called a comparator, so

203
00:13:36.099 --> 00:13:38.085
this is comparing one thing to another.

204
00:13:38.085 --> 00:13:39.751
It has to be a number.

205
00:13:39.751 --> 00:13:43.637
So, no matter what it's going to be
coerced which is what you call it when you

206
00:13:43.637 --> 00:13:46.210
change a string to a number or
a number to a string.

207
00:13:46.210 --> 00:13:48.830
When you're changing types
it's called coercion.

208
00:13:48.830 --> 00:13:51.070
So it has to be coerced to
a number no matter what.

209
00:13:51.070 --> 00:13:55.413
So if this is not a number, it's gotta
be a number, so it's gonna try anyway.

210
00:13:55.413 --> 00:13:56.767
That would be my guess.

211
00:13:56.767 --> 00:14:01.370
The person to ask would probably be,
well, probably Brenda and

212
00:14:01.370 --> 00:14:03.253
I [INAUDIBLE] JavaScript.

213
00:14:03.253 --> 00:14:05.762
So, good question though.

214
00:14:12.330 --> 00:14:14.724
&gt;&gt; Brian Holt: Cool, and
now I have a lot of nachos to myself.

