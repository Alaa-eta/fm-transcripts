[00:00:00]
>> Brian Holt: Any questions about HTML so far?
>> Speaker 2: So you actually, if you put that slash at the end of input, you have a space before it?
>> Brian Holt: Yeah, I think that's just a stylistic preference. I think that's technically fine.
>> Speaker 3: You don't need it.
>> Brian Holt: You don't need it, yeah.

[00:00:21]
I always put it there. I don't know if I have a good reason. Habit, I suppose. [LAUGH] It's a good question. Yeah?
>> Speaker 2: So for best practices, should you use the closing slash or skip it or is that really just stylistic preferences?
>> Brian Holt: I think the answer to the question is stylistic preference.

[00:00:41]
I used to not ever put the slash, and then I started writing React for you. With React specifically which is not the same as writing HTML, but React requires it. So that's why I got you back in the habit of putting it in again. So it's up to you, I think is the answer.

[00:01:01]
Good question.
>> Brian Holt: Anyone else? Yes?
>> Speaker 4: In your example where you have the word hi, you have the hi on a separate line from h1 and the closing bracket on h1. Does it have to be on a separate line or can they all be on one single line, all the h1, opening and closing?

[00:01:22]

>> Brian Holt: So, I like that question. Thank you very much.
>> Brian Holt: You can definitely do this, right? This is your question. This is totally valid HTML. This will go through a browser and it will work perfectly. This is very hard to read. [LAUGH] So the white space is what's this is called.

[00:01:49]

>> Brian Holt: So if I go back to here like this. This white space here, so all these spaces and returns and things like that, it's meaningless. It doesn't actually do anything. It's purely for you as the programmer to make it more readable for you. So this is far less dense.

[00:02:03]
So it's easy for my eye to like peruse very quickly, which is ultimately what I'm going for. So even though like there's a bunch of space here, you'll notice that there's no space before this. HTML cuts off all of that space.
>> Brian Holt: So it's a good question, does that answer your question?

[00:02:22]
Cool. So it's purely for you.
>> Brian Holt: Other questions?
>> Speaker 2: I have one more question.
>> Brian Holt: Please.
>> Speaker 2: So what is div, and when do you use it?
>> Brian Holt: We'll get to it, just a second.
>> Speaker 2: Okay.
>> Brian Holt: Good question. Yeah?
>> Speaker 5: So when I do the first h1 and I type in, say h5, it seems to and input into the result the h5 and it does highlight the second h1 in red.

[00:02:52]

>> Brian Holt: It's like this?
>> Speaker 5: It let's me do that, yeah. Is that-
>> Brian Holt: That's a good question, it's what's happening here?
>> Speaker 5: Yeah.
>> Brian Holt: HTML and browsers in particular are very good at dealing with bad HTML. Because we have decades of bad programmers behind us, and good programmers, but also bad programmers.

[00:03:11]
This used to be quirks mode, anyone that had to deal with quirks mode will probably get a little bit of PTSD right now.
>> Brian Holt: But the short answer to it is, I don't actually know how it's going to handle this but the browser is very resilient and it will try to recover from mistakes like that.

[00:03:32]
So, this being red right here is just, this has a syntax highlighter on it. That's why this is green and this is black. Cuz that's the syntax highlighter breaking, that's why it's red right there.
>> Brian Holt: This looks like it's in each actually being rendered as an h5. Yeah, so it looks like this is respecting the h5, which means that Firefox in this particular case is respecting it as an h5.

[00:04:00]

>> Brian Holt: Good question though.
>> Brian Holt: Yeah, I think the sum of the story is that the browser will do it's best to recover.
>> Brian Holt: And does a pretty good job.
>> Brian Holt: Any other questions?
>> Brian Holt: Cool.
>> Brian Holt: So there are, I looked it up, how many there are? We're gonna go to some of the more important ones right here but-

[00:04:45]

>> Brian Holt: There's some 300 odd tags, I think there's 300, 350ish tags. But you definitely, definitely, definitely do not need to know all of them. I don't know all of them, I probably don't even know half. I guarantee you I don't even know half of it. I'm gonna guess 50 at most.

[00:05:03]
There's probably like 1 to 30 that you use a lot, 30 to 50 of them that you use sometimes and the rest that you use never. [LAUGH] And there's a certain amount of them that are deprecated is the word that we would use for that, which is they used to exist, and they are no longer in use.

[00:05:23]
And you are discouraged from using them, so there's a bunch of those as well. I mean HTML is how old? Like 30 years old or something like that maybe longer.
>> Brian Holt: And when they were designing how to use HTML 30 years ago, they did not know how we were going to be using and abusing it today.

[00:05:44]
So they could never have predicted things that are gonna be good ideas and things are bad ideas. That's why we're on HTML 5.1 right now, which is means from fifth major event and 0.1 they added a couple more things as well. So there's a bunch of stuff that has changed over the years.

[00:06:03]

>> Brian Holt: So we'll get a bit more into that later as well.
>> Brian Holt: So now we'll talk about divs here in just a second but we're gonna explore a bunch of different kinds of tags that you should know about. These are the, I would deem to be some of the more useful ones.

[00:06:18]
So we talked about h1 through h6, which are headings.
>> Brian Holt: So this, for example is an h1, or no, this is an h2, I think, right here, this Types of Tags.
>> Brian Holt: So that's gonna be some sort of heading on the page, something that you would have at the top, right?

[00:06:39]
That's gonna be some sort of title some sort of important descriptive that you want that kind of to stand out. That's why this one is bigger, it's bolder, it's a heading, right? You're scrolling down, what are you doing if you come to this page and you just peruse it really quick, you're gonna scroll down really quick and you just look at headings, right?

[00:06:56]
That's kind of what they're for
>> Brian Holt: And that's why you have h1 through h6. On this particular page, this basic HTML, that's the h1, because that's the most important thing. This entire page is about basic HTML, okay? And then everything underneath that, these h2s are kinda subheadings in here, right?

[00:07:20]
So you can scroll down and look at types of tags and those sorts of things. And then if this had headings underneath it, then it would have an h3. And so on and so forth.
>> Brian Holt: And just to kind of highlight, a bunch of these are kind of they're pretty squishy subjects that there is not necessarily like the right way to do it.

[00:07:43]
I kinda likened it to formatting in Microsoft Word document. There's multiple ways to do this. It's as much artistic license as it is engineering. Which you're gonna find out a lot throughout this course. It's like a lot of this is just kind of doing your best. Taking the knowledge that you have and just applying it the best way that you know how.

[00:08:04]
Did it makes sense? Any questions?
>> Brian Holt: Cool.
>> Brian Holt: P tags. P stands for paragraph. And you'll put paragraphs of text inside of the p tags. So up here, this right here, that little bit, that is a p tag, right? It's a paragraph. And so if you have multiple paragraphs next to each other, right?

[00:08:36]
This is multiple p tags right here.
>> Brian Holt: That's what it is, it's whatever you will put inside of a paragraph. So you're gonna use p tags quite a bit.
>> Brian Holt: So only text goes inside of p tags. So for example you can have like a div instead of a p tag or you can have a h1 inside a p tag, only texts ends up going in there.

[00:08:59]
And some sort of expands can go in there, things that are describe text, which will get to expand in just a second. But there's a bunch of things that cannot go inside of a p tag. And what the browser actually do if you do try to put something inside there it will actually kick it out.

[00:09:15]
So it looks really weird. So don't put weird things in there. [LAUGH] Anchor tags, that's an a, these are links, right? And it stands for Anchor. I can't remember why it stands for Anchor. I don't know why that's the appropriate term for it, it's just what you call it.

[00:09:37]
[LAUGH] So this right here, this link right here, where you put your pointer over and it turns to a cursor, so you can click on it. That is an Anchor tag, that is a link. So if you look here, see the a href=https://www.frontendmasters.com, right? So this href is where it actually ends up going.

[00:10:04]
Here's another quotation mark right there, whatever, that's fine.
>> Brian Holt: Then this is the text inside of it so you can see here, this link actually doesn't go anywhere, but that's what it looks like. So you use a tags to create links, right? And you would link it to some other URL.

[00:10:24]

>> Brian Holt: URL stands for Uniform Resource Location, I think. It's like whatever like the address is, the web address, so I can see up here, this is the web address for this particular page. That's what would go inside of here instead of the href, you would put it in there, and then the link where take you to that place.

[00:10:45]
Does that make sense?
>> Brian Holt: Okay, I'm seeing mostly head nods, so I feel pretty good about that.
>> Brian Holt: That href, this part right here, is called an attribute. And that is in the next lesson. We will talk a lot more about attributes. But basically, you can give additional information to these tags via attributes.

[00:11:10]
And again, we will go over that, we actually have a whole section on it. So if that doesn't make sense right now, it's coming.
>> Brian Holt: Div, okay, so this one we had a question about. It is short for division. And I like to think of divs as cardboard boxes.

[00:11:29]
That it's not actually, the cardboard box is never the important part, right? It's actually what's inside of the cardboard box. So it's just like a, it's a box that you stick stuff in, you stick other more important things inside of. A div in and of itself has no what we would call semantic meaning.

[00:11:46]
It doesn't necessarily mean anything because it's inside of a div. It's just kind of a no name container that you put stuff into. Does that makes sense? You're gonna use divs everywhere, because there's a lot of times that you can't really describe anything in particular.
>> Brian Holt: You don't need a tag that has any sort of semantic meaning.

[00:12:12]

>> Brian Holt: So yeah, it's a generic tag for grouping things together. Divs can be really useful with CSS. And that's in particular where I'm gonna use them a bunch, cuz they're really useful for styling with CSS. So that's why you'll see those a lot.
>> Brian Holt: So if you had a blog post kinda thing, you'll kinda like group like the entire blog post container into like one div usually.

[00:12:40]

>> Brian Holt: Spans. Spans are like sorta like divs, but they have no necessary semantic meaning in of themselves. But-
>> Brian Holt: Right there, excuse me.
>> Brian Holt: Okay, so yes, spans. If a div is a cardboard box, a span is like a zip block bag. It's like a smaller div, and you'll have spans inside of paragraphs.

[00:13:07]
So if I wanted to just highlight this block of text right there, something like that, I would put that inside of a span, right? So it actually looks like a small snippet of whatever you're dealing with. You can have spans really inside of anything. You can have them inside of h1s, you can have them inside of paragraphs, inside of divs, they fit kind of anywhere.

[00:13:23]
And it's just like, for this small block of something, I'm gonna put a span around it. I don't actually end up using them a terrible lot. It's not usually that I need to do something like that. But if I needed to, that's how I would do it.
>> Brian Holt: Okay, so ols and uls.

[00:13:43]
So ol stands for ordered list, and ul stands for unordered list. So what you see here, where I had this kinda list of tags that I'm talking about, this is an unordered list. So it's an unordered list because I could swap a and p, and it doesn't really make any difference, it doesn't change the meaning of the list, it's an unordered list.

[00:14:02]
It's just a list of stuff, and it doesn't really matter what order it comes in, right? So that's why this is an unordered list. If something was an ordered list, if I changed the order of it, it would change the meaning of it. So for an example, I have here the list of the ten most populist cities in the world, right?

[00:14:22]
I can't switch number one and number two or else that list is now incorrect, right? So that's when you would use an ol, an order list. And instead of here having bullets you would have numbers, right? 1, 2, 3, 4, 5, 6, 7, 8, 9, 10. So ol is ordered list, ul is unordered list and then all of the individual elements inside of it, right?

[00:14:44]
So the span one, the ol one, the button one, right? These are lis, they're list elements, right? So it's one individual entry inside of the ol or inside of the ul. So you can see here I have an example this is a ul so it'd be an unordered list, the ul ends here and I have li here, another li here, another li here, right?

[00:15:12]
So you'll have an opening ul or ol, and then you'll have a bunch of lis in it, and then you'll close your ul or ol, just like that. Any questions about that?
>> Brian Holt: It's useful for making lists of things. Buttons. A button is a button. That's very self-descriptive in this particular case.

[00:15:34]
Kinda hard to forget that one. Buttons in themselves do not do anything out of the box, right? You don't put a button on the page and it just suddenly does something. So usually this is for, it's a hook for JavaScript, right? You put a button on the page and people know how to click buttons, it's one of those that you look at, you instantly know what to do with it.

[00:15:55]
And then you'll use JavaScript to respond to a user clicking a button, right? So you put a button on a page and then you, later you'll attach JavaScript to it to make it do something when clicked. That make sense?
>> Brian Holt: Yes?
>> Speaker 2: You make it look more nicer, is it?

[00:16:15]

>> Brian Holt: We'll talk about it in the CSS section.
>> Speaker 2: Okay.
>> Brian Holt: That's a good question.
>> Speaker 2: Do you add anything for accessibility within the button tag?
>> Brian Holt: No, you don't actually have to which is really nice, that's another good reason you use a button tag.
>> Speaker 2: Okay.
>> Brian Holt: Is that screen reader already know for look a buttons, cuz they know it's really important and that's how you interact the site.

[00:16:38]
I'm happy you bring that up because you can actually, there's no reason you have to use a button. You can put a div there, and you can make it work the same way. But a screen reader would not find a div because a screen reader is not looking for divs.

[00:16:51]
So that's another good reason to use buttons, because screen readers already know what to do with them. Good question.
>> Brian Holt: Other questions?
>> Brian Holt: Cool.
>> Brian Holt: So let's just go up here in just a second so you can see what a button looks like.
>> Brian Holt: Button.
>> Brian Holt: Click me.

[00:17:19]

>> Brian Holt: So if you don't do anything, the button just looks like this, right? It looks very clickable, it's something that, when you click on it, it depresses a little bit, right? So out of the box it already looks like a button, it looks like something you can click.

[00:17:36]

>> Brian Holt: Later, we'll be able to see like how to style it different, make it look different, make it look nicer, and things like that. But-
>> Brian Holt: Also, you kinda wanna keep this aesthetic, mostly, because that's what people expect when they're looking for buttons, and you wanna make your site as intuitive as possible.

