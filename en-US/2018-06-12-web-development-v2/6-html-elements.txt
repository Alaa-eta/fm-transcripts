[00:00:00]
>> Brian Holt: Any questions about HTML so far?
>> Speaker 2: So actually, if you put the slash at the end of input, you have a space before it?
>> Brian Holt: Yeah, I think that's just a stylistic preference. I think that's technically fine.
>> Speaker 3: You don't need it.
>> Brian Holt: You don't need it, yeah, I always put it there.

[00:00:23]
I don't know if I have a good reason, habit I suppose. [LAUGH] That's a good question, yeah.
>> Speaker 4: So for best practices, should you use the closing slash or skip it or is that really just stylistic preferences?
>> Brian Holt: I think it's a question of stylistic preference, I used to not ever put the slash.

[00:00:44]
And then I started writing React, with React specifically which is not the same as writing HTML, but React requires it. So that's why I got back in the habit of putting it again, so up to you I think is the answer.
>> Speaker 4: Okay.
>> Brian Holt: Good question, anyone else, yes?

[00:01:05]

>> Speaker 3: In your example where you have the word hi, you have the hi on a separate line from H1, and the closing bracket on H1. Does it have to be on a separate line? Or can they all be on one single line, all the H1 opening and closing?

[00:01:22]

>> Brian Holt: So, I like that question, thank you very much. You can definitely do this, right? Is that your question? This is totally valid HTML. This will go through a browser and it will work perfectly. This is very hard to read [LAUGH]. So, the white space is what's this called?

[00:01:49]

>> Brian Holt: So if I go back to here like this, this white space here. So all these spaces and int returns and things like that is meaningless. It doesn't actually do anything. It's purely for you as the programmer to make it more readable for you. So this is far less dense, so it's easy for the eye to like peruse very quickly, which is ultimately what I'm going for.

[00:02:08]
So even though like there's a bunch of space here, you'll notice that there's no space before this HTML cuts off all of that space. So, that's a good, does that answer your questions? Cool, so it's purely for you. Other questions?
>> Speaker 2: I have one more question.
>> Brian Holt: Please.

[00:02:31]

>> Speaker 2: So what is diff and when do you use it?
>> Brian Holt: We'll get to it, just a second.
>> Speaker 2: Okay.
>> Brian Holt: Good question, yeah?
>> Speaker 5: So when I do the first H1 and I type in, say H5, it seems to input into the result, the H5 and it does highlight the second H1 in red.

[00:02:52]

>> Brian Holt: It's like this?
>> Speaker 5: But it lets me do that, yeah, is that?
>> Brian Holt: That's a good question, like what's happening here?
>> Speaker 5: Yeah.
>> Brian Holt: HTML and browsers in particular are very good at dealing with bad HTML. Because we have decades of bad programmers behind us, and good programmers, but also bad programmers.

[00:03:11]
This used to be called quirks mode. Anyone that had to deal with quirks mode will probably get a little bit of PTSD right now. But the short answer to it is I don't actually know how it's going to handle this. But the browser is very resilient and it will try to recover from mistakes like that.

[00:03:32]
So this being read right here it just has a syntax highlighter on it. That's why this is green and this is black. So that's the syntax highlighter breaking, that's why it's red right there. This looks like it's in H, actually being rendered as an H5. Yeah, so it looks like this is respecting the H5, which means that Firefox in this particular case is respecting it as an H5.

[00:04:00]

>> Brian Holt: Good question though.
>> Brian Holt: Yeah, I think the sum of the story is that the browser will do its best to recover.
>> Brian Holt: And actually, it does a pretty good job.
>> Brian Holt: Any other questions?
>> Brian Holt: So there are, I looked it up, did I put how many there are?

[00:04:35]
We're gonna go over some of the more important ones right here, but
>> Brian Holt: There's some 300-odd tags, I think there's 350ish tags. But you definitely,definitely, definitely do not need to know all of them. I don't know all of them, I probably don't even know half. I guarantee you I don't even know half of them.

[00:04:59]
You probably, I guess fifty at the most. There's probably like one to thirty that you use really well like a lot. Like thirty to fifty of them that you use sometimes and the rest you use never [LAUGH]. And there's a certain amount of them that they're like depricated is the word that we would use for that.

[00:05:20]
Which is they used to exist and they are no longer in use, and you are discouraged from using them. So there's a bunch of those as well. HTML is how old? Like 30 years old or something like that, maybe longer. And when they were designing the how to use HTML 30 years ago, they did not know how we were going to be using and abusing it today.

[00:05:44]
So they could never have predicted things that were going to be good ideas and things that were going to be bad ideas. That's why we're on HTML 5.1 right now, which just means we're on the 5th major revision of and the .1 they added a couple more things as well.

[00:05:59]
So, there's a bunch of stuff that has changed over the years. So, we'll get a bit more into that later as well. So now we're gonna, we'll talk about divs here in just a second, but we're gonna explore a bunch of different kinds of tags that you should know about.

[00:06:14]
These are, I would deem to be some of the more useful ones. So we talked about H1 through H6 which are headers or headings rather. So like this one for example is an H1, or no this an H2 I think, right here, this type of tags. So that's gonna be some sort of heading on the page, like something that you would have at the top, right?

[00:06:39]
That's gonna be some sort of title, some sort of important descriptor that you want kinda to stand out. That's why this one's bigger, it's bolder, it's a heading, right? You're scrolling down like, what you're doing if you come to this page and you just wanna peruse it really quick.

[00:06:54]
You're gonna scroll down really quick and you're just gonna look at headings, right? That's kinda what they're for.
>> Brian Holt: And that's why you have H1 through H6. On this particular page, this basic HTML, that's the H1 because that's the most important thing. This entire page is about basic HTML, okay?

[00:07:13]
And then everything underneath is H2s are kind of sub-headings here. In sequence, scroll down look at types of tags and those sorts of things. And then if this had headings then it would have an H3, so on and so forth.
>> Brian Holt: And just to kind of highlight it, like a bunch of these are kind of like they're pretty squishy subjects.

[00:07:40]
So there's not like necessarily the right way to do it. I kinda likened it to formatting in Microsoft Word Document. There's multiple ways to do this. It as much artistic license as it is in Engineering. Which you're gonna find a lot throughout this courses. A lot of this is just kind of doing your best.

[00:07:59]
Like taking the notes that you have an applying it the best way you know how, that makes sense? Any questions? Cool, P tags, P stands for paragraph and you'll put paragraphs of text inside of a P tags. So like up here, this right here, that little bit, that is a P tag, right?

[00:08:30]
It's just a paragraph. And so, if you have multiple paragraphs next to each other, right? This is multiple P tags right here.
>> Brian Holt: And that's what it is, it's just whatever you put inside of a paragraph. So you're gonna use P tags quite a bit. So only text goes inside of P tags.

[00:08:52]
So for example, you can't have a div inside a P tag or you can't have an H1 inside a P tag, only tags end up going in there. And some sort of spans can go in there, things that describe text. Which we'll get to spans in just a second.

[00:09:06]
But there's a bunch of things that we cannot go inside of a P tag. And what the browser will actually do if you try to put something inside of there, it will actually kick it out. So it looks really weird, so don't put weird things in there [LAUGH].

[00:09:22]
Anchor tags, so that's an A, these are links, right? Where A gonna stands for anchor, I can't remember why it stands for anchor like I don't know why that's the appropriate term for it, it's just what you call it [LAUGH]. So like this right here, this link right here where you like put your pointer over and it turns to a cursor so you can click on it, that is an anchor tag, that is a link.

[00:09:52]
So if you look here, so you have the <a href=frontendmasters.com>, right? So this href is where it actually ends up going, where the, that needs another quotation mark right there, whatever, that's fine. Then this is the text inside of it. So you can see here this link actually doesn't go anywhere, but that's what it looks like.

[00:10:16]
So you use A tags to create links, right? And you would link it to some other URL.
>> Brian Holt: URL stands for uniform resource location, I think. It's like whatever the address is, the web address. So you can see up here, this is the web address for this particular page.

[00:10:38]
That's what would go inside of here instead of the href. You would put it in there and then the link would take you to that place, does that make sense? Okay, I'm seeing mostly head nods, so I feel pretty good about that.
>> Brian Holt: That href, this part right here, is called an attribute, and that is in the next lesson.

[00:11:00]
We'll talk a lot more about attributes. Basically you can give additional information to these tags via attributes. And again, we will go over that, we actually have a whole section on it, so if that doesn't make sense right now, it's coming. Div, this is one we had a question about, it is short for division.

[00:11:25]
And I like to think of divs as cardboard boxes, that it's not actually the cardboard box is never the important part, right? It's actually what's inside of the cardboard box. So it's a box that you stick stuff in like you stick other more important things inside of it.

[00:11:42]
A div in and of itself has no what we would call semantic meaning. It doesn't necessarily meaning anything because it's inside of a div. It's just kind of a no name container that you put stuff into, does it make sense? Like it's just, you're gonna use divs everywhere because there's a lot of times when you can't really describe anything in particular.

[00:12:08]
Like, you don't need a tag that has any sort of semantic meaning. So its, yeah, a generic tag for grouping things together. Divs can be really useful with CSS. And that's in particular where I will use them a bunch because they're really useful for styling with CSS. So that's why you'll see those a lot.

[00:12:28]

>> Brian Holt: So if you have a blog post kind of thing, you'll kinda like group the entire blog post container into one div usually. Spans, spans are like sort of like divs that they're like have no necessarily semantic meaning in and of themselves, but,
>> Brian Holt: There, excuse me. [SOUND] Okay, so yes, spans if a div is a cardboard box, a span is like a Ziploc bag.

[00:13:01]
It's like a smaller div and you'll have like spans inside of paragraphs. So like, if I wanted to highlight this block of text right there or something like that, I would put that inside of a span, right? So it's actually a small snippet of whatever you're doing with.

[00:13:16]
You can have spans really inside of anything. You can have them inside of H1s, you can have them inside of paragraphs, inside of divs, they fit kind of anywhere. And it's just like for this small block of something I'm gonna put a span around it. I don't actually end up using them a terrible lot.

[00:13:32]
It's not usually that I need to do something like that, but if I needed to, that's how I would do it. Okay, so OLs and ULs, so OL stands for order list, and UL stands for unordered list. So what you see here, like where I had this list of tags that I'm talking about, this is an unordered list.

[00:13:55]
So it's an unordered list because I could swap a and p and it doesn't really make any difference. It doesn't change the meaning of the list. It's an unordered list, it's just a list of stuff and it doesn't really matter what order it comes in, right? So that's why this is an unordered list.

[00:14:10]
If something was an ordered list, if I changed the order of it, it would change the meaning of it. So for an example, I have here the list of the ten most popular cities in the world, right? I can't switch number one and number two or else that list is now incorrect, right?

[00:14:27]
So that's when you would use an OL, an ordered list. So and instead of here of having bullets it would numbers like one, two, three, four, five, six, seven, eight, nine, ten. So OL is ordered list, UL is unordered list. And then all of the individual elements inside of it, right?

[00:14:45]
So the span1, the OL1, the button1, right? These are LI's, they're list elements, right? So it's one individual entry inside of the OL or inside of the UL. So you can see here, I have an example.
>> Brian Holt: This is a UL, so it would be an unordered list and the UL ends here.

[00:15:06]
And I have one LI here, another LI here, another LI here, right? So you'll have an opening to UL or OL and a bunch of LIs' in it, and then you'll close your UL or OL just like that. Any questions about that?
>> Brian Holt: It's useful for making lists of things.

[00:15:27]
Buttons, a button is a button. It's very self-descriptive in this particular case. Kinda hard to forget that one. Buttons in and of themselves do not do anything out of the box, right? You don't put a button on the page and it just suddenly does something. So usually, this is for, it's a hook for JavaScript, right?

[00:15:48]
It puts a button on the page and people know how to click buttons. It's one of those things that you look at, you instantly know what to do with it. And then you'll use JavaScript to respond to a user clicking a button, right? So you put a button on a page, and later you'll attach JavaScript to it to make it do something one clicked.

[00:16:07]
That make sense, yes?
>> Speaker 5: How do you make it look more nicer? Is that?
>> Brian Holt: We'll talk about it in the CSS section.
>> Speaker 5: Okay.
>> Brian Holt: That's a good question.
>> Speaker 5: And do you add anything for accessibility within the button tag?
>> Brian Holt: No, you don't actually have to, which is really nice.

[00:16:28]
That's another good reason to use a button tag.
>> Speaker 5: Okay.
>> Brian Holt: Is that screen readers already know to look for buttons. Because they know that they're really important, and that that's how you interact with the site. And I'm happy you're bringing that up, because you can actually, there's no reason you have to use a button.

[00:16:43]
You could put a div there and you can make it work the same way. But a screen reader would not find a div because a screen reader is not looking for divs. So that's another good reason to use buttons because screen readers already know what to do with them.

[00:16:56]
Good question, other questions?
>> Brian Holt: Cool, so let's just go up here in just a second, so you can see what a button looks like, button, click me. So if you don't do anything, the button just looks like this, right? It looks very clickable, something like when you click on it, it depresses a little bit, right?

[00:17:28]
So, out of the box, it already looks like a button. It looks like something you can click. Later, we'll be able to see like how to style it different, make it look different, make it look nicer or things like that.
>> Brian Holt: Also, you kinda wanna keep this aesthetic mostly because that's what people expect when they're looking for buttons.

[00:17:51]
And you wanna make your site as intuitive as possible.

