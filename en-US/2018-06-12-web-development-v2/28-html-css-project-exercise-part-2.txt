[00:00:00]
>> Brian Holt: Hopefully, the project was interesting. If you were looking like as a side note, if people were looking at the website this morning, it was broken. I am not sure why it is unbroked, I think. If it is currently still broken for you, make sure you do a hard refresh.

[00:00:17]
That's shift-cmd-R on Mac and other buttons on other browsers. Just yeah, Google it. That's what I would say. [LAUGH] But if you're seeing images, then it unbroke. So it sounds like most people were able to do pretty well with the project. If not, we're gonna work through it right now and you can kind of see where you went, how you did on different things.

[00:00:46]
So if you click here, this is what we were looking at. We'll do this title first, then we'll move down the rows. Does anyone have any questions about it before we move forward?
>> Brian Holt: If you wanna see this page, I made a little bitly link for it, bit.ly/news-project.

[00:01:13]
Let me just make that a little bit bigger on some things, so you can see it.
>> Brian Holt: So that this top link right here. This is if you lost the link to the current project website, intro-web-dev and this is news project that's just gonna take you to this.

[00:01:33]
So just some easy short links for you. I'm gonna open my project in Digital Studio Code. So to remind you this is how you open something using your browser from your file system, you hit File > Open File. This should work on Windows. This should work on every operating system.

[00:01:53]
File > Open. Well, that's cmd+O. I also believe it's ctrl+O for Windows. You'll open this dialogue and then you just gotta go find where you put it. For me, it's on my desktop. Desktop right there, FAM and to find the index.html file. And if you open that, you should see whatever you have written so far which for me is this profound statement from the scholar Bryan.

[00:02:23]
[COUGH] So let's just talk about how you kinda break this down into a smaller problem that you can solve. So pretending that someone gave me this, not the complete product. We'll ignore that for now, but pretending more than someone give me like this image like this non-interactive image.

[00:02:43]
Like here, I've made this in design. I want you turn this into HTML and CSS. This is very common. This is how you'll interact a lot of times with designers like here's my design. Now go make this a thing, go make it work. So the first thing what I would do is look at this is I kinda see three kind of hard sections.

[00:03:02]
I see the title part, the News Times at the top. I see this top row here and then I see the bottom row. And so those are kinda like three things that I'm gonna break this problem down into. So the first thing I'm gonna start with here is the News Times part.

[00:03:16]
So get rid of this and I'm gonna make this something like you could make it a div, you could make it a section. We'll go with a section. Like I said, there's no difference between a div and a section. Here's a partition, some sort of partition on your website is a good place to use a section instead of a div.

[00:03:39]
It has more meaning than a div. So it doesn't actually matter. It's not actually going to change anything. This is actually documentation for your future self. That's how you choose which kind of tag you're gonna use. So we're gonna use a section. It actually says right there. A section element represents a generic section of a document or an application.

[00:03:59]
Thanks code. [LAUGH] So that's pretty cool. You could even just make this an h1 altogether.
>> Brian Holt: We can do that, let's do that. H1 class, we're gonna call it main-title or main-brand. Let's go with main-brand and you can call whatever you want to cal your fictitious newspaper. it doesn't have to be the News Times.

[00:04:25]
I was kind of based this on the New York Times. That's why I came up with News Times, [LAUGH] but up to you. So now, I have the News Times. I come over here and I have this now very, very nice looking wherever. Right here, the News Times.

[00:04:41]
This is exactly what I wanted to do.
>> Brian Holt: So I'm gonna come over here and I'm gonna go to my style.css. I'm gonna change this to main-brand and I'm gonna make this much larger like font size. And when writing CSS, it is a ton of guess and check.

[00:05:03]
So I'm just gonna say, what happens if this is 50 pixels big? Refresh the page, maybe a bit bigger. Let's do 60 pixels.
>> Brian Holt: Cool, bless you.
>> Speaker 2: Thank you.
>> Brian Holt: So I have that. And now I'm gonna come back over here as okay, I want this to be centered.

[00:05:24]
So I'm gonna say, text align center. And I wanna say, font weight normal, cuz I don't want it to be bold and then you do font family and cursive. Sounds nice.
>> Brian Holt: So now if I come over here and refresh, it's kind of a weird looking News Times.

[00:05:47]
But Sure, it's close enough. [LAUGH] What did I actually do? I actually used some specific font on here. If you wanna see what I actually used, Snail Roundhand. You should have guessed that, I'm very disappointed in all of you. [LAUGH]
>> Speaker 2: Really?
>> Brian Holt: Yeah, yeah, this is all of your fault.

[00:06:09]
Now, there's a thing on Mac called Font Book that you can just kinda browse through and see what's actually stored on your computer. So here's like Brush Script MT. That's what that looks like. This is not typically what you do. This is more for like fun stuff, because these are things that'll be on Macs and they won't be on other things which is obviously unacceptable trade off if you were working on something like Netflix.com.

[00:06:31]
But nonetheless.
>> Brian Holt: Or you keep doing this just for fun. There's a thing called Google Fonts. Click on this. It's just a ton, a ton, a ton of fonts. I want something that's going to be cursive. Here you go. We actually just want handwriting. So there's this. This looks kinda nice.

[00:07:00]
The dancing script or how about here, Great Vibes. That looks perfect. So we click on Great Vibes. You can see what the font looks like, then down here at the bottom somewhere. Where is it? I haven't used this in a while. Select this font and then you click on that, and then you get this link tag right here.

[00:07:25]
You just copy and paste this. This little thing right here. You come into your index.html and you just paste it above your CSS. So this is gonna bring in a CSS file from Google and it's gonna bring this great vibes. This is okay, because now this is going to download that font onto every person that visits your website which is pretty cool.

[00:07:51]

>> Brian Holt: So I'm gonna then copy and paste this font family right here, down here at the bottom and we'll put that into my CSS where I wanna use it.
>> Brian Holt: So instead of cursive here I'm gonna font family great vibes, cursive, what does this mean? It means that it's gonna try for great vibes if it doesn't find that it's gonna say cool just put on cursive of some sort.

[00:08:15]
Which just means you're gonna get this weird one that we have on there already.
>> Brian Holt: So it's gonna look like that but now if I refresh the page, it's gonna wait for a second and then, I need to save first. Then after I refresh the page, now I'm gonna get that instead.

[00:08:33]

>> Brian Holt: That's pretty cool, right? And that'll work in every modern browser. I want to tell you why this is possibly why you wouldn't want to do this. This adds a lot of page weight, right, cuz you're going to download an entire font. That's a lot of stuff that, especially for just a title of something, you probably would just make that an image instead, right?

[00:08:50]
So that's how you would put in another font, but it's not something you always want to do. If you're going to bring in another font, you probably want to use it a lot, right, does that make sense? The other thing is like, now Google has a little bit of tracking on your website, right?

[00:09:04]
Cuz now they're, yeah.
>> Speaker 3: I was gonna ask, is the browser smart enough to only get the font once, or does it follow every page and reload every time?
>> Brian Holt: No, it caches it, pretty smartly, yeah. That's a good question, is how often is it downloading it? It should cache it.

[00:09:19]
And keep it for, let's look, you can actually see. So I'm gonna come in here, in my Dev Tools there's a thing called Network Monitor over here. So if I refresh this again, you can see this font-family thing, and you can see how long the cache control, it says never get rid of this.

[00:09:39]
So it's always going to keep it until your browser just decides to throw it away. So that's a long time [LAUGH] cuz your browser will keep quite a bit.
>> Brian Holt: So that's a good question. But what I was gonna say before is now Google does have a little bit of tracking on your webpage, right?

[00:09:56]
Every time that someone comes to your website, they're gonna download the font and Google keeps track of that. So it's all trade offs.
>> Brian Holt: Okay. But it's worth it, I think it is cool.
>> Brian Holt: Things to think about.
>> Brian Holt: Okay, so now we have this News Times thing.

[00:10:18]
I want it to be a little bit more spacious, because if we're looking at this, there's a decent amount of space up there at the top, so what am I going to do? I'll put a little bit of margin on top and bottom. So I'm gonna say margin maybe 15 pixels.

[00:10:32]
That's actually less. I want it to be maybe 30 pixels.
>> Brian Holt: 50 pixels? Let's actually do, we'll say this is margin top and margin bottom because we don't actually want it on the sides, we just want it on the top and bottom.
>> Brian Holt: Okay, pretty good, maybe about 60.

[00:10:59]

>> Brian Holt: There we go, that looks a little bit better. Now, we were talking about, yeah, go ahead.
>> Speaker 4: Isn't it easier to use the flex stuff for this, just [INAUDIBLE],
>> Brian Holt: [CROSSTALK]
Particularly for text, text is quite easy to do just without flex.
>> Speaker 4: Okay.
>> Brian Holt: So you could definitely do this with flex as well, that would work.

[00:11:26]

>> Brian Holt: So we were talking about using combined things, remember we did like border, three pixels, solid, pink. Margin has one of these as well, so I have noticed that margin top and margin bottom are the same, I can actually do margin, colon, 60 pixels, 0, like that and get rid of these bottom too.

[00:11:49]
And what that means is, top and bottom 60, left and right zero. Now you ask me, like how do I know that? Just done this enough times that I can remember it off the top of my head.
>> Brian Holt: There's also, if you wanted to do different things for like top, bottom, left, right.

[00:12:05]
You can also do margin, 60 pixels, 0, 60 pixels, 0 and this would be the same as this and this. It's north east south west. Just like a, that's how I remember it anyway. There's also one you can do it with three and I can never remember what order of the three is, so I never use it.

[00:12:34]
Of consequences, I've never used the three version. And the other one, if you just do one margin 60 pixels, that would be 60 pixels on every side. And Padding works the same way, just so you know.
>> Brian Holt: But I show you that because you will see this a lot.

[00:12:51]
So if you see just with two it's north south is the first one, east west is the second. Cool? Feel good about that?
>> Brian Holt: So we got that. Something that I will do just when I'm trying to figure out where stuff is being laid out, I'll inspect element and I'll just throw a border on it so I can tell where is this actually sitting.

[00:13:14]
Because right now you can't really tell where it is, right? But if I just throw on a quick border and say border, one pixel solid black I can see that, that's actually the space that's taking up. It's just helpful.
>> Brian Holt: Now when I refresh the page it's gone because whenever you refresh the page, it drops all the stuff that you had written to it.

[00:13:34]
So, cool, good stuff. Coming back here. Okay, so we're going to tackle this next piece first. I'm gonna have some sort of section that's gonna have all this HTML, CSS in it and I have kind of three sub sections in it. And I notice that I can style the left one and the right one the same and it's just the middle and that's gonna be any different.

[00:13:59]
So come back to your index.html. I'm going to do a section. I'm going to call it,
>> Brian Holt: I don't know, row, maybe.
>> Brian Holt: So we talked a little bit about Emmet yesterday, like I'm so used to doing this that I always do it. So I could do section class equals row,

[00:14:26]

>> Brian Holt: Whatever, and write it out by hand. But if you're using VSCode or if you're using Emmet, which you can find at emmet.io, this will show you how to install and everything else if you're using Sublime or something like that.
>> Brian Holt: What if I do section.row, like I actually put the real CSS selector right there, and I just hit Tab, it just auto completes it out for me.

[00:14:52]
So it makes it really fast to write. Makes sense?
>> Brian Holt: You can do the same thing if I did pound.row. As you might imagine, that's the CSS selector for having an id of row. So you can go really fast with this.
>> Brian Holt: Okay? So now I have a row, and I'm gonna have kind of two different sections in it, or three different, rather.

[00:15:17]
And I'm gonna call these articles, because these are kinda article looking, right? So we're going to go with the article.
>> Brian Holt: And I could have just done that as well. Article dot. We'll call this like story like a new story something like that and, these ones are going to be quarter stories, right?

[00:15:41]
And this one is going to be a half story because it take up a quarter of the row, the middle one takes up half the row, so I'm going to call this a quarter as well.
>> Brian Holt: Okay, these ones have a title so you can put this as an h1, you can put it as a h2, you can make a case for either one of them, this is the h1 of the article but the h2 of the page.

[00:16:03]
I would personally, probably call this an h1. I tend to use a lot of h1s, but there are people that would disagree with me, so that is definitely your judgement call. So I 'm gonna call this story, title.
>> Brian Holt: And what did I call it? I don't know, we'll just say, Student Learns CSS!

[00:16:23]
Okay? Then beneath it, it has what, like two paragraphs of texts? So I'm gonna do story-text. Now inside, I wanna put this Lorem ipsum text, right? Code will actually generate Lorem ipsum text for you, which is quite nice. I put that angle bracket there to say, put this inside of there, that's what the angle bracket means.

[00:16:50]
And I'm gonna say lorem, maybe 40 words, so lorem40. And if I hit Tab, then I just get this paragraph of Lorem ipsum text, which is pretty nice.
>> Brian Holt: And then, actually, I need two of them. So I can actually come in here and say, hey, I actually need two of these, times two, okay?

[00:17:12]
Then you can actually see the preview here, it shows you what you're actually gonna autocomplete out, if you're curious. So now if I hit Tab here, I get two of those.
>> Brian Holt: And then I come back over here, nope, nope, this one, yep, looks pretty good.
>> Brian Holt: Questions, so far?

[00:17:41]

>> Brian Holt: Now if I look like I'm going really fast, and it's kinda hard to keep up with this, I've been doing this a really long time, right? This is literally been my day job for a decade, so you can feel okay if you're not going quite this speed.

[00:17:59]

>> Brian Holt: I have done this so many times. I used to work on a news website, literally, [LAUGH] so this is stuff I've all done before a bunch of times. So please don't feel bad if you're going a little bit slower than I am.
>> Brian Holt: Cool, so I'm actually gonna do the whole HTML for the row first, and then I'm gonna do the CSS for it, cuz I think that would be the easiest way to kinda get all the layouts correct.

[00:18:31]
So the next article I'm gonna have here, it's gonna be another article.
>> Brian Holt: It's gonna be another story, and it's gonna be a half this time, right? Cuz it's gonna take up half the page. Inside of that, I'm gonna have another h1 with story-title. And this one's that Dogs are Adorable,

[00:19:00]

>> Brian Holt: Are Adorable, okay. This one has an image tag. So the source was, if you remember correctly, http://placecorgi.com, actually, I think this has to be s, https.
>> Brian Holt: Slash, I think I did 500, whoops, /500/300. This is gonna give me a 500 by 300 image of a corgi, which is everything that I've always wanted.

[00:19:37]
And I'm gonna put here a picture of adorable corgi dog.
>> Brian Holt: There's a big temptation inside of all texts who say, picture of, right? But it's always a picture, right? It's inside of an image tag, the screen reader knows it's an image, it's redundant to put picture of something, just say what's actually in the picture.

[00:20:03]
Just pro tip for you.
>> Brian Holt: Okay, then underneath that, it's gonna need one text paragraph, so I'm gonna put story-text. And inside of that, lorem40, or something like that. Okay, refresh here, and it looks like that link is not working. Why are you not working?
>> Brian Holt: What did I do?

[00:20:36]
Let's look at here, Inspect Element, nope, you do have to do http. Okay, sorry,
>> Brian Holt: There we go, okay. So this is not secure, it's http:, I messed that up.
>> Brian Holt: So make sure you get that. We need one more article. And for the sake of time, we're just gonna say it's literally the same as the first one, so we'll just put that down here as well.

[00:21:07]
And this will be, Student Learns HTML.
>> Brian Holt: So coming back over here,
>> Brian Holt: We now have our, kind of, three stories for the top, right?

