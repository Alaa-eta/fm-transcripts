[00:00:00]
>> Jason Lengstorf: Once we have the template, we can define component to use the query. And so that is gonna get the result of this query as data. So the way that Gatsby works during the build is it's gonna look for this exported query. And it will actually execute it, get the data, and then inject that data as a data prop to this component.

[00:00:23]
This is all done during the build. So there's kind of a rewrite process. Again, another reason to keep these templates separate so that it's clear that they get special handling. That data then is going to be put somewhere. And what I like to do is just pass it directly to a component that will use it.

[00:00:42]
And so I'm just gonna do that. I'm gonna go straight into the data.docsPage, can go in. And now we have to define that. But first, let's export this DocsPage. Okay, so we're gonna need to go get this this docs page. I'm gonna put it in components, we'll call it docs-page.js.

[00:01:08]
And inside of this one, we're going to import react from 'react'. We will import the MDXRenderer. And the MDXRenderer is used to actually make this into something readable. So all of these code that MDX generates, we wanna be able to use it and the MDXRenderer makes that possible for us.

[00:01:33]
I'm also gonna pull in the layout that we used. So let me get that. And then, we can do a DocsPage component.
>> Jason Lengstorf: We will then put this layout in here. Do an h1, do page.title and then put in the MDXRenderer,
>> Jason Lengstorf: page.body goes inside of that. And then we'll put a little note at the bottom that says this page was updated,

[00:02:14]

>> Jason Lengstorf: Whenever the updated value is. And again, it's plain language so we can just drop it right into the sentence. So we're gonna export default DocsPage. And then I can save that, come back here and let's import this so that we can use it. import DocsPage from .../components/ docs-page.

[00:02:37]
And now, if I stop and restart, before we stop and restart, we need to actually use these templates. So we've defined them but now we need to run the Create Page API hook. So back in our Gatsby node, all the way down at the bottom here. We're going to use exports.createPages.

[00:03:04]
And because we're gonna make a request for data, we're gonna mark this as an async function. And the create pages API gives us a few things. The first is an actions object that gives us a bunch of helper functions. A graphql function that'll allow us to get some data.

[00:03:22]
And then we also have a reporter in case we want to help put anything to the to the console. And then the second argument is gonna be the options from the theme. So,
>> Jason Lengstorf: We're not really using the options. So I'm gonna just,
>> Jason Lengstorf: Skip that actually.
>> Jason Lengstorf: So we're gonna get an object full of actions, the graphql function and a reporter function.

[00:03:51]
And then inside, we start out by getting our data, so we wanna do a graphql query. And inside the createPages, graphql is a function, not a template tag. That's a little bit of a gotcha at the beginning. And inside, I'm gonna get all the DocsPages and I want all the nodes.

[00:04:12]
And all I need in here is the id and the path. So the id, I'm gonna use to pass in this context. And the path, I'm gonna use as definition for the URL. So we've awaited that result. And then we're just gonna do a quick check to see if anything wrong.

[00:04:31]
So, if result.errors, we will panic. So I'll do reporter.panic and we'll say error loading docs, and just pass in the errors. If we get through that, we can assume everything's okay. So just grab out our pages by diving into our data here. So we'll do result.data.allDocsPages.nodes. And then once we've got those pages, we can loop through them.

[00:05:04]
So we'll do a forEach because we're not returning anything. And forEach page, we're going to run an action called createPage. And that accepts an object which has two required fields and one optional field that we're gonna use. The first required field is path. And for that, we're gonna use the page path.

[00:05:24]
And that's again what we desire defined using the base path, the relative directory and then the file name. Next, we need to give it a component and that component is gonna be the template that we just defined. So we'll do a require dot resolve, go into our source templates and the docs page template.

[00:05:46]
And finally we need to set some context. And the context is an object, this is arbitrary, we can put whatever we want. There are a few reserved fields but for the most part, it should be okay. In the context, you'll get a big warning if you use a reserved field.

[00:06:01]
So in the context, I'm gonna pass in this pageID and I want that to be the page.id. And whatever name I give it now, it will become available as a graphql variable. So, we defined in here, pageID. So by defining pageID in the context, we're able to access it.

[00:06:26]
Now once we've done this, we are, fingers crossed, ready to rock and roll. So let's build some pages. That's promising. We're getting two pages. And let's give it a look. Hey, there we go. So now, we've got our homepage. It shows the MDX content. It shows our layout, and it shows us when the page was updated.

[00:06:52]
So that means that we've got data coming in, getting customized through Gatsby's data layer and now is on the screen. So this is pretty powerful, right? We're in pretty good shape here. So our next move here, is going to be to make this look slightly less terrible and in a way that's more extensible.

[00:07:12]
What's up?
>> Speaker 2: Why did it put out two pages? I thought it was only the one MDX file.
>> Jason Lengstorf: So, there's only the one MDX file, but Gatsby will always give you a 404 page. So, if we go to a page that I haven't disabled. If we go to a page that doesn't exist, so let me boot this up,

[00:07:32]

>> Jason Lengstorf: It will also give us this 404 page. So this is the page that's being referenced as the second one. And that's a really nice thing to have during development because especially if you haven't set up your navigation or something yet, you can get to the point where you've created a bunch of pages but you haven't built the list to show them all.

[00:07:53]
Well this will give you that list. So it's a nice little convenience thing to have when you're still in progress and things are kinda in various stages of flux to make sure that you don't forget to link to certain pages.
>> Speaker 2: So were you exporting the page queries, do you need that export to static queries as well?

[00:08:11]

>> Jason Lengstorf: No, so the the page query is our special case where we are signifying to Gatsby that during the build process specifically during on create pages. This template is gonna be used, and this query should be treated as a page query, that gives it access to the context which is the like the variables and stuff.

[00:08:32]
In a static query. A static query is just any use of usestatic query inside of a component will be picked up. But again the limitation here is that we can't use variables. There's is no access to outside context. We can even interpolate a data, I couldn't take a prop and then put that prop in here.

[00:08:52]
So a static query needs to be hard coded at build time. And the reason for that is that the way that gatsby's handling the graphql layer under the hood, that graphql layer doesn't continue to work once the site is built. It's only there during the built and that means that all of these queries are actually getting compiled away.

[00:09:11]
And that's being done using abstract syntax tree transformations. It's kinda how Babel works under the hood, it takes the code and it breaks it into its component pieces and tokens. And then it kind of understands those as a programming language. And then the AST gets modified. So Gatsby will take the component, look for these use static query instances, break that down into an AST, replace it with the results of the query, and then rewrite that component with the data in place.

[00:09:41]
So that's why there are restrictions on it because when you get into AST transformations, trying to chase down a variable to where it's declared is really challenging. That is something that the team is working on but it is not in place yet.
>> Speaker 2: He wants to know if we can export only one page brief on page file or you can export multiple queries.

[00:10:01]

>> Jason Lengstorf: You can only export one query per page file. But that actually isn't a problem. Because you can just add as many queries as you want next to each other. And it would just be data.docspage data.allfile. So you can only do one query, but that query can have as many sub queries in it as you want.

