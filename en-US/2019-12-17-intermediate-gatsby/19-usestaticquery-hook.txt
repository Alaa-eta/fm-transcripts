[00:00:00]
>> Jason Lengstorf: I wanna create a table of contents. So I want to be able to see what else is in the docs. And to do that, as kind of a shortcut today, we will just create a component that does that for us. So the way that that works is, we're going to get into our components.

[00:00:19]
And let's just create something called table-of-contents.js. And inside of that we'll just start out with some style so that we don't have to do that in phases. So we'll set the pragma to jsx, we'll import jsx from theme-ui. And then we're also going to import graphql, Link so that we can link between the pages.

[00:00:46]
And then a hook that Gatsby gives us called useStaticQuery. Now because this is not a template, we don't have access to the page queries or context or variables or anything. So we're gonna use this useStaticQuery so that we can get data out. But it's important to note that you can only do this if you don't need variables.

[00:01:12]
You have to hard code everything in a useStaticQuery. That's why it's static. You don't get dynamic content. So first, let's set up our component itself, TableOfContents, if I could spell it. That doesn’t get any arguments and we will export that as our default.
>> Jason Lengstorf: Inside we will, as a first step, load our data.

[00:01:42]
So let’s get the data and that’s gonna be the result of useStaticQuery. And we use the graphql tag to signify that it is indeed a query. And I wanna get allDocsPage nodes and I want the id, so that we can use it as a react key. I want the title, so that we can have some display text.

[00:02:04]
And I want the path, so that we know where to send somebody if they click the link.
>> Jason Lengstorf: Once we’ve got that data, it’s gonna come in and be stored in this data prop. Gatsby will do this at build time, actually. So we don’t need to await it or anything.

[00:02:17]
It just as far as the component is concerned when it runs on the browser, that data will already exist. Then we can, for convenience, let's rename pages and we'll get data.allDocsPage.nodes. And then we can return a thing. So the thing that we wanna return is, we'll give it a div in case we want to style it or add some borders or something around it.

[00:02:48]
We're not gonna do that for now, but we want to leave that door open. Let's add a heading to it. So we'll say Explore the Docs. And then we'll just show these in a list. So let's map over our pages. And for each one we're gonna get out that id, path and title.

[00:03:10]

>> Jason Lengstorf: And we can return an li. We'll set the key to the id. And then inside of that, we're gonna use a link. And I want that to link to the path and I wanna give it some styles. So the styles that I want are actually gonna be one it's active.

[00:03:31]
So what that means is, when we're reviewing the current page, I wanna show a slightly different style so we know what page we're on. So we'll do that in just a second. And then we want that to link to the title. So this is what will be displayed.

[00:03:46]
And then whenever this is the active class, Gatsby has this really handy helper. That will let us just set whenever the current link is the one that's being visited. It'll just set a class name for us. So I'm gonna set that to active. So now we're getting into some theme UI stuff that's a little different.

[00:04:06]
We're wanting conditional styles. We want this component to only have a style when we're using a class on it, when it has that active class. So to do that, we can use a pretty standard CSS and JS technique. Which is to use the ampersand which references the current element.

[00:04:24]
And then we modify it with the active class by adding this .active here. Inside of that we can apply whatever styles we want. So let's say we want our font style to be italic. We'll say that we want the text decoration to be none because it's the current link.

[00:04:41]
We want to de-emphasize it as a link but not actually deactivate it as a link. And then I want to go one step further and I actually want to tell people that this is the page they're viewing. So I'm gonna use the after pseudo class. And again we just add it as a string and then add a subobject here.

[00:05:00]
And I'm gonna set the content. And this is worth noting the content in CSS and JS ends up looking like it's double quoted. Because you have to quote it once to make it a property for JavaScript. And then you have to quote it for CSS. Which means that we've got single quotes for JavaScript and then we've got double quotes for CSS.

[00:05:24]
So, I'm gonna set this as the currently viewing. And so, these ones are for JavaScript, these ones are for CSS. That's a gotcha, that definitely got me. So it's worth just kind of like trying to pin that in your head for. When you are trying to use this in the future.

[00:05:44]
So now that we've got this, we should be able to just use it. So let's go into our docs page. And I'm just gonna toss it in. Let's see how it goes. So let's import TableOfContents from table-of-contents. And we can drop that right at the bottom.
>> Jason Lengstorf: Gotta start the site first, yarn workspace theme-dev develop.

[00:06:24]

>> Jason Lengstorf: Reload, and there we go, we're currently viewing. So let's add an extra page to make sure that it's working the way we expect. So we're going to theme-dev, under docs, and I'm gonna create a new file and we'll call it another.mdx. So we'll give it a title, let's call it another page, and we'll say More docs!

[00:06:51]

>> Jason Lengstorf: And there we go. So now we can click around to our pages. And see that we've got other pages in there. They are showing up the way we expect. The theme is hot reloading, we created that file. We didn't have to stop and restart it. Just picked it right up.

[00:07:06]
And our table of contents is doing what we wanted to do. So there is a good place to save our work. So let's git add all. Take a look at what we've done, okay? So we updated the docs page to use our table of contents. Wrote that table of contents component.

[00:07:26]
And created a new docs page. So we'll commit that. Say add table of contents, push that up.

