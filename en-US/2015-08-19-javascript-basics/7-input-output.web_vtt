WEBVTT

1
00:00:00.000 --> 00:00:04.185
[MUSIC]

2
00:00:04.185 --> 00:00:07.070
&gt;&gt; Kyle Simpson: Okay, we got input and
output are the next topics.

3
00:00:08.920 --> 00:00:12.990
The most traditional of all outputs in
JavaScript is to do an alert statement.

4
00:00:12.990 --> 00:00:17.600
And that alert statement,
which you can try yourself.

5
00:00:17.600 --> 00:00:20.460
And you alert, Hello World, like that.

6
00:00:20.460 --> 00:00:25.300
That alert statement pops up a pop up box
in a JavaScript, and a JavaScript browser.

7
00:00:27.070 --> 00:00:30.110
But it's important to understand that
the alert function itself is not actually

8
00:00:30.110 --> 00:00:32.670
part of JavaScript,
it comes from the browser.

9
00:00:33.770 --> 00:00:37.440
So alert itself is not a, it's not defined
by the JavaScript language or anything.

10
00:00:37.440 --> 00:00:39.430
It's given to you by the browser,

11
00:00:39.430 --> 00:00:44.000
and if you tried to run alert inside
of say node, it may very well,

12
00:00:44.000 --> 00:00:48.240
not have that because there's not such
thing as a pop up box inside of node.

13
00:00:48.240 --> 00:00:53.000
So, the much more common way
of doing output that we can

14
00:00:53.000 --> 00:00:57.328
work with as developers,
is actually the console.log statement.

15
00:00:57.328 --> 00:01:02.150
And console.log,
logs a message to your console which

16
00:01:02.150 --> 00:01:05.390
happens very conveniently to be
the thing we're already working on.

17
00:01:05.390 --> 00:01:08.980
So when I say console.log, we’re actually
going to print that message right back

18
00:01:08.980 --> 00:01:12.910
into the console I'm already working in,
which is super convenient for us.

19
00:01:12.910 --> 00:01:16.790
From an output perspective,
you can be much more sophisticated like,

20
00:01:16.790 --> 00:01:19.870
putting stuff on a page,
putting in the input box in a page.

21
00:01:19.870 --> 00:01:23.430
and assigning a value to it and
then its output in terms of visual, but

22
00:01:23.430 --> 00:01:25.395
as the developer playing
around in the console,

23
00:01:25.395 --> 00:01:29.920
console.log is kind of the simplest
way to print out some messages.

24
00:01:29.920 --> 00:01:34.950
So if I had a var a = 2, and then I wanted
to print out the current value of a,

25
00:01:34.950 --> 00:01:38.000
I just say console.log and
I just give it the variable a.

26
00:01:38.000 --> 00:01:38.730
No quotes.

27
00:01:39.760 --> 00:01:40.805
And it prints out the value 2.

28
00:01:44.506 --> 00:01:47.470
&gt;&gt; Kyle Simpson: Now a little thing that,
is kind of annoying about these consoles,

29
00:01:47.470 --> 00:01:51.006
is that you notice a lot of times you end
up getting this undefined being printed in

30
00:01:51.006 --> 00:01:51.690
weird places.

31
00:01:52.770 --> 00:01:57.140
The console environment in
your browser is designed

32
00:01:57.140 --> 00:02:02.200
to take the very last statement
expression in a program.

33
00:02:02.200 --> 00:02:06.160
And evaluate it for a value and
then show you that value.

34
00:02:06.160 --> 00:02:10.110
So for example I'll get to the question
in a minute.for example, if I say a=2,

35
00:02:10.110 --> 00:02:12.740
remember that was
an assignment expression.

36
00:02:12.740 --> 00:02:18.330
The result of an assignment expression,
is the value that was assigned.

37
00:02:18.330 --> 00:02:21.760
So the JavaScript engine just
doesn't assign that, but

38
00:02:21.760 --> 00:02:24.720
the console does one extra step,

39
00:02:24.720 --> 00:02:28.089
which is to say whatever my last
statement is give you that value back.

40
00:02:29.110 --> 00:02:33.890
So that's why it prints a 2 here, and
in statements that have no return value,

41
00:02:33.890 --> 00:02:37.380
you get something like undefined like for
example,

42
00:02:37.380 --> 00:02:42.530
of our statement has no return value,
and that's why we get undefined.

43
00:02:44.110 --> 00:02:45.570
There is a question?

44
00:02:45.570 --> 00:02:48.130
&gt;&gt; Speaker 2: I’m just wondering,
why is undefined return with you?

45
00:02:48.130 --> 00:02:49.488
&gt;&gt; Kyle Simpson: Hopefully I
could answer that.

46
00:02:49.488 --> 00:02:52.730
[LAUGH] Because there are statement
expressions that have no return value.

47
00:02:55.740 --> 00:03:00.500
Okay, so that's our output that we'll use,
is console.log.

48
00:03:00.500 --> 00:03:02.360
Now we're not going to use input a lot,
but

49
00:03:02.360 --> 00:03:06.660
just as a side note if you did want
to receive input, a lot of times,

50
00:03:06.660 --> 00:03:11.700
most of the time, you're writing that by,
having interactive elements on a form,

51
00:03:11.700 --> 00:03:14.590
on a page where people can type
in their name or whatever.

52
00:03:14.590 --> 00:03:19.180
But again, if you're working purely in
a sort of command lineish-like environment

53
00:03:19.180 --> 00:03:24.240
like this console, another way of
receiving input is the prompt statement.

54
00:03:24.240 --> 00:03:29.630
So, we could say something
like var age = prompt.

55
00:03:29.630 --> 00:03:32.420
Which is a function, and
we can give it a message to ask.

56
00:03:32.420 --> 00:03:34.580
So I could say, What is your age?

57
00:03:36.380 --> 00:03:39.780
That message that I ask, is gonna
pop up in a pop up when I hit enter.

58
00:03:41.250 --> 00:03:43.800
So we see your, What is your age?

59
00:03:43.800 --> 00:03:46.510
And it's given me an input box and
asked me to type in something.

60
00:03:46.510 --> 00:03:52.250
I just turned 35 a few weeks ago,
so I will hit 35, and hit OK.

61
00:03:52.250 --> 00:03:58.350
Now that value goes back, and
it has been assigned to this variable age.

62
00:03:58.350 --> 00:04:01.910
So if I then, say, console.log, age.

63
00:04:04.530 --> 00:04:05.320
I'll get 35.

64
00:04:05.320 --> 00:04:07.000
So, try that yourself.

65
00:04:07.000 --> 00:04:10.310
Try writing a prompt,
asking a question giving it a value and

66
00:04:10.310 --> 00:04:12.682
then testing the return
result was assigned.

67
00:04:12.682 --> 00:04:17.970
&gt;&gt; Speaker 2: So the question is, that
value a string or a number or what is it?

68
00:04:17.970 --> 00:04:19.708
What if you want it to make it a number?

69
00:04:19.708 --> 00:04:20.950
Will I get to that, right?

70
00:04:20.950 --> 00:04:23.030
&gt;&gt; Kyle Simpson: We do get to
some value in a little bit.

71
00:04:24.770 --> 00:04:27.630
The thing that comes back from prompt,
is always a string, but

72
00:04:27.630 --> 00:04:29.580
it's easy to make it into something else.

73
00:04:29.580 --> 00:04:30.370
Yeah.
&gt;&gt; Speaker 3: Do you not need

74
00:04:30.370 --> 00:04:33.380
a semi-colon, after the first statement?

75
00:04:33.380 --> 00:04:35.870
&gt;&gt; Kyle Simpson: So that's an example
of one where I should have put one for

76
00:04:35.870 --> 00:04:36.840
clarity.

77
00:04:36.840 --> 00:04:39.280
I was lazy and silly and forgot it.

78
00:04:39.280 --> 00:04:43.540
So JavaScript is forgiving in a lot of
places, and that's what I meant earlier,

79
00:04:43.540 --> 00:04:46.550
when I said that semicolons can
be optional in a lot of places.

80
00:04:46.550 --> 00:04:49.660
It's forgiving, and it tries to put
them in if you've forgotten them.

81
00:04:49.660 --> 00:04:52.119
I should, in proper coding,
have put a semicolon there.

82
00:04:59.482 --> 00:05:00.668
&gt;&gt; Kyle Simpson: Okay, hopefully,

83
00:05:00.668 --> 00:05:04.716
even if this is your first experience
with JavaScript, hopefully,

84
00:05:04.716 --> 00:05:09.360
you're starting to get a slightly more,
sense of what we're gonna do.

85
00:05:09.360 --> 00:05:11.510
We're essentially gonna
make some variables,

86
00:05:11.510 --> 00:05:14.950
that are symbolic containers
that we can put values into.

87
00:05:14.950 --> 00:05:18.700
And we're just gonna figure out different
values, and assign them back and forth,

88
00:05:18.700 --> 00:05:23.310
and maybe along the way, we might output
some stuff, with a console.log and

89
00:05:23.310 --> 00:05:27.600
that essentially is the basics
of writing a Javascript program.

90
00:05:27.600 --> 00:05:31.450
You can get lots more complex and write
JavaScript to manipulate the page, and

91
00:05:31.450 --> 00:05:35.470
make network requests, AJAX, and
all of that stuff but, none of that

92
00:05:35.470 --> 00:05:39.610
is necessary to learn the language
JavaScript itself, what's necessary here.

93
00:05:39.610 --> 00:05:41.190
Is to understand basic things like,

94
00:05:41.190 --> 00:05:45.100
how to make a variable,
how to put a value into it and so forth.

95
00:05:45.100 --> 00:05:50.759
So, hopefully in put and output,
will be ways to explain some of my stuff.

