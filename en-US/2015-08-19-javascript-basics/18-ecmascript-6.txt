[00:00:00]
>> [MUSIC]

[00:00:03]
>> Kyle Simpson: When will it become standard to use const? It's already a standard in the sense that ES6 has already been officially voted upon. And so const is happening, I mean, there's one last official vote that will happen in June of this year to give it the final stamp of approval, but it's virtual certainty ES6 will happen as the standard is already written.

[00:00:27]
And there are several browsers that are already, so the new versions of Chrome, Firefox, IE, they all support it. If you're having to run code that's running in older browsers, or you're trying to use ES6 features that don't yet exist even in the newest nightlies of browsers because there are still some unimplemented features as of yet.

[00:00:48]
If you're trying to do that the bridge is to use what's called a transpiler. It's a special compiler that takes your existing JavaScript code, say you write code that ES6 features in it. And it converts that code to something that will run the same way but in older browsers.

[00:01:05]
So it goes through lots of different tricks to figure that out. So we won't belabor that point but I'll just quickly illustrate that if we had. There's a tool called Bable, that is probably one of the more common transpilers. And if we had some code in Babel, let me try to zoom in so it's a little bit more readable.

[00:01:25]
If we had some code in Babel that we were trying to play around with and see what's the equivalent if I wrote it in ES6 what's the equivalence of it in something that runs in a browser. So if I say const x = 10 you'll notice over here that they're not actually doing const.

[00:01:40]
The thing that they're transpiling to is this other stuff where they're setting up different checks on its behavior, so that it's going to behave almost identically to the way const will work in a normal ES6 engine. So this is the code that's automatically produced by this tool and that's the code that you would compile and ship out to the browser.

[00:02:02]
While you would maintain your source code, and your repository or whatever, would use the const. So you would author an ES6, and as a build step you would transpile to something lower and ship that out. So this is a pretty common practice among JavaScript developers and applications, and it's becoming even more so.

[00:02:22]
This is the new norm, is that you're gonna be, it's gonna be suggested that you do always write in the newest version of JavaScript. And if you have to run your code in older browsers, which is the reality for most of us, you just simply let a build step with this tool take care of the implementation details.

[00:02:40]
So we won't go into any more details about how Babel works or what it does, but it's a very sophisticated program that's able to figure all that stuff out for us, let us not have to worry about it.
>> Kyle Simpson: So basically, [LAUGH] take away here. You should if you're going to take seriously writing JavaScript, if you're going to work in an environment write it in an application.

[00:03:01]
If that's your job I'd recommend switching to ES6 now, which is going to take learning ES6 so, there's plenty of work to do there. But, once you've learned it and implemented it, you just need to build step with the transpiler like Babel or something like that to take care of the compilation.

[00:03:17]
Okay, so did I miss any more questions? Yeah Babble does have a lot of great examples. There is more than just Babble. I'm not meaning to say that's the only tool. There's Tracer and a couple of other ones, but Babble is one of the more popular ones these days, so It'd be a good place to start.

[00:03:35]
Yeah, it is mentioned in the chat, I just one make sure everybody sees there are tools, if you're not really serious about a full build step thing but you just wanna play around with how ES6 works. Thereâ€™s a tool like es6fiddle.net and what this tool does is it does the transpiling in the compiling behind the scenes.

[00:03:59]
So it'll just run your code so if I said something like const x = 10 and then I said, console.log(x), and then I said x = 20 and console.log(x). The question is am I going to get 10 and 2 or what's going to happen? And the way it's going to do is going to transpile that const so that this state is not allowed, and you'll notice that we get an error saying x is read only.

[00:04:26]
So it's transpiled under the scenes, so that I wasn't allowed to do line five. So you can play around with various different ES6 features here, and they've got several built in examples. So if you wanted to learn what, somebody asked earlier how do I do default parameters? Well, here's the syntax for default parameters as of ES6.

[00:04:46]
You just put an equal sign in the value to assign a default parameter. So you can play around with those, if you're interested in learning more about ES6. And as a reminder there is definitely an ES6 course available from Frontend Masters.

