WEBVTT

1
00:00:00.000 --> 00:00:03.927
[MUSIC]

2
00:00:03.927 --> 00:00:06.285
&gt;&gt; Kyle Simpson: Our goal
now is to jump right in and

3
00:00:06.285 --> 00:00:11.040
where we're going to start is chapter
one of the Up and Going book.

4
00:00:11.040 --> 00:00:12.270
So if you want to follow along,

5
00:00:12.270 --> 00:00:14.500
again you don't know J S dot
com gets you to the repo.

6
00:00:14.500 --> 00:00:16.920
And if you want to follow along with us,

7
00:00:16.920 --> 00:00:18.550
essentially we're going to
start from chapter one.

8
00:00:18.550 --> 00:00:21.530
I'm not going to read word for
word the book to you, but

9
00:00:21.530 --> 00:00:25.940
I'm gonna to try to distill the same
concepts that we deal with in the book.

10
00:00:25.940 --> 00:00:30.720
We'll try to go through those things
we'll take plenty of little mini

11
00:00:30.720 --> 00:00:35.390
breaks after we've dealt with the concept
or two will take a little breaks and

12
00:00:35.390 --> 00:00:37.440
we'll have some time for
you to practice these things.

13
00:00:37.440 --> 00:00:41.140
There is no substitute for
you typing this in yourself,

14
00:00:41.140 --> 00:00:45.050
either in your own code editor or
in the dev console of your browser,

15
00:00:45.050 --> 00:00:48.010
trying each one of these things
yourself is really important.

16
00:00:48.010 --> 00:00:51.880
And that's true even if you already
come to the table with experience.

17
00:00:51.880 --> 00:00:54.810
Don't just forsake the thing and
say, I get that.

18
00:00:54.810 --> 00:00:57.330
Definitely, I encourage you to
follow along and participate.

19
00:00:57.330 --> 00:01:02.770
So, we start this book series, the up and

20
00:01:02.770 --> 00:01:05.050
going book is conceptually
the first book of the series.

21
00:01:05.050 --> 00:01:06.650
This is the place to start and

22
00:01:06.650 --> 00:01:10.110
it makes most sense to start from
literally the very beginning.

23
00:01:10.110 --> 00:01:13.850
So, for those of you that don't really
have a lot of programming experience

24
00:01:13.850 --> 00:01:16.550
let me try to dispel a couple of myths and

25
00:01:16.550 --> 00:01:19.560
fill in a couple of details that
you may not have heard before.

26
00:01:19.560 --> 00:01:22.250
So, when people talk about programming,
when they talk about writing code.

27
00:01:22.250 --> 00:01:26.890
Essentially, what they're talking
about is typing into a text file and

28
00:01:26.890 --> 00:01:30.410
that text file is referred
to as your source code.

29
00:01:30.410 --> 00:01:35.190
Now the source code is
a set of special words and

30
00:01:35.190 --> 00:01:38.980
phrases and operators,
which are special characters.

31
00:01:38.980 --> 00:01:42.530
They're designed to give instructions
to the computer on what to do.

32
00:01:43.560 --> 00:01:48.480
But the symbols and words and
phrases that you put into that program

33
00:01:48.480 --> 00:01:53.010
are not actually in a form that
the computer can directly understand.

34
00:01:53.010 --> 00:01:56.850
It needs some assistance and
so there is a step

35
00:01:56.850 --> 00:02:01.960
after you write these instructions into a
text file there's a step that comes along.

36
00:02:01.960 --> 00:02:04.980
And it goes by different names depending
on the context that you're in.

37
00:02:04.980 --> 00:02:09.940
But there's a step that essentially comes
along and converts the physical words,

38
00:02:09.940 --> 00:02:13.290
the readable code as we would say,
that you've written

39
00:02:13.290 --> 00:02:17.050
into a series of instructions that
the computer can actually understand.

40
00:02:17.050 --> 00:02:20.210
And those instructions are in
the form of binary, the ones and

41
00:02:20.210 --> 00:02:22.070
zeroes strung together.

42
00:02:22.070 --> 00:02:24.960
So, the first observation that
I would make, and I think this

43
00:02:24.960 --> 00:02:28.490
is an important one, regardless of what
level of your experience in programming,

44
00:02:28.490 --> 00:02:33.330
is that the source code that you
write is not really for the computer.

45
00:02:33.330 --> 00:02:38.280
It's almost sort of a side artifact of
what the computer really cares about.

46
00:02:38.280 --> 00:02:41.520
There's a special program on your
computer, a compiler or an interpreter or

47
00:02:41.520 --> 00:02:43.600
something like that that does care but

48
00:02:43.600 --> 00:02:46.790
the overall computer system doesn't
care about the source code.

49
00:02:46.790 --> 00:02:52.380
And it is actually possible
to write potentially infinite

50
00:02:52.380 --> 00:02:55.430
different set of source code files.

51
00:02:55.430 --> 00:02:57.730
That when boiled down to those ones and

52
00:02:57.730 --> 00:03:00.719
zeros would produce exactly
the same stream of ones and zeroes.

53
00:03:01.800 --> 00:03:05.260
So, if you could literally write an
infinite number of different programs that

54
00:03:05.260 --> 00:03:10.240
do the same thing for your computer then,
what difference does it make?

55
00:03:10.240 --> 00:03:12.020
What source code we write?

56
00:03:12.020 --> 00:03:15.800
And that's the first big observation that
I'd like to make is that the difference

57
00:03:15.800 --> 00:03:18.090
is that source code is not for
the computer I mean,

58
00:03:18.090 --> 00:03:21.710
yes it's used by your compiler but
it's not for the computer.

59
00:03:21.710 --> 00:03:22.660
It is for the developer.

60
00:03:23.730 --> 00:03:26.745
It is for you to be able to
look at what you've done and

61
00:03:26.745 --> 00:03:29.050
understand what your
program is intending to do.

62
00:03:29.050 --> 00:03:33.860
And it is also for other developers,
people on your team, your

63
00:03:33.860 --> 00:03:38.120
future self if you come back six months
later and you're looking at a program.

64
00:03:38.120 --> 00:03:42.880
You want to write the code in such a way
that it not only does the correct thing

65
00:03:42.880 --> 00:03:43.870
but it also makes sense.

66
00:03:45.070 --> 00:03:48.710
That's an often overlooked topic in
fact many times people come back

67
00:03:48.710 --> 00:03:52.330
after having written a completely
non-sensible program and

68
00:03:52.330 --> 00:03:56.160
try to sprinkle in bits
of sensibility to it.

69
00:03:56.160 --> 00:04:00.150
And I would encourage you to try to
strive to go in the opposite direction.

70
00:04:00.150 --> 00:04:04.940
Try to write everything that you write in
such a way that your future self having

71
00:04:04.940 --> 00:04:09.340
no context and having completely
forgotten, having had many margaritas and

72
00:04:09.340 --> 00:04:13.260
many nights of sleep since, that you could
go back and look at that line of code and

73
00:04:13.260 --> 00:04:14.700
understand what it meant.

74
00:04:15.700 --> 00:04:16.900
What was it intending to do?

75
00:04:16.900 --> 00:04:20.100
What was its pros and its cons?

76
00:04:20.100 --> 00:04:22.700
Don't assume that if you think,

77
00:04:22.700 --> 00:04:26.640
I know this variable can only
ever have numbers in it.

78
00:04:26.640 --> 00:04:29.520
But if that's not obvious from the line
of code then that's an assumption

79
00:04:29.520 --> 00:04:31.460
that you've made that isn't
obvious in the code and

80
00:04:31.460 --> 00:04:36.330
won't be obvious to another developer and
won't be obvious to your future self.

81
00:04:36.330 --> 00:04:40.310
So, it's incredibly important to approach
writing source code from the perspective

82
00:04:40.310 --> 00:04:44.180
of the developer more so
even than the perspective of the program.

83
00:04:44.180 --> 00:04:47.240
Of course you have to write
syntactically correct code.

84
00:04:47.240 --> 00:04:50.610
You have to write code that works
the way the language expects and

85
00:04:50.610 --> 00:04:54.050
we'll spend plenty of time talking about
that in a moment but I do not want to

86
00:04:54.050 --> 00:04:58.210
gloss over the fact that the source
code that you write is for developers.

87
00:04:58.210 --> 00:05:03.190
And there's lots of different things that
you can do and it will be an ongoing

88
00:05:03.190 --> 00:05:08.060
process, you will never completely master
the skill of writing sensible programs.

89
00:05:08.060 --> 00:05:11.950
You can master the skill of
writing functional programs

90
00:05:13.100 --> 00:05:14.360
with given enough practice.

91
00:05:14.360 --> 00:05:17.390
You know there's that old
idiom like 10,000 hours of

92
00:05:17.390 --> 00:05:18.490
practice makes you an expert.

93
00:05:18.490 --> 00:05:19.580
But I don't even know if that's true.

94
00:05:19.580 --> 00:05:22.730
But if it were true in some
respect to programming.

95
00:05:22.730 --> 00:05:27.990
It's possible to achieve a mastery over
the JavaScript programming language.

96
00:05:27.990 --> 00:05:31.560
I do not think it's possible to achieve
a mastery over writing sensible code in

97
00:05:31.560 --> 00:05:32.970
JavaScript or any other language.

98
00:05:32.970 --> 00:05:35.340
It is something you have to work at,
something you have to try,

99
00:05:35.340 --> 00:05:36.620
you have to practice.

100
00:05:36.620 --> 00:05:38.800
You have to learn over periods of time and

101
00:05:38.800 --> 00:05:42.100
I consider myself particularly
not good at this.

102
00:05:42.100 --> 00:05:45.940
Most of my effort in teaching
is not writing code but

103
00:05:45.940 --> 00:05:47.440
writing code that's more teachable.

104
00:05:48.580 --> 00:05:50.530
And I struggle with that,
to be completely honest.

105
00:05:50.530 --> 00:05:53.570
I struggle to figure out,
how can I rearrange this in a way,

106
00:05:53.570 --> 00:05:55.120
it's not just about what
I call something but

107
00:05:55.120 --> 00:05:58.370
how can I rearrange this in a way
that actually makes sense to people,

108
00:05:58.370 --> 00:06:02.580
that fits the way our brains kind of
try to linearly process through stuff.

109
00:06:02.580 --> 00:06:06.140
That's a difficult process, so
it's not something I can just

110
00:06:06.140 --> 00:06:09.070
teach you as a rote skill, and
then you can be certified in it.

111
00:06:09.070 --> 00:06:11.840
But it's something that I would
encourage you to not gloss over,

112
00:06:11.840 --> 00:06:13.970
it's something that's very
important to try to do.

113
00:06:15.260 --> 00:06:19.570
So, I already have started to skip over
some things, so let's fill in some gaps.

114
00:06:19.570 --> 00:06:23.270
When we talk about writing source code,
there's a word that's referred to,

115
00:06:23.270 --> 00:06:28.230
which is syntax and in more formal
terms there's a set of rules

116
00:06:28.230 --> 00:06:31.850
that put that syntax together and
that set of rules is called the grammar.

117
00:06:31.850 --> 00:06:34.070
So, the syntax and the grammar together,

118
00:06:35.110 --> 00:06:39.140
fit together as how to
write a JavaScript program.

119
00:06:39.140 --> 00:06:42.730
It will tell you what are the valid
combinations of characters

120
00:06:42.730 --> 00:06:45.440
the valid combinations of words
that you can put together

121
00:06:45.440 --> 00:06:47.070
to do what you want to
do with your program.

122
00:06:49.470 --> 00:06:54.390
So, the syntax of a programming
language is much like the syntax for

123
00:06:54.390 --> 00:06:57.500
English or
whatever your native tongue may be,

124
00:06:57.500 --> 00:07:01.650
there are actual physical
things that you can do.

125
00:07:01.650 --> 00:07:05.670
There's punctuation marks in the English
language like the comma and the period and

126
00:07:05.670 --> 00:07:07.040
the exclamation mark.

127
00:07:07.040 --> 00:07:11.940
There are parts of phrases that work
together like a word used as a verb

128
00:07:11.940 --> 00:07:13.660
versus a word used as a noun.

129
00:07:13.660 --> 00:07:17.550
Those are things, but the way you put
those things together into a phrase and

130
00:07:17.550 --> 00:07:21.620
then put phrases together and
make a sentence, that's called grammar.

131
00:07:21.620 --> 00:07:25.380
And you maybe remember back in school
you learned English grammar or whatever.

132
00:07:25.380 --> 00:07:29.880
So there's a very similar concept in
programming, learning first the syntax and

133
00:07:29.880 --> 00:07:33.060
then the rules of how to put
the syntax together to make a coherent,

134
00:07:33.060 --> 00:07:34.870
what we call statement.

135
00:07:34.870 --> 00:07:36.250
That's what we call grammar.

136
00:07:36.250 --> 00:07:40.330
So, I will put the word grammar and the
word syntax together from here on out and

137
00:07:40.330 --> 00:07:43.880
I just use the word syntax most people
do but just so you understand there

138
00:07:43.880 --> 00:07:47.410
are kind of two there are two different
faces of the Rubik's cube if you will.

139
00:07:47.410 --> 00:07:49.050
They're different parts of the same thing.

