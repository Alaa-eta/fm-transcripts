WEBVTT

1
00:00:00.000 --> 00:00:03.964
[MUSIC]

2
00:00:03.964 --> 00:00:05.810
&gt;&gt; Kyle Simpson: The next
topic is operators and

3
00:00:05.810 --> 00:00:09.270
we have dealt with operators
already in several places.

4
00:00:09.270 --> 00:00:11.590
We've had the plus and the multiply.

5
00:00:11.590 --> 00:00:12.910
We've had the equals.

6
00:00:12.910 --> 00:00:14.610
We've already seen several operators.

7
00:00:14.610 --> 00:00:18.510
Turns out there's probably
about 30ish something like that

8
00:00:18.510 --> 00:00:22.510
different operators defined in JavaScript
and I've got a listing here in the book.

9
00:00:22.510 --> 00:00:24.990
I'm not going to bore you by giving
you every single one of them.

10
00:00:24.990 --> 00:00:28.100
But there's a whole bunch of different
operators that all do different things and

11
00:00:28.100 --> 00:00:31.290
if you want to read up on it you can
read this, these are kind of like

12
00:00:31.290 --> 00:00:35.650
the most important ones and then there's
even more listed here on this MDN link.

13
00:00:36.740 --> 00:00:41.380
So being aware of what operators
are available to JavaScript

14
00:00:41.380 --> 00:00:45.530
is of course really important because
you're going to want to do stuff and

15
00:00:45.530 --> 00:00:49.070
the stuff you're going to want
to do is going to need tasks.

16
00:00:49.070 --> 00:00:53.680
There's going to be places where there's
multiple ways to do the same thing.

17
00:00:53.680 --> 00:00:57.440
So for example, this statement right here.

18
00:00:57.440 --> 00:01:00.550
I'll copy that and put it in my code
editor, so it's easier to read.

19
00:01:00.550 --> 00:01:03.760
This statement right here, a = a + 2.

20
00:01:03.760 --> 00:01:07.220
We can already kind of intuit that what
it's going to do first is get the value

21
00:01:07.220 --> 00:01:13.050
out of a, whatever it is, add two to it
and then assign it back to the variable a.

22
00:01:14.140 --> 00:01:14.790
Okay?

23
00:01:14.790 --> 00:01:18.160
So in other words we're just
adding two into the current value.

24
00:01:18.160 --> 00:01:20.820
So that's one way of doing it and
that's a pretty clear way of doing it.

25
00:01:20.820 --> 00:01:25.100
But there are short cut operators
which some people like and

26
00:01:25.100 --> 00:01:27.170
some people feel are more complicated.

27
00:01:27.170 --> 00:01:31.700
But in this case there's a short cut
operator if you want to take a variable

28
00:01:31.700 --> 00:01:34.009
and add something to whatever
is in the current variable.

29
00:01:35.660 --> 00:01:40.650
Then a short cut operator is putting
the plus and the equals together.

30
00:01:40.650 --> 00:01:43.060
And then just whatever you want to add on.

31
00:01:43.060 --> 00:01:45.180
And these will have
the exact same end result.

32
00:01:45.180 --> 00:01:50.410
They'll take whatever is in a currently,
add two to it, and put it back into a.

33
00:01:50.410 --> 00:01:54.490
So, it turns out there's several different
ways to come out any given problem.

34
00:01:54.490 --> 00:01:58.040
Knowing the different tools that you have,
you can choose.

35
00:01:58.040 --> 00:02:02.720
Now again, I kind of referred to,
some people prefer line one and

36
00:02:02.720 --> 00:02:04.640
some people prefer line three.

37
00:02:04.640 --> 00:02:06.110
They both do the same thing.

38
00:02:06.110 --> 00:02:12.690
The question you should ask is which one
semantically means more what it's doing.

39
00:02:12.690 --> 00:02:20.150
And I would tend to say that even though
line one is more explicit it actually

40
00:02:20.150 --> 00:02:25.230
might take a little bit more brainpower
to understand line one than line three.

41
00:02:25.230 --> 00:02:27.950
If you learned the line
three operator you know

42
00:02:27.950 --> 00:02:31.230
that it just adds something
to my existing variable.

43
00:02:31.230 --> 00:02:35.150
And I don't have to think about
the step of pulling out the value now,

44
00:02:35.150 --> 00:02:36.930
it's current and adding it.

45
00:02:36.930 --> 00:02:39.920
I just say put another
two into the bucket.

46
00:02:39.920 --> 00:02:43.080
I got a bucket of eggs,
put two more in, right.

47
00:02:43.080 --> 00:02:48.270
So line three to me is slightly
more conceptually simple

48
00:02:48.270 --> 00:02:50.280
once you learn that that's
a shortcut operator.

49
00:02:51.660 --> 00:02:55.840
And looking at it in code if my only
goal was to add two to whatever it is,

50
00:02:55.840 --> 00:02:58.760
I might prefer this line 3 over line 1.

51
00:02:58.760 --> 00:03:01.900
That of course might be quite
controversial cuz there might be people

52
00:03:01.900 --> 00:03:05.880
that vehemently believe that line 1
is way, way better and more sensible.

53
00:03:05.880 --> 00:03:11.478
So, the point I'm illustrating
is that readability or

54
00:03:11.478 --> 00:03:17.920
understandability is inherently and
completely subjective.

55
00:03:19.430 --> 00:03:24.360
That statement of make a readable
program or make my code more readable.

56
00:03:24.360 --> 00:03:26.970
Those sorts of things
are thrown around an awful lot.

57
00:03:28.010 --> 00:03:31.200
Most of the time people don't
have a precise meaning for

58
00:03:31.200 --> 00:03:32.990
what they mean for them.

59
00:03:32.990 --> 00:03:37.040
There is no precise definition
of what readable means.

60
00:03:37.040 --> 00:03:37.710
It's subjective.

61
00:03:37.710 --> 00:03:41.480
It's subjective to you, and it's also
subjective to the other people that you

62
00:03:41.480 --> 00:03:43.370
expect or intend to read your program.

63
00:03:43.370 --> 00:03:47.110
Is there a question here?
&gt;&gt; Speaker 2: They're just asking if -=

64
00:03:47.110 --> 00:03:48.190
&gt;&gt; Kyle Simpson: It's subtracting, yep.

65
00:03:48.190 --> 00:03:51.000
-= does the same thing,
but for subtraction.

66
00:03:51.000 --> 00:03:56.780
So, -= would take a and subtract it out,
just like a = a- 2 there.

67
00:03:56.780 --> 00:03:59.619
So, there are lots of operators
to learn in JavaScript.

68
00:03:59.619 --> 00:04:03.410
The major ones that we care about
are the equals operator cuz

69
00:04:03.410 --> 00:04:04.940
we're gonna do a lot of assignments.

70
00:04:06.180 --> 00:04:09.000
And maybe the math operators
because that's just a simple way of

71
00:04:09.000 --> 00:04:10.600
illustrating concepts.

72
00:04:10.600 --> 00:04:14.970
The plus and the minus,
the asterisk for multiplication,

73
00:04:14.970 --> 00:04:17.610
the slash for division,
those ones are pretty important.

74
00:04:20.310 --> 00:04:24.900
And then all these other ones, another
one that you'll probably want to learn,

75
00:04:24.900 --> 00:04:27.180
is the double equals and
the triple equals.

76
00:04:27.180 --> 00:04:28.960
For our purposes, at the immediate moment,

77
00:04:28.960 --> 00:04:32.090
they do the same thing,
which is to check if something's equal.

78
00:04:32.090 --> 00:04:36.410
They are not the same but for our purposes
they compare, they check equality.

79
00:04:37.690 --> 00:04:40.570
So over the break there was some
discussion, some good discussion,

80
00:04:40.570 --> 00:04:42.936
questions in the chat room.

81
00:04:42.936 --> 00:04:47.160
And I will just say we're going to
deal with the differences between

82
00:04:47.160 --> 00:04:50.400
using var to declare a variable and
not using it.

83
00:04:50.400 --> 00:04:52.850
We're going to cover those
differences in a little bit.

84
00:04:52.850 --> 00:04:54.378
That comes a little bit
later in the chapter.

85
00:04:54.378 --> 00:04:55.835
So, we'll come back to it.

86
00:04:55.835 --> 00:04:59.150
But for now the only difference that
we saw was just the difference we could

87
00:04:59.150 --> 00:05:05.880
observe that var a = 3 results
in undefined even though

88
00:05:05.880 --> 00:05:11.200
a has 3 in it the var part is undefined or
the var part returns undefined.

89
00:05:11.200 --> 00:05:14.750
But later if we say a = 4 or
even just a = 3.

90
00:05:14.750 --> 00:05:19.980
But a = 4 we're taking a value and making
an assignment statement out of it and

91
00:05:19.980 --> 00:05:23.840
that statement does have a return
value which the console finds and

92
00:05:23.840 --> 00:05:28.280
helpfully prints out for
us as the value 4.

93
00:05:28.280 --> 00:05:31.280
So that's just an observational difference
about the behavior of the console.

94
00:05:31.280 --> 00:05:35.070
It doesn't mean anything at all about
the appropriateness of using one or

95
00:05:35.070 --> 00:05:37.190
the other in your program,
we'll come back to that later.

