WEBVTT

1
00:00:00.000 --> 00:00:04.202
[MUSIC]

2
00:00:04.202 --> 00:00:07.658
&gt;&gt; Kyle Simpson: The next observation that
we wanna make which follows along with

3
00:00:07.658 --> 00:00:11.818
this understanding of execution and
the fact that a program needs to get run,

4
00:00:11.818 --> 00:00:16.170
is that there is no substitution for
running these programs yourself.

5
00:00:16.170 --> 00:00:17.370
So while you will see me for

6
00:00:17.370 --> 00:00:21.780
the visual purposes, I'll do a lot
of code writing in my code editor.

7
00:00:21.780 --> 00:00:24.570
And in a code editor it's not
actually running anything for me.

8
00:00:24.570 --> 00:00:27.160
An IDE might but
there's no running environment here.

9
00:00:27.160 --> 00:00:29.220
So, it isn't checking my program.

10
00:00:29.220 --> 00:00:33.280
You're going to want to run
these sorts of programs

11
00:00:33.280 --> 00:00:35.520
in an actual JavaScript environment.

12
00:00:35.520 --> 00:00:39.860
And it turns out that one of the easiest,
lowest hanging fruit ways of doing that

13
00:00:39.860 --> 00:00:43.360
is if you're in a browser
you can open up the console.

14
00:00:43.360 --> 00:00:45.028
So I'm using the Chrome browser.

15
00:00:45.028 --> 00:00:47.860
There's a question.

16
00:00:47.860 --> 00:00:51.880
The question in the chat room is
JavaScript provides you an error on

17
00:00:51.880 --> 00:00:52.716
runtime, right.

18
00:00:52.716 --> 00:00:54.654
JavaScript has bpth.

19
00:00:54.654 --> 00:00:57.530
It has both what we call static errors,
that is,

20
00:00:57.530 --> 00:01:00.480
something where the compiler said,
hey that's invalid syntax.

21
00:01:00.480 --> 00:01:02.180
You did something wrong.

22
00:01:02.180 --> 00:01:07.130
And it also has runtime errors where the
syntax was correct but then you tried to

23
00:01:07.130 --> 00:01:12.340
do something invalid with that, like you
tried to assign to something that was

24
00:01:12.340 --> 00:01:16.880
read only or you tried to run something
as a function and it wasn't a function.

25
00:01:16.880 --> 00:01:17.760
Those are runtime errors.

26
00:01:17.760 --> 00:01:18.640
So JavaScript has both.

27
00:01:20.900 --> 00:01:22.880
What's an interpreted
language in a nutshell?

28
00:01:23.950 --> 00:01:26.330
Yeah essentially it's going
to take it line by line.

29
00:01:26.330 --> 00:01:29.410
When it's on line three it doesn't
know what to expect of line four.

30
00:01:29.410 --> 00:01:31.800
A compiled language looks at and

31
00:01:31.800 --> 00:01:36.230
understands all four lines first
before trying to run the first line.

32
00:01:36.230 --> 00:01:38.860
So it implies that there's
multiple passes happening.

33
00:01:41.990 --> 00:01:45.330
Okay so if I'm in the Chrome
browser as you see here.

34
00:01:46.740 --> 00:01:50.318
Most people know about keyboard
shortcuts if you get into development.

35
00:01:50.318 --> 00:01:54.990
So Cmd+Option+I in a Mac in Chrome
will pop up your developer tools, and

36
00:01:54.990 --> 00:01:57.790
I have mine set that it defaults
to popping up the console.

37
00:01:57.790 --> 00:02:00.060
If you're looking for
a way to do it manually,

38
00:02:00.060 --> 00:02:04.460
you can come over here and in your Chrome
Developer tools, there's a More tools.

39
00:02:04.460 --> 00:02:07.100
And then, you can go directly
to the JavaScript console, and

40
00:02:07.100 --> 00:02:08.330
it's gonna do the same thing.

41
00:02:08.330 --> 00:02:12.220
Yours might pop up on the right-hand side,
it might pop up in a separate window.

42
00:02:12.220 --> 00:02:16.760
I like to keep mine anchored to
the bottom of my browser window.

43
00:02:16.760 --> 00:02:19.970
But it doesn't really matter
how it shows up to you.

44
00:02:19.970 --> 00:02:22.840
Open up your JavaScript console and
you'll notice that it's kind of like

45
00:02:24.020 --> 00:02:27.930
we can just type some code in, it's
kind of inviting to us, type some code.

46
00:02:27.930 --> 00:02:32.231
So we could literally just type some code,
I could say something like a = 2.

47
00:02:34.170 --> 00:02:35.060
And if I hit Enter

48
00:02:37.270 --> 00:02:40.280
it's actually gonna run that statement
as if that statement was a program.

49
00:02:41.570 --> 00:02:46.880
Okay, I'm gonna refresh my environment and
I'm gonna go back to this program here.

50
00:02:46.880 --> 00:02:48.830
The a = 2 and then the 2().

51
00:02:48.830 --> 00:02:53.930
And I'm gonna run this and what you're
gonna see when I try to run that program

52
00:02:55.500 --> 00:02:57.090
is that I get an error.

53
00:02:58.150 --> 00:03:00.420
This error says 2 is not a function.

54
00:03:00.420 --> 00:03:04.860
In other words it checked
the program first.

55
00:03:04.860 --> 00:03:10.870
There is no a that has been run, it was
invalid to try to run 2 as a function.

56
00:03:10.870 --> 00:03:14.710
There's lots of other syntax errors
that we could come up with, okay.

57
00:03:14.710 --> 00:03:20.186
So, for example if I had 2 = 3, right.

58
00:03:20.186 --> 00:03:24.310
The value 2 on the left hand side is
not something that can get assigned,

59
00:03:24.310 --> 00:03:25.430
it's not a variable.

60
00:03:25.430 --> 00:03:26.670
So, I can't get assigned something.

61
00:03:26.670 --> 00:03:27.270
So, that is yet

62
00:03:27.270 --> 00:03:33.160
again an example of something that can
be caught kind of at the compiler phase.

63
00:03:33.160 --> 00:03:35.090
You've written something totally invalid.

64
00:03:35.090 --> 00:03:37.510
But here's something that can't
be caught at the compiler phase.

65
00:03:37.510 --> 00:03:38.910
It has to be run time.

66
00:03:38.910 --> 00:03:44.500
If I say something like a(),
open close parentheses, what

67
00:03:44.500 --> 00:03:49.740
it cannot know is if at that exact moment
of my program is a a function or not?

68
00:03:49.740 --> 00:03:51.380
It doesn't know that yet.

69
00:03:51.380 --> 00:03:53.560
So it has to try and run the program and

70
00:03:53.560 --> 00:03:57.150
if it fails, in this case, it's failing
cuz there isn't an a, that's a mistake.

71
00:03:57.150 --> 00:04:03.030
So let's make there be an a and then let's
try that a(), and you'll notice that

72
00:04:03.030 --> 00:04:08.680
it fails as a type error because
a doesn't have a function value in it.

73
00:04:09.760 --> 00:04:12.730
If a had a function value in it then
the function call would have worked.

74
00:04:12.730 --> 00:04:16.822
So that's what we meant but between the
distinction between compiling something

75
00:04:16.822 --> 00:04:20.735
knowing ahead of time that it's broken
versus needing to try to run the program

76
00:04:20.735 --> 00:04:29.946
to find out if it works or not.
&gt;&gt; Kyle Simpson: Hopefully

77
00:04:29.946 --> 00:04:32.249
the most recent question in
the chat room has been answered.

78
00:04:33.650 --> 00:04:37.140
JavaScript catches invalid syntax
by compiling your program first and

79
00:04:37.140 --> 00:04:39.550
then executing the compiled code.

80
00:04:39.550 --> 00:04:43.390
As opposed to a scripting language which
can't catch the syntax errors until

81
00:04:43.390 --> 00:04:43.980
it gets to them.

82
00:04:45.690 --> 00:04:46.190
Okay.

83
00:04:47.430 --> 00:04:53.010
So it's important to try from here on out
to run programs in an environment and

84
00:04:53.010 --> 00:04:56.890
the easiest way for you to try that is
something like your developer console.

85
00:04:56.890 --> 00:05:01.040
There are other ways to do this,
there are sites like JS Bin and

86
00:05:01.040 --> 00:05:04.790
JSFiddle and a dozen other ones out there,
that you can go to the site and

87
00:05:04.790 --> 00:05:08.070
type in some code and run a program,
those ones are fine too.

88
00:05:08.070 --> 00:05:12.990
For our purposes I think the most basic
is the best, just try it in your console.

89
00:05:12.990 --> 00:05:16.830
So essentially what I'm asserting
here in the book is I'm saying donâ€™t

90
00:05:16.830 --> 00:05:21.690
just take these things for
granted that if I say a = 2 it works.

91
00:05:21.690 --> 00:05:22.650
Try them yourself.

92
00:05:25.140 --> 00:05:29.092
Kind of a tip here is you'll
notice that I can do a = 2.

93
00:05:29.092 --> 00:05:33.670
If I hit Enter all by itself,
it will run the program but

94
00:05:33.670 --> 00:05:37.360
if I hit Shift+Enter it
gives me a second line.

95
00:05:37.360 --> 00:05:38.530
So, I can keep going.

96
00:05:38.530 --> 00:05:42.510
I can enter in a multi line
program by hitting Shift+Enter.

97
00:05:42.510 --> 00:05:44.450
And most of the developer
consoles are kind of like that.

98
00:05:44.450 --> 00:05:46.710
You can do multi lining but in my case,

99
00:05:46.710 --> 00:05:51.360
I'm going to prefer to write my code
in an editor and copy and paste it in.

100
00:05:51.360 --> 00:05:54.010
Just so, I don't have to keep getting
hit Shift+Enter over and over.

101
00:05:54.010 --> 00:05:55.240
So, you can go either way.

102
00:05:55.240 --> 00:05:57.863
But knowing about the Shift+Enter
technique is good.

103
00:06:01.787 --> 00:06:03.776
&gt;&gt; Kyle Simpson: Okay so in that case,

104
00:06:03.776 --> 00:06:07.534
the question in the chat room is if I try,

105
00:06:11.075 --> 00:06:15.180
&gt;&gt; Kyle Simpson: var a| a().

106
00:06:15.180 --> 00:06:19.530
The reason you're getting that it's
a number is because your environment

107
00:06:19.530 --> 00:06:22.980
still has a assigned a value 2 you
from when you typed it in earlier.

108
00:06:24.210 --> 00:06:26.380
So noticing that I've been refreshing and

109
00:06:26.380 --> 00:06:31.330
I do that with my keyboard shortcut
I do Cmd+R in the browser and Chrome.

110
00:06:31.330 --> 00:06:33.780
To refresh an environment
to start it over.

111
00:06:33.780 --> 00:06:37.056
So you can do that, or you can hit
the Refresh button, or whatever,

112
00:06:37.056 --> 00:06:40.679
but making sure that you start with
a fresh environment is a good way to avoid

113
00:06:40.679 --> 00:06:47.117
accidentally having it as value 2.
&gt;&gt; Speaker 2: Question about

114
00:06:47.117 --> 00:06:49.879
running JavaScript from the command line.
&gt;&gt; Kyle Simpson: Yeah,

115
00:06:49.879 --> 00:06:52.670
there was a question about,
can JavaScript be run from a command line.

116
00:06:53.880 --> 00:06:56.980
There are command line
execution environments,

117
00:06:56.980 --> 00:06:58.760
the most notable of which is Node.

118
00:06:58.760 --> 00:07:03.055
Node is typically sited as kind of
a server side JavaScript environment but

119
00:07:03.055 --> 00:07:05.840
Node can also run command line programs.

120
00:07:05.840 --> 00:07:09.970
So if you had Node installed you
could write run Node minus e and

121
00:07:09.970 --> 00:07:13.050
give it a JavaScript program and
run it from the command line.

122
00:07:13.050 --> 00:07:17.680
Or Node and give it a filename kind of
like you're talking about with Java.

123
00:07:17.680 --> 00:07:22.148
There are other JavaScript
environments outside of browsers.

124
00:07:22.148 --> 00:07:26.080
So Rhino is one of them,
there's probably maybe three or

125
00:07:26.080 --> 00:07:27.820
four others that I'm forgetting
off the top of my head,

126
00:07:27.820 --> 00:07:30.359
there are some JavaScript
command line environments.

127
00:07:31.360 --> 00:07:36.572
The most common is definitely Node, if you
wanna run JavaScript on the command line.

128
00:07:38.569 --> 00:07:40.400
&gt;&gt; Kyle Simpson: Yeah, node, io.js.

129
00:07:40.400 --> 00:07:43.210
They are forked versions
of the same project,

130
00:07:43.210 --> 00:07:46.490
looks like they're probably gonna come
back together in a few weeks or months,

131
00:07:46.490 --> 00:07:50.789
so I'm using Node to refer to that
whole family of server-side JavaScript.

132
00:07:51.790 --> 00:07:55.580
And yes, Node does have a REPL which
looks a little bit like our thing here.

133
00:07:55.580 --> 00:07:57.810
It's an actual environment.

134
00:07:57.810 --> 00:08:01.700
I can illustrate that real quick cuz
I have Node installed on my computer.

135
00:08:01.700 --> 00:08:06.521
So I can say Node and now I'm in a command
line environment where I can do var =

136
00:08:06.521 --> 00:08:11.350
2 and try to run the program and
I'm gonna get my errors.

137
00:08:11.350 --> 00:08:13.330
So Node does have a ripple like that.

138
00:08:13.330 --> 00:08:19.723
But also, it's,
&gt;&gt; Kyle Simpson: If I

139
00:08:19.723 --> 00:08:24.732
had a file with that code in it,

140
00:08:24.732 --> 00:08:31.280
a =.
&gt;&gt; Kyle Simpson: I can't even.

141
00:08:32.340 --> 00:08:33.490
Type in very many more.

142
00:08:33.490 --> 00:08:34.110
Okay.

143
00:08:34.110 --> 00:08:37.440
So if I had a file called test.js and
I said node test.js.

144
00:08:37.440 --> 00:08:41.720
It's very similar to Java's
command line environment.

145
00:08:41.720 --> 00:08:43.700
So you can do those things or
you can do node.

146
00:08:43.700 --> 00:08:48.181
I think it's -e and then,
give it a string of code like a = 2.

147
00:08:48.181 --> 00:08:49.685
All right.

148
00:08:49.685 --> 00:08:50.429
I think that works.

149
00:08:51.796 --> 00:08:54.530
Yeah so -e will evaluate
it from the command line so

150
00:08:54.530 --> 00:08:56.340
there are command line environments.

151
00:08:56.340 --> 00:09:00.500
I would suggest it's probably better
to stick with your developer console

152
00:09:00.500 --> 00:09:02.110
while you're learning JavaScript.

153
00:09:02.110 --> 00:09:04.720
But there are command line environments
if you want to play with them.

