WEBVTT

1
00:00:00.630 --> 00:00:02.020
&gt;&gt; Kyle Simpson: All right,
now back to variables.

2
00:00:02.020 --> 00:00:07.450
We've mentioned this many times, but
we didn't explicitly define that.

3
00:00:07.450 --> 00:00:11.030
And here is where it matters if you
put a var in front of something.

4
00:00:11.030 --> 00:00:17.380
So, if I have a program where
the very first line a = 42,

5
00:00:17.380 --> 00:00:21.360
I'm assigning to a variable that
has never been formally declared.

6
00:00:23.210 --> 00:00:28.020
And assigning to a variable that's never
been formally declared is a really,

7
00:00:28.020 --> 00:00:29.240
really bad idea.

8
00:00:30.880 --> 00:00:36.090
Every variable that you use in your
program should be formally declared.

9
00:00:36.090 --> 00:00:42.580
And it should be formally declared
before the first time you use it, okay.

10
00:00:42.580 --> 00:00:49.120
Technically, this program
formally declares a and uses it.

11
00:00:50.480 --> 00:00:53.780
But it makes use of this concept
which we won't really get into here.

12
00:00:53.780 --> 00:00:55.510
It makes use of this
concept called hoisting.

13
00:00:57.240 --> 00:01:01.670
And it's a more confusing program
even though it's a correctly running

14
00:01:01.670 --> 00:01:05.023
program.
&gt;&gt; Speaker 2: Like so you should, so it

15
00:01:05.023 --> 00:01:07.201
clears it after the scopes, or whatever?
&gt;&gt; Kyle Simpson: Yeah,

16
00:01:07.201 --> 00:01:10.530
I cover hoisting a lot more in
the book on Scope and Closures.

17
00:01:10.530 --> 00:01:13.050
So if you want to get
into the nuances of it,

18
00:01:13.050 --> 00:01:15.940
it has to do with the fact that this
program is gonna get compiled first.

19
00:01:15.940 --> 00:01:19.480
So it's gonna find that var
a before it tries to run anything.

20
00:01:19.480 --> 00:01:22.460
But this is the more confusing
version of the program.

21
00:01:22.460 --> 00:01:27.050
You would always want to prefer for
less confusing programs,

22
00:01:27.050 --> 00:01:30.950
to write var a first before
you do an assignment.

23
00:01:30.950 --> 00:01:34.650
And you can optionally combine
those two into the same thing.

24
00:01:36.420 --> 00:01:38.890
But you would always wanna
formally declare every variable.

25
00:01:38.890 --> 00:01:41.830
And the way we typically do that
in JavaScript up to this point

26
00:01:41.830 --> 00:01:43.180
is with the var keyword.

27
00:01:43.180 --> 00:01:44.910
There's two more coming in yes six.

28
00:01:44.910 --> 00:01:49.198
One is called let.
&gt;&gt; Kyle Simpson: And the other one we

29
00:01:49.198 --> 00:01:53.984
mentioned earlier is const.
&gt;&gt; Kyle Simpson: Latin const

30
00:01:53.984 --> 00:01:56.230
are block scoping declarations,

31
00:01:56.230 --> 00:02:00.030
rather than functions scoping
declarations like var as.

32
00:02:01.240 --> 00:02:04.380
What that means has a whole
chapter in the book.

33
00:02:04.380 --> 00:02:06.470
So I won't get into that too much.

34
00:02:06.470 --> 00:02:10.450
But those are the three ways that you
formally declare a very long javaScript.

35
00:02:11.700 --> 00:02:14.100
There's one other way to formally
declare an identifier, and

36
00:02:14.100 --> 00:02:15.650
that is to declare it as a function.

37
00:02:15.650 --> 00:02:20.956
And we haven't talked about functions yet
but if I said function a,

38
00:02:20.956 --> 00:02:26.555
I'm declaring a variable called
a which has this function value in it.

39
00:02:26.555 --> 00:02:30.268
So you always want to formally
declare your variables,

40
00:02:30.268 --> 00:02:33.300
in one of the ways that I just showed.

41
00:02:33.300 --> 00:02:39.525
Let me put those other ones back.
&gt;&gt; Kyle Simpson: Those

42
00:02:39.525 --> 00:02:43.640
are the ways to formally
declare variables.

43
00:02:43.640 --> 00:02:46.400
And you're always gonna want to
do one of those in your programs.

44
00:02:48.740 --> 00:02:49.782
&gt;&gt; Kyle Simpson: What's the use of

45
00:02:49.782 --> 00:02:50.930
hoisting?

46
00:02:50.930 --> 00:02:54.102
Again, I have a whole section
in the Scope &amp; Closure's book

47
00:02:54.102 --> 00:02:57.910
about what hoisting's about and
hoisting is actually not a real thing.

48
00:02:57.910 --> 00:02:59.490
It's a metaphor for the real thing.

49
00:02:59.490 --> 00:03:02.461
And the real thing is the compiler-
&gt;&gt; Speaker 3: And you also discussed it in

50
00:03:02.461 --> 00:03:05.563
advanced, JavaScript.
&gt;&gt; Kyle Simpson: I do, we'll up-sell here.

51
00:03:05.563 --> 00:03:10.030
[LAUGH] I do extensively cover this
topic in the advanced JavaScript course,

52
00:03:10.030 --> 00:03:11.758
that's available from Frontend Masters.

53
00:03:11.758 --> 00:03:16.628
[COUGH] Okay.
&gt;&gt; Speaker 4: There's a question about

54
00:03:16.628 --> 00:03:19.399
using let?
&gt;&gt; Speaker 4: What's the difference

55
00:03:19.399 --> 00:03:24.010
between using let to declare a variable?
&gt;&gt; Kyle Simpson: I don't wanna get too

56
00:03:24.010 --> 00:03:25.390
much into the winds.

57
00:03:25.390 --> 00:03:30.110
So let puts it inside a block, and
var puts it inside a function.

58
00:03:30.110 --> 00:03:31.600
That's all I'll say about that.

59
00:03:31.600 --> 00:03:35.120
There's much more about that in
the Scope &amp; Closures book and

60
00:03:35.120 --> 00:03:37.000
in the advanced JavaScript course.

61
00:03:37.000 --> 00:03:40.340
For your basic learning purposes in
JavaScript you don't need to worry about

62
00:03:40.340 --> 00:03:41.200
let and const.

63
00:03:41.200 --> 00:03:42.840
var is more than enough.

64
00:03:42.840 --> 00:03:46.340
But there are nuances to their
behaviors that are available to you.

65
00:03:46.340 --> 00:03:49.460
If you work in EcmaScript, in ES6.

66
00:03:52.315 --> 00:03:56.164
&gt;&gt; Kyle Simpson: Moving along.

67
00:04:03.077 --> 00:04:04.634
&gt;&gt; Kyle Simpson: There's a notion in

68
00:04:04.634 --> 00:04:09.591
many programming languages, and
JavaScript is no different.

69
00:04:09.591 --> 00:04:14.791
That if I had a collection of
statements like var a = 42 and

70
00:04:14.791 --> 00:04:18.340
foo( a / 2 ), these are statements.

71
00:04:18.340 --> 00:04:23.060
And if I had a collection of statements
that represented a logical unit together,

72
00:04:23.060 --> 00:04:27.830
then I could put those statements
together inside of a curly

73
00:04:27.830 --> 00:04:32.420
brace pair, like we see there.

74
00:04:32.420 --> 00:04:34.770
And that's called a block.

75
00:04:34.770 --> 00:04:38.800
A block, essentially,
is a pairing of curly braces with one or

76
00:04:38.800 --> 00:04:41.370
more statements inside of it.

77
00:04:41.370 --> 00:04:45.480
Now this block is a completely
stand-alone empty block.

78
00:04:45.480 --> 00:04:49.480
It doesn't mean anything
the way we've expressed it.

79
00:04:49.480 --> 00:04:51.560
It's a stylistic thing.

80
00:04:51.560 --> 00:04:55.130
It says these two things belong together,
and they're separate from other stuff.

81
00:04:55.130 --> 00:05:00.200
Like if you had a program that looked
like this, and you add stuff up here, and

82
00:05:00.200 --> 00:05:05.566
you add stuff down here.
&gt;&gt; Kyle Simpson: You're

83
00:05:05.566 --> 00:05:07.909
stylistically signalling
these two things in between,

84
00:05:07.909 --> 00:05:11.580
they're kinda special, they're set off,
they're their own deal.

85
00:05:11.580 --> 00:05:15.370
So there's not much, there's not
any functional difference here.

86
00:05:15.370 --> 00:05:19.460
But most of the time, blocks are not
appearing by themselves like that.

87
00:05:19.460 --> 00:05:24.260
Most of the time, they appear associated
with another kind of a statement.

88
00:05:24.260 --> 00:05:28.070
So there's different kinds of statements
that have blocks associated with them.

89
00:05:28.070 --> 00:05:32.530
For example, which we'll get into
in a little bit, the if statement.

90
00:05:32.530 --> 00:05:37.679
So if i wrote a statement
where I wanted to say,

91
00:05:37.679 --> 00:05:43.320
if (a&gt;10), and attach a block to it.

92
00:05:43.320 --> 00:05:46.706
Then what I'm saying is,
look at these statement and

93
00:05:46.706 --> 00:05:49.048
figure out if that's true or false.

94
00:05:49.048 --> 00:05:51.794
Is the value currently an a&gt;10 or not?

95
00:05:51.794 --> 00:05:55.920
It's only one of two
possible answers here.

96
00:05:55.920 --> 00:06:00.000
In our program, we would have had to
declare the var a and give it some useful

97
00:06:00.000 --> 00:06:06.630
value like the value 42, and
then give it some other value down here.

98
00:06:06.630 --> 00:06:10.980
So, if I said if a &gt;10,
is the answer yes or

99
00:06:10.980 --> 00:06:14.406
no?
&gt;&gt; Kyle Simpson: Yes,

100
00:06:14.406 --> 00:06:15.890
it's greater then 10.

101
00:06:15.890 --> 00:06:19.850
So we would go into the block only
if we entered yes to this question.

102
00:06:19.850 --> 00:06:21.170
It's asked a question.

103
00:06:21.170 --> 00:06:26.020
We go into that block and do these things,
only if the question answered yes.

104
00:06:26.020 --> 00:06:28.060
In programming terms, yes and

105
00:06:28.060 --> 00:06:32.670
no are actually what are called
the values true and false.

106
00:06:32.670 --> 00:06:35.220
So, the question is,
is that statement true?

107
00:06:35.220 --> 00:06:37.700
And the answer is yes, it is true.

108
00:06:37.700 --> 00:06:41.310
So we would execute this stuff inside
of the block, otherwise we don't.

109
00:06:41.310 --> 00:06:45.390
So that's one way to attach a block to
something is though an if statement.

110
00:06:45.390 --> 00:06:49.470
Another way to attach a block to
a statement is to have a loop.

111
00:06:50.940 --> 00:06:53.600
Like a while loop or a for
loop or whatever, and

112
00:06:53.600 --> 00:06:55.030
we'll come to loops in just a moment.

113
00:06:56.170 --> 00:07:00.640
But you notice that this block again,
it belongs to that statement and

114
00:07:00.640 --> 00:07:04.700
it's only going to get executed
in the context of that statement.

115
00:07:04.700 --> 00:07:08.280
So, it will only get executed
if this loop is going to happen.

116
00:07:09.290 --> 00:07:13.180
In this case,
the loop is going to happen once,

117
00:07:13.180 --> 00:07:16.419
because the first time we enter a &gt;42.

118
00:07:17.620 --> 00:07:20.050
But immediately we set it to 10.

119
00:07:20.050 --> 00:07:22.015
So the next time we try to do this loop,

120
00:07:22.015 --> 00:07:26.050
its not going to keep going because
a will no longer be the greater than 10.

121
00:07:26.050 --> 00:07:29.127
It'll just be the 10 itself.
&gt;&gt; Speaker 4: So Kyle,

122
00:07:29.127 --> 00:07:33.433
do you have the bracket at the end,
where some people bring it down and

123
00:07:33.433 --> 00:07:35.462
have it at the beginning?
&gt;&gt; Kyle Simpson: Some people like

124
00:07:35.462 --> 00:07:36.046
it there.
&gt;&gt; Speaker 4: What

125
00:07:36.046 --> 00:07:38.593
kind of person likes at his own.
&gt;&gt; Kyle Simpson: [LAUGH]

126
00:07:38.593 --> 00:07:39.558
[CROSSTALK] [INAUDIBLE].

127
00:07:39.558 --> 00:07:43.959
Well I'm tempted to answer that,
but I can't.

128
00:07:43.959 --> 00:07:45.259
&gt;&gt; Speaker 4: Answer

129
00:07:45.259 --> 00:07:46.275
it.
&gt;&gt; Group: [LAUGH]

130
00:07:46.275 --> 00:07:47.257
&gt;&gt; Kyle Simpson: No.

131
00:07:47.257 --> 00:07:47.757
&gt;&gt; Speaker 4: Do that?

132
00:07:47.757 --> 00:07:48.828
&gt;&gt; Kyle Simpson: It's a perfectly

133
00:07:48.828 --> 00:07:50.919
balanced style of.
&gt;&gt; Speaker 3: I will only

134
00:07:50.919 --> 00:07:55.251
see enterprise Java developers do it.
&gt;&gt; Kyle Simpson: I don't know that I would

135
00:07:55.251 --> 00:07:57.550
associate it with any
particular group of people or

136
00:07:57.550 --> 00:07:58.996
even in particular language.
&gt;&gt; [INAUDIBLE]

137
00:07:58.996 --> 00:08:03.256
&gt;&gt; Kyle Simpson: It is a stylistic choice

138
00:08:03.256 --> 00:08:05.436
only.
&gt;&gt; Speaker 6: Is it a bad choice to do

139
00:08:05.436 --> 00:08:08.460
the other one?
&gt;&gt; Kyle Simpson: It's not a bad choice.

140
00:08:08.460 --> 00:08:11.540
It's a choice, not a bad or a good one.

141
00:08:11.540 --> 00:08:16.020
The vast majority of open source
developers do what's called cuddling,

142
00:08:16.020 --> 00:08:18.870
which is they put the curly brace
on the same line as the statement.

143
00:08:18.870 --> 00:08:19.585
&gt;&gt; Speaker 6: Called cuddling?

144
00:08:19.585 --> 00:08:20.420
&gt;&gt; Group: [LAUGH]

145
00:08:20.420 --> 00:08:22.150
&gt;&gt; Kyle Simpson: That's how most

146
00:08:22.150 --> 00:08:23.240
people do it.

147
00:08:23.240 --> 00:08:25.690
But there's nothing
with doing it that way.

148
00:08:25.690 --> 00:08:28.650
They're functionally exactly the same.
&gt;&gt; Speaker 6: Okay.

149
00:08:30.300 --> 00:08:31.930
&gt;&gt; Kyle Simpson: So, we have a block

150
00:08:31.930 --> 00:08:35.360
that's not associated with anything,
means it's gonna run every time.

151
00:08:35.360 --> 00:08:39.270
Or we can attach a block to something, and
it means it's only gonna run conditionally

152
00:08:39.270 --> 00:08:43.920
if that statement actually Results
in something that we wanna do.

153
00:08:43.920 --> 00:08:46.450
There's lots of places
where blocks can appear.

154
00:08:46.450 --> 00:08:49.230
Blocks can also appear as
part of a function statement.

155
00:08:50.430 --> 00:08:56.048
So here, that block of statements
only happens for this foo function.

156
00:08:56.048 --> 00:09:01.390
Probably don't wanna call it recursive,
so I'll call a different function.

157
00:09:01.390 --> 00:09:04.770
Now this block only happens
if foo ever gets called.

158
00:09:04.770 --> 00:09:08.440
So it doesn't run right away, but
if later in the program I try to invoke

159
00:09:08.440 --> 00:09:12.490
the function, then it would find that
block and it would run that block of code.

160
00:09:12.490 --> 00:09:13.610
Okay?

161
00:09:13.610 --> 00:09:16.560
So just think conceptually,
if I wrap a curly brace pair

162
00:09:16.560 --> 00:09:19.920
around the set of code I'm putting
that as a collection of code, and

163
00:09:19.920 --> 00:09:23.050
then I can attach that block to
various different kinds of statements.

164
00:09:23.050 --> 00:09:28.070
And that will change how, and if,
and when that block gets executed,

165
00:09:28.070 --> 00:09:33.044
that's the major takeaway.
&gt;&gt; Speaker 4: There's a question there to

166
00:09:33.044 --> 00:09:37.459
the bottom, if you wanna read it.
&gt;&gt; Kyle Simpson: Question was,

167
00:09:37.459 --> 00:09:41.986
essentially, you can declare
a function like that, or

168
00:09:41.986 --> 00:09:47.518
you can declare a function.
&gt;&gt; Kyle Simpson: Like that,

169
00:09:47.518 --> 00:09:52.895
and technically there's a third variation
which is to give it a name itself,

170
00:09:52.895 --> 00:09:55.790
which doesn't have to be the same.

171
00:09:55.790 --> 00:10:00.060
Those are all functions,
those are not all function declarations.

172
00:10:00.060 --> 00:10:05.430
The first line is a function declaration,
the next two are function expressions,

173
00:10:05.430 --> 00:10:07.680
attached to a variable declaration.

174
00:10:08.860 --> 00:10:11.990
There's a variety of
differences between these, and

175
00:10:11.990 --> 00:10:15.770
we get too far off track if we worry too
much about those nuance differences.

176
00:10:15.770 --> 00:10:20.250
There's a variety of differences between
them, but the major take away here

177
00:10:20.250 --> 00:10:24.969
that you would want to.
&gt;&gt; Kyle Simpson: But

178
00:10:24.969 --> 00:10:29.784
you would wanna not forget is that,
[COUGH] in all three of these cases,

179
00:10:29.784 --> 00:10:34.683
the block is associated to a function,
and the block will not run unless

180
00:10:34.683 --> 00:10:39.334
you execute the function.
&gt;&gt; Kyle Simpson: So

181
00:10:39.334 --> 00:10:42.421
the nuanced differences between
function declarations and

182
00:10:42.421 --> 00:10:46.050
variable declarations with
function expression assignments.

183
00:10:46.050 --> 00:10:49.390
Those nuanced differences are outside
of our scope of discussion here.

184
00:10:49.390 --> 00:10:52.940
They are covered in depth
in the book series.

185
00:10:52.940 --> 00:10:54.240
So next steps,

186
00:10:54.240 --> 00:10:57.260
you would wanna pay more attention
to that reading through the books.

187
00:10:57.260 --> 00:10:59.050
They're also covered in my training.

188
00:10:59.050 --> 00:11:00.026
My advanced JavaScript training.

