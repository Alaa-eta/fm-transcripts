[00:00:00]
>> Kyle Simpson: A function is a way to logically group a piece of code together, kind of like a block is. But a function also makes that block of code something that you can call more than once. So it's kind of like a loop, and it's kind of like a block, but it's not gonna run forever like a loop does.

[00:00:19]
And it's not gonna run only once right now, like a regular block does. So it's kind of a third different concept here. It's like putting a set of stuff into this special location and being able to say, as many times as I need it I can just call out to that stuff and it'll run.

[00:00:37]
I might need it once I might need it five times, I might need to do it over and over and over again. It doesn't really matter. We use the function to logically group a set of tasks together. So I have kind of a silly running example in the book.

[00:00:52]
If you've read any of the book, I have this silly example of the phone store where you're purchasing a phone or whatever, so if you haven't read it you can go back and understand what I'm talking about. Here [COUGH] in this running silly example, I have the phone store employee, doesn't want to calculate all of the taxes for your final purchase amount.

[00:01:12]
You're talking to her and you're saying, I wanna buy this phone and this accessory. She doesn't wanna redo that on her calculator every time. That's a set of tasks that's repetitive that's gonna need to happen for pretty much every customer that buys something. And so, there's almost certainly a program that does that for her, the check out program, she can swipe your credit card and automatically calculates how much the charge and all of that.

[00:01:36]
And that's conceptually the same thing as a function. It's taking a specific set of tasks and putting it into a thing that I can repeat on demand. Whenever I want it, I can just invoke it and say do that set of things, and it'll just happen, okay? So, [COUGH] the example that we see here is, I have a variable that I'm declaring with the value 99.99.

[00:01:58]
That's the price of a phone, and I wanna print the amount. I could've put a console dot log statement here right? I could have said consul dot log dot amount and then I would have printed it. And then I said amount equals amount times two which doubles the value, and then I could have put another consul dot log.

[00:02:16]
But as soon as I did that twice, as soon as I typed that twice into a program I might start ask myself why am I repeating myself. Could I take that set of statements that I repeated, and put that into a location and give that location a special name.

[00:02:36]
And whenever I want that stuff to happen, just call it by name. That's what a function is doing. So what is my set of statements? It's just one statement in this case. But it's slightly more complex than just calling console.log amount. You notice that I'm also saying toFixed.

[00:02:54]
Now, toFixed is a method that is available to all numbers in Java script and essentially formats them as a strength with a certain number of decimal places on it. Kind of like dollars, right? U.S dollars. So if I wanted to take the number 99.99, or the number 199.98, and make it into a string that absolutely had exactly two digits, then I could use the toFixed.

[00:03:20]
Let me illustrate. What if I had the number
>> Kyle Simpson: 3.141519, I can't remember. That's all I remember. 1415926 or something like that, right? So that's the first several digits of pi. You'll notice I didn't win any pi digit memory contest as a kid. Okay, that's the first several digits of pi.

[00:03:46]
But what if I wanted to print out that, let's assign that to some variable. Let's assign it to A. What if I wanted to print out that value, but only to 2 decimal places? Or let's actually say to 3 decimal places.
>> Kyle Simpson: Well, I could say a.toFixed(3), and you'll notice that I'm not gonna get a number, I'm now gonna get a string.

[00:04:14]
The string 3.142.
>> Kyle Simpson: So we rounded that digit. We rounded it by the fourth digit. We rounded that third digit up to 2. So toFixed is another way to get a number to a particular precision, to a particular number of decimal places. It's nice and helpful. I almost always use this when I'm, the only place I hardly ever use it is for printing out dollars and cents.

[00:04:43]
Cuz another observation that we can make is, what if I had the variable A equals 3.5, and I wanted to print that out as dollars. Well, it's missing a zero on the end, right? If I just said console.log[a]. I only get 3.5, which isn't as friendly for US dollars.

[00:05:05]
So if I said console.log(a.toFixed(2)) And I said give me two decimal places. You'll notice I get 3.50. That's how I typically use it. I use it to format US dollars. But that printAmount function is a utility that I can repeat multiple times. And imagine how much more useful it would be if instead of just one statement if I had 3 or 4 or 10 or 20 or 100 statements that were logically connected together.

[00:05:40]
If it took five different things to do to print out my amount I would put all five of those in a function, and then I would only be repeating the function call, rather than repeating all of its contents over and over again. So that's our primary benefit to a function, is being able to take a block of statements and collect it together into a repeatable sort of named label, if you will.

[00:06:07]
So little 60 second homework. Declare yourself a function. Put a couple of statements in it. Whatever statements you want. Like, assign it statements or whatever. And repeat it a couple of times in your console. You might have called your function foo like I'm in the habit of doing.

[00:06:28]
And that might take a is equal to a times two, and a is equal to a plus three. So we're gonna multiply it by two and then add three to it. Those are my two statements. Now if I start off with an a is equal to ten and I call foo once and then I console.log(a).

[00:06:53]
What would I be expecting the output of this to be? Hopefully you're awake enough to do some basic math here. A starts out at as ten. The first time I call foo it's going to say ten times two. So now a is going to be 20 and then we're gonna add 3 to it.

[00:07:11]
So now a is going to be equal to 23. So it expected to print out the value 23. Now if I call foo two more times and then I print out a again, I'll spare you the mental acrobatics. Let's just run it, and let's see what happens. So, we know this one's gonna print out 23.

[00:07:38]
This next one, what's it gonna print out? 101. So it was 23 times 2, which was 46 plus 3, was 49. And then 49 times 2 is 98 plus 3 is 101. Question?
>> Kyle Simpson: The question was about putting our functions before our variables. Like did it matter if I did that or I did that?

[00:08:11]
No difference to JavaScript. It goes back to that topic that we kind of skirted by earlier, the topic of hoisting, topic of lexical scope. [COUGH] Scope enclosures books covers at in-depth, the advanced JavaScript covers it in-depth but for our purposes, you can put declarations in any place in your program.

[00:08:29]
I typically put all of my declarations at the top of my programs. I put all my functions at the top, and then I put all my variables. That's my preferred style. But as long as all your variables are at the top, you won't have any surprises. I mean, as long as all your declarations are at the top, you won't have any surprises.

[00:08:46]

>> Speaker 2: If you consistently do that, it makes it easier to maintain the program later.
>> Kyle Simpson: It's generally a good rule to have a consistent style, whatever it is. If your style is to put your functions at the bottom and your variables at the top, that's fine. But it's a good idea to always be consistent with that and your program.

[00:09:06]

>> Kyle Simpson: Okay, now functions can also receive what are called parameters. So here you notice I didn't receive any parameter, but what if I received a parameter. If I had a parameter called b, that becomes a variable that's accessible to me inside of the function. So I could take this value right here and instead of it being the literal value 3, I could have it be the variable b.

[00:09:34]
So when I run this function now it's behavior is partially dependent on what value I pass in. Does everybody see that? If I pass in a different value of b I get a different result out. Let's try it. If I start out with a = 10 and I say foo(3) and then I say, console.Log(a), what are we expecting?

[00:10:03]

>> Kyle Simpson: Same thing as before, we'd expect 23. Right? A went from 10 to 20 and then we added three to it and it became 23. But what happens if I put in 100 here? Now, we're expecting 120. So everybody see that? So what I pass into my function changes its behavior, because there's a parameter that I'm passing in.

[00:10:27]
By the way, a little nuance. It's not a big deal, but terminology is, I think, if you're learning things, it's important to learn correct terminology. When we call the function here we are passing in what's called an argument.
>> Kyle Simpson: So you can have one or more arguments that you pass into a function.

[00:10:46]
But when we declare the function and we have these names like I can say B and bar and zaz and whatever. These variables here are called parameters. So in other words, there's a match, a one-to-one match between an argument that gets passed in and the parameter in that position.

[00:11:10]
A lot of people use arguments and parameters interchangeably as meaning the same thing because they get assigned to each other. So, it seems like there could be considerably the same thing. To be completely specific on terminology, it's an argument when you pass it in, it's a parameter when you declare it.

[00:11:29]
So this parameter b that we've got, got assigned the argument 100 and then we use that parameter as a variable, and we printed it out. So let's try this again. If I said foo(5), and foo(25), and foo 100. So I called foo 3 different times with 3 different variables all accumulating my results into this a.

[00:11:57]
What's my end result going to be?
>> Kyle Simpson: Oops. My end result,
>> Kyle Simpson: The suspense is killing me. 250.
>> Kyle Simpson: Is there a question?
>> Speaker 3: Asking about passing a function as a parameter of another function?
>> Kyle Simpson: So yes, you can, and then the next question that was asked might be slightly, or the next answer that was given might be slightly misleading, so let me just quickly divert into that.

[00:12:36]
If I called foo, let's say I had two different functions here. And it doesn't matter what's in bar right now. If I said foo, and I gave it the name bar, I passed in bar. What I'm doing is getting the value that is currently in bar. What is the value that's currently in bar?

[00:12:58]

>> Kyle Simpson: It's a function, it's a function value. So I'm passing the function as an argument, and it's getting assigned to the parameter b. So if I said plus b here. What is b? B is a function, that's not what we really want we want the thing to be called.

[00:13:16]
I could call it here and whatever it returned I would get that value. But if you pass a function as a value is just a function. If you call it, then what it returns is what gets past in as the argument, so there is a difference between passing of function and passing the result of a function call.

[00:13:42]

>> Kyle Simpson: So hopefully that clears up the questions that were happening, are being asked in the chat room. Okay, one last detail on this function, let me back up. One last detail on this functions. These functions can return values as well, they can pass in the values, they can return values.

[00:14:05]
So if I said return a / 2.
>> Kyle Simpson: If I say var a =10; [COUGH] and I call foo with (3), we know a is going to become what?
>> Kyle Simpson: It's 23, right? But what if we took that return value and assigned it to another variable. You see, when I invoke foo, it's going to run.

[00:14:38]
But then it's going to return me a different value. In this case, it's gonna computer 23 divided by 2, which is
>> Kyle Simpson: 11.5, [LAUGH] So 11.5 is the thing that's going to come back and get assigned into the variable b. So if I console.log b, I'm expecting 11.5.

[00:15:03]
So if we take that program and put it into our console. We're expecting both 23 and 11.5 to be printed out, and in fact that's what we get.
>> Speaker 2: So in the second example, what does it do with variable a? Is variable a left alone?
>> Kyle Simpson: Here we're not assigning to anything, we're computing something and returning it.

[00:15:33]
Here we are assigning, so we're making changes to a variable.
>> Speaker 2: Yes.
>> Kyle Simpson: We're actually having outside side effects on that variable.

