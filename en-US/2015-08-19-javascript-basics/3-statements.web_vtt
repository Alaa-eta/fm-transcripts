WEBVTT

1
00:00:00.026 --> 00:00:03.793
[MUSIC]

2
00:00:03.793 --> 00:00:05.660
&gt;&gt; Kyle Simpson: A statement,
what does that even mean?

3
00:00:05.660 --> 00:00:10.640
Well, a statement is a coherent set of
those words and symbols that go together

4
00:00:10.640 --> 00:00:15.320
to express a single idea,
a single instruction, if you will.

5
00:00:15.320 --> 00:00:17.390
Although statements can
definitely be compound,

6
00:00:17.390 --> 00:00:20.710
just like most of my
sentences are quite compound.

7
00:00:20.710 --> 00:00:24.570
Statements can be compound and they can
perform more than one task but typically,

8
00:00:24.570 --> 00:00:28.910
there's a roughly one to one
match between a statement and

9
00:00:28.910 --> 00:00:30.750
a concept of what you wanna do.

10
00:00:30.750 --> 00:00:34.870
So if I look at this very first statement
that we see here, the A equals B times 2,

11
00:00:34.870 --> 00:00:40.310
what I'll do is I'll try to take these
things from the book and I'll try to

12
00:00:40.310 --> 00:00:42.990
expound upon them here in my code editor
so it's a little bit easier to read.

13
00:00:42.990 --> 00:00:47.830
So if we have A equals B times two,
this is a single statement.

14
00:00:47.830 --> 00:00:51.820
In JavaScript, we recognize
a single statement, most typically,

15
00:00:51.820 --> 00:00:55.680
by the fact that it ends with
this semicolon character.

16
00:00:55.680 --> 00:00:59.062
Essentially, the semicolon is kind of
like a period at the end of an English

17
00:00:59.062 --> 00:01:00.680
sentence, it's like, I'm done.

18
00:01:00.680 --> 00:01:04.450
I've made that sentence and I'm done,
gonna go on to the next sentence.

19
00:01:04.450 --> 00:01:07.400
Not all statements require a semicolon.

20
00:01:07.400 --> 00:01:11.580
There will be certain forms of statements
that won't have an ending semicolon,

21
00:01:11.580 --> 00:01:12.990
although you can put them there.

22
00:01:12.990 --> 00:01:16.780
There's very few places that you
could not put a semicolon, but

23
00:01:16.780 --> 00:01:18.700
there are places where
they're not required.

24
00:01:18.700 --> 00:01:21.340
In fact, there's an awful lot of places
where they're not technically required,

25
00:01:21.340 --> 00:01:23.970
and some people like to leave out

26
00:01:23.970 --> 00:01:26.460
semicolons in all of these places and
assume.

27
00:01:26.460 --> 00:01:28.470
And you can do the same thing
in the English language.

28
00:01:28.470 --> 00:01:29.590
A lot of people do on Twitter.

29
00:01:29.590 --> 00:01:32.590
They write entire sentences and

30
00:01:32.590 --> 00:01:36.750
paragraphs where the content,
with no punctuation, whatever,

31
00:01:36.750 --> 00:01:40.280
the hashtag sentences that you've seen
where we have no punctuation or spaces.

32
00:01:40.280 --> 00:01:43.950
You can do that and
probably still get the point across, but

33
00:01:43.950 --> 00:01:47.640
I would encourage you with starting
out to be a bit more formal about it.

34
00:01:47.640 --> 00:01:52.810
So put your semicolons in the places where
it makes sense to end that concept or

35
00:01:52.810 --> 00:01:54.040
that task.

36
00:01:54.040 --> 00:01:58.350
Here, what we're doing is saying,
I want to do a mathematical operation.

37
00:01:58.350 --> 00:02:01.950
So there's an assignment,
there's a math statement that's happening.

38
00:02:01.950 --> 00:02:02.770
Let's break that down.

39
00:02:02.770 --> 00:02:03.780
What does that mean?

40
00:02:03.780 --> 00:02:06.600
Well I see the number two,
that's a literal value.

41
00:02:06.600 --> 00:02:09.630
It doesn't need to be interpreted
in any way shape or form.

42
00:02:09.630 --> 00:02:13.760
We just know it to be a value and its
intrinsic value is what we'd make sense.

43
00:02:13.760 --> 00:02:16.600
It is the mathematic number two.

44
00:02:16.600 --> 00:02:20.410
We see that little asterisk symbol to
the left of it, and the asterisk symbol is

45
00:02:20.410 --> 00:02:25.620
the multiplication operator in most
languages including JavaScript.

46
00:02:25.620 --> 00:02:28.420
And then, to the left of that,
we see the b variable.

47
00:02:28.420 --> 00:02:31.140
Now, you noticed I'm going in right to
left fashion and there's a slight reason

48
00:02:31.140 --> 00:02:34.790
why I'm doing that which is nuance, but
we'll come back to that in a moment.

49
00:02:34.790 --> 00:02:39.380
But there's a b operator there,
a b character there and

50
00:02:39.380 --> 00:02:40.370
what does that signify?

51
00:02:40.370 --> 00:02:45.230
Well, if it's not otherwise
a special recognized word,

52
00:02:45.230 --> 00:02:47.710
which we will call those
key words by the way,

53
00:02:47.710 --> 00:02:51.580
key words being the special recognized
things that a language says.

54
00:02:51.580 --> 00:02:54.561
For example, for, F-O-R, or function,

55
00:02:54.561 --> 00:02:58.720
F-U-N-C-T-I-O-N, those
are what we call keywords and

56
00:02:58.720 --> 00:03:03.620
they have their words that have
special meanings to the language.

57
00:03:03.620 --> 00:03:07.230
But the B character has no special
meaning to this JavaScript language.

58
00:03:07.230 --> 00:03:08.940
So if it doesn't have
a special meaning but

59
00:03:08.940 --> 00:03:12.770
it still looks like a word, then it's
a variable, it's called an identifier.

60
00:03:12.770 --> 00:03:16.710
And in this case, when an identifier
is used in that position,

61
00:03:16.710 --> 00:03:19.000
as it is, itâ€™s representing,

62
00:03:19.000 --> 00:03:22.460
itâ€™s a symbolic representation
of something that holds a value.

63
00:03:22.460 --> 00:03:24.870
Now, in our program,
we don't see what value it has.

64
00:03:24.870 --> 00:03:28.280
So this isn't a complete program
because the b variable would've

65
00:03:28.280 --> 00:03:31.110
had to been given some value for
this to make any sense.

66
00:03:31.110 --> 00:03:37.910
Let's pretend for the moment that the b
variable has the value 21 already in it.

67
00:03:37.910 --> 00:03:42.680
So what this statement says is,
go find that b variable and

68
00:03:42.680 --> 00:03:45.291
the rules of how we find that our scope,
and we'll come back to those later,

69
00:03:45.291 --> 00:03:50.780
we'll go find that variable and ask for
what its value is and pull that value out.

70
00:03:50.780 --> 00:03:53.640
So if we get the value 21 out,
multiply that by two.

71
00:03:53.640 --> 00:03:58.330
And we get, of course, the value 42,
that special meaning of life value.

72
00:03:58.330 --> 00:04:00.520
I use that in most of my examples,
just to be silly.

73
00:04:01.850 --> 00:04:04.530
But what we've done is
we've computed something on

74
00:04:04.530 --> 00:04:05.990
what we'd call the right hand side.

75
00:04:08.230 --> 00:04:11.580
Hopefully, I don't have to remind you, if
you're having trouble with left and right,

76
00:04:11.580 --> 00:04:14.880
remember just hold up your left hand and
make an L and that's your left, right?

77
00:04:14.880 --> 00:04:18.100
So left and right, I'm sorry, I'm silly
because I have a four year old son and

78
00:04:18.100 --> 00:04:21.430
a two year old daughter, and we're
teaching them things like left and right.

79
00:04:21.430 --> 00:04:23.770
But on the right hand side,
obviously, there's b times 2.

80
00:04:23.770 --> 00:04:27.670
So that B times 2, that's an expression
we'll come back to in a moment, and

81
00:04:27.670 --> 00:04:31.080
then on the left hand side we
have another variable called a.

82
00:04:31.080 --> 00:04:34.070
And in between the two,
we have an equal statement and

83
00:04:34.070 --> 00:04:39.180
that equal statement is a special kind
of operator that means assignment.

84
00:04:39.180 --> 00:04:42.290
So essentially, what we're doing is we're
taking everything on the right hand side,

85
00:04:42.290 --> 00:04:45.460
computing its final value,
whatever that might be, and

86
00:04:45.460 --> 00:04:49.320
then putting that final value into
the thing on the left hand side.

87
00:04:49.320 --> 00:04:54.230
You can think about this as right
hand side is the source value and

88
00:04:54.230 --> 00:04:58.310
the left hand side is the assignment,
it's the target value.

89
00:04:58.310 --> 00:05:00.380
It's the target location, if you will.

90
00:05:00.380 --> 00:05:03.240
So, what I'm saying is,
compute the value on the right hand side,

91
00:05:03.240 --> 00:05:07.460
which we said would be the value 42,
and assign it into the variable a.

92
00:05:07.460 --> 00:05:10.290
You can see why this, together,
it has several different

93
00:05:10.290 --> 00:05:12.960
little pieces that we had to parse out,
what are these things doing, but

94
00:05:12.960 --> 00:05:18.180
as a coherent grouping of things,
this is called a statement.

95
00:05:18.180 --> 00:05:20.640
And what we've done is compute
the value 42 in assignment.

96
00:05:20.640 --> 00:05:23.430
So, we would actually call
this an assignment statement.

97
00:05:25.090 --> 00:05:27.230
Somebody says in the chat room,
wow, the very beginning.

98
00:05:27.230 --> 00:05:28.400
Yep, told you.

99
00:05:28.400 --> 00:05:29.870
Very beginning, no experience.

100
00:05:29.870 --> 00:05:31.630
If we lose you or if we bore you,

101
00:05:31.630 --> 00:05:34.880
just hang on because I promise
we'll get further into stuff.

102
00:05:34.880 --> 00:05:37.190
So, that's an assignment statement.

