[00:00:00]
>> [MUSIC]

[00:00:04]
>> Kyle Simpson: I have a section in here that mentions code comments. This is one that people actually thank me for putting in cuz a lot of people don't actually do this very often, or they don't have this habit very often. But I think it's a habit that you should get into.

[00:00:17]
If I declare something like var a = 42 in my program, and that's just the number that comes out of nowhere. If I come back later and I'm like where's that number come from, if I don't remember why I assigned it the value 42 then, my program is less understandable.

[00:00:33]
So a way of making a program more understandable is to write better code. But another way of making a program more understandable is to put code comments in. And what code comments are, are things that are ignored by the JavaScript compiler, the JavaScript engine. And they're only there for a developer to read.

[00:00:54]
It's like a cheat sheet if you took it into an algebra test or whatever. It's just there for you. It's not there for the computer. So if I said something like 42 is the meaning of life as a code comment, then later when I come back, then I've explained what the heck I was doing here.

[00:01:15]
Code comments are an incredibly important thing to put into your code. They come in two forms. There's the form here where it's a single line comment. There is another form where I can literally put multiple lines into the same comment. So if I had two different statements like b = 12; and I needed to say something longer about it, I could do a multi-line comment which starts with /* and I have to have another */ to end it, and I could have as many lines here as I want.

[00:01:47]
Line one, line two, line three, and the syntax highlighting in my editor suggests to you where those boundaries between comments are. So the // is always a single line. It takes over everything from then on, so I can either have it on its own line or I can put it on the end of an existing line.

[00:02:11]
A multi-line comment can appear anywhere. So I could literally put a multi-line comment right inside of the middle of another statement if I really wanted to because it can appear anywhere.
>> Kyle Simpson: So you might do it like that. This would be silly, but you could say something like 42 is

[00:02:41]

>> Kyle Simpson: The meaning of life. You can do it multi-line like that, okay? Won't belabor that point anymore, but you want to practice writing code that always has good comments in it, and let me give you a quick little pointer. How do I know what comments should I put into my program?

[00:03:00]
This might be the most important thing to take away from this part of our discussion. Comments should never say what? Almost never should they say what? Your program says what? a = 42; I don't need a comment that says assign 42 to a because the code does that.

[00:03:20]
A comment doesn't say what, a comment says why.
>> Kyle Simpson: Or alternatively, if you've had to write a line of code that could be confusing, you could explain how. So a comment should be the why and/or the how, not the what. And that's what makes for a good program, for good comments.

[00:03:48]

>> Kyle Simpson: [COUGH] So in a program that has 100 lines of code that look like these to do here. If you had 100 lines of comment, like one line of comment for every line of code, you might be doing it overkill, right. Or if you have more comments than code, that's almost certainly overkill for a program.

[00:04:09]
Unless of course you really do have a lot of why and how to explain for a really short program. If you do have that, it's totally fine to have lots and lots of comments you wanna be as verbose as is necessary, no more, no less. That's the good rule of thumb.

[00:04:26]
So focus on answering the questions of why and perhaps how and don't focus on repeating the what. I see a lot of times people write programs and the comments say what over and over and over again and I'm like, I even do that. I have that mistake, I will explain a little bit about the how of a line, or the why of a line and essentially I'm just repeating what the line of code did itself.

[00:04:50]
It's unnecessary.
>> Kyle Simpson: [LAUGH] I'm not gonna go into a debate in the class in the online chat room. It asked if I can explain why Dough Crawford's The Good Parts say multi-lines are bad. I'm not gonna get into a debate on what I do and don't agree with Doug Crawford on here.

[00:05:11]
I've got lots of other places where I would say it. I'll just say flatly multi-line comments are part of the language and I use them. And his reasons for why are his own. He'll write his own books to describe his reasons why he says that.
>> Speaker 2: [LAUGH]
>> Kyle Simpson: I could literally go on for days about debating what he says, but let's keep to the focus of what we wanna talk about here.

