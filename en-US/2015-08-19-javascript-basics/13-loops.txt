[00:00:00]
>> [MUSIC]

[00:00:03]
>> Kyle Simpson: Conditionals are how you make decisions in programs and they're incredibly important. They show up in more places than just the if statement. The if statement is the most common place that you see a conditional. But there's other places that conditionals are used. For example, I mentioned earlier loops like the while loop.

[00:00:22]
The while loop tests this as a conditional, the same way an if statement does. And it tests it every time. It's gonna keep repeating itself until the thing tests false.
>> Kyle Simpson: So this brings us now into a discussion of loops. And here's one of those places where, when I describe to you what a loop does, it may be slightly conceptually different than what you've thought of before.

[00:00:49]
So a lot of people intuit that a loop does something like If I say a while a is greater than 10. A lot of people interpret this as saying that it is, while the thing, let me try to figure out how to say this, when the thing becomes false, stop doing it.

[00:01:17]
Or another way of looking at it is, while the thing is true, keep doing it. And those two conceptual ways, that's two different sides of the same coin. The end result is the same, but the way you think about it can actually be different depending on the different loop forms that you try.

[00:01:35]
So there's a loop form called the for loop, and this is a highly compressed loop and I'm gonna show you the version, it's a highly compressed syntax form. I'm gonna show you the three parts to how the for loop works. But then I'm going to show you conceptually how the for loop works.

[00:01:52]
So this for loop, I can have a thing like a = 5. That first clause, this first expression is what we call the initialization expression. The second clause in a for loop is what we call the conditional expression or the test expression. So a less than 10. Every time I run the loop, I'm gonna do that conditional.

[00:02:25]
And if that conditional is still true, I'm gonna keep going, and if it's no longer true, I'm gonna stop. The third and final clause in a for loop declaration is what we call the update clause. So I can say I can say something like a = a + 1, which is to, say increment it by one each time.

[00:02:50]
A lot of people shorten a = a + 1 to this shorthand operator, the ++ operator. It's gonna accomplish the same goal here. It's gonna update a, or it's gonna increment a by 1 each time. I'll leave it in the more verbose form, just so we don't lose track.

[00:03:09]
So if I make that for loop, let's think about what it's going to do. It's gonna start a at the value 5. And each time the loop finishes, it's gonna update a by 1. And if a is still less than 10, it's gonna do the loop again and again and again.

[00:03:28]
So if the statement inside of here was a console.log statement, try that. Try putting that into your browser, into your console.
>> Kyle Simpson: You'll notice that I printed up the value 5, the value 6, the value 7, the value 8, and the value 9, but I didn't print out the value 10.

[00:03:59]
And the reason I didn't is that when a got to 10, that is, after this loop iteration, I updated the a value by adding 1 to it. And when I did that, a became 10. Is 10 less than 10? Clearly, no. So that's when we stop the loop.

[00:04:22]
Try to let that set in for a moment. Essentially, we were waiting for something to tell us when to stop the loop, and the thing that told us when to stop the loop is when a got too big. Yeah.
>> Speaker 2: You said the a = a + 1 is like the update something.

[00:04:40]

>> Kyle Simpson: It's called the update clause.
>> Speaker 2: Okay, what are the two clauses?
>> Kyle Simpson: The first one is called the initialization clause. The second one is called the test clause of the conditional clause, and the third one is called the [COUGH] update clause. In for loops, all three of these clauses are optional.

[00:05:03]
That is, you can have all three or any combination of two of them, or just one of them, or none of them.
>> Kyle Simpson: In other words, you could write, although it would be silly. You could write for, and then put a block on it and leave those clauses out.

[00:05:24]
You wouldn't do any initialization, you wouldn't do any testing, and you wouldn't do any updating. But it'd still run. In this case, this is a loop that's gonna run forever. Why is it gonnarun forever?
>> Kyle Simpson: This is the major conceptual observation I want to make out of the section.

[00:05:45]
Why would this loop run forever?
>> Speaker 3: The condition will never be met.
>> Kyle Simpson: It's because a conditional would never fail. That's why, okay. So this loop is not running because a conditional always stays true. It's running forever because there's never a conditional that fails.
>> Kyle Simpson: Let me say that again, this loop would run forever but it doesn't run forever because a conditional is always true.

[00:06:12]
Like for example, if my test was the value true. This one's gonna run forever because the condition's always, always, always true, right? This one, there is no condition and it's still gonna run forever. So why does it run forever? Conceptually, the reason it runs forever, is cuz there is no conditional that fails, that tells it to stop running.

[00:06:38]
Okay, this is different than how almost all developers that I come across think about what a loop really means. So, what I wanna illustrate is that this loop compared to this loop, the difference is that we filled in a clause here that can fail. It doesn't have to fail.

[00:06:59]
What would happen if I said a = 6?
>> Kyle Simpson: Would this loop run forever?
>> Speaker 4: Yes.
>> Kyle Simpson: Of course, it would run forever because the first time we would run it, we would set it to 6, and we'd print out 6, and then we'd add 1 to it.

[00:07:19]
And then we'd say, is 7 less than 10? Of course it is, so we'd run the loop again, which sets a back to 6, and we print 6 again, update it to 7. 7's less than 10, and we just keep going forever and ever. So this loop would run forever.

[00:07:36]
Because there's no way for this to ever fail. We're forcibly making it so that thing can't fail. So that loop that I've written there, if we're trying to think about the conceptual of what a loop means, I think it's more appropriate not to say a loop runs while something is true.

[00:07:56]
I think it's more appropriate to say a loop runs until something is false, until something stops it from running. Its natural state is to go forever until something tells it, stop going. Okay, and the way I could write that is with a while loop. A while true loop.

[00:08:15]
Would that loop run forever? Unless something stopped it, that loop would run forever, right? There are ways to stop the loop which we're gonna show here in a moment, but let's conceptually think about how to make this loop that's on top using only a while loop. So we need an up, we need an initialization clause right, so we could do that at the beginning.

[00:08:39]
We could say a = 5. Then we need a test clause to let us know when to stop. So one way of writing that test clause is to invert the a less than 10. I can say if negation of a less than 10, which looks really weird and complicated.

[00:09:06]
So I could say if a greater than 10, actually, the negation is greater than or equal to 10. Does everybody see why that is my condition that would let me know it's time to stop?
>> Kyle Simpson: So how do I stop a loop? The break statement.
>> Kyle Simpson: So I'm gonna test to see whether or not I should stop the loop, and if I do wanna stop the loop, I call break, which stops it immediately.

[00:09:40]
If I don't wanna stop the loop, what do I do next? Let's take out that a = 6 part because we don't think want that there. What do we do next? We console.log.
>> Kyle Simpson: (a), and what's the very last thing we do? a = a + 1. We do the update clause.

[00:10:11]

>> Kyle Simpson: This, conceptually, is how a for loop actually works, and it's really how all loops work. They run until something tells them to stop running. Now I am not endorsing writing your loops like that.
>> [LAUGH]
>> Kyle Simpson: That loop is more complicated to understand if you already understand how loops work.

[00:10:33]
The only thing that I'm doing here is to illustrate to you the concept that a loop runs until something stops it from running. There's lots of ways to make a loop stop running. You can throw an error, you can break, you can call continue to an outside label.

[00:10:49]
There's lots of ways to stop a loop from running, but however you stop a loop from running, that's the same thing as the test failing.
>> Speaker 5: Can a person put a semicolon on the end of the incremental?
>> Kyle Simpson: You're not supposed to.
>> Speaker 5: Okay.
>> Kyle Simpson: It's not allowed.

[00:11:13]
[COUGH] So, once you learn the concept of what it looks like on lines 5 to 12. Now, writing the for loop in a more compact fashion is much more attractive. I think the reason, the thing that I'm trying to get across here is that a lot of people skip to writing these loops with for loop syntax without understanding how it actually works.

[00:11:35]
And then you run into off by one errors and all kinds of other things like that. So, I think it's better to start by thinking about the concepts as expressed here. Because they illustrate what to do with the for loop. What do we do first? We say a = 5.

[00:11:51]
What do we do next? We start running and we're gonna keep going forever, so that's the while true. What do we do next? We check to see if this is false. Which is another way of inverting it. We can say a greater than or equal to 10. If it's false, then we stop, we don't do the loop.

[00:12:09]
If it's true, we keep going, we do the loop body, and finally, after the loop is successfully processed through, then we update.

