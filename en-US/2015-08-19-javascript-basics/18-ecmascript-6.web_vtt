WEBVTT

1
00:00:00.000 --> 00:00:03.783
[MUSIC]

2
00:00:03.783 --> 00:00:06.390
&gt;&gt; Kyle Simpson: When will it
become standard to use const?

3
00:00:07.990 --> 00:00:11.140
It's already a standard in
the sense that ES6 has already been

4
00:00:11.140 --> 00:00:12.850
officially voted upon.

5
00:00:12.850 --> 00:00:17.940
And so const is happening, I mean,
there's one last official vote

6
00:00:17.940 --> 00:00:21.940
that will happen in June of this year
to give it the final stamp of approval,

7
00:00:21.940 --> 00:00:27.230
but it's virtual certainty ES6 will happen
as the standard is already written.

8
00:00:27.230 --> 00:00:31.520
And there are several
browsers that are already, so

9
00:00:31.520 --> 00:00:36.510
the new versions of Chrome,
Firefox, IE, they all support it.

10
00:00:36.510 --> 00:00:40.020
If you're having to run code that's
running in older browsers, or you're

11
00:00:40.020 --> 00:00:44.580
trying to use ES6 features that don't yet
exist even in the newest nightlies of

12
00:00:44.580 --> 00:00:48.510
browsers because there are still some
unimplemented features as of yet.

13
00:00:48.510 --> 00:00:52.299
If you're trying to do that the bridge
is to use what's called a transpiler.

14
00:00:52.299 --> 00:00:56.740
It's a special compiler that takes
your existing JavaScript code,

15
00:00:56.740 --> 00:00:59.720
say you write code that
ES6 features in it.

16
00:00:59.720 --> 00:01:03.440
And it converts that code to something
that will run the same way but

17
00:01:03.440 --> 00:01:05.000
in older browsers.

18
00:01:05.000 --> 00:01:07.680
So it goes through lots of different
tricks to figure that out.

19
00:01:07.680 --> 00:01:12.250
So we won't belabor that point but I'll
just quickly illustrate that if we had.

20
00:01:14.450 --> 00:01:17.410
There's a tool called Bable,

21
00:01:17.410 --> 00:01:20.890
that is probably one of
the more common transpilers.

22
00:01:20.890 --> 00:01:23.650
And if we had some code in Babel,
let me try to zoom in so

23
00:01:23.650 --> 00:01:25.460
it's a little bit more readable.

24
00:01:25.460 --> 00:01:27.990
If we had some code in Babel that we
were trying to play around with and

25
00:01:27.990 --> 00:01:32.640
see what's the equivalent if I wrote it
in ES6 what's the equivalence of it in

26
00:01:32.640 --> 00:01:34.130
something that runs in a browser.

27
00:01:34.130 --> 00:01:38.531
So if I say const x = 10 you'll
notice over here that they're

28
00:01:38.531 --> 00:01:40.790
not actually doing const.

29
00:01:40.790 --> 00:01:45.260
The thing that they're transpiling to is
this other stuff where they're setting up

30
00:01:46.420 --> 00:01:50.410
different checks on its behavior,
so that it's going to behave

31
00:01:50.410 --> 00:01:54.920
almost identically to the way const
will work in a normal ES6 engine.

32
00:01:54.920 --> 00:01:58.600
So this is the code that's
automatically produced by this tool and

33
00:01:58.600 --> 00:02:02.290
that's the code that you would compile and
ship out to the browser.

34
00:02:02.290 --> 00:02:06.090
While you would maintain your source code,
and your repository or

35
00:02:06.090 --> 00:02:08.490
whatever, would use the const.

36
00:02:08.490 --> 00:02:09.800
So you would author an ES6,

37
00:02:09.800 --> 00:02:15.020
and as a build step you would transpile
to something lower and ship that out.

38
00:02:15.020 --> 00:02:18.700
So this is a pretty common practice
among JavaScript developers and

39
00:02:18.700 --> 00:02:22.224
applications, and
it's becoming even more so.

40
00:02:22.224 --> 00:02:25.410
This is the new norm,
is that you're gonna be,

41
00:02:25.410 --> 00:02:30.370
it's gonna be suggested that you do always
write in the newest version of JavaScript.

42
00:02:30.370 --> 00:02:34.370
And if you have to run your code in
older browsers, which is the reality for

43
00:02:34.370 --> 00:02:38.390
most of us, you just simply let a build
step with this tool take care of

44
00:02:38.390 --> 00:02:40.070
the implementation details.

45
00:02:40.070 --> 00:02:44.170
So we won't go into any more details about
how Babel works or what it does, but

46
00:02:44.170 --> 00:02:48.651
it's a very sophisticated program that's
able to figure all that stuff out for us,

47
00:02:48.651 --> 00:02:53.384
let us not have to worry about it.
&gt;&gt; Kyle Simpson: So basically,

48
00:02:53.384 --> 00:02:54.610
[LAUGH] take away here.

49
00:02:55.960 --> 00:02:58.630
You should if you're going to take
seriously writing JavaScript,

50
00:02:58.630 --> 00:03:01.570
if you're going to work in an environment
write it in an application.

51
00:03:01.570 --> 00:03:05.460
If that's your job I'd
recommend switching to ES6 now,

52
00:03:05.460 --> 00:03:08.720
which is going to take learning ES6 so,
there's plenty of work to do there.

53
00:03:08.720 --> 00:03:10.060
But, once you've learned it and

54
00:03:10.060 --> 00:03:13.950
implemented it, you just need to build
step with the transpiler like Babel or

55
00:03:13.950 --> 00:03:17.053
something like that to take
care of the compilation.

56
00:03:17.053 --> 00:03:22.530
Okay, so did I miss any more questions?

57
00:03:22.530 --> 00:03:25.160
Yeah Babble does have
a lot of great examples.

58
00:03:25.160 --> 00:03:26.220
There is more than just Babble.

59
00:03:26.220 --> 00:03:27.460
I'm not meaning to say
that's the only tool.

60
00:03:27.460 --> 00:03:30.920
There's Tracer and a couple of other ones,
but Babble is one of the more popular ones

61
00:03:30.920 --> 00:03:33.310
these days, so
It'd be a good place to start.

62
00:03:35.210 --> 00:03:38.510
Yeah, it is mentioned in the chat,
I just one make sure everybody sees

63
00:03:38.510 --> 00:03:42.710
there are tools, if you're not really
serious about a full build step thing but

64
00:03:42.710 --> 00:03:45.440
you just wanna play around
with how ES6 works.

65
00:03:45.440 --> 00:03:53.830
Thereâ€™s a tool like es6fiddle.net and
what this tool does is it

66
00:03:55.310 --> 00:03:59.410
does the transpiling in
the compiling behind the scenes.

67
00:03:59.410 --> 00:04:05.532
So it'll just run your code so
if I said something like const x = 10 and

68
00:04:05.532 --> 00:04:12.820
then I said, console.log(x), and
then I said x = 20 and console.log(x).

69
00:04:12.820 --> 00:04:15.640
The question is am I going to get 10 and
2 or what's going to happen?

70
00:04:15.640 --> 00:04:20.680
And the way it's going to do is going to
transpile that const so that this state is

71
00:04:20.680 --> 00:04:26.840
not allowed, and you'll notice that we
get an error saying x is read only.

72
00:04:26.840 --> 00:04:31.280
So it's transpiled under the scenes, so
that I wasn't allowed to do line five.

73
00:04:32.470 --> 00:04:35.110
So you can play around with various
different ES6 features here,

74
00:04:35.110 --> 00:04:37.740
and they've got several built in examples.

75
00:04:37.740 --> 00:04:39.610
So if you wanted to learn what,

76
00:04:39.610 --> 00:04:42.010
somebody asked earlier how
do I do default parameters?

77
00:04:42.010 --> 00:04:44.990
Well, here's the syntax for
default parameters as of ES6.

78
00:04:46.150 --> 00:04:49.660
You just put an equal sign in the value
to assign a default parameter.

79
00:04:51.010 --> 00:04:52.400
So you can play around with those,

80
00:04:53.500 --> 00:04:55.080
if you're interested in
learning more about ES6.

81
00:04:55.080 --> 00:04:57.720
And as a reminder there is definitely

82
00:04:57.720 --> 00:05:00.240
an ES6 course available
from Frontend Masters.

