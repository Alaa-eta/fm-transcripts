[00:00:00]
>> Kyle Simpson: Okay, so let's go back to the texts. I know I kinda jumped around a little bit. Let's get ourselves back on track, and make sure we understand. Or that we track back the text. So, we'll come back, in the next topic that's addressed is, we've only talked about, so far, is how to think about what a program is structured in.

[00:00:23]
And maybe start to think in our brains about what we'd do if we wanted to do it. But it turns out that it's much more important for the computer to run our program in the end, than it is for us to run our program. So, it is that duality, as was brought up before, between you needing to be able to look at a program and understand what it should do, and then being able to rely upon the computer to do what it actually must do.

[00:00:46]
And those are two really important halves of the brain, if you will. So executing a program, what does that mean? Well, essentially it means turning the statements that we've written, like a = b x 2, into low level instructions that a computer can do something with. The computer itself would look at a = b x 2, and have no idea what that meant.

[00:01:07]
JavaScript knows what it means. JavaScript needs to translate it into something else, that then can then be translated and translated further and further down the stack until eventually, you get to that series of ones and zeros, and the computer says I know what to do with that. The one means put an electrical charge in, and the zero means turn it off, and I can switch back and forth between ones and zeroes really fast, and run all those things through the circuitry in my computer's CPU, and out pops a number.

[00:01:33]
Right? So, it's this process of getting something from this high level language like JavaScript, this a = b * 2, which isn't exactly like natural language. It's not like I said, it'd be interesting if there was a programming language where I could say, set the variable a to the value two.

[00:01:54]

>> Speaker 2: Cool.
>> Kyle Simpson: Right, there are languages that are even higher level than JavaScript is. And so, understanding that sort of, what we call it in programming, we call it abstraction. At this level, it looks like an English sentence. There would have to be a translation from that into something lower level, cuz the computer would look at that and equally be confused.

[00:02:19]
So a translation level would go from that to maybe something like a = 2. Right?
>> Kyle Simpson: And then something would have to go from a = 2 down into another layer. And we might be getting too far afield, but I just wanna make sure you understand. So, the next layer down might be something that people refer to as assembly language.

[00:02:40]
Which is still a high level language, it's not a one and a zero, but it's lower level. And I don't even remember my assembly language, but it's something like move a comma 2, or something like that, or two comma, I think It's two comma a or something like that.

[00:02:56]
But that lower level thing is like, I have these two registers in memory or whatever, and move one into the other. And then finally, at the lowest level of the stack, it is taking that thing down into a series of one's and zeros. That's really really long. And that one and zero string tells the computer what to do.

[00:03:13]
So what we want is we want to figure out, to execute my program, of course we don't need this top level. But we definitely need this a = 2 level. We need something to convert it from that layer down into the next layer. There will be something else that handles it on and on, however many steps it needs to take, but we need something to do that first step, and that something is the JavaScript engine.

[00:03:36]
The thing that's built into our browser, the thing that you can invoke in the developer console. If you were doing programming on a server, there's an environment where JavaScript can run on a server, and I mean, there's all kinds of different places. JavaScript can run on watches, and inside of lightbulbs, and whatever.

[00:03:52]
But in every place that there is, there's a JavaScript engine that takes something like a=2, and turns it into something that that environment knows what to do with. And that's what we mean by executing a program, is taking that source code that we've written in text form, converting into something that the next layer down knows what to do with.

[00:04:11]
Okay, now, quick little kind of myth busting thing, it is often said of languages like JavaScript that they are scripting languages. Of course, the word script shows up in JavaScript, so it's natural to assume that it's a scripting language. And it's also often said that scripting languages are interpreted.

[00:04:34]
In other words, one statement at a time, it works on that statement and then goes from that statement and the next statement. So when it's working on the statement on line three, it has no idea what to expect of line four, cuz it hasn't gotten there yet. It's like if you're working through a to do list and you're like, I don't even care about item two yet, cuz the top item on my to do list, the only thing I'm thinking about, right?

[00:04:55]
Well, that's what we mean by interpreting, and there are languages that are, in fact, interpretive like that, that are interpreted line by line. An example of that might be something like a command line scripting, like Bash, or whatever. It's not fully interpreted, there's a little bit of nuance there.

[00:05:11]
But it's essentially interpreted line by line. And, it's often times assumed that JavaScript is the same way. It's often times assumed that JavaScript is interpreted with line one, then line two, and line three. That in many books, they have said that. And, it is true that in the very earliest days of JavaScript, it worked a lot more like that.

[00:05:30]
It's definitely true that when Brendan was first inventing it as a prototype, he didn't really have all the time to go through all the sophisticated stuff, so he had to make, just bang something out quickly, and he had to cut a lot of corners. And so, essentially, at the very beginning, it was kinda that way.

[00:05:44]
But very quickly, JavaScript matured. And by very quickly, I mean within those first couple of years. JavaScript matured to the point where interpreting it wasn't really practical anymore. And yet, that myth propagates even today. People say JavaScript's a scripting language, it's interpreted. And the other option, if it's not an interpreted language, the other thing that we talk about is what's called a compiled language.

[00:06:10]
And what a compiled language and an interpreted language, the way that they primarily differ, is not the way you might think that they differ. Most people think about the difference between an interpreted language and a compiled language as, that a compiled language gives you this physical binary file thing, like on Windows it's a .exe file, or on a Mac it's, I don't know what it on the Mac, but there's some like executable file on the Mac that you can run.

[00:06:39]
Or when I compile something in Visual Studio and I put my program on, nobody does this, put on CD or DVD anymore, but that's the way you used to distribute in the old days of programming. You'd put your program on a CD, and sell it to people. So most people think of compilation as, I'm producing some physical series of ones and zeros, and putting those into a file.

[00:07:00]
That I can send that series of ones and zeros to other people, and they don't need to process it, they just need to run it. And they think about interpreted languages as not doing that. That every time you wanna run it, it has to reprocess from the beginning.

[00:07:14]
So that's one way of thinking about the difference between interpreted and compiled. But the more important distinction, the one that matters to JavaScript, is that compilation means that there's more than one pass through your program. What do I mean by a pass? Let me try to illustrate that, cuz I could be getting off field very quickly.

[00:07:35]
So if I have a = 2, and then I have something down here like
>> Kyle Simpson: That. Well, 2() kind of looks like a function call, but it's not valid, because you can't have a number in the place of an identifier. So, as JavaScript language is concerned, line two is an error.

[00:07:55]
It's invalid. It's actually syntactically invalid. It's not a run time problem, it's an actual author time problem. I was an idiot, and I put the number 2 in a position where I meant to put a letter, okay? So in an interpreted language, if I was purely running line by line by line, and I wasn't doing multiple passes, I'd run line one first, and then I would discover that line two had a problem and I'd throw an error.

[00:08:22]
But in a compiled language, the first pass is not concerned with executing the program, it's concerned with understanding the program. It makes a pass through this program, and it figures out if the program is valid. Does it match all of the rules? It would be like scanning through a novel, and looking at all the things to make sure all the sentences had their periods on them, and then going back and reading the book to understand its content.

[00:08:46]
That's the difference here. So a compiled language would say, line two is a problem, and it would flag you with that error before it ever tried to run line one. Does everybody understand the difference there? Make sure that hopefully people aren't missing that distinction. So, JavaScript, in that respect, is more a compiled language than an interpreted language.

[00:09:09]
Because JavaScript definitely does look at line two first, before it's ever tried to run line one. It looked at line one to understand what line one was about. But it didn't run it. It just looked at it to understand it, and then it looked at line two to understand it, and when it saw that line two was invalid it said, I'm not even going to try to run the program because it's not a valid program.

[00:09:32]
So when you put a program like this, if that was in a file and you loaded that up into a browser, line one would never run. You'd immediately get an error saying line two is invalid. Whereas if you put this into a scripting language like a bash or something, line one would run, and then you'd get an error on line two.

[00:09:47]
And that's the major distinction that we want to make between this compilation versus interpreting. The good news is that because JavaScript's compiled, a lot of these mistakes that you can make in your programming are gonna get caught st the very beginning, before you've had a chance to mess something up.

[00:10:03]
You try to run your program, and the first thing that happens is it gets compiled. And if the compilation throws an error, and says hey, you've messed up, that's not good. Then you know what you need to fix. It'll tell you line two is invalid, two is not a function or whatever.

[00:10:20]
Okay, so that's the distinction we'll make, and we'll kind of leave it there, there's definitely more details and I expound upon that a lot more in the Scope and Closures book in this series. But, we'll kind of leave it for there. Think of Java Script more like a compile language than an interpretive language.

[00:10:36]
And that is, it doesn't really matter that JavaScript doesn't get put into binary form and distributed the way exe files are. What matters is that JavaScript gets compiled for error checking.

