WEBVTT

1
00:00:00.000 --> 00:00:03.226
[MUSIC]

2
00:00:03.226 --> 00:00:06.669
&gt;&gt; Speaker 1: We mentioned that there
was a kind of blog called a conditional,

3
00:00:06.669 --> 00:00:08.240
an if statement.

4
00:00:08.240 --> 00:00:11.650
Let's focus more specifically
on a conditional.

5
00:00:11.650 --> 00:00:15.540
If I have the variable a = 10, and

6
00:00:15.540 --> 00:00:22.630
I wanna do something only if (a &gt; 5) then
I put an if statement around the block.

7
00:00:22.630 --> 00:00:26.896
And here, I say, a = a times 2.

8
00:00:26.896 --> 00:00:30.310
So I'm only doubling the a variable.

9
00:00:30.310 --> 00:00:35.110
I'm only doubling its value if it
was already greater than five for

10
00:00:35.110 --> 00:00:35.710
whatever reason.

11
00:00:36.820 --> 00:00:41.619
The if statement says, take this
thing whatever this expression is

12
00:00:42.680 --> 00:00:45.910
and figure out if it's true or false.

13
00:00:48.370 --> 00:00:51.480
But there are statement
expressions that you can put there

14
00:00:51.480 --> 00:00:54.490
which are not already true or false.

15
00:00:54.490 --> 00:00:55.820
This one is.

16
00:00:55.820 --> 00:00:59.940
The greater than operator always
says that's either a true or false.

17
00:00:59.940 --> 00:01:04.590
So that the result of that operator
is always either true or false.

18
00:01:05.760 --> 00:01:10.430
But there are certain expressions that
we could put here that would not result

19
00:01:10.430 --> 00:01:12.800
in true or false by themselves.

20
00:01:12.800 --> 00:01:17.770
For example, that expression,
which is extremely common in JavaScript.

21
00:01:17.770 --> 00:01:21.330
People put an expression like if (a).

22
00:01:21.330 --> 00:01:24.450
The if statement still expects a true or
a false.

23
00:01:26.100 --> 00:01:28.586
And if you don't pass a true or false,

24
00:01:28.586 --> 00:01:33.830
guess what has to happen?
&gt;&gt; Speaker 1: It has to convert.

25
00:01:33.830 --> 00:01:37.160
Remember we talked about
type conversion before, and

26
00:01:37.160 --> 00:01:40.270
I showed you type conversion
with numbers and strings?

27
00:01:40.270 --> 00:01:43.840
Well there's also type
conversion between any value and

28
00:01:43.840 --> 00:01:47.440
what's called a boolean value,
that is the true or the false value.

29
00:01:47.440 --> 00:01:53.230
So, this variable gets converted either
to a true value or a false value.

30
00:01:54.250 --> 00:01:58.940
And the rules for how that conversion
happens are fairly straightforward.

31
00:01:58.940 --> 00:02:04.161
There's a list of values
defined in the JavaScript's

32
00:02:04.161 --> 00:02:07.800
back which are called falsey values.

33
00:02:07.800 --> 00:02:10.100
Falsy, f-a-l-s-y, okay.

34
00:02:10.100 --> 00:02:14.394
So falsy values are defined as these, 0,

35
00:02:14.394 --> 00:02:19.045
-0, NaN, which is the not a number number,

36
00:02:19.045 --> 00:02:24.314
empty string, false itself,
null and undefined.

37
00:02:24.314 --> 00:02:30.785
That list of values is the list
of falsy values in JavaScript and

38
00:02:30.785 --> 00:02:35.912
the easiest thing for
me to say is the way you figure

39
00:02:35.912 --> 00:02:42.505
out of something is truthy that
is that it's gonna become true or

40
00:02:42.505 --> 00:02:47.740
it's falsy, it's gonna become false.

41
00:02:47.740 --> 00:02:52.530
Is to just consult this list, memorize the
list and then just mentally consult it.

42
00:02:52.530 --> 00:02:56.470
It is either a falsy value
because it's on this list or

43
00:02:56.470 --> 00:02:59.800
the only other option is
that it must be truthy.

44
00:02:59.800 --> 00:03:02.620
It must behave as a true
value when coerced.

45
00:03:04.510 --> 00:03:08.370
So, essentially you look at the list and
if it's on the list it's falsy.

46
00:03:08.370 --> 00:03:14.339
If it's not on the list it must be truthy.
&gt;&gt; Speaker 1: So

47
00:03:14.339 --> 00:03:18.960
in our case if that was our list,
let's scroll down now.

48
00:03:18.960 --> 00:03:23.300
If in our case, the question that
we now ask is let me scroll so

49
00:03:23.300 --> 00:03:24.970
I leave the list, visible for you.

50
00:03:24.970 --> 00:03:31.658
In our case is a truthy or falsy?
&gt;&gt; Speaker 2: Truthy,

51
00:03:31.658 --> 00:03:34.640
cuz it exists.
&gt;&gt; Speaker 1: Why is it truthy?

52
00:03:34.640 --> 00:03:36.640
&gt;&gt; Speaker 2: Cuz you assigned it above.

53
00:03:37.870 --> 00:03:39.040
&gt;&gt; Speaker 1: Not because I assigned it

54
00:03:39.040 --> 00:03:42.920
above, but because of what
value it currently has, okay?

55
00:03:42.920 --> 00:03:45.120
The value in a is the value 10.

56
00:03:45.120 --> 00:03:49.130
Is the value ten on the falsy list?
&gt;&gt; Speaker 2: No.

57
00:03:50.200 --> 00:03:51.400
&gt;&gt; Speaker 1: So if it's not on the falsy

58
00:03:51.400 --> 00:03:56.090
list, it has to be conceptually on the
truthy list, and all we need to know for

59
00:03:56.090 --> 00:04:01.630
now is that a falsy value becomes
false when it asks to be a billion,

60
00:04:01.630 --> 00:04:03.770
and a truthy value becomes true.

61
00:04:03.770 --> 00:04:09.470
So if I said, if (a), then a becomes
true and the if statement executes.

62
00:04:09.470 --> 00:04:11.236
Now what if a was 0?

63
00:04:11.236 --> 00:04:14.920
What would happen?
&gt;&gt; [INAUDIBLE]

64
00:04:14.920 --> 00:04:15.860
&gt;&gt; Speaker 1: The zero value is

65
00:04:15.860 --> 00:04:16.510
a falsy value.

66
00:04:17.720 --> 00:04:22.430
So it would result in false, and
the if statement would say, if false,

67
00:04:22.430 --> 00:04:23.500
no, not gonna do it.

68
00:04:24.620 --> 00:04:29.180
So it makes a conditional decision based
upon whether the expression you give it

69
00:04:29.180 --> 00:04:31.490
is true or false.
&gt;&gt; Speaker 2: So could a person say,

70
00:04:31.490 --> 00:04:35.580
if a equal false?
&gt;&gt; Speaker 1: You could compare it

71
00:04:35.580 --> 00:04:41.070
directly to the true or the false value,
like that or like that.

72
00:04:41.070 --> 00:04:44.472
I don't recommend it.
&gt;&gt; Speaker 1: There's lots of

73
00:04:44.472 --> 00:04:48.255
nuanced reasons why I don't recommend
it and we won't go into those reasons.

74
00:04:49.490 --> 00:04:52.330
There's a question in the chat
room about void zero.

75
00:04:52.330 --> 00:05:00.929
So void is an operator.
&gt;&gt; Speaker 1: It's

76
00:05:00.929 --> 00:05:02.601
not very commonly used but

77
00:05:02.601 --> 00:05:08.740
is an operator that everything that you
give it after the void becomes undefined.

78
00:05:08.740 --> 00:05:11.060
So if I said void 42.

79
00:05:11.060 --> 00:05:15.990
If you try that expression in your browser
everybody try it, go to your console

80
00:05:18.290 --> 00:05:20.860
void 42 gives us undefined.

81
00:05:22.230 --> 00:05:26.230
So, no matter what you passed a void you
get undefined back which means void 0 also

82
00:05:26.230 --> 00:05:30.928
gives you undefined back.
&gt;&gt; Speaker 1: It's

83
00:05:30.928 --> 00:05:33.932
an operator just like plus or
minus or whatever,

84
00:05:33.932 --> 00:05:39.010
it's just an operator that voids out the
value and leaves undefined in its place.

