[00:00:00]
>> [MUSIC]

[00:00:04]
>> Kyle Simpson: Okay, we got input and output are the next topics. The most traditional of all outputs in JavaScript is to do an alert statement. And that alert statement, which you can try yourself. And you alert, Hello World, like that. That alert statement pops up a pop up box in a JavaScript, and a JavaScript browser.

[00:00:27]
But it's important to understand that the alert function itself is not actually part of JavaScript, it comes from the browser. So alert itself is not a, it's not defined by the JavaScript language or anything. It's given to you by the browser, and if you tried to run alert inside of say node, it may very well, not have that because there's not such thing as a pop up box inside of node.

[00:00:48]
So, the much more common way of doing output that we can work with as developers, is actually the console.log statement. And console.log, logs a message to your console which happens very conveniently to be the thing we're already working on. So when I say console.log, we’re actually going to print that message right back into the console I'm already working in, which is super convenient for us.

[00:01:12]
From an output perspective, you can be much more sophisticated like, putting stuff on a page, putting in the input box in a page. and assigning a value to it and then its output in terms of visual, but as the developer playing around in the console, console.log is kind of the simplest way to print out some messages.

[00:01:29]
So if I had a var a = 2, and then I wanted to print out the current value of a, I just say console.log and I just give it the variable a. No quotes. And it prints out the value 2.
>> Kyle Simpson: Now a little thing that, is kind of annoying about these consoles, is that you notice a lot of times you end up getting this undefined being printed in weird places.

[00:01:52]
The console environment in your browser is designed to take the very last statement expression in a program. And evaluate it for a value and then show you that value. So for example I'll get to the question in a minute.for example, if I say a=2, remember that was an assignment expression.

[00:02:12]
The result of an assignment expression, is the value that was assigned. So the JavaScript engine just doesn't assign that, but the console does one extra step, which is to say whatever my last statement is give you that value back. So that's why it prints a 2 here, and in statements that have no return value, you get something like undefined like for example, of our statement has no return value, and that's why we get undefined.

[00:02:44]
There is a question?
>> Speaker 2: I’m just wondering, why is undefined return with you?
>> Kyle Simpson: Hopefully I could answer that. [LAUGH] Because there are statement expressions that have no return value. Okay, so that's our output that we'll use, is console.log. Now we're not going to use input a lot, but just as a side note if you did want to receive input, a lot of times, most of the time, you're writing that by, having interactive elements on a form, on a page where people can type in their name or whatever.

[00:03:14]
But again, if you're working purely in a sort of command lineish-like environment like this console, another way of receiving input is the prompt statement. So, we could say something like var age = prompt. Which is a function, and we can give it a message to ask. So I could say, What is your age?

[00:03:36]
That message that I ask, is gonna pop up in a pop up when I hit enter. So we see your, What is your age? And it's given me an input box and asked me to type in something. I just turned 35 a few weeks ago, so I will hit 35, and hit OK.

[00:03:52]
Now that value goes back, and it has been assigned to this variable age. So if I then, say, console.log, age. I'll get 35. So, try that yourself. Try writing a prompt, asking a question giving it a value and then testing the return result was assigned.
>> Speaker 2: So the question is, that value a string or a number or what is it?

[00:04:17]
What if you want it to make it a number? Will I get to that, right?
>> Kyle Simpson: We do get to some value in a little bit. The thing that comes back from prompt, is always a string, but it's easy to make it into something else. Yeah.
>> Speaker 3: Do you not need a semi-colon, after the first statement?

[00:04:33]

>> Kyle Simpson: So that's an example of one where I should have put one for clarity. I was lazy and silly and forgot it. So JavaScript is forgiving in a lot of places, and that's what I meant earlier, when I said that semicolons can be optional in a lot of places.

[00:04:46]
It's forgiving, and it tries to put them in if you've forgotten them. I should, in proper coding, have put a semicolon there.
>> Kyle Simpson: Okay, hopefully, even if this is your first experience with JavaScript, hopefully, you're starting to get a slightly more, sense of what we're gonna do. We're essentially gonna make some variables, that are symbolic containers that we can put values into.

[00:05:14]
And we're just gonna figure out different values, and assign them back and forth, and maybe along the way, we might output some stuff, with a console.log and that essentially is the basics of writing a Javascript program. You can get lots more complex and write JavaScript to manipulate the page, and make network requests, AJAX, and all of that stuff but, none of that is necessary to learn the language JavaScript itself, what's necessary here.

[00:05:39]
Is to understand basic things like, how to make a variable, how to put a value into it and so forth. So, hopefully in put and output, will be ways to explain some of my stuff.

