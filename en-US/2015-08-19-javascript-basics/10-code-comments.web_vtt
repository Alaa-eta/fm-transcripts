WEBVTT

1
00:00:00.000 --> 00:00:04.028
[MUSIC]

2
00:00:04.028 --> 00:00:06.630
&gt;&gt; Kyle Simpson: I have a section in
here that mentions code comments.

3
00:00:06.630 --> 00:00:10.460
This is one that people actually thank me
for putting in cuz a lot of people don't

4
00:00:10.460 --> 00:00:15.750
actually do this very often, or
they don't have this habit very often.

5
00:00:15.750 --> 00:00:17.760
But I think it's a habit
that you should get into.

6
00:00:17.760 --> 00:00:20.858
If I declare something like
var a = 42 in my program, and

7
00:00:20.858 --> 00:00:24.210
that's just the number
that comes out of nowhere.

8
00:00:24.210 --> 00:00:28.290
If I come back later and I'm like where's
that number come from, if I don't remember

9
00:00:28.290 --> 00:00:33.110
why I assigned it the value 42 then,
my program is less understandable.

10
00:00:33.110 --> 00:00:38.700
So a way of making a program more
understandable is to write better code.

11
00:00:38.700 --> 00:00:43.870
But another way of making a program more
understandable is to put code comments in.

12
00:00:43.870 --> 00:00:47.265
And what code comments are,
are things that are ignored by

13
00:00:47.265 --> 00:00:52.380
the JavaScript compiler,
the JavaScript engine.

14
00:00:52.380 --> 00:00:54.940
And they're only there for
a developer to read.

15
00:00:54.940 --> 00:00:57.790
It's like a cheat sheet if you took
it into an algebra test or whatever.

16
00:00:57.790 --> 00:00:59.080
It's just there for you.

17
00:00:59.080 --> 00:01:00.430
It's not there for the computer.

18
00:01:00.430 --> 00:01:08.980
So if I said something like 42 is
the meaning of life as a code comment,

19
00:01:08.980 --> 00:01:12.290
then later when I come back, then I've
explained what the heck I was doing here.

20
00:01:15.000 --> 00:01:18.796
Code comments are an incredibly
important thing to put into your code.

21
00:01:18.796 --> 00:01:21.115
They come in two forms.

22
00:01:21.115 --> 00:01:24.200
There's the form here where
it's a single line comment.

23
00:01:24.200 --> 00:01:27.560
There is another form
where I can literally put

24
00:01:27.560 --> 00:01:29.720
multiple lines into the same comment.

25
00:01:29.720 --> 00:01:36.660
So if I had two different statements like
b = 12; and I needed to say something

26
00:01:36.660 --> 00:01:41.890
longer about it, I could do a multi-line
comment which starts with /* and

27
00:01:41.890 --> 00:01:47.300
I have to have another */ to end it, and
I could have as many lines here as I want.

28
00:01:47.300 --> 00:01:52.420
Line one, line two, line three,
and the syntax highlighting in my

29
00:01:52.420 --> 00:01:56.920
editor suggests to you where those
boundaries between comments are.

30
00:01:56.920 --> 00:02:00.510
So the // is always a single line.

31
00:02:00.510 --> 00:02:03.230
It takes over everything from then on, so

32
00:02:03.230 --> 00:02:08.320
I can either have it on its own line or I
can put it on the end of an existing line.

33
00:02:11.510 --> 00:02:14.770
A multi-line comment can appear anywhere.

34
00:02:14.770 --> 00:02:19.325
So I could literally put a multi-line
comment right inside of the middle of

35
00:02:19.325 --> 00:02:23.751
another statement if I really wanted
to because it can appear anywhere.

36
00:02:29.713 --> 00:02:31.320
&gt;&gt; Kyle Simpson: So
you might do it like that.

37
00:02:31.320 --> 00:02:35.797
This would be silly, but
you could say something like 42 is

38
00:02:41.447 --> 00:02:47.110
&gt;&gt; Kyle Simpson: The meaning of life.

39
00:02:47.110 --> 00:02:50.630
You can do it multi-line like that, okay?

40
00:02:50.630 --> 00:02:54.570
Won't belabor that point anymore, but you
want to practice writing code that always

41
00:02:54.570 --> 00:02:57.760
has good comments in it, and
let me give you a quick little pointer.

42
00:02:57.760 --> 00:03:00.880
How do I know what comments
should I put into my program?

43
00:03:00.880 --> 00:03:03.360
This might be the most
important thing to take away

44
00:03:03.360 --> 00:03:05.580
from this part of our discussion.

45
00:03:05.580 --> 00:03:08.270
Comments should never say what?

46
00:03:09.770 --> 00:03:11.560
Almost never should they say what?

47
00:03:11.560 --> 00:03:13.397
Your program says what?

48
00:03:13.397 --> 00:03:20.490
a = 42; I don't need a comment that says
assign 42 to a because the code does that.

49
00:03:20.490 --> 00:03:23.317
A comment doesn't say what,
a comment says why.

50
00:03:25.001 --> 00:03:26.225
&gt;&gt; Kyle Simpson: Or alternatively,

51
00:03:26.225 --> 00:03:31.410
if you've had to write a line of code that
could be confusing, you could explain how.

52
00:03:33.560 --> 00:03:38.550
So a comment should be the why
and/or the how, not the what.

53
00:03:40.870 --> 00:03:43.576
And that's what makes for
a good program, for good comments.

54
00:03:48.051 --> 00:03:48.692
&gt;&gt; Kyle Simpson: [COUGH] So

55
00:03:48.692 --> 00:03:54.280
in a program that has 100 lines of
code that look like these to do here.

56
00:03:55.480 --> 00:03:59.900
If you had 100 lines of comment,
like one line of comment for

57
00:03:59.900 --> 00:04:03.990
every line of code,
you might be doing it overkill, right.

58
00:04:03.990 --> 00:04:05.430
Or if you have more comments than code,

59
00:04:05.430 --> 00:04:09.510
that's almost certainly overkill for
a program.

60
00:04:09.510 --> 00:04:13.130
Unless of course you really
do have a lot of why and

61
00:04:13.130 --> 00:04:16.210
how to explain for a really short program.

62
00:04:16.210 --> 00:04:18.850
If you do have that,
it's totally fine to have lots and

63
00:04:18.850 --> 00:04:24.550
lots of comments you wanna be as verbose
as is necessary, no more, no less.

64
00:04:24.550 --> 00:04:26.130
That's the good rule of thumb.

65
00:04:26.130 --> 00:04:29.990
So focus on answering
the questions of why and

66
00:04:29.990 --> 00:04:33.730
perhaps how and
don't focus on repeating the what.

67
00:04:33.730 --> 00:04:37.720
I see a lot of times people write programs
and the comments say what over and

68
00:04:37.720 --> 00:04:41.110
over and over again and
I'm like, I even do that.

69
00:04:41.110 --> 00:04:45.960
I have that mistake, I will explain
a little bit about the how of a line, or

70
00:04:45.960 --> 00:04:47.540
the why of a line and

71
00:04:47.540 --> 00:04:50.670
essentially I'm just repeating
what the line of code did itself.

72
00:04:50.670 --> 00:04:51.216
It's unnecessary.

73
00:04:54.040 --> 00:04:58.167
&gt;&gt; Kyle Simpson: [LAUGH] I'm
not gonna go into a debate

74
00:04:58.167 --> 00:05:02.440
in the class in the online chat room.

75
00:05:02.440 --> 00:05:05.408
It asked if I can explain why
Dough Crawford's The Good Parts say

76
00:05:05.408 --> 00:05:06.770
multi-lines are bad.

77
00:05:06.770 --> 00:05:09.420
I'm not gonna get into
a debate on what I do and

78
00:05:09.420 --> 00:05:11.890
don't agree with Doug Crawford on here.

79
00:05:11.890 --> 00:05:13.820
I've got lots of other
places where I would say it.

80
00:05:13.820 --> 00:05:19.054
I'll just say flatly multi-line comments
are part of the language and I use them.

81
00:05:19.054 --> 00:05:23.100
And his reasons for why are his own.

82
00:05:23.100 --> 00:05:28.415
He'll write his own books to describe
his reasons why he says that.

83
00:05:28.415 --> 00:05:29.480
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Kyle Simpson: I could literally go on

84
00:05:29.480 --> 00:05:32.050
for days about debating what he says, but

85
00:05:32.050 --> 00:05:35.150
let's keep to the focus of
what we wanna talk about here.

