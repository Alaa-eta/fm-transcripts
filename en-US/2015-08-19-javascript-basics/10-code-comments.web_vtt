WEBVTT

1
00:00:00.540 --> 00:00:02.990
&gt;&gt; Kyle Simpson: I have a section in
here that mentions code comments.

2
00:00:02.990 --> 00:00:05.000
This is one that people
actually thank me for

3
00:00:05.000 --> 00:00:10.560
putting in cuz a lot of people don't
actually do this very often, or they don't

4
00:00:10.560 --> 00:00:14.120
have this habit very often, but I think
it's a habit that you should get into.

5
00:00:14.120 --> 00:00:17.305
If I declare something like
var a = 42 in my program, and

6
00:00:17.305 --> 00:00:20.610
that's just a number that
comes out of nowhere.

7
00:00:20.610 --> 00:00:22.960
If I come back later, and I'm like,
where does that number come from?

8
00:00:22.960 --> 00:00:26.700
If I don't remember why I
assigned it the value 42,

9
00:00:26.700 --> 00:00:29.510
then my program is less understandable.

10
00:00:29.510 --> 00:00:35.110
So a way of making a program more
understandable is to write better code,

11
00:00:35.110 --> 00:00:39.104
but another way of making a program more
understandable is to put code comments in.

12
00:00:40.270 --> 00:00:47.480
And what code comments are are things that
are ignored by the JavaScript compiler,

13
00:00:47.480 --> 00:00:51.340
the JavaScript engine, and they're
only there for a developer to read.

14
00:00:51.340 --> 00:00:54.133
It's like a cheat sheet if you took
it into an algebra test or whatever,

15
00:00:54.133 --> 00:00:56.830
it's just there for you,
it's not there for the computer.

16
00:00:56.830 --> 00:01:01.640
So if I said something like,
42 is the meaning of

17
00:01:01.640 --> 00:01:06.470
life, as a code comment,
then later when I come back,

18
00:01:06.470 --> 00:01:10.180
then I've explained what the heck
I was doing here, all right?

19
00:01:11.400 --> 00:01:16.280
Code comments are an incredibly
important thing to put into your code.

20
00:01:16.280 --> 00:01:17.540
They come in two forms.

21
00:01:17.540 --> 00:01:20.610
There's the form here,
where it's a single-line comment.

22
00:01:20.610 --> 00:01:26.110
There's another form where I can literally
put multiple lines into the same comment.

23
00:01:26.110 --> 00:01:30.930
So if I had two different statements,
like b = 12,

24
00:01:30.930 --> 00:01:35.980
and I needed to say something longer
about it, I could do a multiline comment,

25
00:01:35.980 --> 00:01:38.150
which starts with /*.

26
00:01:38.150 --> 00:01:41.180
And I have to have another */ to end it,
and

27
00:01:41.180 --> 00:01:43.690
I can have as many lines here as I want.

28
00:01:43.690 --> 00:01:48.530
Line 1, line 2, line 3, and
the syntax highlighting in

29
00:01:48.530 --> 00:01:53.310
my editor suggests to you where those
boundaries between comments are.

30
00:01:53.310 --> 00:01:56.910
So the // is always a single line.

31
00:01:56.910 --> 00:02:02.179
It takes over everything from then on, so
I can either have it on its own line, or I

32
00:02:02.179 --> 00:02:08.512
can put it on the end of an existing line.
&gt;&gt; Kyle Simpson: A multiline

33
00:02:08.512 --> 00:02:13.292
comment can appear anywhere, so I can
literally put a multiline comment right

34
00:02:13.292 --> 00:02:17.360
inside of the middle of another statement,
if I really wanted to.

35
00:02:19.250 --> 00:02:26.228
Cuz it can appear anywhere.
&gt;&gt; Kyle Simpson: So

36
00:02:26.228 --> 00:02:27.710
you might do it like that.

37
00:02:27.710 --> 00:02:32.435
This would be silly, but
you could say something like 42 is,

38
00:02:37.880 --> 00:02:39.494
&gt;&gt; Kyle Simpson: The meaning

39
00:02:42.419 --> 00:02:43.510
&gt;&gt; Kyle Simpson: Of life.

40
00:02:43.510 --> 00:02:46.930
You can do it multiline like that, okay?

41
00:02:46.930 --> 00:02:48.670
Won't belabor that point any more, but

42
00:02:48.670 --> 00:02:52.030
you wanna practice writing code that
always has good comments in it.

43
00:02:52.030 --> 00:02:54.170
And let me give you
a quick little pointer.

44
00:02:54.170 --> 00:02:57.280
How do I know what comments
should I put into my program?

45
00:02:57.280 --> 00:02:59.760
This might be the most
important thing to take away

46
00:02:59.760 --> 00:03:01.980
from this part of our discussion.

47
00:03:01.980 --> 00:03:04.680
Comments should never say what?

48
00:03:06.160 --> 00:03:07.960
Almost never should they say what?

49
00:03:07.960 --> 00:03:11.287
Your program says what, a = 42.

50
00:03:11.287 --> 00:03:15.880
I don't need a comment that says,
assign 42 to a, cuz the code does that.

51
00:03:16.890 --> 00:03:19.780
A comment doesn't say what,
a comment says why.

52
00:03:21.670 --> 00:03:26.740
Or alternatively, if you've had to write
a line of code that could be confusing,

53
00:03:26.740 --> 00:03:30.089
you could explain how.
&gt;&gt; Kyle Simpson: So

54
00:03:30.089 --> 00:03:33.999
a comment should be the why,
and/or the how,

55
00:03:33.999 --> 00:03:38.517
not the what.
&gt;&gt; Kyle Simpson: And that's what makes for

56
00:03:38.517 --> 00:03:45.292
a good program, for a good comment.
&gt;&gt; Kyle Simpson: [COUGH] So,

57
00:03:45.292 --> 00:03:50.950
in a program that has 100 lines of
code that look like these two do here,

58
00:03:50.950 --> 00:03:55.514
if you had 100 lines of comments,
one line of comment for

59
00:03:55.514 --> 00:04:00.195
every line of code,
you might be doing it overkill, right?

60
00:04:00.195 --> 00:04:04.753
Or if you have more comments than code,
that's almost certainly overkill for

61
00:04:04.753 --> 00:04:05.790
a program.

62
00:04:05.790 --> 00:04:09.390
Unless of course,
you really do have a lot of why and

63
00:04:09.390 --> 00:04:12.610
how to explain for a really short program.

64
00:04:12.610 --> 00:04:15.984
If you do have that, it's totally fine
to have lots and lots of comments.

65
00:04:15.984 --> 00:04:20.960
You wanna be as verbose as is necessary,
no more, no less.

66
00:04:20.960 --> 00:04:22.540
That's the good rule of thumb.

67
00:04:22.540 --> 00:04:26.400
So focus on answering
the questions of why and

68
00:04:26.400 --> 00:04:30.130
perhaps how, and
don't focus on repeating the what.

69
00:04:30.130 --> 00:04:32.670
I see a lot of times
people write programs, and

70
00:04:32.670 --> 00:04:36.660
the comments say what over and
over and over again, and I'm like.

71
00:04:36.660 --> 00:04:38.790
I even do that, I have that mistake.

72
00:04:38.790 --> 00:04:42.916
I will explain a little bit about the how
of a line, or the why of a line, and

73
00:04:42.916 --> 00:04:46.645
essentially I'm just repeating
what the line of code did itself,

74
00:04:46.645 --> 00:04:52.960
that's unnecessary.
&gt;&gt; Kyle Simpson: [LAUGH]

75
00:04:52.960 --> 00:04:57.595
I'm not gonna go into
a debate in the class.

76
00:04:57.595 --> 00:05:00.385
In the online chatroom it
asks if I can explain why

77
00:05:00.385 --> 00:05:03.125
Doug Crockford's The Good Parts
say multilines are bad.

78
00:05:03.125 --> 00:05:05.785
I'm not gonna get into
a debate on what I do and

79
00:05:05.785 --> 00:05:08.285
don't agree with Doug Crockford on here.

80
00:05:08.285 --> 00:05:10.225
I've got lots of other
places where I would say it.

81
00:05:10.225 --> 00:05:14.560
I'll just say flatly, multiline comments
are part of the language, and I use them.

82
00:05:15.580 --> 00:05:20.579
And his reasons for why are his own,
he'll write his own books to describe

83
00:05:20.579 --> 00:05:24.398
his reasons [LAUGH] why he says that.
&gt;&gt; Speaker 2: [LAUGH]

84
00:05:24.398 --> 00:05:25.448
&gt;&gt; Kyle Simpson: I could literally

85
00:05:25.448 --> 00:05:28.178
go on for
days about debating what he says, but

86
00:05:28.178 --> 00:05:31.540
let's keep to the focus of
what we wanna talk about here.

