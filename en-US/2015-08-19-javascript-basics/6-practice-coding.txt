[00:00:00]
>> [MUSIC]

[00:00:04]
>> Kyle Simpson: The next observation that we wanna make which follows along with this understanding of execution and the fact that a program needs to get run, is that there is no substitution for running these programs yourself. So while you will see me for the visual purposes, I'll do a lot of code writing in my code editor.

[00:00:21]
And in a code editor it's not actually running anything for me. An IDE might but there's no running environment here. So, it isn't checking my program. You're going to want to run these sorts of programs in an actual JavaScript environment. And it turns out that one of the easiest, lowest hanging fruit ways of doing that is if you're in a browser you can open up the console.

[00:00:43]
So I'm using the Chrome browser. There's a question. The question in the chat room is JavaScript provides you an error on runtime, right. JavaScript has bpth. It has both what we call static errors, that is, something where the compiler said, hey that's invalid syntax. You did something wrong.

[00:01:02]
And it also has runtime errors where the syntax was correct but then you tried to do something invalid with that, like you tried to assign to something that was read only or you tried to run something as a function and it wasn't a function. Those are runtime errors.

[00:01:17]
So JavaScript has both. What's an interpreted language in a nutshell? Yeah essentially it's going to take it line by line. When it's on line three it doesn't know what to expect of line four. A compiled language looks at and understands all four lines first before trying to run the first line.

[00:01:36]
So it implies that there's multiple passes happening. Okay so if I'm in the Chrome browser as you see here. Most people know about keyboard shortcuts if you get into development. So Cmd+Option+I in a Mac in Chrome will pop up your developer tools, and I have mine set that it defaults to popping up the console.

[00:01:57]
If you're looking for a way to do it manually, you can come over here and in your Chrome Developer tools, there's a More tools. And then, you can go directly to the JavaScript console, and it's gonna do the same thing. Yours might pop up on the right-hand side, it might pop up in a separate window.

[00:02:12]
I like to keep mine anchored to the bottom of my browser window. But it doesn't really matter how it shows up to you. Open up your JavaScript console and you'll notice that it's kind of like we can just type some code in, it's kind of inviting to us, type some code.

[00:02:27]
So we could literally just type some code, I could say something like a = 2. And if I hit Enter it's actually gonna run that statement as if that statement was a program. Okay, I'm gonna refresh my environment and I'm gonna go back to this program here. The a = 2 and then the 2().

[00:02:48]
And I'm gonna run this and what you're gonna see when I try to run that program is that I get an error. This error says 2 is not a function. In other words it checked the program first. There is no a that has been run, it was invalid to try to run 2 as a function.

[00:03:10]
There's lots of other syntax errors that we could come up with, okay. So, for example if I had 2 = 3, right. The value 2 on the left hand side is not something that can get assigned, it's not a variable. So, I can't get assigned something. So, that is yet again an example of something that can be caught kind of at the compiler phase.

[00:03:33]
You've written something totally invalid. But here's something that can't be caught at the compiler phase. It has to be run time. If I say something like a(), open close parentheses, what it cannot know is if at that exact moment of my program is a a function or not?

[00:03:49]
It doesn't know that yet. So it has to try and run the program and if it fails, in this case, it's failing cuz there isn't an a, that's a mistake. So let's make there be an a and then let's try that a(), and you'll notice that it fails as a type error because a doesn't have a function value in it.

[00:04:09]
If a had a function value in it then the function call would have worked. So that's what we meant but between the distinction between compiling something knowing ahead of time that it's broken versus needing to try to run the program to find out if it works or not.

[00:04:29]

>> Kyle Simpson: Hopefully the most recent question in the chat room has been answered. JavaScript catches invalid syntax by compiling your program first and then executing the compiled code. As opposed to a scripting language which can't catch the syntax errors until it gets to them. Okay. So it's important to try from here on out to run programs in an environment and the easiest way for you to try that is something like your developer console.

[00:04:56]
There are other ways to do this, there are sites like JS Bin and JSFiddle and a dozen other ones out there, that you can go to the site and type in some code and run a program, those ones are fine too. For our purposes I think the most basic is the best, just try it in your console.

[00:05:12]
So essentially what I'm asserting here in the book is I'm saying donâ€™t just take these things for granted that if I say a = 2 it works. Try them yourself. Kind of a tip here is you'll notice that I can do a = 2. If I hit Enter all by itself, it will run the program but if I hit Shift+Enter it gives me a second line.

[00:05:37]
So, I can keep going. I can enter in a multi line program by hitting Shift+Enter. And most of the developer consoles are kind of like that. You can do multi lining but in my case, I'm going to prefer to write my code in an editor and copy and paste it in.

[00:05:51]
Just so, I don't have to keep getting hit Shift+Enter over and over. So, you can go either way. But knowing about the Shift+Enter technique is good.
>> Kyle Simpson: Okay so in that case, the question in the chat room is if I try,
>> Kyle Simpson: var a| a(). The reason you're getting that it's a number is because your environment still has a assigned a value 2 you from when you typed it in earlier.

[00:06:24]
So noticing that I've been refreshing and I do that with my keyboard shortcut I do Cmd+R in the browser and Chrome. To refresh an environment to start it over. So you can do that, or you can hit the Refresh button, or whatever, but making sure that you start with a fresh environment is a good way to avoid accidentally having it as value 2.

[00:06:46]

>> Speaker 2: Question about running JavaScript from the command line.
>> Kyle Simpson: Yeah, there was a question about, can JavaScript be run from a command line. There are command line execution environments, the most notable of which is Node. Node is typically sited as kind of a server side JavaScript environment but Node can also run command line programs.

[00:07:05]
So if you had Node installed you could write run Node minus e and give it a JavaScript program and run it from the command line. Or Node and give it a filename kind of like you're talking about with Java. There are other JavaScript environments outside of browsers. So Rhino is one of them, there's probably maybe three or four others that I'm forgetting off the top of my head, there are some JavaScript command line environments.

[00:07:31]
The most common is definitely Node, if you wanna run JavaScript on the command line.
>> Kyle Simpson: Yeah, node, io.js. They are forked versions of the same project, looks like they're probably gonna come back together in a few weeks or months, so I'm using Node to refer to that whole family of server-side JavaScript.

[00:07:51]
And yes, Node does have a REPL which looks a little bit like our thing here. It's an actual environment. I can illustrate that real quick cuz I have Node installed on my computer. So I can say Node and now I'm in a command line environment where I can do var = 2 and try to run the program and I'm gonna get my errors.

[00:08:11]
So Node does have a ripple like that. But also, it's,
>> Kyle Simpson: If I had a file with that code in it, a =.
>> Kyle Simpson: I can't even. Type in very many more. Okay. So if I had a file called test.js and I said node test.js. It's very similar to Java's command line environment.

[00:08:41]
So you can do those things or you can do node. I think it's -e and then, give it a string of code like a = 2. All right. I think that works. Yeah so -e will evaluate it from the command line so there are command line environments. I would suggest it's probably better to stick with your developer console while you're learning JavaScript.

[00:09:02]
But there are command line environments if you want to play with them.

