[00:00:00]
>> [MUSIC]

[00:00:03]
>> Kyle Simpson: The next topic is operators and we have dealt with operators already in several places. We've had the plus and the multiply. We've had the equals. We've already seen several operators. Turns out there's probably about 30ish something like that different operators defined in JavaScript and I've got a listing here in the book.

[00:00:22]
I'm not going to bore you by giving you every single one of them. But there's a whole bunch of different operators that all do different things and if you want to read up on it you can read this, these are kind of like the most important ones and then there's even more listed here on this MDN link.

[00:00:36]
So being aware of what operators are available to JavaScript is of course really important because you're going to want to do stuff and the stuff you're going to want to do is going to need tasks. There's going to be places where there's multiple ways to do the same thing.

[00:00:53]
So for example, this statement right here. I'll copy that and put it in my code editor, so it's easier to read. This statement right here, a = a + 2. We can already kind of intuit that what it's going to do first is get the value out of a, whatever it is, add two to it and then assign it back to the variable a.

[00:01:14]
Okay? So in other words we're just adding two into the current value. So that's one way of doing it and that's a pretty clear way of doing it. But there are short cut operators which some people like and some people feel are more complicated. But in this case there's a short cut operator if you want to take a variable and add something to whatever is in the current variable.

[00:01:35]
Then a short cut operator is putting the plus and the equals together. And then just whatever you want to add on. And these will have the exact same end result. They'll take whatever is in a currently, add two to it, and put it back into a. So, it turns out there's several different ways to come out any given problem.

[00:01:54]
Knowing the different tools that you have, you can choose. Now again, I kind of referred to, some people prefer line one and some people prefer line three. They both do the same thing. The question you should ask is which one semantically means more what it's doing. And I would tend to say that even though line one is more explicit it actually might take a little bit more brainpower to understand line one than line three.

[00:02:25]
If you learned the line three operator you know that it just adds something to my existing variable. And I don't have to think about the step of pulling out the value now, it's current and adding it. I just say put another two into the bucket. I got a bucket of eggs, put two more in, right.

[00:02:43]
So line three to me is slightly more conceptually simple once you learn that that's a shortcut operator. And looking at it in code if my only goal was to add two to whatever it is, I might prefer this line 3 over line 1. That of course might be quite controversial cuz there might be people that vehemently believe that line 1 is way, way better and more sensible.

[00:03:05]
So, the point I'm illustrating is that readability or understandability is inherently and completely subjective. That statement of make a readable program or make my code more readable. Those sorts of things are thrown around an awful lot. Most of the time people don't have a precise meaning for what they mean for them.

[00:03:32]
There is no precise definition of what readable means. It's subjective. It's subjective to you, and it's also subjective to the other people that you expect or intend to read your program. Is there a question here?
>> Speaker 2: They're just asking if -=
>> Kyle Simpson: It's subtracting, yep. -= does the same thing, but for subtraction.

[00:03:51]
So, -= would take a and subtract it out, just like a = a- 2 there. So, there are lots of operators to learn in JavaScript. The major ones that we care about are the equals operator cuz we're gonna do a lot of assignments. And maybe the math operators because that's just a simple way of illustrating concepts.

[00:04:10]
The plus and the minus, the asterisk for multiplication, the slash for division, those ones are pretty important. And then all these other ones, another one that you'll probably want to learn, is the double equals and the triple equals. For our purposes, at the immediate moment, they do the same thing, which is to check if something's equal.

[00:04:32]
They are not the same but for our purposes they compare, they check equality. So over the break there was some discussion, some good discussion, questions in the chat room. And I will just say we're going to deal with the differences between using var to declare a variable and not using it.

[00:04:50]
We're going to cover those differences in a little bit. That comes a little bit later in the chapter. So, we'll come back to it. But for now the only difference that we saw was just the difference we could observe that var a = 3 results in undefined even though a has 3 in it the var part is undefined or the var part returns undefined.

[00:05:11]
But later if we say a = 4 or even just a = 3. But a = 4 we're taking a value and making an assignment statement out of it and that statement does have a return value which the console finds and helpfully prints out for us as the value 4.

[00:05:28]
So that's just an observational difference about the behavior of the console. It doesn't mean anything at all about the appropriateness of using one or the other in your program, we'll come back to that later.

