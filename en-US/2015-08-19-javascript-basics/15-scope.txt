[00:00:00]
>> [MUSIC]

[00:00:04]
>> Kyle Simpson: Can I give a default value to the parameter? In JavaScript ES6, that's the coming version of JavaScript, we do have a syntax for default parameter values. That doesn't exist in your current JavaScript but the next version has it.
>> Speaker 2: And we have another course on that.
>> Kyle Simpson: There is a course on ES6.

[00:00:24]
So-
>> Speaker 2: You're asking about a function call back but-
>> Kyle Simpson: That's more than we'll get into right now. We'll probably come back to that after lunch but that's more than we'll get into now. What I want to do in our last couple minutes is [COUGH] talk about the difference between this variable a which exists outside of the function and this variable b which exists only inside of the function.

[00:00:48]
You'll notice I have another variable called b here, these bs are entirely different. Does everybody see that? There's a variable b, it's almost like there was a var in here, there isn't. But it's almost like there was a var in here that declared a b that exists only inside of that function.

[00:01:03]
So if I took this part out and I just tried to access b.
>> Kyle Simpson: What we expect to have happen is an error because there is no b available to line 9. The b exists only inside of the function, not outside of it. Identically to if I said var c equals 42.

[00:01:29]
If I put a variable inside of my function, it's not available outside and if I said var c, if I take that program and I run it,
>> Kyle Simpson: We're gonna expect to get a reference error because c doesn't exist.
>> Kyle Simpson: And in fact we get ReferenceError c is not defined, okay?

[00:01:56]

>> Kyle Simpson: Putting a variable outside versus inside a function changes where it is scoped. Scope is this technical term fo,r you can think of it as sort of like there's a bubble around the internal contents of foo. And then there's another bubble around the outer contents of our whole program.

[00:02:14]
Those are two different scopes. There's one scope here and one scope here. Notice that there's no a inside of our foo and yet we didn't get a problem. And the reason for that is that you can always access variables above you or outside of your scope. But you can never reference variables that are further down, so that's a one-way street.

[00:02:38]
When I ask for a here, it first looks to see if it sees an a inside of foo, but it doesn't. And so where it goes next is it goes out one level of scope and it finds an a there, so it's able to use it.
>> Kyle Simpson: But the reverse was not true, we could not take a variable that was inside of it and access it from the outside.

