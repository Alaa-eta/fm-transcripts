[00:00:00]
>> [MUSIC]

[00:00:03]
>> Speaker 1: We mentioned that there was a kind of blog called a conditional, an if statement. Let's focus more specifically on a conditional. If I have the variable a = 10, and I wanna do something only if (a > 5) then I put an if statement around the block.

[00:00:22]
And here, I say, a = a times 2. So I'm only doubling the a variable. I'm only doubling its value if it was already greater than five for whatever reason. The if statement says, take this thing whatever this expression is and figure out if it's true or false.

[00:00:48]
But there are statement expressions that you can put there which are not already true or false. This one is. The greater than operator always says that's either a true or false. So that the result of that operator is always either true or false. But there are certain expressions that we could put here that would not result in true or false by themselves.

[00:01:12]
For example, that expression, which is extremely common in JavaScript. People put an expression like if (a). The if statement still expects a true or a false. And if you don't pass a true or false, guess what has to happen?
>> Speaker 1: It has to convert. Remember we talked about type conversion before, and I showed you type conversion with numbers and strings?

[00:01:40]
Well there's also type conversion between any value and what's called a boolean value, that is the true or the false value. So, this variable gets converted either to a true value or a false value. And the rules for how that conversion happens are fairly straightforward. There's a list of values defined in the JavaScript's back which are called falsey values.

[00:02:07]
Falsy, f-a-l-s-y, okay. So falsy values are defined as these, 0, -0, NaN, which is the not a number number, empty string, false itself, null and undefined. That list of values is the list of falsy values in JavaScript and the easiest thing for me to say is the way you figure out of something is truthy that is that it's gonna become true or it's falsy, it's gonna become false.

[00:02:47]
Is to just consult this list, memorize the list and then just mentally consult it. It is either a falsy value because it's on this list or the only other option is that it must be truthy. It must behave as a true value when coerced. So, essentially you look at the list and if it's on the list it's falsy.

[00:03:08]
If it's not on the list it must be truthy.
>> Speaker 1: So in our case if that was our list, let's scroll down now. If in our case, the question that we now ask is let me scroll so I leave the list, visible for you. In our case is a truthy or falsy?

[00:03:30]

>> Speaker 2: Truthy, cuz it exists.
>> Speaker 1: Why is it truthy?
>> Speaker 2: Cuz you assigned it above.
>> Speaker 1: Not because I assigned it above, but because of what value it currently has, okay? The value in a is the value 10. Is the value ten on the falsy list?
>> Speaker 2: No.

[00:03:50]

>> Speaker 1: So if it's not on the falsy list, it has to be conceptually on the truthy list, and all we need to know for now is that a falsy value becomes false when it asks to be a billion, and a truthy value becomes true. So if I said, if (a), then a becomes true and the if statement executes.

[00:04:09]
Now what if a was 0? What would happen?
>> [INAUDIBLE]
>> Speaker 1: The zero value is a falsy value. So it would result in false, and the if statement would say, if false, no, not gonna do it. So it makes a conditional decision based upon whether the expression you give it is true or false.

[00:04:30]

>> Speaker 2: So could a person say, if a equal false?
>> Speaker 1: You could compare it directly to the true or the false value, like that or like that. I don't recommend it.
>> Speaker 1: There's lots of nuanced reasons why I don't recommend it and we won't go into those reasons.

[00:04:49]
There's a question in the chat room about void zero. So void is an operator.
>> Speaker 1: It's not very commonly used but is an operator that everything that you give it after the void becomes undefined. So if I said void 42. If you try that expression in your browser everybody try it, go to your console void 42 gives us undefined.

[00:05:22]
So, no matter what you passed a void you get undefined back which means void 0 also gives you undefined back.
>> Speaker 1: It's an operator just like plus or minus or whatever, it's just an operator that voids out the value and leaves undefined in its place.

