[00:00:00]
>> [MUSIC]

[00:00:04]
>> Kyle Simpson: All right now, back to variables, we've we've mentioned this many times but we didn't we didn't explicitly define that. And here is where it matters, if you put a varon in front of something. So, if I have a program where the very first line says a equals 42, I'm assigning to a variable that has never been formally declared.

[00:00:26]
And assigning to a variable that's never been formally declared is a really, really bad idea. Every variable that you use in your program should be formally declared. And it should be formally declared before the first time you use it. Okay. Technically, this program formally declares a and uses it, but it makes use of this concept which we won't really get into here, and it makes use of this concept called hoisting.

[00:01:00]
And it's a more confusing program even though it's a correctly running program.
>> Speaker 2: [INAUDIBLE] if clears it after the scope [INAUDIBLE].
>> Kyle Simpson: Yeah, I cover hoisting a lot more in the book on scope enclosures so if you want to get into the nuances of it.ued It has to do with the fact that this program is gonna get compiled first, so it's going to find that var a before it tries to run anything.

[00:01:22]
But this is a more confusing version of the program. You would always want to prefer for less confusing programs to write var a first before you do an assignment and you can optionally combine those two into the same thing. But you would always want to formally declare every variable and the way we typically do that in JavaScript up to this point is with the var keyword.

[00:01:46]
There's two more coming in ES6. One is called let and the other one we mentioned earlier is const. And const are block scoping declarations rather than functions coping declaration like var is. What that means has a whole chapter in the book so I won't get into that too much but those are the three ways that you formally declare a variable in JavaScript.

[00:02:15]
There's one other way to formally declare an identifier and that is to declare it as a function and we haven't talked about functions yet, but if I said function A, I'm declaring a variable called A which has this function value in it. So you always want to formally declare your variables in one of the ways that I just showed.

[00:02:36]
Let me put those other ones back.
>> Kyle Simpson: Those are the ways to formally declare variables and you're always going to want to do one of those in your programs. What's the use of hoisting? Again, I have a whole section in the scope enclosures book about what hoisting's about.

[00:02:59]
Hoisting is actually not a real thing. It's a metaphor for the real thing and the real thing is the compiler.
>> Speaker 2: Will you also discuss it in Advanced JavaScript?
>> Kyle Simpson: I do. We'll upsell here [LAUGH]. I do extensively cover this topic in the advanced JavaScript course that's available from Front End Masters.

[00:03:15]
[COUGH] Okay.
>> Speaker 2: A question about using let. What's the difference between using let to declare a variable?
>> Kyle Simpson: I don't want to get too much into the weeds, so let puts it inside of a block, var puts it inside of a function. That's all I'll say about that.

[00:03:35]
There's much more about that in the Scope and Closures book and in the advanced JavaScript course. For your basic learning purposes in JavaScript you don't need to worry about let in columns, to var is more than enough. But there are nuances to their behaviors that are available to you.

[00:03:49]
If you work in ECMA Script ES6. Okay, moving along.
>> Kyle Simpson: There's a notion in many programming languages and JavaScript is no different. That if I had a collection of statements like var a = 42 and foo(a / 2), these are statements. And if I had a collection of statements that represented a logical unit together then I could put those statements together inside of a curly brace pair like we see there and that's called a block.

[00:04:38]
A block essentially is a pairing of curly braces with one or more statements inside of it. Now this block is a completely standalone empty block it doesn't mean anything. The way we've expressed it. It's a stylistic thing. It says, these two things belong together and they're separate from other stuff.

[00:04:58]
Like if you had a program that looked like this, and you had stuff up here, and you had stuff down here.
>> Kyle Simpson: You're stylistically signalling these two things in between, they're kind of special. They're shut off there in their own deal. So there's not much, there's not any functional difference here.

[00:05:18]
But most of the time blocks are not appearing by themselves like that. Most of the time they appear associated with another kind of a statement. So there's different kinds of statements that have blocks associated with them. For example, which we'll get into in a little bit. The if statement.

[00:05:36]
So, if I wrote a statement where I wanted to say, if (a > 10) and attach a block to it, then what I'm saying is look at this statement and figure out if that's true or false. Is the value currently in a greater than ten or not, it's only one or two possible answers here.

[00:05:59]
In our program, we would have had to declare the var a and give it some useful value like the value 42.
>> Kyle Simpson: And then give it some other value down here. So if I said, if a is greater than ten, is the answer yes or no?
>> Speaker 2: It's greater than ten.

[00:06:18]

>> Kyle Simpson: Yes, it's greater than ten. So we would go into the block, only if we answered yes to this question. This asked a question we go into that block and do these things only if the question answered yes. In programming terms yes and no are actually what are called the values true and false.

[00:06:36]
So the question is, is that statement true and the answer is yes it is true. So we would execute the stuff inside of the block, otherwise we don't. So that's one way to attach a block to something is to an if statement. Another way to attach a block to a statement is to have a loop, like a while loop or a for loop or whatever and we'll come to loops in just a moment but you notice that this block, again, it belongs to that statement and it's only going to get executed in the context of that statement.

[00:07:08]
So, it will only get executed if this loop is going to happen. In this case the loop is going to happen once because the first time we enter a is greater than 42. But, immediately we set it to ten. So, the next time we try to do this loop, it's not gonna keep going because a will no longer be the greater than ten.

[00:07:29]
It will just be the ten itself.
>> Speaker 2: So, Kyle. You have the bracket on the up. At the end where some people bring it null then have it to begin.
>> Kyle Simpson: Some people like it there.
>> Speaker 2: What kind of person likes that? Is that a-
>> Kyle Simpson: [LAUGH] [CROSSTALK] I'm tempted to answer that but I can't.

[00:07:46]

>> Speaker 2: Answer it. Go ahead.
>> Kyle Simpson: No.
>> Speaker 2: Cuz I do that.
>> Kyle Simpson: It's a perfectly valid style of programming.
>> Speaker 2: I've only seen enterprise java developers do that.
>> Kyle Simpson: I don't know that I would associate it with any particular group of people or even any particular language. It is a stylistic choice only.

[00:08:08]

>> Speaker 2: Is it a bad choice to do it the other way?
>> Kyle Simpson: It's not a bad choice. It's a choice, not a bad or a good one. The vast majority of open source developers do what's called cuddling, which is that they put the curly brace on the same line as the statement, so.

[00:08:22]

>> Speaker 2: Called cuddling? Okay.
>> Kyle Simpson: [LAUGH]
>> Speaker 2: Now I know it.
>> Kyle Simpson: That's how most people do it, but there's nothing wrong with doing it that way. They are functionally exactly the same.
>> Speaker 2: Okay.
>> Kyle Simpson: So, we have a block that's not associated with anything, means it's gonna run every time or we can attach a block to something and it means it's only gonna run conditionally if that statement actually results in something that we wanna do.

[00:08:47]
There's lots of places where blocks can appear, blocks can also appear as part of a function statement. So here, that block of statements only happens for this foo function, probably don't wanna call recursive, we saw call a different function. Now this block only happens if foo ever gets called.

[00:09:08]
So it doesn't run right away but if later in a program, I try to invoke the function then it would find that block it would run that block of code. Okay. So just think conceptually, if I wrap a curly brace pair around a set of code I'm putting that as a collection of code and then I can attach that block to various different kinds of statements.

[00:09:26]
And that will change how, and if, and when that block gets executed, that's the major take away.
>> Speaker 2: There is a question there at the bottom if you want to use it.
>> Kyle Simpson: The question was essentially there's, you can declare a function like that or you can declare a function-

[00:09:49]

>> Kyle Simpson: Like that. And technically there's a third variation, which is to give it a name itself, which doesn't have to be the same. Those are all functions. Those are not all function declarations. The first line is a function declaration. The next two are function expressions attached to a variable declaration.

[00:10:12]
There's a variety of differences between these and we get too far off track if we worry too much about those nuanced differences. So there's a variety of differences between them but the major takeaway here that you would want to not forget is that in all three of these [COUGH] in all three of these cases the block is associated to a function and the block will not run unless you execute the function.

[00:10:43]
So the nuance differences between function declarations and variable declarations of function expression assignments, those nuanced differences are outside of our scope of discussion here. They are covered in depth in the book series. So, next steps you would want to pay more attention to that reading through the books.

[00:11:00]
They're also covered in my training, my advanced JavaScript training.

