[00:00:00]
>> Kyle Simpson: All right, now back to variables. We've mentioned this many times, but we didn't explicitly define that. And here is where it matters if you put a var in front of something. So, if I have a program where the very first line a = 42, I'm assigning to a variable that has never been formally declared.

[00:00:23]
And assigning to a variable that's never been formally declared is a really, really bad idea. Every variable that you use in your program should be formally declared. And it should be formally declared before the first time you use it, okay. Technically, this program formally declares a and uses it.

[00:00:50]
But it makes use of this concept which we won't really get into here. It makes use of this concept called hoisting. And it's a more confusing program even though it's a correctly running program.
>> Speaker 2: Like so you should, so it clears it after the scopes, or whatever?
>> Kyle Simpson: Yeah, I cover hoisting a lot more in the book on Scope and Closures.

[00:01:10]
So if you want to get into the nuances of it, it has to do with the fact that this program is gonna get compiled first. So it's gonna find that var a before it tries to run anything. But this is the more confusing version of the program. You would always want to prefer for less confusing programs, to write var a first before you do an assignment.

[00:01:30]
And you can optionally combine those two into the same thing. But you would always wanna formally declare every variable. And the way we typically do that in JavaScript up to this point is with the var keyword. There's two more coming in yes six. One is called let.
>> Kyle Simpson: And the other one we mentioned earlier is const.

[00:01:53]

>> Kyle Simpson: Latin const are block scoping declarations, rather than functions scoping declarations like var as. What that means has a whole chapter in the book. So I won't get into that too much. But those are the three ways that you formally declare a very long javaScript. There's one other way to formally declare an identifier, and that is to declare it as a function.

[00:02:15]
And we haven't talked about functions yet but if I said function a, I'm declaring a variable called a which has this function value in it. So you always want to formally declare your variables, in one of the ways that I just showed. Let me put those other ones back.

[00:02:39]

>> Kyle Simpson: Those are the ways to formally declare variables. And you're always gonna want to do one of those in your programs.
>> Kyle Simpson: What's the use of hoisting? Again, I have a whole section in the Scope & Closure's book about what hoisting's about and hoisting is actually not a real thing.

[00:02:57]
It's a metaphor for the real thing. And the real thing is the compiler-
>> Speaker 3: And you also discussed it in advanced, JavaScript.
>> Kyle Simpson: I do, we'll up-sell here. [LAUGH] I do extensively cover this topic in the advanced JavaScript course, that's available from Frontend Masters. [COUGH] Okay.
>> Speaker 4: There's a question about using let?

[00:03:18]

>> Speaker 4: What's the difference between using let to declare a variable?
>> Kyle Simpson: I don't wanna get too much into the winds. So let puts it inside a block, and var puts it inside a function. That's all I'll say about that. There's much more about that in the Scope & Closures book and in the advanced JavaScript course.

[00:03:37]
For your basic learning purposes in JavaScript you don't need to worry about let and const. var is more than enough. But there are nuances to their behaviors that are available to you. If you work in EcmaScript, in ES6.
>> Kyle Simpson: Moving along.
>> Kyle Simpson: There's a notion in many programming languages, and JavaScript is no different.

[00:04:09]
That if I had a collection of statements like var a = 42 and foo( a / 2 ), these are statements. And if I had a collection of statements that represented a logical unit together, then I could put those statements together inside of a curly brace pair, like we see there.

[00:04:32]
And that's called a block. A block, essentially, is a pairing of curly braces with one or more statements inside of it. Now this block is a completely stand-alone empty block. It doesn't mean anything the way we've expressed it. It's a stylistic thing. It says these two things belong together, and they're separate from other stuff.

[00:04:55]
Like if you had a program that looked like this, and you add stuff up here, and you add stuff down here.
>> Kyle Simpson: You're stylistically signalling these two things in between, they're kinda special, they're set off, they're their own deal. So there's not much, there's not any functional difference here.

[00:05:15]
But most of the time, blocks are not appearing by themselves like that. Most of the time, they appear associated with another kind of a statement. So there's different kinds of statements that have blocks associated with them. For example, which we'll get into in a little bit, the if statement.

[00:05:32]
So if i wrote a statement where I wanted to say, if (a>10), and attach a block to it. Then what I'm saying is, look at these statement and figure out if that's true or false. Is the value currently an a>10 or not? It's only one of two possible answers here.

[00:05:55]
In our program, we would have had to declare the var a and give it some useful value like the value 42, and then give it some other value down here. So, if I said if a >10, is the answer yes or no?
>> Kyle Simpson: Yes, it's greater then 10.

[00:06:15]
So we would go into the block only if we entered yes to this question. It's asked a question. We go into that block and do these things, only if the question answered yes. In programming terms, yes and no are actually what are called the values true and false.

[00:06:32]
So, the question is, is that statement true? And the answer is yes, it is true. So we would execute this stuff inside of the block, otherwise we don't. So that's one way to attach a block to something is though an if statement. Another way to attach a block to a statement is to have a loop.

[00:06:50]
Like a while loop or a for loop or whatever, and we'll come to loops in just a moment. But you notice that this block again, it belongs to that statement and it's only going to get executed in the context of that statement. So, it will only get executed if this loop is going to happen.

[00:07:09]
In this case, the loop is going to happen once, because the first time we enter a >42. But immediately we set it to 10. So the next time we try to do this loop, its not going to keep going because a will no longer be the greater than 10.

[00:07:26]
It'll just be the 10 itself.
>> Speaker 4: So Kyle, do you have the bracket at the end, where some people bring it down and have it at the beginning?
>> Kyle Simpson: Some people like it there.
>> Speaker 4: What kind of person likes at his own.
>> Kyle Simpson: [LAUGH] [CROSSTALK] [INAUDIBLE]. Well I'm tempted to answer that, but I can't.

[00:07:43]

>> Speaker 4: Answer it.
>> Group: [LAUGH]
>> Kyle Simpson: No.
>> Speaker 4: Do that?
>> Kyle Simpson: It's a perfectly balanced style of.
>> Speaker 3: I will only see enterprise Java developers do it.
>> Kyle Simpson: I don't know that I would associate it with any particular group of people or even in particular language.
>> [INAUDIBLE]
>> Kyle Simpson: It is a stylistic choice only.

[00:08:04]

>> Speaker 6: Is it a bad choice to do the other one?
>> Kyle Simpson: It's not a bad choice. It's a choice, not a bad or a good one. The vast majority of open source developers do what's called cuddling, which is they put the curly brace on the same line as the statement.

[00:08:18]

>> Speaker 6: Called cuddling?
>> Group: [LAUGH]
>> Kyle Simpson: That's how most people do it. But there's nothing with doing it that way. They're functionally exactly the same.
>> Speaker 6: Okay.
>> Kyle Simpson: So, we have a block that's not associated with anything, means it's gonna run every time. Or we can attach a block to something, and it means it's only gonna run conditionally if that statement actually Results in something that we wanna do.

[00:08:43]
There's lots of places where blocks can appear. Blocks can also appear as part of a function statement. So here, that block of statements only happens for this foo function. Probably don't wanna call it recursive, so I'll call a different function. Now this block only happens if foo ever gets called.

[00:09:04]
So it doesn't run right away, but if later in the program I try to invoke the function, then it would find that block and it would run that block of code. Okay? So just think conceptually, if I wrap a curly brace pair around the set of code I'm putting that as a collection of code, and then I can attach that block to various different kinds of statements.

[00:09:23]
And that will change how, and if, and when that block gets executed, that's the major takeaway.
>> Speaker 4: There's a question there to the bottom, if you wanna read it.
>> Kyle Simpson: Question was, essentially, you can declare a function like that, or you can declare a function.
>> Kyle Simpson: Like that, and technically there's a third variation which is to give it a name itself, which doesn't have to be the same.

[00:09:55]
Those are all functions, those are not all function declarations. The first line is a function declaration, the next two are function expressions, attached to a variable declaration. There's a variety of differences between these, and we get too far off track if we worry too much about those nuance differences.

[00:10:15]
There's a variety of differences between them, but the major take away here that you would want to.
>> Kyle Simpson: But you would wanna not forget is that, [COUGH] in all three of these cases, the block is associated to a function, and the block will not run unless you execute the function.

[00:10:39]

>> Kyle Simpson: So the nuanced differences between function declarations and variable declarations with function expression assignments. Those nuanced differences are outside of our scope of discussion here. They are covered in depth in the book series. So next steps, you would wanna pay more attention to that reading through the books.

[00:10:57]
They're also covered in my training. My advanced JavaScript training.

