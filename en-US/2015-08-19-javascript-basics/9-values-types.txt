[00:00:00]
>> [MUSIC]

[00:00:04]
>> Speaker 1: We've been throwing around some concepts and we wanna come back and layer those in if there have been some things that maybe were missed. If I have the value 42,
>> Speaker 1: And another way of expressing a value that looks very similar is to put some quotes around it.

[00:00:21]
These two values look like they are roughly the same. If we were to print out both of them, they would both print out in the same way. They'd both say 42. They'd have the literal characters 4 and 2 after each other. But they are gonna behave differently in our JavaScript program.

[00:00:40]
And that is because these values are intrinsically of different types. And that word type, we don't mean physically putting your fingers on keys on a keyboard. We mean it is an intrinsic behavior of the value as expressed. So this 42 that we see on line one is a number.

[00:01:00]
And the quote 42 quote Is what we call a string. And numbers have different behavior associated with them than strings do. So for example, numbers are what we do math with. We can say 42 / 2 and that gives us 21. Strings are what we do input and output with.

[00:01:20]
Strings are also how we deal with characters. So if I wanted to say what is the first character of the string 42 that bracket 0 could tell me that the first character of it is the character 4. So the character 4 is the first character in the string 42.

[00:01:41]
Just like if I had the string abc, the character at the one position is the character b, okay? So, strings are accessing things character by character, numbers are what we do math with. And these different intrinsic behaviors are important to keep in mind. Because if I express the number f42orty two in my JavaScript program, I am signaling that I intend to use that in a mathematic way.

[00:02:07]
And if I instead express quote 42 in my program, I am expressing that I intend to use that in a string way, okay? Yeah?
>> Speaker 2: Is the use of single versus double quotes important?
>> Speaker 1: In JavaScript, strings can either be double quotes or single quotes, you can't mix.

[00:02:26]
You can't have a double quote in the beginning and single quote in the end it has to match. But they can either be all you know double quotes or single quotes in terms of your delimiting of a string literal. There is no difference whatsoever functionally in JavaScript. In fact stylistically, the only arguments that it can ever be made are some people prefer the single quote.

[00:02:46]
Because it's less keystrokes for them, they don't have to hit Shift. Other people prefer the double quote because it's more natural that they've done that in other languages and it's purely a stylistic thing. Here's what I would say never ever mix. Do not have part of your program using single quotes and part of your program using double quotes.

[00:03:07]
Pick one and I really don't care which you can pick whichever one you want. There's no difference, but pick one and stick with that consistently throughout your program. You will see that I prefer double quotes, I used double quotes.
>> Speaker 1: Okay [COUGH].
>> Speaker 1: So, these numbers. I mean these values have these different types.

[00:03:30]
So, if I said var a = 42, I've got 42 that's in a variable. Let me take off the var part just to not confuse that now. So, I'm just making an assignment, the a variable is gonna have the 42 in it. And if I wanted to print it out, I can say console.log A and you'll notice that the JavaScript engine duly does print that out.

[00:03:51]
If we try this program
>> Speaker 1: You'll notice I see 42, but what happens if I send a a = quote 42? And I say console.log(a)?
>> Speaker 1: It's very subtle and difficult even on the projector to tell, but this one is printed in blue characters and this one is printed in black characters.

[00:04:14]
Because the console is giving you a very subtle hint that underline what it's done it was dealing with a different value type. So it's important understand and this is actually there's, it's not really incorrect in the book. But there is a slightly misleading thing that I'm gonna correct in a second edition.

[00:04:36]
When it talks about console.log, it suggests that console.log changes everything to a string. Actually it doesn't really change it to a string when you're running inside of your JavaScript engine, it just prints out whatever thing you had. So that's why we see a slightly different representation there. There are other contexts which is what I meant there are other contexts that change things into strings.

[00:04:57]
So for example, saying alert (42) or a variable with that number in it. Changes it into a strings that it can printed in the box. So we can't tell any difference inside of an alert box whether it had a number or a string. But we know under the covers it needed a string to do it, so I actually converted it to a string.

[00:05:17]

>> [COUGH]
>> Speaker 1: So if I wanted the string representation of this value, if I had it as a number and maybe then I later did some division. I said a = a / 2. So now we know a is holding the value 21. And if I then wanted to do something string oriented with it, like output or getting at its character or whatever.

[00:05:45]
I would need to convert it into a string, convert from one type to another. And this conversion, it's common in all programming languages all programming language has it. Programing languages have a notion of conversion. In JavaScript, the word that we use is slightly different. It's not come version, it is coercion.

[00:06:08]
And some people like to nitpick and say, well, there's one thing that's conversion in JavaScript and another thing is coercion. I find it much easier to actually distinguish. Between explicit and implicit rather than conversion in coercion that one's marking confusing to me. So an explicit conversion, one that it's obvious that that's what I'm trying to do.

[00:06:30]
If I wanted to turn a into a string representation, I could literally use the string function.
>> Speaker 1: And that's gonna convert and that might look if you have any experience in another programming language where they do type casting or other forms of conversion that looks very similar. So I'm explicitly saying take the thing that's in a now and if it's not a string, make it look like a string.

[00:06:54]
And then assign that value back into a.
>> Speaker 1: So if we took this program if we put a console.log on it and we took that program and we ran it. Are we expecting a blue number for the 21, which would be that it's a number or are we expecting a black characters for 21 because it's a string?

[00:07:20]
We'd be expecting black because it's a string. And in fact, we get black. Again, it's really subtle on the projector on the screen. But this is black 21 because it's actually a string representation there printed out. Exactly the same as if I had said console.log hello.
>> Speaker 1: Okay?

[00:07:43]
All right, so strings serve a purpose in programs differently than numbers do and converting between the two is almost always required. We saw that we could say a = String(a) to convert from anything into a string. If we wanted to go the other direction, like go from a string to a number.

[00:08:05]
Like if we had another variable called b and we said b. Then we could do the same thing but with the number of function we could say a Number (a). So now b is gonna be the number 21 and a is gonna be the string quote 21.
>> Speaker 1: There's a question in the chat room about changing things.

[00:08:25]
This is a subtle point which I don't want to believe or too much. But which we'll actually get much more into when we talk in the morning session of day two. When we talk about coercions and all that stuff and much much more detail, but just as a brief answer.

[00:08:39]
In JavaScript, variables do not have types, there's no such thing as a variable having a type. In JavaScript, the value has the type, so the value 42 or the value quote 42 is the thing with a type. And the variable, the thing that we call a or b, it has no type, it can have any value of any type in it.

[00:09:00]
Whereas in other languages that are called static languages. Those languages you don't declare a type on the value so much as you declare a type on the variable itself. So in c for example if I say int a, I'm saying this variable container must hold only ints, integers.

[00:09:19]
So I'm typing the variable itself rather than worrying about the type of the value. Such as the distinction in JavaScript and another dynamic value languages, like JavaScript, we don't have a type for the variable, we have a type for the value.
>> Speaker 1: The return of a variable color code matters.

[00:09:43]
The only point that we're making here is to understand if you're gonna program inside of the console, understanding what the console's doing. It has special behaviors that are outside of what JavaScript itself is doing. So here, I'm just helping you understand that the console if you see blue characters, then the console's telling you, you had a number.

[00:10:02]
And if you see black characters, the console's telling you, you had a string. That's just a subtle nuance of working with the console. It does not matter actually to the JavaScript engine.
>> Speaker 1: Okay? So we're not gonna do much more about coercions, except for me to suggest that those two that I showed you before.

[00:10:23]
These are explicit and there are ways to do implicit coercions. A way to go from a number to a string that is sort of a side effect of some other operation, that's what I mean by implicit it's not obvious that you're doing it. If I said something like right now we know a is the number 21.

[00:10:43]
If I said a = a + and an empty string.
>> Speaker 1: Again, without getting too much into the weeds about how the plus operator works. In this case, the plus operator wants to do string concatenation instead of mathematic addition. And because one of these things is not already a string.

[00:11:06]
It has to make it into a string, so under the covers it's gonna do that string a thing that I was showing you. But it's not obvious to us that that's happening. And yet if we try this program and do a console that log on that a variable.

[00:11:24]
If we try this program will notice that we gonna get those black characters because it's going to have made it into a string value.
>> Speaker 1: Try that in your own console to verify whether or not you have that third line in or not. You'll notice the difference between getting black characters in your console or getting blue characters.

[00:11:44]
Your question back there?
>> Speaker 3: Would there ever be a time where you would want something to not change, so it would be final? And so even in the midst it's like that, it would give you an error let's say instead of converting it behind the scenes? You don't want that to.

[00:12:04]

>> Speaker 1: There's a question in the live room here about whether or not there's a notion of wanting a a variable to have sort of a final value in it. That is if you tried to do something else and assign it a different value it would throw you an error.

[00:12:18]
And there is actually that notion as of ES6, the newest latest and greatest JavaScript that's coming out. There's a notion instead of using that var keyword that I've talked about a couple times, you can use const to create what's called a constant. And other various other programming languages also have a notion of a constant.

[00:12:36]
So that's getting a little out of our topic, but just to make sure we're clear on it. If I said var a = 42, I'm making an a that can be changed as many times as I want. But if I said const a = 42, I'm making an a that can never be changed again.

[00:12:53]
And if I do a = 10, it will either silently fail or actually throw me an error and that depends on strict mode, which we may cover later. But const is the way you make a variable that can't be changed later. And that's only in the newest versions of JavaScript.

