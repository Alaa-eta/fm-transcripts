[00:00:00]
>> Sarah Drasner: We can also make page specific hooks. So, sometimes we want one page to transition out a certain way, and another one to transition in a different way. In that case, in our export default for that page, remember how our pages are just .view files in that pages directory, we would write export default and then we would say transition whatever, another name and then we have that name for the hook instead.

[00:00:25]
I could have the page bounce out like we had the ball bounce out. We shouldn't do that but [LAUGH] I'm just saying that that is a possibility. You could plug into animate.css stuff if you so desire. So, then we have fadeOpacity-enter-active, fadeOpacity-leave-active, we can even scope it if we want to.

[00:00:46]
We don't necessarily need to because it's just applying to that page as it is, so there we go. And then, this one will fade instead. So the other ones are going like this, and then that one, in specific, is going to use a different type of animation. Page specific JavaScript hooks.

[00:01:06]
That's really where the good stuff is at in my mind. We have all of that goodness available to us. But the way that we're gonna plug into it is going to be the way that they have for us. Like exactly on that export default. So, where instead of writing a transition component we're not actually wrapping things in a transition component.

[00:01:31]
We're going to say transition: {, and then we're going to say mode: 'out-in', we're gonna say css: false, we're gonna say beforeLeave, leave, beforeEnter, enter, and all of these things so we can console log those and these are all just available to us on each specific page or in that default layouts.

[00:01:53]
Remember we had that default layouts area where we could designate things. There's a bug in Nuxt for transition modes currently. They were waiting for the view.js release that came out yesterday and they already fixed this bug. They just haven't launched it yet. So if you need to make a nut patient transition in the next like a week or so, I have linked up the place where you can go to get that code that's fixed and the issue to track so that you can see when it's closed.

[00:02:27]
And the demo that I mean that I showed you earlier uses the fixed code. I'm just letting you know just in case you run into this error. Probably it shouldn't be a problem by the time you actually end up using it. As soon as Nuxt releases to version 1.0 it will not be a problem anymore.

[00:02:46]
So, if we look at some of the code that it took to power that Nuxt transition page, we have a before enter that looks very similar to our before enter from before. We have enter, el and done. In this case I'm using TweenMax, not TimeLine so I can just say done instead.

[00:03:05]
And I can have a bunch of different code here. This is ridiculous don't ever do this. [LAUGH] I'm just showing you that a lot of things are possible here. It's sometimes fun to make dumb things for other people. [LAUGH]
So I had some single elements in there. I can plug into single elements as well.

[00:03:27]
Probably good to use refs in this instance. So you could say this.refs on the component. So if you're used to React, that's a really quick way of referring to that DOM element. But some of these libraries allow you to access that domino directly, and it's a little bit redundant.

[00:03:46]
So for green sock, I'm just plugging into that h1. And I could also plug into Lifecycle Hooks, like I did before, as well.

