[00:00:00]
>> Sarah Drasner: Let's say you're like me and you like working with javascript. I was just mentioning to someone earlier, I love javascript for animation, javascript is really, really powerful for animation. So, what if we want to use one of these transition hooks but we want to use it with Java scripts instead of CSS.

[00:00:18]
We are allowed to because we can use Java Script texts. Here are all the hooks available to us. We don't have to use all of these. We can plug in. It's just like the life cycle hooks. We don't have to plug in to any of them, we can plug in to ones that we want or not.

[00:00:33]
These transition hooks are before, enter, after enter, enter cancelled, beforeLeave, leave, afterLeave, leaveCancelled. It's important to write v-bindings css="false". That's so that you're letting Vue know okay we're not gonna be using CSS for this. If you see CSS around that has to do with these namings, ignore them.

[00:00:57]
We're using JavaScript right now. So that's to avoid any kind of like race conditions or collisions, basically make sure that you're not naming things the same thing anyway but it's possibly you're on a giant code base and you don't know that there's a collision happening. So, these are just, these are the hooks, those like of course we've got that v on or at.

[00:01:19]
And you can name this whenever you want, I just was naming them things that made sense to me. So the most basic example, I would say, we probably not usually gonna use all of those. So the most basic example here, we've got that transition component, we've got an enter, and we've got a leave.

[00:01:38]
Those are gonna be the hooks that we're going to use in order to create our animation, and we're gonna say css false and we put that element there. So that's the most basic example. So we can plug into and inside our methods, because they're basically now methods that we're going to use.

[00:01:55]
We're gonna say enterEl, we have access to that element. So that is always going to come through and then we've got done as well. We've got to let it know when it's done. Part of the reason we have to do this is that so the transition modes can work right you've got those transition modes that are firing after the other thing is done, we've got to let it know the other thing is done.

[00:02:15]
So we've got leave A]and we've got el and we're passing those in so any time we need to use like most animation libraries need a reference to work off of that where you can use that el in order to create that reference
>> Sarah Drasner: So now you actually know fully how this was done.

[00:02:36]
First you knew how the input part was done, now you know how all of this was done. I'm writing in here this, hi, we all]] ready had lunch, so no more tacos, and I am gonna write it and you probably have guessed that I didn't have it into the dorm until I pressed the button and then we can use that hook to have it cascade and then bounce in total location.

[00:03:10]
The other thing I'm doing is I'm using a library called Green Sock which lets me same from. Like, it's going to take from a bunch of values and bring it to where it needs to be. So I don't need to specifically say go over here and go over here and go over here.

[00:03:25]
That wouldn't make a lot of sense. I'm saying take, go from all of these different locations and come to this area. So this is a lot of code. Don't worry, we're gonna zoom in to some of it and then we're gonna look at it a little bit more closely.

[00:03:41]
In this before Enter, remember we had a before Enter hook, there might be some values that you need to apply to your animation. And in this case for those letters, I wanted it to do, I wanted them to do lots of weird things. I wanted them to transform in space, preserve 3D and bounce around in this, like, I didn't want them just bouncing, I wanted them bouncing and spinning and doing all sorts of crazy things.

[00:04:08]
So the things I had to do was using this thing in GreenSock called TweenMax.set which basically applies a bunch of characteristics to the animation right before it gets going. I could also do this in CSS. I wouldn't necessarily need to use Before enter hook if I didn't want to.

[00:04:25]
But sometimes I do it this way, because these properties don't actually do anything until I start animating. So it's possible that if I'm sharing the code base with someone else, and they come along, and they like what's all this stuff, and they delete these properties, and they're like, still looks the same, we're good, T]that's totally possible or me later like a year later is like what is that?

[00:04:49]
I don't know and like removes it and then I'm like the animation broke, that's weird. Like why did that happen? So sometimes keeping them together It makes a lot of sense because you're actually saying, these are the things I need just for this. The other thing that's really nice about it is if I need to adjust it, I'm not going back and forth from the CSS to the JavaScript and back again.

[00:05:10]
I'm just staying directly with the JavaScript code, and I'm making my small changes here. I think I started off with 600 perspective, and I was able to slowly adjust until I got what I wanted. So then in the enter, and then el, I'm passing it that el. And I'm doing a for loop, and I'm splitting the words apart, and I'm able to say, on the z-axis, do some Math.random(), and use this bouncing ease A]and I'm plotting this along a timeline that I've created that has labels.

[00:05:46]
But we're not gonna delve too far into this library, that's very library specific code there. So I'm able to create a timeline and do a lot of calculations on there that I need for my animation. And we're hanging everything off of that that enter, so everything kind of plugs in to that enter.

[00:06:07]
We mentioned this before, we kind of went over that before. The other thing that's worth mentioning is, I had done a bunch of, here are some the variables that I was creating to use my animation. But, the most important variable of all is, I'm creating a time line, oops, I'm creating a time line and I'm passing in this onComplete done.

[00:06:28]
So I had mentioned before that when we need to pass in the EL and we need to pass in done we need to let them, you know, the animation know when it's done executing to call done. But some animation libraries need you to pass that into a timeline I think.

[00:06:42]
Anime has something like this. GreenSock has something like this, mo.js has something like this. So, in some instances, just writing done in there is not going to work, because it doesn't execute the code that way. It's going to grab everything that's on that timeline and we need to pass it in the way that's kind of native to that library.

[00:07:00]
So, if you're working with an external JavaScript library, a lot of the more sophisticated ones will offer you some sort of hook for when it's completed. And that's where you should put the done.

