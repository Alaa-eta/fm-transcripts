WEBVTT

1
00:00:00.550 --> 00:00:02.440
&gt;&gt; Sarah Drasner: We can also
make page specific hooks.

2
00:00:02.440 --> 00:00:05.960
So, sometimes we want one page
to transition out a certain way,

3
00:00:05.960 --> 00:00:08.950
and another one to transition
in a different way.

4
00:00:08.950 --> 00:00:12.000
In that case,
in our export default for that page,

5
00:00:12.000 --> 00:00:17.460
remember how our pages are just
.view files in that pages directory,

6
00:00:17.460 --> 00:00:21.830
we would write export default and
then we would say transition whatever,

7
00:00:21.830 --> 00:00:25.610
another name and then we have
that name for the hook instead.

8
00:00:25.610 --> 00:00:28.770
I could have the page bounce out
like we had the ball bounce out.

9
00:00:28.770 --> 00:00:32.520
We shouldn't do that but [LAUGH] I'm
just saying that that is a possibility.

10
00:00:32.520 --> 00:00:36.810
You could plug into animate.css
stuff if you so desire.

11
00:00:39.210 --> 00:00:42.581
So, then we have fadeOpacity-enter-active,

12
00:00:42.581 --> 00:00:46.170
fadeOpacity-leave-active, we can
even scope it if we want to.

13
00:00:46.170 --> 00:00:51.220
We don't necessarily need to because it's
just applying to that page as it is,

14
00:00:51.220 --> 00:00:52.720
so there we go.

15
00:00:52.720 --> 00:00:56.730
And then, this one will fade instead.

16
00:00:56.730 --> 00:00:59.310
So the other ones are going like this,
and then that one,

17
00:00:59.310 --> 00:01:02.270
in specific, is going to use
a different type of animation.

18
00:01:03.830 --> 00:01:06.074
Page specific JavaScript hooks.

19
00:01:06.074 --> 00:01:11.260
That's really where the good
stuff is at in my mind.

20
00:01:11.260 --> 00:01:15.330
We have all of that
goodness available to us.

21
00:01:15.330 --> 00:01:19.460
But the way that we're gonna
plug into it is going to be

22
00:01:20.540 --> 00:01:23.130
the way that they have for us.

23
00:01:23.130 --> 00:01:25.410
Like exactly on that export default.

24
00:01:25.410 --> 00:01:29.050
So, where instead of writing a transition
component we're not actually

25
00:01:29.050 --> 00:01:31.210
wrapping things in a transition component.

26
00:01:31.210 --> 00:01:36.820
We're going to say transition: {, and
then we're going to say mode: 'out-in',

27
00:01:36.820 --> 00:01:42.700
we're gonna say css: false,
we're gonna say beforeLeave, leave,

28
00:01:42.700 --> 00:01:48.220
beforeEnter, enter, and all of these
things so we can console log those and

29
00:01:48.220 --> 00:01:53.220
these are all just available to us on each
specific page or in that default layouts.

30
00:01:53.220 --> 00:01:57.670
Remember we had that default layouts
area where we could designate things.

31
00:01:59.090 --> 00:02:03.830
There's a bug in Nuxt for
transition modes currently.

32
00:02:04.960 --> 00:02:10.370
They were waiting for the view.js
release that came out yesterday and

33
00:02:10.370 --> 00:02:11.950
they already fixed this bug.

34
00:02:11.950 --> 00:02:13.760
They just haven't launched it yet.

35
00:02:13.760 --> 00:02:18.830
So if you need to make a nut patient
transition in the next like a week or so,

36
00:02:18.830 --> 00:02:24.590
I have linked up the place where you can
go to get that code that's fixed and

37
00:02:24.590 --> 00:02:27.650
the issue to track so
that you can see when it's closed.

38
00:02:27.650 --> 00:02:32.592
And the demo that I mean that I showed
you earlier uses the fixed code.

39
00:02:32.592 --> 00:02:38.547
I'm just letting you know just
in case you run into this error.

40
00:02:38.547 --> 00:02:41.430
Probably it shouldn't be a problem by
the time you actually end up using it.

41
00:02:41.430 --> 00:02:45.230
As soon as Nuxt releases to version
1.0 it will not be a problem anymore.

42
00:02:46.250 --> 00:02:51.890
So, if we look at some of the code that it
took to power that Nuxt transition page,

43
00:02:51.890 --> 00:02:57.490
we have a before enter that looks very
similar to our before enter from before.

44
00:02:57.490 --> 00:03:00.660
We have enter, el and done.

45
00:03:00.660 --> 00:03:05.260
In this case I'm using TweenMax, not
TimeLine so I can just say done instead.

46
00:03:05.260 --> 00:03:07.586
And I can have a bunch
of different code here.

47
00:03:07.586 --> 00:03:10.337
This is ridiculous don't ever do this.

48
00:03:10.337 --> 00:03:15.890
[LAUGH] I'm just showing you that
a lot of things are possible here.

49
00:03:16.890 --> 00:03:20.210
It's sometimes fun to make dumb things for
other people.

50
00:03:20.210 --> 00:03:24.740
[LAUGH]
So I had some single elements in there.

51
00:03:24.740 --> 00:03:27.080
I can plug into single elements as well.

52
00:03:27.080 --> 00:03:31.044
Probably good to use
refs in this instance.

53
00:03:31.044 --> 00:03:35.100
So you could say this.refs
on the component.

54
00:03:35.100 --> 00:03:36.550
So if you're used to React,

55
00:03:36.550 --> 00:03:40.620
that's a really quick way of
referring to that DOM element.

56
00:03:40.620 --> 00:03:44.280
But some of these libraries allow
you to access that domino directly,

57
00:03:44.280 --> 00:03:46.460
and it's a little bit redundant.

58
00:03:46.460 --> 00:03:51.562
So for green sock,
I'm just plugging into that h1.

59
00:03:51.562 --> 00:03:55.280
And I could also plug into Lifecycle
Hooks, like I did before, as well.

