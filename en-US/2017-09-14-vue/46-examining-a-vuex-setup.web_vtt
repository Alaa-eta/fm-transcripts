WEBVTT

1
00:00:00.090 --> 00:00:05.426
&gt;&gt; Sarah Drasner: In order to use
vuex we have to npm install --save or

2
00:00:05.426 --> 00:00:07.620
we say yarn add vuex.

3
00:00:07.620 --> 00:00:11.580
I typically set it up this way
within my source directory.

4
00:00:11.580 --> 00:00:13.416
I create another directory name store.

5
00:00:13.416 --> 00:00:16.100
Remember I had created that other
directory named components before.

6
00:00:17.640 --> 00:00:18.980
This is a preference.

7
00:00:18.980 --> 00:00:21.380
You could also just make
a stored.js file and

8
00:00:21.380 --> 00:00:25.100
have it chilling in that source directory,
if you wanted to.

9
00:00:25.100 --> 00:00:29.524
The reason why I put a store directory
there, and put that single file in

10
00:00:29.524 --> 00:00:33.747
the store directory, is there
are cases with a giant application.

11
00:00:33.747 --> 00:00:37.541
Where you might even wanna break up
that file into several files and

12
00:00:37.541 --> 00:00:39.930
manage the state in a different way.

13
00:00:39.930 --> 00:00:43.172
If I keep that in one
directory from the get-go,

14
00:00:43.172 --> 00:00:46.494
if I get into a situation
where I need to refactor or

15
00:00:46.494 --> 00:00:51.183
move it into a few different files,
I'm already in a place to do that.

16
00:00:51.183 --> 00:00:56.200
I don't have to rewrite paths and a bunch
of the components or anything like that.

17
00:00:56.200 --> 00:00:57.720
But again, that's a preference.

18
00:00:57.720 --> 00:01:01.379
You can create that store
file wherever you want.

19
00:01:02.425 --> 00:01:06.748
&gt;&gt; Sarah Drasner: So the initial setup in
store.js would look something like this.

20
00:01:06.748 --> 00:01:12.210
This is the vstore sublime snippet
if you wanted to use sublime.

21
00:01:12.210 --> 00:01:16.950
So you would import Vue from vue,
import Vuex from vuex.

22
00:01:16.950 --> 00:01:22.976
We'd say, vue.use vuex,
and import const store.

23
00:01:22.976 --> 00:01:25.570
And I'm gonna go into
more depth on this too.

24
00:01:25.570 --> 00:01:29.960
I know that I'm throwing a lot at you
right now, state and key and value.

25
00:01:31.140 --> 00:01:36.142
So that's the smallest state
store you could possibly

26
00:01:36.142 --> 00:01:42.024
make ever in the world is this
tiny little key value state store.

27
00:01:42.024 --> 00:01:46.524
In our main.js file,
we'd perform the following updates, so

28
00:01:46.524 --> 00:01:52.293
we've looked at the main.js file and we're
gonna look at it in real life as well.

29
00:01:52.293 --> 00:01:57.525
Import from Vue from vue, import App from
app.view with import store from store.

30
00:01:57.525 --> 00:02:01.010
Store that was the directory
structure I have mentioned before.

31
00:02:01.010 --> 00:02:02.840
And we have store store.

32
00:02:02.840 --> 00:02:06.190
So the things that changes about this
file, it's pretty much the same.

33
00:02:06.190 --> 00:02:10.040
Here are the things that changed about
this file, we have import store from store

34
00:02:10.040 --> 00:02:15.810
store, and then we have store store,
that's like the second thing here.

35
00:02:15.810 --> 00:02:20.330
We can also just write store,
because we're using is, what?

36
00:02:20.330 --> 00:02:22.447
&gt;&gt; Speaker 2: Could you zoom out?

37
00:02:22.447 --> 00:02:22.947
&gt;&gt; Sarah Drasner: Sorry.

38
00:02:25.388 --> 00:02:29.723
&gt;&gt; Sarah Drasner: So, we can say store
store, or we can just say store because

39
00:02:29.723 --> 00:02:34.516
it's redundant and
ES6 understand that's what we might need.

40
00:02:35.736 --> 00:02:39.030
&gt;&gt; Sarah Drasner: In our store,
we have a few different things.

41
00:02:39.030 --> 00:02:40.620
You saw that we had our state.

42
00:02:40.620 --> 00:02:44.151
Our state is very similar to the way
we've been housing our data, so far.

43
00:02:44.151 --> 00:02:48.360
We have data in a function and we have
a few different values that we're using.

44
00:02:48.360 --> 00:02:51.720
So state is pretty much the same thing but
it's a centralized place for

45
00:02:51.720 --> 00:02:52.750
all that state.

46
00:02:52.750 --> 00:02:56.520
The other things that we
have in this are getters.

47
00:02:56.520 --> 00:03:00.610
Getters will make values able to
show statically in our templates.

48
00:03:00.610 --> 00:03:04.540
In other words, getters can read
the value, but not mutate the state.

49
00:03:04.540 --> 00:03:08.880
So you can think about getters as
equivalence to computed values.

50
00:03:08.880 --> 00:03:11.040
That's kind of how we
are using computed values.

51
00:03:11.040 --> 00:03:13.230
It's a different view on that same data.

52
00:03:13.230 --> 00:03:16.805
We're not mutating that data,
we're not mutating the state.

53
00:03:16.805 --> 00:03:23.338
We're using getters to have a different
view of that state to begin with.

54
00:03:23.338 --> 00:03:26.990
Mutations will allow us
to update the state.

55
00:03:26.990 --> 00:03:29.211
They'll always be synchronous,
every single time,

56
00:03:29.211 --> 00:03:31.090
they're always gonna be synchronous.

57
00:03:31.090 --> 00:03:34.910
Mutations are the only way
to change data in the store.

58
00:03:34.910 --> 00:03:37.480
That is the only way to
change data in the store.

59
00:03:37.480 --> 00:03:40.930
So you might say, so
how do I make asynchronous things happen?

60
00:03:40.930 --> 00:03:44.910
We'll use actions to update
the state asynchronously, but

61
00:03:44.910 --> 00:03:47.570
we'll always use an existing mutation.

62
00:03:47.570 --> 00:03:50.860
So you can't just create an action and
mutate the state,

63
00:03:50.860 --> 00:03:55.850
you have to create a mutation, and then
use that mutation inside of an action.

64
00:03:55.850 --> 00:03:59.250
This can be really helpful if you need
to perform a few different mutations at

65
00:03:59.250 --> 00:04:03.190
once in a particular order, or
if you need to reach out to a server.

66
00:04:03.190 --> 00:04:07.478
It kind of, doing it this way is really
nice because you solve any kind of

67
00:04:07.478 --> 00:04:09.632
sequencing or ordering problems.

68
00:04:09.632 --> 00:04:13.002
You don't have a situation where you're
executing a couple of things but

69
00:04:13.002 --> 00:04:16.960
really while the server, you're waiting
to get some response from the server.

70
00:04:16.960 --> 00:04:21.050
Something that was supposed to follow is
being executed, you can kind of make sure

71
00:04:21.050 --> 00:04:24.150
that you're executing things
exactly when you need to be.

72
00:04:24.150 --> 00:04:27.870
So mutations are like how
we've been using methods.

73
00:04:27.870 --> 00:04:32.862
They're any kind of change to
the state that needs to occur, and

74
00:04:32.862 --> 00:04:39.626
actions will take an existing mutation and
apply some sort of asynchronous activity.

75
00:04:39.626 --> 00:04:42.998
Either reaching to to server here,
we're gonna use that timeout just so

76
00:04:42.998 --> 00:04:44.170
you get the idea of them.

77
00:04:45.350 --> 00:04:46.640
We separate actions and

78
00:04:46.640 --> 00:04:49.120
mutations because we don't wanna
get into an ordering problem.

79
00:04:50.310 --> 00:04:52.660
All right,
we've got a basic abstract example,

80
00:04:52.660 --> 00:04:55.200
we're gonna walk through
this really quick.

81
00:04:55.200 --> 00:05:01.190
We had kind of talked about that store,
and we'd just said key value before.

82
00:05:01.190 --> 00:05:04.100
This is kind of like building
off of that example.

83
00:05:04.100 --> 00:05:08.349
So, in state, we'd maybe have
something like counter is 0.

84
00:05:08.349 --> 00:05:12.041
This getter, again,
like the computed value,

85
00:05:12.041 --> 00:05:16.275
this getter is allowing us to
use this triple counter and

86
00:05:16.275 --> 00:05:19.879
it's really saying
state.counter times 3 or

87
00:05:19.879 --> 00:05:23.588
whatever kind of logic that
we need to use it for.

88
00:05:24.920 --> 00:05:30.510
&gt;&gt; Sarah Drasner: Mutation is mutating the
state, mutations are always synchronous.

89
00:05:30.510 --> 00:05:33.750
When we mutate the state with an argument,

90
00:05:33.750 --> 00:05:38.310
we usually call it payload,
that's just like industry standard.

91
00:05:38.310 --> 00:05:41.780
So we're showing it passed with payload,
we're passing in the state.

92
00:05:41.780 --> 00:05:44.706
And then also num,
which is the payload, and

93
00:05:44.706 --> 00:05:48.750
we're incrementing that
value by the none here.

94
00:05:48.750 --> 00:05:50.050
Now this is a lot.

95
00:05:50.050 --> 00:05:54.680
And I'll use the next couple of slides to
go into much more detail about this, so

96
00:05:54.680 --> 00:06:00.730
that you don't feel like I'm overwhelming
you with just this information.

97
00:06:00.730 --> 00:06:05.520
In actions, we're showing it pass with
the payload, represented as asyncNum,

98
00:06:05.520 --> 00:06:06.350
which is an object.

99
00:06:07.350 --> 00:06:11.546
So we've got this commit,
we're passing an asyncNum.

100
00:06:11.546 --> 00:06:16.389
We have this set time out and
this asyncNum is an object so

101
00:06:16.389 --> 00:06:20.840
we can say asyncNum.by and
asyncNum.duration.

102
00:06:20.840 --> 00:06:23.060
It can also just be static
amounts if you want to.

103
00:06:24.210 --> 00:06:28.674
So, okay, let's go a little bit further
into actions cuz that was a lot of

104
00:06:28.674 --> 00:06:31.784
things for you to understand very,
very quickly.

105
00:06:31.784 --> 00:06:35.697
We have to pass in the context,
in actions.

106
00:06:35.697 --> 00:06:40.710
So context, we will use like
context.state, context.getter.

107
00:06:40.710 --> 00:06:44.550
The reason why we're not
using state directly is so

108
00:06:44.550 --> 00:06:49.780
that we avoid collisions because
there's a more complicated reason for

109
00:06:49.780 --> 00:06:53.990
this, but we have different modules and
then it can be name space differently.

110
00:06:53.990 --> 00:06:58.770
So in order to keep those from colliding
in actions, we have to pass in context.

111
00:06:58.770 --> 00:07:01.884
But we're actually gonna
abstract the context away.

112
00:07:01.884 --> 00:07:03.870
Typically, we don't use it like this.

113
00:07:03.870 --> 00:07:06.260
What we'll do is destructure it.

114
00:07:06.260 --> 00:07:11.240
And just say, instead of that,
we'll pass in parens,

115
00:07:11.240 --> 00:07:14.050
commit and then commit increment.

116
00:07:15.160 --> 00:07:19.455
So that's a little bit more legible,
a little bit clearer to read as well.

117
00:07:20.518 --> 00:07:24.462
&gt;&gt; Sarah Drasner: If we're going to do
some sort of asynchronous calculation from

118
00:07:24.462 --> 00:07:29.219
this, so we first we had that commit,
we're passing in commit increments.

119
00:07:29.219 --> 00:07:34.104
We have commit, we have setTimeout,
and we're committing increments,

120
00:07:34.104 --> 00:07:38.066
so increment would be a method
that we've already created.

121
00:07:38.066 --> 00:07:42.700
If we go back increment with something
that we made in mutation, so

122
00:07:42.700 --> 00:07:44.865
we're taking that mutation.

123
00:07:44.865 --> 00:07:49.685
In mutations, always have to be committed
when we start to use these in our

124
00:07:49.685 --> 00:07:54.509
component files, we're committing
the mutation in our templates, and

125
00:07:54.509 --> 00:07:58.501
we're also committing the mutation
in our actions as well.

126
00:07:58.501 --> 00:08:01.450
And so we're committing this increments.

127
00:08:01.450 --> 00:08:06.835
And we have it happening after one second,
if you setTimeout,

128
00:08:06.835 --> 00:08:13.270
we're waiting for one second, and
then we're doing that mutation.

129
00:08:13.270 --> 00:08:17.780
If we just did the mutation, and let's say
it's something that takes a long time, and

130
00:08:17.780 --> 00:08:22.090
we're not using it asynchronously, it
could actually block up our application.

131
00:08:22.090 --> 00:08:27.230
Because they can only synchronous,
and we wanna avoid that.

132
00:08:27.230 --> 00:08:31.018
Those actions become really useful for
those mutations because we don't wanna

133
00:08:31.018 --> 00:08:34.836
block up our application waiting for
something to happen.

134
00:08:34.836 --> 00:08:40.012
&gt;&gt; Sarah Drasner: So, if we're
gonna use this action in our actual

135
00:08:40.012 --> 00:08:44.950
component, we use a thing called dispatch.

136
00:08:44.950 --> 00:08:47.474
I will go over this part again.

137
00:08:47.474 --> 00:08:49.180
So I'm going to go over it here and

138
00:08:49.180 --> 00:08:53.610
then we're gonna go over how they're
each used again in a second.

139
00:08:53.610 --> 00:08:56.694
We have methods, and
then we're going to say asyncIncrement.

140
00:08:56.694 --> 00:09:00.240
I'm just calling it the same thing,
I could call this something else.

141
00:09:00.240 --> 00:09:02.433
I could call it go get tacos.

142
00:09:02.433 --> 00:09:08.200
And then we have
this.store.dispatch asyncIncrement.

143
00:09:08.200 --> 00:09:12.401
So I'm calling this and
what it's going to do is,

144
00:09:12.401 --> 00:09:17.701
it's going to then reach out and
it's going to set a time out and

145
00:09:17.701 --> 00:09:22.921
execute and commit that increment
after waiting one second.

146
00:09:22.921 --> 00:09:23.526
But we-.

147
00:09:23.526 --> 00:09:25.146
&gt;&gt; Speaker 3: [INAUDIBLE] some actions.

148
00:09:25.146 --> 00:09:26.029
&gt;&gt; Sarah Drasner: What's that, yeah?

149
00:09:26.029 --> 00:09:27.396
&gt;&gt; Speaker 3: So on the actions,

150
00:09:27.396 --> 00:09:32.102
are you kinda using set time out
as an illustrative thing to show.

151
00:09:32.102 --> 00:09:35.477
&gt;&gt; Sarah Drasner: Yeah, just because it's
a little bit easier than also showing all

152
00:09:35.477 --> 00:09:36.986
of the-
&gt;&gt; Speaker 2: [INAUDIBLE] an HTTP requires

153
00:09:36.986 --> 00:09:38.449
[INAUDIBLE] what you might need to do.

154
00:09:38.449 --> 00:09:41.743
&gt;&gt; Sarah Drasner: Yeah,
it's a lot to understand in general so

155
00:09:41.743 --> 00:09:45.037
the set time out is kind
of an abstraction, so

156
00:09:45.037 --> 00:09:49.128
you're not bogged down with
some of the other details.

157
00:09:51.907 --> 00:09:56.625
&gt;&gt; Sarah Drasner: So let's say we
need to change some of these values,

158
00:09:56.625 --> 00:09:59.770
maybe we need to pass in a payload.

159
00:09:59.770 --> 00:10:03.780
If we needed to pass in a different
duration, here we're just hard coding that

160
00:10:03.780 --> 00:10:06.783
one second, but
let's say we need a different duration.

161
00:10:06.783 --> 00:10:12.050
We would then create this payload here,
and we say duration.

162
00:10:12.050 --> 00:10:18.025
And then we would create an object
here where we say duration is 1,000.

163
00:10:18.025 --> 00:10:20.650
So that's how we update
it in those two places.

164
00:10:20.650 --> 00:10:22.400
So here, it's hard coded.

165
00:10:22.400 --> 00:10:25.149
We're just calling asyncIncrement,

166
00:10:25.149 --> 00:10:29.144
if we want to dispatch with a payload,
we have duration,

167
00:10:29.144 --> 00:10:34.078
and then we're passing in an object
to where we have duration, yeah?

168
00:10:34.078 --> 00:10:38.243
&gt;&gt; Speaker 3: If the object that
you're passing has only one property,

169
00:10:38.243 --> 00:10:42.663
does it just somehow [INAUDIBLE]
single property cuz seems to be

170
00:10:42.663 --> 00:10:44.707
passing an object with the-.

171
00:10:44.707 --> 00:10:47.340
&gt;&gt; Sarah Drasner: Yeah, I mean,
we can do it either way.

172
00:10:47.340 --> 00:10:50.347
We can pass in just the one, but

173
00:10:50.347 --> 00:10:56.363
if you need to build off of it in
any way and create more values,

174
00:10:56.363 --> 00:11:02.411
then it becomes easier to then
kind of update from that point.

175
00:11:02.411 --> 00:11:05.732
So if we need to do something
like this object, and

176
00:11:05.732 --> 00:11:10.793
that's actually kind of a typical use
case, I would say, is that we're not

177
00:11:10.793 --> 00:11:15.800
just passing in one argument to this,
it's a little bit easier to update.

178
00:11:15.800 --> 00:11:16.908
But that's-.

179
00:11:16.908 --> 00:11:19.110
&gt;&gt; Speaker 3: Like,
this is an exact example,

180
00:11:19.110 --> 00:11:24.392
it looks like you're passing an object
as the second parameter to setTimeout.

181
00:11:24.392 --> 00:11:26.381
&gt;&gt; Sarah Drasner: We are,
we're passing in an object and

182
00:11:26.381 --> 00:11:28.430
that's going to be the duration.

183
00:11:28.430 --> 00:11:31.771
So this is destructuring,
it's kind of an ES6.

184
00:11:31.771 --> 00:11:33.013
&gt;&gt; Speaker 3: So
it is destructuring right now.

185
00:11:33.013 --> 00:11:34.217
&gt;&gt; Sarah Drasner: Yeah,
it's destructuring.

186
00:11:36.208 --> 00:11:41.120
&gt;&gt; Sarah Drasner: And so then we can say,
asyncNum, we pass an asyncNum, and

187
00:11:41.120 --> 00:11:44.180
then we can update this to by and dur.

188
00:11:44.180 --> 00:11:49.600
So then we can say where
asyncNum.by asyncnum.dur and

189
00:11:49.600 --> 00:11:52.836
then we can update it in that way.

190
00:11:54.449 --> 00:11:58.674
&gt;&gt; Sarah Drasner: So, the way is that we
would use all of these things that we just

191
00:11:58.674 --> 00:12:04.150
talked about is that on the component
itself, we'd use computed for getters.

192
00:12:04.150 --> 00:12:08.730
This makes sense because it's kind of
similar to computed values anyway.

193
00:12:08.730 --> 00:12:13.714
We have our computed, and
we can use value directly in our code.

194
00:12:13.714 --> 00:12:18.589
We say we will return
this.store.getts.tripleCounter, or

195
00:12:18.589 --> 00:12:21.394
whatever you want for that example.

196
00:12:21.394 --> 00:12:26.806
But we basically use that as a computer
value because that's basically well,

197
00:12:26.806 --> 00:12:32.388
the same kind of dance that we're doing
is that different view on the same state.

198
00:12:32.388 --> 00:12:36.640
We'd use commit for mutations.

199
00:12:36.640 --> 00:12:39.780
So, anytime we use a mutation,
we use commit.

200
00:12:39.780 --> 00:12:44.120
Even if it's in the component,
even if it's in store.js.

201
00:12:44.120 --> 00:12:49.092
And then for asyncIncrement,
we use dispatch for the actions.

202
00:12:49.092 --> 00:12:54.010
So anytime we use an action in one of
our components, we use asyncIncrement.

203
00:12:54.010 --> 00:12:57.167
&gt;&gt; Sarah Drasner: So, I'm gonna bring
up our example where we are doing a few

204
00:12:57.167 --> 00:12:59.450
different things here.

205
00:12:59.450 --> 00:13:05.091
So we have got,
&gt;&gt; Sarah Drasner: I tried

206
00:13:05.091 --> 00:13:11.210
to separate these out as much as possible
so that they were easier to understand.

207
00:13:11.210 --> 00:13:16.372
So if we go into vuex-example,

208
00:13:16.372 --> 00:13:21.733
then I'll do subl first, then,

209
00:13:29.585 --> 00:13:32.599
&gt;&gt; Sarah Drasner: Here we have
the state from the store is 0.

210
00:13:32.599 --> 00:13:35.413
The getter for
triple counter from the store is 0.

211
00:13:35.413 --> 00:13:38.240
So that's the getter that
kind of computed value.

212
00:13:38.240 --> 00:13:40.830
Let's increment by two with a mutation.

213
00:13:40.830 --> 00:13:42.080
We're gonna increment by two.

214
00:13:42.080 --> 00:13:46.630
You can see that that getter is changing,
but it's always gonna be times three.

215
00:13:46.630 --> 00:13:52.380
Let's increment by two with an async,
or by ten, sorry, with an action async.

216
00:13:52.380 --> 00:13:55.790
So we wait one second, and
then we increment by ten.

217
00:13:55.790 --> 00:13:59.140
And this is a really simple adjustment
of store state with a component.

218
00:13:59.140 --> 00:14:03.610
I would never do this, but people do
do this, so I'm showing it to you.

219
00:14:03.610 --> 00:14:05.721
I don't think that you should do this.

220
00:14:05.721 --> 00:14:09.610
[LAUGH] But I've seen it in enough
applications now that I wanna call out to

221
00:14:09.610 --> 00:14:14.880
you, it's possible, but I don't think that
that's how you should be working with it.

222
00:14:14.880 --> 00:14:18.552
So, here we go into the source,
and were going into components.

223
00:14:18.552 --> 00:14:22.995
And I made a separate component for
each thing that you're gonna do, so

224
00:14:22.995 --> 00:14:25.821
that it is a little bit
easier to understand.

225
00:14:25.821 --> 00:14:27.920
So here's our store directory.

226
00:14:27.920 --> 00:14:30.128
Like I said, we have our store here and

227
00:14:30.128 --> 00:14:34.891
it's pretty similar to the stuff that we
mentioned that we would be working with.

228
00:14:34.891 --> 00:14:41.070
Then, in our main.js file, remember I
said, we're gonna import store from store.

229
00:14:41.070 --> 00:14:43.840
Here that is, and there's the store here.

230
00:14:43.840 --> 00:14:50.370
And then in the action,
let's start with the store, the app.

231
00:14:50.370 --> 00:14:55.833
So I can say, the state from
the store is span, and then state.

232
00:14:55.833 --> 00:14:58.671
And then in here,
in that computed value, again,

233
00:14:58.671 --> 00:15:01.378
we're just accessing
the state from the store.

234
00:15:01.378 --> 00:15:04.956
But I'm still gonna use a computed value
because that computed value's going to be

235
00:15:04.956 --> 00:15:07.080
cashed until the dependency has changed.

236
00:15:07.080 --> 00:15:08.590
So it's a good chance for

237
00:15:08.590 --> 00:15:13.630
me to use computed value just
returning that state from the store.

238
00:15:13.630 --> 00:15:19.339
So I'm gonna say state,
return this .store.state.counter.

239
00:15:19.339 --> 00:15:25.270
And it's going to be this, and
then $store, and we're able to use state.

240
00:15:25.270 --> 00:15:29.986
Remember we saw that earlier with getters,
we can use the state right here.

241
00:15:29.986 --> 00:15:33.220
Then in the getter,
we have something very similar.

242
00:15:33.220 --> 00:15:39.280
We have a computed value, we have tripled
this .$store.getters.tripleCounter and

243
00:15:39.280 --> 00:15:42.280
then we have triple passed in here.

244
00:15:42.280 --> 00:15:47.055
And then in mutation, we can increment
two with the mutation button

245
00:15:47.055 --> 00:15:51.340
@click is increment,
that's going to call this method here.

246
00:15:51.340 --> 00:15:54.944
And the method is
this.store.commit increment, and

247
00:15:54.944 --> 00:15:57.711
then we are passing in something like two.

248
00:15:57.711 --> 00:16:01.906
There's so many different ways that
we could actually use this mutation,

249
00:16:01.906 --> 00:16:03.383
that's just an example.

250
00:16:03.383 --> 00:16:08.716
And then in the action, we should actually

251
00:16:08.716 --> 00:16:15.836
say 10 with an action async,
button @click asynInc.

252
00:16:15.836 --> 00:16:19.274
And then in our methods we say, asynInc,

253
00:16:19.274 --> 00:16:23.907
this.store.dispatch aysncInc and
passing in 10.

254
00:16:23.907 --> 00:16:26.138
So if we go back to looking at that store,

255
00:16:26.138 --> 00:16:30.933
you can see that we're actually committing
this is our payload, this is our payload,

256
00:16:30.933 --> 00:16:33.381
those are the things
are we were passing in.

257
00:16:34.617 --> 00:16:38.360
&gt;&gt; Sarah Drasner: So
that is all organized in the repo for you.

258
00:16:38.360 --> 00:16:41.840
We just went over all
of these kind of stuff.

259
00:16:41.840 --> 00:16:45.470
So the getter is,
I kept these in different slides for you,

260
00:16:45.470 --> 00:16:48.095
the getter we're using a computed value.

261
00:16:48.095 --> 00:16:53.379
We're saying .store.getter.tripleCounter
and then store.js, we

262
00:16:53.379 --> 00:16:59.650
are using whatever logic we would like to
do for that different take on that value.

263
00:16:59.650 --> 00:17:04.040
We have a mutation methods
@click increment, and

264
00:17:04.040 --> 00:17:07.850
increment, we say this .store.commit.

265
00:17:07.850 --> 00:17:12.330
Remember, mutations are always committed,
and actions are always dispatched.

266
00:17:12.330 --> 00:17:16.355
So we're always going to commit
it this way in store.js.

267
00:17:16.355 --> 00:17:20.731
In async action,
we've got button asyncInc, and

268
00:17:20.731 --> 00:17:25.219
we've got store.dispatch and
this.store.js.

269
00:17:25.219 --> 00:17:30.533
And there are times when you have a lot of
stuff that you need to get from the store.

270
00:17:30.533 --> 00:17:33.028
And rewriting out new values for

271
00:17:33.028 --> 00:17:38.583
each one of these can get a little
arduous and painful and not at all dry.

272
00:17:38.583 --> 00:17:44.321
[LAUGH] So vue,
vuex allows us to do a thing called

273
00:17:44.321 --> 00:17:49.778
map getters, map actions, map mutations.

274
00:17:49.778 --> 00:17:55.600
So you would say in the same file
at import map actions from vuex.

275
00:17:55.600 --> 00:18:00.410
And then, I would be able to, with
the spread operator, say map actions, and

276
00:18:00.410 --> 00:18:03.940
then say all of the things that
I wanna go get from that source,

277
00:18:03.940 --> 00:18:06.480
so I don't have to keep
rewriting all of those values.

278
00:18:06.480 --> 00:18:09.820
Some people just write it
like this right away, so

279
00:18:09.820 --> 00:18:14.205
this maps this.increment to
this.store.commitincrement.

280
00:18:14.205 --> 00:18:17.310
Actually, that would be dispatch for
actions.

281
00:18:17.310 --> 00:18:22.509
So, this allows us to still make
our own computer properties,

282
00:18:22.509 --> 00:18:27.511
if we wish, because we could use these and
then reuse them and

283
00:18:27.511 --> 00:18:32.139
create another method below
them that uses that value.

284
00:18:32.139 --> 00:18:35.375
So it can make new computed
properties from these as well,

285
00:18:35.375 --> 00:18:38.060
if this doesn't fit our exact use case.

286
00:18:38.060 --> 00:18:39.600
So that's pretty great.

287
00:18:39.600 --> 00:18:44.870
One thing, though, is that spread
operators are not supported in all

288
00:18:44.870 --> 00:18:49.800
of these, even in newer babel,
necessarily, it depends on your build.

289
00:18:49.800 --> 00:18:56.707
So you might need babel-preset-stage-2, or
babel-plugin-transform-object-rest-spread.

290
00:18:56.707 --> 00:19:01.247
[LAUGH] So, you might have to yarn add,
or NPM install,

291
00:19:01.247 --> 00:19:05.220
one of these two to get
this working correctly.

292
00:19:06.663 --> 00:19:10.502
&gt;&gt; Sarah Drasner: So, if we're working
with this, if we're working with map

293
00:19:10.502 --> 00:19:15.473
actions, before we were doing that thing,
where we were saying increment and

294
00:19:15.473 --> 00:19:19.569
then comma five or whatever,
in that order to pass the payload.

295
00:19:19.569 --> 00:19:22.513
In this instance, we'd write @click and

296
00:19:22.513 --> 00:19:26.291
then the increment we'd pass
that in parens instead.

297
00:19:26.291 --> 00:19:30.254
Because we're not kind of using
it exactly the same way, so

298
00:19:30.254 --> 00:19:32.248
we pass the payload this way.

299
00:19:32.248 --> 00:19:35.680
And in store.js,
that's the same, that's there.

