WEBVTT

1
00:00:00.100 --> 00:00:01.730
&gt;&gt; Sean Larkin: So this leads into

2
00:00:02.890 --> 00:00:07.950
one of Webpack's signature features,
which is code splitting.

3
00:00:07.950 --> 00:00:08.450
No?

4
00:00:09.970 --> 00:00:12.129
Are you gonna load?

5
00:00:12.129 --> 00:00:13.058
Let me try that again

6
00:00:20.720 --> 00:00:22.348
&gt;&gt; Sean Larkin: Besides yesterday,

7
00:00:22.348 --> 00:00:25.157
who has used code splitting before?

8
00:00:25.157 --> 00:00:31.422
Okay, [COUGH] and when I say the dynamic
import statement, does that ring a bell?

9
00:00:31.422 --> 00:00:36.739
Okay, so you'll hear me refer to,
well, I'll talk about it afterwards.

10
00:00:38.040 --> 00:00:43.074
So I did a soul reach cuz I wanted
to do a talk about code splitting.

11
00:00:43.074 --> 00:00:47.751
And of course I went to Google and
I search and I found all WebPack docs,

12
00:00:47.751 --> 00:00:49.970
I was like dang it.

13
00:00:49.970 --> 00:00:55.962
I was looking for more historical content,
like who invented this idea, right.

14
00:00:55.962 --> 00:01:00.070
It turns out, as you heard from me
yesterday, it's Google Web Toolkit.

15
00:01:00.070 --> 00:01:03.106
Who's ever used Google Web Toolkit
in the Java world?

16
00:01:03.106 --> 00:01:04.400
You know, you understand.

17
00:01:06.090 --> 00:01:08.717
So they're the pioneers
of this technology.

18
00:01:08.717 --> 00:01:13.463
Is that you can take, and
if there's code that isn't

19
00:01:13.463 --> 00:01:18.328
used right away,
like a button event, or something.

20
00:01:18.328 --> 00:01:22.510
Google Web Toolkit would allow you
have this method called runAsync.

21
00:01:22.510 --> 00:01:27.512
And any of the code inside here wouldn't
actually run until that event occurred.

22
00:01:27.512 --> 00:01:33.003
And it would be separated into
a separate piece of JavaScript,

23
00:01:33.003 --> 00:01:36.223
that would be fetched dynamically.

24
00:01:36.223 --> 00:01:40.544
And so when Tobias fourth modules WebMake,

25
00:01:40.544 --> 00:01:46.517
the whole point was to bring
this technology in to bundlers.

26
00:01:46.517 --> 00:01:51.730
[COUGH] And so
I will beat this concept dead today.

27
00:01:52.800 --> 00:01:58.139
I want you to walk away like if you,
how would I say this?

28
00:01:58.139 --> 00:02:00.560
How would I be so
over dramatic saying this?

29
00:02:00.560 --> 00:02:05.476
This is the number one most important
thing that you can walk away with for

30
00:02:05.476 --> 00:02:08.875
enabling performance in
your web applications.

31
00:02:08.875 --> 00:02:13.590
If you learned anything, this is the one
thing that I wanna make sure that you

32
00:02:13.590 --> 00:02:15.955
know back and front, no matter what.

33
00:02:15.955 --> 00:02:19.915
And this definition is very like,
I'm very pretty sneaky about it,

34
00:02:19.915 --> 00:02:24.580
because you're going to hear a lot of
other tools, and a lot of their framework.

35
00:02:24.580 --> 00:02:29.661
So I gonna say like zero config
code splitting, that's not a thing.

36
00:02:29.661 --> 00:02:35.410
I mean, you'll hear somebody say,
other tools like roll up,

37
00:02:35.410 --> 00:02:40.610
they'll say we have code
splitting now out of the box.

38
00:02:40.610 --> 00:02:46.162
Really they don't, it's different,
and this is not to knock on those.

39
00:02:46.162 --> 00:02:51.774
Rich Harris is like a very close friend to
mine, it's just it's not the same thing.

40
00:02:51.774 --> 00:02:53.675
And you'll hear maybe like Ember.

41
00:02:53.675 --> 00:02:56.012
If you ever use Ember, they say,
yeah, we have code splitting,

42
00:02:56.012 --> 00:02:57.083
it's called Ember Islands.

43
00:02:57.083 --> 00:03:00.725
And no, that's just loading
something in an iframe dynamically.

44
00:03:01.745 --> 00:03:08.752
So code splitting to us means creating
&gt;&gt; Sean Larkin: At build time,

45
00:03:08.752 --> 00:03:14.457
separate chunks of JavaScript that
will only be loaded asynchronously.

46
00:03:14.457 --> 00:03:18.860
So, think about that everything
that we create is a build time.

47
00:03:18.860 --> 00:03:21.105
So when you use code splitting,

48
00:03:21.105 --> 00:03:25.106
you're creating these lazy
bundles in your build step.

49
00:03:25.106 --> 00:03:32.068
And they are accessed via webpack in
the code it transforms asynchronously.

50
00:03:32.068 --> 00:03:33.137
So how does it work?

51
00:03:33.137 --> 00:03:37.793
We're actually gonna go through this
entire process more in-depth after we

52
00:03:37.793 --> 00:03:39.379
talk about performance.

53
00:03:39.379 --> 00:03:44.230
But essentially, what webpack does under
the hood is it takes your entry point.

54
00:03:44.230 --> 00:03:46.991
It passes it to this
thing called resolvery,

55
00:03:46.991 --> 00:03:51.654
just make sure the file exist, cuz if
it doesn't you can parse it or read it.

56
00:03:51.654 --> 00:03:57.910
And we read the source code, we parse it
and we look for dependency statement.

57
00:03:57.910 --> 00:04:02.224
It's like imports requires
the common JS AMD syntax etc.

58
00:04:02.224 --> 00:04:06.400
And then we put this little object
models called dependencies on them.

59
00:04:06.400 --> 00:04:10.507
Well, all that we do differently with code
splitting is that it's a different type of

60
00:04:10.507 --> 00:04:11.202
dependency.

61
00:04:11.202 --> 00:04:16.473
It's another flavor and we leverage this
information to say, okay, at this point

62
00:04:16.473 --> 00:04:21.840
separate everything in the graph into a
separate bundle, flatten it and create it.

