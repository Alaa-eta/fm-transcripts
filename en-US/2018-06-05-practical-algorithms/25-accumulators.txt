[00:00:00]
>> Bianca Gandolfo: This is an accumulator,
>> Bianca Gandolfo: The accumulator technique. And what we do is as we build a solution, we keep passing it. So for example, let's do, what do you think I'm about to do? Can anyone guess what's gonna happen next?
>> Bianca Gandolfo: I'm gonna play the closure or, the closure game.

[00:00:32]
I keep calling it weird things, the call set game. So, my gosh, this is a lot of stuff going on but let's call it.
>> Bianca Gandolfo: We're gonna call, join elements, let's put it at the top. So our array
>> Bianca Gandolfo: Looks like this.
>> Speaker 2: Secret code.
>> Bianca Gandolfo: Smart.
>> Bianca Gandolfo: And then our joinString is this letter e.

[00:01:10]
So what this function is doing is it's going to join this array with the string here. So this array is going to be joined. So array.join is a native array method. So you can join a list with a comma for example, that's a common use case for the dot join.

[00:01:27]
So if you have a series of whatever, fruit, would be a common thing. You can do a common thing array dot join and it will say apples comma bananas comma oranges, like that. However, it's a little bit annoying, it's like a thing that's nice, but it's a little bit annoying.

[00:01:45]
Because an English, we wanna put the and in there. So you say apples, bananas, and oranges. And so you may wanna write your own pretty join where it keeps track of when you're the second to last one and will add an and in there as appropriate, with or without the Oxford comma, the programmer's choice.

[00:02:02]
Or I guess, it's probably the product person's choice or whoever is in charge of that, who knows? So we're doing that except we're doing recursively. And we're using a technique called the accumulator technique. And let's take a peek at how that works. So we have our two arguments that are passed in.

[00:02:24]
We're defining this function. So we're not pushing this function onto the call sack, cuz we have not called it yet. However, we're gonna call it down here. We're initializing it with a couple values. So we're gonna call this recurse function.
>> Bianca Gandolfo: So we're gonna push that. So our index is gonna be 0, and then the resultSoFar is an empty string.

[00:02:51]
So the first thing we wanna do is add the resultSoFar, which is empty string. We wanna give it the very first value which is s. So we're looking up into the parent scope, getting array at index, index is 0. So we're looking at s. Everyone following where we're getting s from?

[00:03:17]
So now resultSoFar is s, cuz empty string plus s is s, math. Just kidding, it's not math. So if the index is at the end of the array, this is our base case, do we get to the end? We're gonna return. So we're not there yet, index is 0.

[00:03:43]
So we're going to go into our recursive case. So we're going to return index + 1 key. We need to get closer to our base case which is when we have gone through the entire array. We're looping, we're just looping through this array. And at every index, we're giving it a string.

[00:04:06]
Cool, so now we are going to, so this index, so we're gonna call this, let's just
>> Bianca Gandolfo: Push it, so we're gonna be calling it with index 0 plus 1 which is 1, the resultSoFar which is our s, and then our joint string, remember, is the e. Again, we're reaching up and getting it from our parent scope.

[00:04:39]

>> Bianca Gandolfo: Okay, so this is where we left off.
>> Bianca Gandolfo: This is where we left off before. Wait, no, it's not. I'm lying to you. This is where we left off. Okay, so now we're hopping in. We have these things to worry about. And sorry, we're concatenating this. So actually, what we're passing is se.

[00:05:04]
You see where the accumulation is happening? We're accumulating by adding things together. And then we're passing it down into our recursion each time. So now our index is gonna be 1, our resultSoFar is se. Okay, so what is index at i? We're gonna have that one, so
>> Bianca Gandolfo: And this is a plus equal.

[00:05:37]
Right, so we're going to be building this string out. So we started with resultsSoFar which we passed in.
>> Bianca Gandolfo: And the next item in the array which is cr. So now we get secr, cool? Is index at the end of the array? And this -1, you guys are aware is cuz arrays are 0 index.

[00:06:04]
That's why we have to do the -1. It is not, so we're gonna go into this other case where we're going to call our recursion. What are the variables that we're calling with index + 1 is gonna be 2 and resultSoFar plus joined strings. So here's our resultSoFar.

[00:06:23]
And we're gonna reach out and get our joinString, which was e, and then pop this on again. Oops, that's not what we're popping on. And we're not even popping, sorry, we're pushing. We're pushing this onto the sack. Okay, so our index in this case is 2. Then we have the string that's being constructed.

[00:06:46]
So again, we're going to take our resultsSoFar which is this. And then, we're going to add the next one. A word is appearing, which is t. Are we at the end of our array? Index is 2, array.length-1 is, I don't know, one, two, three, four, is four. Or actually it's one, two, three, four, yeah it's four.

[00:07:16]
So we're not there, and we're gonna keep going. And as we loop through this array, we are going to be concatenating our string. And this is the accumulator method that each time after each loop, not only are we incrementing our index, but we're saving some results. And that result is getting passed and down to our recursion.

[00:07:41]
So this is some work that's getting done where we are doing some operation and
>> Bianca Gandolfo: We're also getting closer to our base case.
>> Bianca Gandolfo: Cool?
>> Speaker 2: The string at index three, is that t space cod rather than just t?
>> Bianca Gandolfo: Yeah, thank you.
>> Bianca Gandolfo: What could I say?

[00:08:14]
I don't know, so mysterious. Any questions about this? I'm not gonna keep going with it cuz it's gonna, because I think you kinda get the picture. The one thing to note before we move on is eventually, when we reach this, we're gonna return the resultSoFar which as you see is gonna be this string that we built up.

[00:08:37]
We accumulated through our recursive calls. And so that way we return that, and since we're returning this recursion, this will return. And then it will keep popping and popping and popping until we will finally return here. And that's gonna return where we initially called it.

