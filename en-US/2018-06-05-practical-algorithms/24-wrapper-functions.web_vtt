WEBVTT

1
00:00:00.040 --> 00:00:04.730
&gt;&gt; Bianca: So next we're going to talk
a little bit about two patterns for

2
00:00:04.730 --> 00:00:05.650
recursion.

3
00:00:05.650 --> 00:00:09.270
The first one is a wrapper function and
the second is the accumulator pattern.

4
00:00:12.470 --> 00:00:13.360
I love my own jokes.

5
00:00:15.760 --> 00:00:17.740
So awesome, okay.

6
00:00:17.740 --> 00:00:19.700
So back to our looping.

7
00:00:19.700 --> 00:00:24.560
We are going to loop first,
this is our original loop actually.

8
00:00:24.560 --> 00:00:27.830
So the loop that we already did
we are using a wrapper function.

9
00:00:29.230 --> 00:00:35.107
And in this one we are just
passing a values each time.

10
00:00:35.107 --> 00:00:42.080
So, let's investigate how this loop works
using our call back game, call stack game.

11
00:00:43.340 --> 00:00:46.230
All right, so let's call,
what are we gonna call it with?

12
00:00:46.230 --> 00:00:51.617
Let's just call it with one and three.
&gt;&gt; Bianca: So this is like our

13
00:00:51.617 --> 00:00:58.673
function's actually
being called over here.

14
00:00:58.673 --> 00:01:02.419
And then somewhere else inside your
execution environment of your browser,

15
00:01:02.419 --> 00:01:04.610
wherever you're running your JavaScript,

16
00:01:04.610 --> 00:01:11.090
this is happening,
&gt;&gt; Bianca: Over there.

17
00:01:11.090 --> 00:01:18.030
Okay, so i is one, and
three is the end, okay?

18
00:01:18.030 --> 00:01:20.444
So we're just gonna remove this console

19
00:01:20.444 --> 00:01:24.021
log.
&gt;&gt; Bianca: Just so

20
00:01:24.021 --> 00:01:25.540
that we have a little more space here.

21
00:01:26.810 --> 00:01:29.840
So we will start,

22
00:01:29.840 --> 00:01:34.710
so this is a lot shorter than the other
one but it's doing the exact same thing.

23
00:01:34.710 --> 00:01:39.330
So we are going to check.

24
00:01:39.330 --> 00:01:42.010
Is i greater than three?

25
00:01:42.010 --> 00:01:47.668
Yes, so we're gonna do the thing where
we add our function to the call stack.

26
00:01:47.668 --> 00:01:53.510
Cuz we're executing the function and we
are creating a new execution environment.

27
00:01:53.510 --> 00:01:57.377
All of these sculpt variables live in
a separate world from these sculpt

28
00:01:57.377 --> 00:01:58.500
variables.

29
00:01:58.500 --> 00:02:03.120
How then do we get i and
n in this execution context?

30
00:02:03.120 --> 00:02:04.630
We get that by passing it in.

31
00:02:04.630 --> 00:02:05.580
So what do we pass in?

32
00:02:06.730 --> 00:02:08.070
And I'm just gonna put our line there.

33
00:02:08.070 --> 00:02:11.744
We are passing in i + 1, which is 2.

34
00:02:11.744 --> 00:02:15.995
And then end,
we're not doing anything to it, 3.

35
00:02:15.995 --> 00:02:21.250
So we're just passing it through and
then, so we see i is 2, n is 3.

36
00:02:21.250 --> 00:02:23.210
That is still working for us.

37
00:02:23.210 --> 00:02:28.040
So we're going to call it again,
we're going to add it to our call stack.

38
00:02:28.040 --> 00:02:29.670
Again we're just leaving off right here,

39
00:02:29.670 --> 00:02:31.406
just a little reference
where we were before.

40
00:02:31.406 --> 00:02:37.189
So then, 2 [LAUGH]

41
00:02:37.189 --> 00:02:42.590
2 plus 1 is 3.

42
00:02:42.590 --> 00:02:46.020
Okay, so is 3 less than 3?

43
00:02:46.020 --> 00:02:48.680
No, so we have our implicit return.

44
00:02:48.680 --> 00:02:50.828
Implicit return, and we pop.

45
00:02:50.828 --> 00:02:55.890
Again, we are going to finish up
where we left off with this line.

46
00:02:57.180 --> 00:02:58.329
We're gonna move down here.

47
00:02:58.329 --> 00:03:00.940
We're gonna have implicit return and pop.

48
00:03:00.940 --> 00:03:02.919
We're gonna continue
here where this line is.

49
00:03:02.919 --> 00:03:05.389
And again, this is important
if we were doing more work.

50
00:03:05.389 --> 00:03:07.986
Which a lot of times you will be
doing more work in your recursive

51
00:03:07.986 --> 00:03:09.170
functions after this line.

52
00:03:09.170 --> 00:03:13.681
And it's important to recognize that
the stuff that happens after this line.

53
00:03:13.681 --> 00:03:15.225
Even though this is first call,

54
00:03:15.225 --> 00:03:19.410
anything that happens after this
line is actually happening last.

55
00:03:19.410 --> 00:03:22.190
So just keep that in mind.
&gt;&gt; Speaker 2: What's the purpose of

56
00:03:22.190 --> 00:03:24.510
this if it returns back undefined, right?

57
00:03:24.510 --> 00:03:27.780
So why are we even doing this?
&gt;&gt; Bianca: Just

58
00:03:27.780 --> 00:03:29.750
as an exercise.
&gt;&gt; Speaker 2: Okay.

59
00:03:29.750 --> 00:03:30.900
&gt;&gt; Bianca: On how we can loop and

60
00:03:30.900 --> 00:03:34.030
how we can pass things around and
get to a certain base case.

61
00:03:34.030 --> 00:03:38.650
Without having to worry about what is an
intermediary step that we need to take and

62
00:03:38.650 --> 00:03:43.200
what is our big picture
problem that we're solving.

63
00:03:43.200 --> 00:03:45.725
We're starting with a small problem
which is, let's just loop and

64
00:03:45.725 --> 00:03:48.820
console.log some stuff,
and see how this executes.

65
00:03:48.820 --> 00:03:53.610
And then we're gonna take this and
apply it to some sub problems, right?

66
00:03:53.610 --> 00:03:57.870
Recursion is just all about breaking
a bigger problem into sub problems,

67
00:03:57.870 --> 00:04:03.710
and calculating,
calculating for each loop.

68
00:04:04.830 --> 00:04:09.000
Okay, so implicit return pops it off.

69
00:04:10.280 --> 00:04:16.030
So this is doing the exact same thing as

70
00:04:18.570 --> 00:04:23.790
our other one that we were doing
earlier which is, defining a function.

71
00:04:23.790 --> 00:04:25.410
Calling it here.

72
00:04:25.410 --> 00:04:27.420
We're retaining access to the closure.

73
00:04:27.420 --> 00:04:31.650
So one is using a closure
with a recursion.

74
00:04:34.700 --> 00:04:35.900
This one is not.

75
00:04:37.020 --> 00:04:37.538
That's the difference.

76
00:04:46.241 --> 00:04:47.482
&gt;&gt; Bianca: Any questions about

77
00:04:47.482 --> 00:04:53.437
the difference between these approaches?
&gt;&gt; Speaker 2: So you

78
00:04:53.437 --> 00:04:56.250
said the first one has a closure in it?
&gt;&gt; Bianca: Yep.

79
00:04:57.640 --> 00:05:00.190
&gt;&gt; Speaker 2: But there's no returning of

80
00:05:00.190 --> 00:05:04.435
the function, though, right?
&gt;&gt; Bianca: No, yeah, that's a good point.

81
00:05:04.435 --> 00:05:09.910
So this closure is not,

82
00:05:09.910 --> 00:05:13.750
so a closure happens when you have
a function inside of a function, which,

83
00:05:13.750 --> 00:05:18.855
in JavaScript land is all the time,
so it's almost silly.

84
00:05:18.855 --> 00:05:27.170
However, things get interesting when you
return a function that is in a closure.

85
00:05:27.170 --> 00:05:29.760
So that's when we can do
the interesting thing with a memo wise,

86
00:05:29.760 --> 00:05:30.910
a generic memo wise.

87
00:05:30.910 --> 00:05:34.010
Is because we're returning that
function that has access to closure

88
00:05:34.010 --> 00:05:35.280
scoped variables.

89
00:05:35.280 --> 00:05:37.940
And so we have this interesting interface
where we can interact with scope

90
00:05:37.940 --> 00:05:38.770
variables.

91
00:05:38.770 --> 00:05:46.140
That are static and then we can create new
execution context for our child function.

92
00:05:46.140 --> 00:05:50.902
So interesting things can happen when we
do that, but you don't have to do that for

93
00:05:50.902 --> 00:05:53.800
it to be a closure.
&gt;&gt; Speaker 2: Mm, okay.

94
00:05:53.800 --> 00:05:56.854
&gt;&gt; Bianca: Yeah, and so end for example,

95
00:05:56.854 --> 00:06:02.729
the fact that we're referencing
end while we're in here,

96
00:06:02.729 --> 00:06:06.033
is accessing variable.

97
00:06:06.033 --> 00:06:08.709
Yeah, but
you don't need to know the vocab words,

98
00:06:08.709 --> 00:06:10.588
just need to be able to make it work.

99
00:06:10.588 --> 00:06:14.140
And understand how it runs when
you press this play button.

