WEBVTT

1
00:00:00.270 --> 00:00:01.080
&gt;&gt; Bianca: What about this one?

2
00:00:01.080 --> 00:00:05.005
So, we have a list of different
ways that you can greet someone in

3
00:00:05.005 --> 00:00:10.925
languages.
&gt;&gt; Bianca: What's

4
00:00:10.925 --> 00:00:12.410
the time complexity of push?

5
00:00:12.410 --> 00:00:16.410
We talked a little bit
about that constant.

6
00:00:16.410 --> 00:00:17.484
&gt;&gt; Speaker 2: Push, it goes to the end.

7
00:00:17.484 --> 00:00:18.158
&gt;&gt; Bianca: Mm-hm,

8
00:00:18.158 --> 00:00:22.500
yeah, we always just put it at the end,
not a big deal.

9
00:00:22.500 --> 00:00:27.450
Other languages, when you're actually
doing memory allocation, this might not

10
00:00:27.450 --> 00:00:32.090
be a constant, but in JavaScript, we can
reason that this is just a constant.

11
00:00:32.090 --> 00:00:36.160
We don't need to worry about initializing
an array of a certain length, and

12
00:00:36.160 --> 00:00:37.720
blah blah blah, and then keeping track,

13
00:00:37.720 --> 00:00:40.530
and then expanding if it
exceeds a certain length.

14
00:00:40.530 --> 00:00:43.280
So, we don't need to worry
about anything like that.

15
00:00:43.280 --> 00:00:46.404
Cool, so what about unshift,
what does unshift do?

16
00:00:46.404 --> 00:00:48.501
&gt;&gt; Speaker 2: Removes first.

17
00:00:48.501 --> 00:00:49.538
&gt;&gt; Bianca: It removes

18
00:00:49.538 --> 00:00:50.119
the?

19
00:00:50.119 --> 00:00:50.928
&gt;&gt; Speaker 2: First.

20
00:00:50.928 --> 00:00:51.733
&gt;&gt; Bianca: First.
&gt;&gt; Speaker 2: First.

21
00:00:51.733 --> 00:00:53.197
&gt;&gt; Bianca: Mm-hm, last.

22
00:00:53.197 --> 00:00:54.150
&gt;&gt; Speaker 2: Let's check,

23
00:00:54.150 --> 00:00:56.170
I always get confused.
&gt;&gt; Bianca: It adds one or

24
00:00:56.170 --> 00:00:58.085
more elements to the beginning
of the array, and

25
00:00:58.085 --> 00:01:03.311
returns the new length of the array.
&gt;&gt; Speaker 2: So,

26
00:01:03.311 --> 00:01:04.348
x-
&gt;&gt; Speaker 3: Isn't it shift at first?

27
00:01:04.348 --> 00:01:06.970
&gt;&gt; Bianca: Unshift, you're right, okay.

28
00:01:08.670 --> 00:01:12.633
That actually doesn't remove anything,
it just returns last,

29
00:01:12.633 --> 00:01:17.963
that's interesting.
&gt;&gt; Bianca: Okay, well,

30
00:01:23.269 --> 00:01:24.809
&gt;&gt; Bianca: So, if this is really last,

31
00:01:24.809 --> 00:01:31.287
then it's gonna be constant time.
&gt;&gt; Bianca: Cool,

32
00:01:31.287 --> 00:01:36.434
or, and then if we do,
&gt;&gt; Bianca: I always get these two,

33
00:01:36.434 --> 00:01:40.420
I never actually use these, does anyone
actually use this in their real life?

34
00:01:40.420 --> 00:01:45.435
Shift or unshift?
&gt;&gt; Bianca: So,

35
00:01:45.435 --> 00:01:49.225
if we're taking the first one off
the front, how does that change the time

36
00:01:49.225 --> 00:01:52.551
complexity of this operation?
&gt;&gt; Speaker 2: Linear?

37
00:01:52.551 --> 00:01:54.820
&gt;&gt; Bianca: Mm-hm, just like I said,

38
00:01:54.820 --> 00:01:56.890
we were going to,
if we take the first one off,

39
00:01:56.890 --> 00:01:59.640
then we need to shift
the second one into the first.

40
00:01:59.640 --> 00:02:01.410
The second to the first, or

41
00:02:01.410 --> 00:02:05.820
sorry, second to the first,
third to the second, fourth to the third.

42
00:02:05.820 --> 00:02:08.500
And then,
that's gonna be in number of operations,

43
00:02:08.500 --> 00:02:10.520
where in is the length of that array.

