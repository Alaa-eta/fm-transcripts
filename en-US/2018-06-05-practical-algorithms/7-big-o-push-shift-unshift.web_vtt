WEBVTT

1
00:00:00.270 --> 00:00:01.080
&gt;&gt; Bianca Gandolfo: What about this one?

2
00:00:01.080 --> 00:00:06.090
So we have a list of different ways
that you can greet someone in languages.

3
00:00:10.650 --> 00:00:12.410
What's the time complexity of push?

4
00:00:12.410 --> 00:00:15.160
We talked a little bit about that.

5
00:00:15.160 --> 00:00:16.330
Constant.

6
00:00:16.330 --> 00:00:17.425
&gt;&gt; Speaker 2: Closest goes to the end.

7
00:00:17.425 --> 00:00:18.810
&gt;&gt; Bianca Gandolfo: Mm-hm.

8
00:00:18.810 --> 00:00:21.300
Yep, we always just put it at the end.

9
00:00:21.300 --> 00:00:22.500
Not a big deal.

10
00:00:22.500 --> 00:00:27.450
Other languages when you're actually
doing memory allocation, this might not

11
00:00:27.450 --> 00:00:32.090
be a constant, but in Javascript,
we can reason that this is just constant.

12
00:00:32.090 --> 00:00:36.500
We don't need to worry about initializing
an array of a certain length and blah blah

13
00:00:36.500 --> 00:00:40.530
blah, and then keeping track and then
expanding if it exceeds a certain length.

14
00:00:40.530 --> 00:00:43.480
So we don't need to worry about
anything like that, cool.

15
00:00:44.560 --> 00:00:46.280
So what about unshift,
what does unshift do?

16
00:00:46.280 --> 00:00:48.900
&gt;&gt; Speaker 3: Removes angles.

17
00:00:48.900 --> 00:00:50.530
&gt;&gt; Bianca Gandolfo: It removes the-
&gt;&gt; Speaker 2: Lines.

18
00:00:50.530 --> 00:00:51.080
&gt;&gt; Speaker 3: First.

19
00:00:51.080 --> 00:00:51.710
&gt;&gt; Bianca Gandolfo: The first.

20
00:00:52.910 --> 00:00:54.320
&gt;&gt; Speaker 2: Mm, last.

21
00:00:54.320 --> 00:00:55.625
&gt;&gt; Bianca Gandolfo: Let's check.
I always get confused.

22
00:00:55.625 --> 00:00:56.299
&gt;&gt; Speaker 4: Mm-mm.
It adds one or

23
00:00:56.299 --> 00:00:58.356
more elements to the beginning
of the array and

24
00:00:58.356 --> 00:01:00.003
returns the new length of the array.

25
00:01:02.963 --> 00:01:06.142
&gt;&gt; Speaker 4: Is that the first-
&gt;&gt; Bianca Gandolfo: So x.unshift.

26
00:01:06.142 --> 00:01:08.565
Well you're right, okay.

27
00:01:08.565 --> 00:01:12.207
It actually doesn't remove anything,
it just returns the last.

28
00:01:12.207 --> 00:01:13.582
That's interesting.

29
00:01:15.198 --> 00:01:23.412
&gt;&gt; Bianca Gandolfo: Okay, well
&gt;&gt; Bianca Gandolfo: So

30
00:01:23.412 --> 00:01:26.998
if this is removing the last,
then it's gonna be constant time.

31
00:01:30.800 --> 00:01:32.330
&gt;&gt; Bianca Gandolfo: Cool.

32
00:01:32.330 --> 00:01:33.756
And then if we do.

33
00:01:35.728 --> 00:01:37.730
&gt;&gt; Bianca Gandolfo: I
never actually use these.

34
00:01:37.730 --> 00:01:40.420
Does anyone actually use
these in their real life?

35
00:01:40.420 --> 00:01:41.479
Shift or unshift.

36
00:01:45.289 --> 00:01:48.089
&gt;&gt; Bianca Gandolfo: So for
taking the first one off the front,

37
00:01:48.089 --> 00:01:52.173
how does that change the time
complexity of this operation?

38
00:01:52.173 --> 00:01:53.263
&gt;&gt; Speaker 4: Linear.

39
00:01:53.263 --> 00:01:54.150
&gt;&gt; Bianca Gandolfo: Mm-hm.

40
00:01:54.150 --> 00:01:56.481
Just like I said, we're going to,

41
00:01:56.481 --> 00:02:01.532
if we take the first one off then we need
to shift the second one into the first,

42
00:02:01.532 --> 00:02:06.506
the second to the first, third to
the second, fourth to the third, and then

43
00:02:06.506 --> 00:02:11.586
that's gonna be n number of operations,
where n is the length of that array.

