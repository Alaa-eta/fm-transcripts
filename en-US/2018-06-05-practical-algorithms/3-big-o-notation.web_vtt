WEBVTT

1
00:00:00.050 --> 00:00:03.650
&gt;&gt; Bianca Gandolfo: So
what if we have multiple expressions and

2
00:00:03.650 --> 00:00:06.410
we put them inside of a loop,
like how do we reason with

3
00:00:06.410 --> 00:00:09.828
a function that in the function
body has multiple expressions?

4
00:00:09.828 --> 00:00:17.240
And so if the way I think about it is if

5
00:00:17.240 --> 00:00:21.570
you have multiple expressions that are not
inside of a loop I just add them together.

6
00:00:21.570 --> 00:00:27.430
So if we have a bunch in constant time,
I would just say, 1 + 1 + 1 equals 3.

7
00:00:27.430 --> 00:00:32.370
However, if these things get put inside
of a loop, then you start to multiply it.

8
00:00:32.370 --> 00:00:38.270
So if you have a loop inside of a loop,
right, we have n, a loop is linear, right?

9
00:00:38.270 --> 00:00:40.740
We talked about that and
if we have a loop inside of a loop,

10
00:00:40.740 --> 00:00:42.500
it's n times n, which is then quadratic.

11
00:00:42.500 --> 00:00:46.820
If we have three loops,
n * n * n, however,

12
00:00:46.820 --> 00:00:49.960
we also need to think about what
is going on inside of those loops.

13
00:00:49.960 --> 00:00:55.543
So if, inside of the loop,
we're doing like recursion, you know,

14
00:00:55.543 --> 00:01:01.418
that could add some more things, and
so depending on the time complexity

15
00:01:01.418 --> 00:01:07.194
of that method that you're calling,
you need to just multiply it by n,

16
00:01:07.194 --> 00:01:11.782
inside of a loop,
&gt;&gt; Bianca Gandolfo: Otherwise just add it.

17
00:01:14.603 --> 00:01:16.167
&gt;&gt; Bianca Gandolfo: Does that make sense?

18
00:01:16.167 --> 00:01:17.666
Questions about this?

19
00:01:23.034 --> 00:01:24.628
&gt;&gt; Bianca Gandolfo: Okay.

20
00:01:27.515 --> 00:01:32.270
&gt;&gt; Bianca Gandolfo: Okay so,
what about of log n?

21
00:01:32.270 --> 00:01:34.210
So logarithmic time.

22
00:01:34.210 --> 00:01:37.946
So we don't really talk about logarithms
anymore after like, I don't know,

23
00:01:37.946 --> 00:01:39.920
high school or something.

24
00:01:39.920 --> 00:01:41.748
Unless you're a scientist,

25
00:01:41.748 --> 00:01:46.498
I guess logarithms are really important
if you deal with really big numbers or

26
00:01:46.498 --> 00:01:51.554
really small numbers, which is what we do
if we're analyzing large sets of data.

27
00:01:51.554 --> 00:01:55.098
I'm not going to teach you
logarithms right now, but

28
00:01:55.098 --> 00:01:58.894
all you need to know really is that,
logarhythmic time.

29
00:01:58.894 --> 00:02:02.998
So logarithms can have different bases,
you can have base ten,

30
00:02:02.998 --> 00:02:07.558
you can have base two, and you can
think about as your input increases,

31
00:02:07.558 --> 00:02:12.737
the work or the number of operations that
need to be done decreases by a fraction.

32
00:02:12.737 --> 00:02:18.617
So commonly if you are looping
through an array, you have a loop and

33
00:02:18.617 --> 00:02:23.560
then every time you loop,
you cut your problem in half.

34
00:02:24.860 --> 00:02:26.430
That is going to be a logarithmic time.

35
00:02:26.430 --> 00:02:31.331
So every time you loop, you only have
to do work on half of your data set,

36
00:02:31.331 --> 00:02:34.050
or a third, or some fraction, right?

37
00:02:34.050 --> 00:02:38.788
Logarithmic can be some fraction so, base
two will be divided by two, base three,

38
00:02:38.788 --> 00:02:40.490
three, ten, etc.

39
00:02:40.490 --> 00:02:43.966
So as it increases, the difficulty,

40
00:02:43.966 --> 00:02:48.320
the time complexity
increases at a fraction.

41
00:02:48.320 --> 00:02:52.260
So it grows really,
really slow, which is good.

42
00:02:52.260 --> 00:02:55.590
Which is why it's pretty close
here to constant time and

43
00:02:55.590 --> 00:02:57.750
it's often better than linear time.

44
00:02:57.750 --> 00:03:03.968
When we have a large enough data sets
that we care about this kinda stuff.

45
00:03:06.216 --> 00:03:09.002
&gt;&gt; Bianca Gandolfo: So
that's what you need to know about log n,

46
00:03:10.676 --> 00:03:11.229
&gt;&gt; Bianca Gandolfo: Cool, and

47
00:03:11.229 --> 00:03:12.910
there's also n log n.

48
00:03:12.910 --> 00:03:16.170
N log n happens when you have a loop,
and then you're also,

49
00:03:17.950 --> 00:03:22.950
you have a linear loop, and then you're
also looping and cutting it in half.

50
00:03:22.950 --> 00:03:24.910
So linear and
then you're cutting it in half.

51
00:03:24.910 --> 00:03:28.060
And you multiply them
together to make n log n.

52
00:03:28.060 --> 00:03:30.500
And we'll see an example of that later.

53
00:03:31.520 --> 00:03:35.449
So you'll put some examples
to these vocab terms.

54
00:03:36.650 --> 00:03:37.220
Okay.

55
00:03:37.220 --> 00:03:38.410
Questions.

56
00:03:38.410 --> 00:03:41.050
&gt;&gt; Speaker 2: So you mentioned different
bases and how is that determined?

57
00:03:41.050 --> 00:03:43.060
Does it say base two or base ten.

58
00:03:43.060 --> 00:03:43.619
Is that,
&gt;&gt; Bianca Gandolfo: It's

59
00:03:43.619 --> 00:03:44.200
when you divide it by.

60
00:03:44.200 --> 00:03:47.120
So if you're dividing your input by two,
there's base two.

61
00:03:47.120 --> 00:03:49.160
If you're dividing it by ten,
it's base ten.

62
00:03:49.160 --> 00:03:53.070
Typically, you're gonna see
it divided by two mostly.

63
00:03:53.070 --> 00:03:54.860
&gt;&gt; Speaker 2: Like a binary search.

64
00:03:54.860 --> 00:03:55.510
&gt;&gt; Bianca Gandolfo: Yeah, exactly.

65
00:03:55.510 --> 00:03:57.952
Binary search,
anything where you're cutting it in half.

66
00:03:59.519 --> 00:04:04.193
&gt;&gt; Bianca Gandolfo: Okay so
here's a little table to help us

67
00:04:04.193 --> 00:04:07.800
have some reference.

68
00:04:07.800 --> 00:04:11.900
So if we're just running a statement,
like returning a value for

69
00:04:11.900 --> 00:04:14.490
example is constant time.

70
00:04:14.490 --> 00:04:19.941
Any sort of value lookup, array object,
variable is gonna be constant time.

71
00:04:19.941 --> 00:04:24.954
Again, with the needle just going
directly to where it is in memory, easy.

72
00:04:24.954 --> 00:04:28.578
So loop, you can think of this as, loop
that cuts the problem in half every time.

73
00:04:28.578 --> 00:04:31.828
N is just gonna loop through all of them.

74
00:04:31.828 --> 00:04:35.177
So anything where you have to
look at everything at least once,

75
00:04:35.177 --> 00:04:36.829
is gonna be at least n, right.

76
00:04:38.670 --> 00:04:42.190
So n squared is gonna
be double nested loops.

77
00:04:42.190 --> 00:04:48.510
And we have triple nested loops
n to the three or n cubed.

78
00:04:48.510 --> 00:04:52.030
So just a word of caution.

79
00:04:52.030 --> 00:04:56.550
I'm giving you some tools to
make rough estimations here.

80
00:04:56.550 --> 00:05:00.770
This is not the full version of
how to calculate time complexity.

81
00:05:00.770 --> 00:05:05.510
Which is deeply mathematical and
really out of the scope of this workshop.

82
00:05:05.510 --> 00:05:09.369
But what you need to be
mindful of is what is n.

83
00:05:09.369 --> 00:05:13.172
Because you're going to have a lot of
different data points and your methods and

84
00:05:13.172 --> 00:05:14.090
your algorithms.

85
00:05:14.090 --> 00:05:17.130
So you want to make sure that you're
identifying what is the data set

86
00:05:17.130 --> 00:05:18.320
that's growing.

87
00:05:18.320 --> 00:05:21.680
And if you have more than one data
set that has a variable length,

88
00:05:21.680 --> 00:05:23.510
you're gonna need to take
that into consideration.

89
00:05:23.510 --> 00:05:27.087
That's something that,
when people get started with this,

90
00:05:27.087 --> 00:05:31.622
they just assume that n is always gonna be
the length of the array, or n is always

91
00:05:31.622 --> 00:05:36.159
gonna be a certain input, and it's not
necessarily so you need to really think

92
00:05:36.159 --> 00:05:40.734
about how your code is executing, and
what is changing as your input changes?

93
00:05:40.734 --> 00:05:43.196
&gt;&gt; Speaker 3: Can you
provide a concrete example?

94
00:05:43.196 --> 00:05:45.320
&gt;&gt; Bianca Gandolfo: Of what exactly?

95
00:05:45.320 --> 00:05:46.881
&gt;&gt; Speaker 3: What you're describing?

96
00:05:46.881 --> 00:05:49.221
&gt;&gt; Bianca Gandolfo: Of what I was
describing, so like when there,

97
00:05:49.221 --> 00:05:50.665
I will in our future slides.

98
00:05:50.665 --> 00:05:51.346
&gt;&gt; Speaker 3: Okay.

99
00:05:51.346 --> 00:05:54.558
&gt;&gt; Bianca Gandolfo: Yeah,
yeah, yeah, yeah.

100
00:05:54.558 --> 00:05:57.809
Yeah, and when we go through it I am going
to ask you, okay, what is exactly in here

101
00:05:57.809 --> 00:06:01.490
and we are going to think about like
what are the things that are changing?

102
00:06:01.490 --> 00:06:06.402
Cuz that's one of the common mistakes, is
assuming that n is a particular thing when

103
00:06:06.402 --> 00:06:13.620
it's not necessarily a particular,
&gt;&gt; Bianca Gandolfo: Input.

104
00:06:13.620 --> 00:06:15.310
And then we use m.

105
00:06:15.310 --> 00:06:20.150
Like we have another one, we'll use m to
call it, to make it really confusing,

106
00:06:20.150 --> 00:06:21.820
cuz those are hard to say.

