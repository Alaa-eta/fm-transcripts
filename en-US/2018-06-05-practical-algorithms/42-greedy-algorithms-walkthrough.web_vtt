WEBVTT

1
00:00:00.450 --> 00:00:03.537
&gt;&gt; Bianca: Let's just say that
you're a banker in Monopoly.

2
00:00:03.537 --> 00:00:08.560
Your family,
they just lose all their game pieces.

3
00:00:08.560 --> 00:00:10.797
So they only have three bills,
first of all.

4
00:00:10.797 --> 00:00:14.897
You have a $5 bill, a $10 bill,
and a $25 bill for some reason.

5
00:00:14.897 --> 00:00:17.073
And whenever you pay out your family,

6
00:00:17.073 --> 00:00:20.881
you want to make sure that you're
using the least number of bills.

7
00:00:20.881 --> 00:00:24.610
Because once you run out of bills,
Monopoly's over, okay?

8
00:00:24.610 --> 00:00:28.500
So how might you write an algorithm
to solve this problem?

9
00:00:28.500 --> 00:00:34.330
This is one version of the makeChange
problem, which is the same thing.

10
00:00:34.330 --> 00:00:36.440
You'll see different versions of this.

11
00:00:36.440 --> 00:00:40.780
Monopoly money or it'll be coins or
it'll be weights, something like that,

12
00:00:40.780 --> 00:00:45.890
where you need to minimize or
maximize something.

13
00:00:45.890 --> 00:00:51.650
And in this case, we wanna minimize the
number of coins that add up to our amount.

14
00:00:51.650 --> 00:00:55.097
So in this case,
it's always gonna be divisible by

15
00:00:55.097 --> 00:00:59.671
5.
&gt;&gt; Bianca: Because otherwise it

16
00:00:59.671 --> 00:01:00.453
wouldn't work.

17
00:01:00.453 --> 00:01:07.458
Okay, so if our input is 40, and
we would want an output of 3, right?

18
00:01:07.458 --> 00:01:10.759
So it would be 25, 10, and 5.

19
00:01:10.759 --> 00:01:15.254
And if our input is 35,
it would be 2, 25, and 10.

20
00:01:16.520 --> 00:01:21.812
So your task right now
is to write a function

21
00:01:21.812 --> 00:01:27.995
makeChange such that we
get the correct results.

22
00:01:32.187 --> 00:01:35.869
&gt;&gt; Bianca: All right, good luck.

23
00:01:54.729 --> 00:01:56.525
&gt;&gt; Bianca: All right, so

24
00:01:56.525 --> 00:02:01.316
the greedy solution to something like

25
00:02:01.316 --> 00:02:06.705
the makeChange problem is to simply choose

26
00:02:06.705 --> 00:02:12.708
the largest coin that you
can at any given time.

27
00:02:12.708 --> 00:02:16.418
So if you're starting with 40,
you're gonna pick the largest 1, 25.

28
00:02:16.418 --> 00:02:18.644
So you're gonna subtract 40- 25.

29
00:02:18.644 --> 00:02:19.818
What do you have left?

30
00:02:19.818 --> 00:02:24.970
15, so then you're gonna do that again,
subtract 10, subtract 5.

31
00:02:24.970 --> 00:02:26.926
So this is the greedy algorithm.

32
00:02:26.926 --> 00:02:28.840
And it seems reasonable, right?

33
00:02:28.840 --> 00:02:30.670
It works in this scenario.

34
00:02:30.670 --> 00:02:33.970
And for 40,
it's gonna give us the right answer.

35
00:02:35.610 --> 00:02:41.830
And here is how you might do that.

36
00:02:41.830 --> 00:02:43.933
You can sort the coins
first if you'd like.

37
00:02:43.933 --> 00:02:46.032
And then you're just
gonna do this while loop.

38
00:02:46.032 --> 00:02:50.262
While you have a certain amount,
you are gonna decrement

39
00:02:50.262 --> 00:02:54.688
the largest coin you possibly can and
keep going with that.

40
00:02:54.688 --> 00:02:58.201
Seems pretty straightforward.

