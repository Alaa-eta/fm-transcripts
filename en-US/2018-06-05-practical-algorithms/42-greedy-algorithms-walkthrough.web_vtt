WEBVTT

1
00:00:00.414 --> 00:00:03.739
&gt;&gt; Bianca: Let's just say that
you're a banker in monopoly.

2
00:00:03.739 --> 00:00:09.914
Your family they just lose all their game
pieces, so they only have three bills.

3
00:00:09.914 --> 00:00:15.055
First of all, you have a $5 bill, a $10
bill and a $25 bill, for some reason.

4
00:00:15.055 --> 00:00:19.634
And whenever you pay out your family,
you want to make sure that you're using

5
00:00:19.634 --> 00:00:24.720
the least number of bills because once you
run out of bills, monopoly is over, okay?

6
00:00:24.720 --> 00:00:28.666
So how might you write an algorithm
to solve this problem?

7
00:00:28.666 --> 00:00:33.776
This is one version of the make change
problem which is the same thing except,

8
00:00:33.776 --> 00:00:36.538
you'll see different versions of this.

9
00:00:36.538 --> 00:00:40.917
So monopoly money, or
it'll be coins, or it'll be weight,

10
00:00:40.917 --> 00:00:45.989
something like that where you need
to minimize or maximize something.

11
00:00:45.989 --> 00:00:51.790
And in this case, we want to minimize the
number of coins that add up to our amount.

12
00:00:51.790 --> 00:00:58.979
So in this case,
it's always going to be divisible by five.

13
00:00:58.979 --> 00:01:00.509
Because otherwise it wouldn't work.

14
00:01:00.509 --> 00:01:07.681
Okay, so if our input is 40 and
we would want an output of 3, right?

15
00:01:07.681 --> 00:01:11.778
So it would be 25, 10 and 5.

16
00:01:11.778 --> 00:01:16.780
And if our input is 35,
it would be 2, 25, and 10.

17
00:01:16.780 --> 00:01:21.388
So your task right now
is to write a function,

18
00:01:21.388 --> 00:01:26.374
make change such that we
get the correct result.

19
00:01:31.944 --> 00:01:32.848
&gt;&gt; Bianca: All right.

20
00:01:35.355 --> 00:01:35.855
&gt;&gt; Bianca: Good luck!

21
00:01:54.445 --> 00:02:00.490
&gt;&gt; Bianca: All right, so
the greedy solution to something

22
00:02:00.490 --> 00:02:05.627
like the make change problem is to simply

23
00:02:05.627 --> 00:02:12.592
choose the largest coin that
you can at any given time.

24
00:02:12.592 --> 00:02:16.947
So if you're starting with 40,
you're gonna pick the largest one, 25.

25
00:02:16.947 --> 00:02:19.617
So you're gonna subtract 40 minus 25.

26
00:02:19.617 --> 00:02:20.206
What do you have left?

27
00:02:20.206 --> 00:02:25.399
15, so then you're gonna do that again,
subtract 10, subtract 5.

28
00:02:25.399 --> 00:02:29.443
So this is the greedy algorithm,
and it seems reasonable, right?

29
00:02:29.443 --> 00:02:31.130
It works in this scenario.

30
00:02:31.130 --> 00:02:34.692
And for 40,
it's gonna give us the right answer.

31
00:02:34.692 --> 00:02:41.727
And here is how you might do that.

32
00:02:41.727 --> 00:02:43.326
You can sort the coins
first if you'd like.

33
00:02:43.326 --> 00:02:45.840
And then you're just
gonna do this while loop.

34
00:02:45.840 --> 00:02:50.616
While you have a certain amount,
you're going to decrement

35
00:02:50.616 --> 00:02:55.309
the largest coin you possibly can and
keep going with that.

36
00:02:55.309 --> 00:02:56.460
Seems pretty straight forward.

