WEBVTT

1
00:00:00.193 --> 00:00:02.668
&gt;&gt; Bianca Gandolfo: This
is an accumulator,

2
00:00:04.423 --> 00:00:07.063
&gt;&gt; Bianca Gandolfo: The accumulator

3
00:00:07.063 --> 00:00:09.139
technique.

4
00:00:09.139 --> 00:00:14.830
And what we do is as we build a solution,

5
00:00:14.830 --> 00:00:17.768
we keep passing it.

6
00:00:17.768 --> 00:00:22.170
So for example, let's do,
what do you think I'm about to do?

7
00:00:23.990 --> 00:00:26.812
Can anyone guess what's gonna happen next?

8
00:00:30.005 --> 00:00:32.860
&gt;&gt; Bianca Gandolfo: I'm gonna play
the closure or, the closure game.

9
00:00:32.860 --> 00:00:35.570
I keep calling it weird things,
the call set game.

10
00:00:37.280 --> 00:00:42.957
So, my gosh, this is a lot of
stuff going on but let's call it.

11
00:00:45.110 --> 00:00:50.496
&gt;&gt; Bianca Gandolfo: We're gonna call,
join elements, let's put it at the top.

12
00:00:50.496 --> 00:00:55.302
So our array
&gt;&gt; Bianca Gandolfo: Looks like this.

13
00:00:57.677 --> 00:00:58.924
&gt;&gt; Speaker 2: Secret code.

14
00:01:00.417 --> 00:01:01.582
&gt;&gt; Bianca Gandolfo: Smart.

15
00:01:03.598 --> 00:01:10.190
&gt;&gt; Bianca Gandolfo: And
then our joinString is this letter e.

16
00:01:10.190 --> 00:01:13.786
So what this function
is doing is it's going

17
00:01:13.786 --> 00:01:17.098
to join this array with the string here.

18
00:01:17.098 --> 00:01:18.640
So this array is going to be joined.

19
00:01:18.640 --> 00:01:22.338
So array.join is a native array method.

20
00:01:22.338 --> 00:01:26.685
So you can join a list with a comma for
example, that's a common use case for

21
00:01:26.685 --> 00:01:27.520
the dot join.

22
00:01:27.520 --> 00:01:33.297
So if you have a series of whatever,
fruit, would be a common thing.

23
00:01:33.297 --> 00:01:36.227
You can do a common
thing array dot join and

24
00:01:36.227 --> 00:01:40.610
it will say apples comma bananas
comma oranges, like that.

25
00:01:40.610 --> 00:01:43.946
However, it's a little bit annoying,
it's like a thing that's nice, but

26
00:01:43.946 --> 00:01:45.241
it's a little bit annoying.

27
00:01:45.241 --> 00:01:48.000
Because an English,
we wanna put the and in there.

28
00:01:48.000 --> 00:01:50.025
So you say apples, bananas, and oranges.

29
00:01:50.025 --> 00:01:53.460
And so
you may wanna write your own pretty join

30
00:01:53.460 --> 00:01:58.000
where it keeps track of when you're
the second to last one and will add an and

31
00:01:58.000 --> 00:02:02.370
in there as appropriate, with or without
the Oxford comma, the programmer's choice.

32
00:02:02.370 --> 00:02:05.221
Or I guess, it's probably
the product person's choice or

33
00:02:05.221 --> 00:02:07.225
whoever is in charge of that, who knows?

34
00:02:07.225 --> 00:02:11.093
So we're doing that except
we're doing recursively.

35
00:02:11.093 --> 00:02:14.510
And we're using a technique
called the accumulator technique.

36
00:02:15.640 --> 00:02:17.769
And let's take a peek at how that works.

37
00:02:19.400 --> 00:02:24.620
So we have our two arguments
that are passed in.

38
00:02:24.620 --> 00:02:26.470
We're defining this function.

39
00:02:26.470 --> 00:02:29.200
So we're not pushing this
function onto the call sack,

40
00:02:29.200 --> 00:02:30.430
cuz we have not called it yet.

41
00:02:30.430 --> 00:02:33.850
However, we're gonna call it down here.

42
00:02:33.850 --> 00:02:35.790
We're initializing it
with a couple values.

43
00:02:35.790 --> 00:02:38.126
So we're gonna call this recurse function.

44
00:02:41.510 --> 00:02:44.820
&gt;&gt; Bianca Gandolfo: So
we're gonna push that.

45
00:02:44.820 --> 00:02:50.530
So our index is gonna be 0, and
then the resultSoFar is an empty string.

46
00:02:51.790 --> 00:02:58.330
So the first thing we wanna do is add
the resultSoFar, which is empty string.

47
00:02:58.330 --> 00:03:02.190
We wanna give it the very
first value which is s.

48
00:03:02.190 --> 00:03:06.990
So we're looking up into the parent scope,

49
00:03:06.990 --> 00:03:11.870
getting array at index, index is 0.

50
00:03:11.870 --> 00:03:14.470
So we're looking at s.

51
00:03:14.470 --> 00:03:17.324
Everyone following where
we're getting s from?

52
00:03:17.324 --> 00:03:21.198
So now resultSoFar is s,

53
00:03:21.198 --> 00:03:26.738
cuz empty string plus s is s, math.

54
00:03:26.738 --> 00:03:28.237
Just kidding, it's not math.

55
00:03:28.237 --> 00:03:33.685
So if the index is at
the end of the array,

56
00:03:33.685 --> 00:03:40.090
this is our base case,
do we get to the end?

57
00:03:40.090 --> 00:03:41.350
We're gonna return.

58
00:03:41.350 --> 00:03:43.886
So we're not there yet, index is 0.

59
00:03:43.886 --> 00:03:48.260
So we're going to go
into our recursive case.

60
00:03:48.260 --> 00:03:51.727
So we're going to return index + 1 key.

61
00:03:51.727 --> 00:03:54.456
We need to get closer to our
base case which is when we

62
00:03:54.456 --> 00:03:56.520
have gone through the entire array.

63
00:03:56.520 --> 00:03:58.685
We're looping,
we're just looping through this array.

64
00:03:58.685 --> 00:04:02.204
And at every index,

65
00:04:02.204 --> 00:04:06.969
we're giving it a string.

66
00:04:06.969 --> 00:04:11.302
Cool, so now we are going to, so

67
00:04:11.302 --> 00:04:16.760
this index, so we're gonna call this,

68
00:04:16.760 --> 00:04:21.733
let's just
&gt;&gt; Bianca Gandolfo: Push it, so

69
00:04:21.733 --> 00:04:26.711
we're gonna be calling it with
index 0 plus 1 which is 1,

70
00:04:26.711 --> 00:04:33.800
the resultSoFar which is our s, and
then our joint string, remember, is the e.

71
00:04:33.800 --> 00:04:37.685
Again, we're reaching up and
getting it from our parent scope.

72
00:04:39.426 --> 00:04:42.452
&gt;&gt; Bianca Gandolfo: Okay, so
this is where we left off.

73
00:04:45.564 --> 00:04:47.780
&gt;&gt; Bianca Gandolfo: This is
where we left off before.

74
00:04:47.780 --> 00:04:48.998
Wait, no, it's not.

75
00:04:48.998 --> 00:04:50.877
I'm lying to you.

76
00:04:50.877 --> 00:04:52.980
This is where we left off.

77
00:04:52.980 --> 00:04:56.313
Okay, so now we're hopping in.

78
00:04:56.313 --> 00:04:59.676
We have these things to worry about.

79
00:04:59.676 --> 00:05:01.640
And sorry, we're concatenating this.

80
00:05:01.640 --> 00:05:04.969
So actually, what we're passing is se.

81
00:05:04.969 --> 00:05:09.130
You see where the accumulation
is happening?

82
00:05:09.130 --> 00:05:12.260
We're accumulating by
adding things together.

83
00:05:12.260 --> 00:05:16.450
And then we're passing it down
into our recursion each time.

84
00:05:18.120 --> 00:05:24.380
So now our index is gonna be 1,
our resultSoFar is se.

85
00:05:26.250 --> 00:05:28.718
Okay, so what is index at i?

86
00:05:28.718 --> 00:05:35.207
We're gonna have that one, so
&gt;&gt; Bianca Gandolfo: And

87
00:05:35.207 --> 00:05:36.330
this is a plus equal.

88
00:05:37.640 --> 00:05:41.750
Right, so we're going to be
building this string out.

89
00:05:41.750 --> 00:05:45.936
So we started with resultsSoFar
which we passed in.

90
00:05:47.466 --> 00:05:53.510
&gt;&gt; Bianca Gandolfo: And
the next item in the array which is cr.

91
00:05:53.510 --> 00:05:56.492
So now we get secr, cool?

92
00:05:56.492 --> 00:06:00.745
Is index at the end of the array?

93
00:06:00.745 --> 00:06:04.220
And this -1, you guys are aware
is cuz arrays are 0 index.

94
00:06:04.220 --> 00:06:06.422
That's why we have to do the -1.

95
00:06:06.422 --> 00:06:11.263
It is not, so we're gonna go
into this other case where we're

96
00:06:11.263 --> 00:06:13.599
going to call our recursion.

97
00:06:15.180 --> 00:06:19.195
What are the variables that we're
calling with index + 1 is gonna be 2 and

98
00:06:19.195 --> 00:06:21.120
resultSoFar plus joined strings.

99
00:06:21.120 --> 00:06:23.375
So here's our resultSoFar.

100
00:06:23.375 --> 00:06:27.445
And we're gonna reach out and
get our joinString,

101
00:06:27.445 --> 00:06:30.670
which was e, and then pop this on again.

102
00:06:30.670 --> 00:06:32.804
Oops, that's not what we're popping on.

103
00:06:32.804 --> 00:06:35.915
And we're not even popping,
sorry, we're pushing.

104
00:06:35.915 --> 00:06:39.450
We're pushing this onto the sack.

105
00:06:39.450 --> 00:06:42.805
Okay, so our index in this case is 2.

106
00:06:42.805 --> 00:06:46.484
Then we have the string
that's being constructed.

107
00:06:46.484 --> 00:06:53.423
So again, we're going to take
our resultsSoFar which is this.

108
00:06:53.423 --> 00:06:55.450
And then, we're going to add the next one.

109
00:06:57.420 --> 00:07:00.010
A word is appearing, which is t.

110
00:07:01.820 --> 00:07:03.740
Are we at the end of our array?

111
00:07:03.740 --> 00:07:10.087
Index is 2, array.length-1 is, I don't
know, one, two, three, four, is four.

112
00:07:10.087 --> 00:07:15.750
Or actually it's one, two,
three, four, yeah it's four.

113
00:07:16.880 --> 00:07:19.500
So we're not there, and
we're gonna keep going.

114
00:07:19.500 --> 00:07:26.360
And as we loop through this array, we
are going to be concatenating our string.

115
00:07:26.360 --> 00:07:31.050
And this is the accumulator method
that each time after each loop,

116
00:07:31.050 --> 00:07:36.257
not only are we incrementing our index,
but we're saving some results.

117
00:07:36.257 --> 00:07:41.450
And that result is getting passed and
down to our recursion.

118
00:07:41.450 --> 00:07:47.057
So this is some work
that's getting done where

119
00:07:47.057 --> 00:07:52.667
we are doing some operation and
&gt;&gt; Bianca Gandolfo: We're

120
00:07:52.667 --> 00:07:54.998
also getting closer to our base case.

121
00:07:57.583 --> 00:07:58.926
&gt;&gt; Bianca Gandolfo: Cool?

122
00:07:58.926 --> 00:08:04.613
&gt;&gt; Speaker 2: The string at index three,
is that t space cod rather than just t?

123
00:08:04.613 --> 00:08:05.576
&gt;&gt; Bianca Gandolfo: Yeah, thank you.

124
00:08:13.649 --> 00:08:14.676
&gt;&gt; Bianca Gandolfo: What could I say?

125
00:08:14.676 --> 00:08:17.718
I don't know, so mysterious.

126
00:08:17.718 --> 00:08:19.591
Any questions about this?

127
00:08:19.591 --> 00:08:22.513
I'm not gonna keep going
with it cuz it's gonna,

128
00:08:22.513 --> 00:08:25.030
because I think you kinda get the picture.

129
00:08:25.030 --> 00:08:28.951
The one thing to note before
we move on is eventually,

130
00:08:28.951 --> 00:08:33.746
when we reach this, we're gonna
return the resultSoFar which as

131
00:08:33.746 --> 00:08:37.251
you see is gonna be this
string that we built up.

132
00:08:37.251 --> 00:08:40.280
We accumulated through
our recursive calls.

133
00:08:40.280 --> 00:08:42.290
And so that way we return that, and

134
00:08:42.290 --> 00:08:44.890
since we're returning this recursion,
this will return.

135
00:08:44.890 --> 00:08:47.295
And then it will keep popping and
popping and

136
00:08:47.295 --> 00:08:49.980
popping until we will finally return here.

137
00:08:49.980 --> 00:08:53.526
And that's gonna return where
we initially called it.

