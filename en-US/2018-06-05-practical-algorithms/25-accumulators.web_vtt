WEBVTT

1
00:00:00.008 --> 00:00:06.536
&gt;&gt; Bianca: This is
an accumulator technique,

2
00:00:06.536 --> 00:00:11.757
and what we do is, as we build

3
00:00:11.757 --> 00:00:17.859
a solution, we keep passing it.

4
00:00:17.859 --> 00:00:19.877
So for example, let's do,

5
00:00:19.877 --> 00:00:25.537
what do you think I'm about to do?
&gt;&gt; Bianca: Can anyone guess what's

6
00:00:25.537 --> 00:00:32.446
gonna happen next?
&gt;&gt; Bianca: I'm gonna play the closure

7
00:00:32.446 --> 00:00:37.475
game, I keep calling it weird things,
the call set game.

8
00:00:37.475 --> 00:00:43.061
So, my gosh, this is a lot of
stuff going on, but let's call it.

9
00:00:45.401 --> 00:00:49.102
&gt;&gt; Bianca: We're gonna call joinElements,

10
00:00:49.102 --> 00:00:54.977
let's put it at the top, so
our array looks like this.

11
00:00:54.977 --> 00:01:00.809
&gt;&gt; [INAUDIBLE]

12
00:01:00.809 --> 00:01:01.543
&gt;&gt; Bianca: Smart.

13
00:01:04.092 --> 00:01:07.352
&gt;&gt; Bianca: And then our join string

14
00:01:07.352 --> 00:01:10.190
is this letter e.

15
00:01:10.190 --> 00:01:11.810
So what this function is doing is,

16
00:01:11.810 --> 00:01:17.190
it's going to join this
array with the string here.

17
00:01:17.190 --> 00:01:23.120
So this array is going to be joined, so
array.join is a native array method.

18
00:01:23.120 --> 00:01:26.870
So you can join a list with a comma, for
example, that's a common use case for

19
00:01:26.870 --> 00:01:27.520
the .join.

20
00:01:27.520 --> 00:01:33.270
So if you have a series of whatever,
fruit would be a common thing.

21
00:01:33.270 --> 00:01:37.625
You can do array.join, and
then it'll say apples comma,

22
00:01:37.625 --> 00:01:40.610
bananas comma, oranges, like that.

23
00:01:40.610 --> 00:01:44.162
However, it's a little bit annoying,
it's a thing that's nice, but

24
00:01:44.162 --> 00:01:45.628
it's a little bit annoying.

25
00:01:45.628 --> 00:01:49.755
Because in English, we wanna put the and
in there, so you say apples, bananas, and

26
00:01:49.755 --> 00:01:50.294
oranges.

27
00:01:50.294 --> 00:01:55.094
And so you may wanna write your own pretty
join where it keeps track of when you're

28
00:01:55.094 --> 00:01:59.270
at the second to last one and
will add an and in there, as appropriate.

29
00:01:59.270 --> 00:02:02.370
With or without the Oxford comma,
the programmer's choice.

30
00:02:02.370 --> 00:02:04.250
Or I guess it's probably
the product person's choice,

31
00:02:04.250 --> 00:02:06.060
or whoever's in charge of that, who knows.

32
00:02:07.420 --> 00:02:11.723
So we're doing that,
except we're doing it recursively, and

33
00:02:11.723 --> 00:02:15.880
we're using a technique called
the accumulator technique.

34
00:02:15.880 --> 00:02:19.264
And let's take a peek at how that works,
so

35
00:02:19.264 --> 00:02:24.800
we have our two,
&gt;&gt; Bianca: Arguments that are passed in,

36
00:02:24.800 --> 00:02:26.470
we're defining this function.

37
00:02:26.470 --> 00:02:29.200
So we're not pushing this
function onto the call stack

38
00:02:29.200 --> 00:02:30.430
cuz we have not called it yet.

39
00:02:30.430 --> 00:02:33.149
However, we're gonna call it down here,

40
00:02:33.149 --> 00:02:36.101
we're initializing it
with a couple values.

41
00:02:36.101 --> 00:02:42.283
So we're gonna call this recurse function.
&gt;&gt; Bianca: So

42
00:02:42.283 --> 00:02:47.004
we're gonna push that, so
our index is gonna be 0, and

43
00:02:47.004 --> 00:02:50.530
then the resultSoFar is an empty string.

44
00:02:51.790 --> 00:02:57.460
So the first thing we wanna
do is add the resultSoFar,

45
00:02:57.460 --> 00:03:02.190
which is the empty string, we wanna give
it the very first value, which is s.

46
00:03:02.190 --> 00:03:07.370
So we're looking up into the parent scope,

47
00:03:07.370 --> 00:03:11.857
getting array at index, index is 0.

48
00:03:11.857 --> 00:03:17.772
So we're looking at s, everyone
following where we're getting s from?

49
00:03:17.772 --> 00:03:21.818
So now the resultSoFar is s,

50
00:03:21.818 --> 00:03:26.882
cuz empty string plus s is s, math.

51
00:03:26.882 --> 00:03:31.411
I'm just kidding, it's not math.

52
00:03:31.411 --> 00:03:38.750
So if the index is at the end of
the array, this is our base case.

53
00:03:38.750 --> 00:03:41.872
Did we get to the end, we're gonna return.

54
00:03:41.872 --> 00:03:48.899
So we're not there yet, index is 0, so
we're going to go into our recursive case.

55
00:03:48.899 --> 00:03:53.777
So we're going to return index + 1, key,
we need to get closer to our base case,

56
00:03:53.777 --> 00:03:56.921
which is when we have gone
through the entire array.

57
00:03:56.921 --> 00:04:02.048
We're looping,
we're just looping through this array,

58
00:04:02.048 --> 00:04:06.155
and at every index,
we're giving it a string.

59
00:04:06.155 --> 00:04:10.816
Cool, so now we are going to, so

60
00:04:10.816 --> 00:04:16.689
this index, so we're gonna call this,

61
00:04:16.689 --> 00:04:22.093
let's just,
&gt;&gt; Bianca: Push it,

62
00:04:22.093 --> 00:04:27.090
so we're gonna be calling it
with index 0 + 1, which is 1.

63
00:04:27.090 --> 00:04:34.278
The resultSoFar, which is our s, and
then our join string, remember, is the e.

64
00:04:34.278 --> 00:04:35.841
Again, we're reaching up and

65
00:04:35.841 --> 00:04:40.658
getting it from our parent scope.
&gt;&gt; Bianca: Okay,

66
00:04:40.658 --> 00:04:45.613
so this is where we left off.
&gt;&gt; Bianca: This is

67
00:04:45.613 --> 00:04:50.828
where left off before, wait,
no, it's not, I lied to you.

68
00:04:50.828 --> 00:04:56.842
This is where we left off,
okay, so now we're hopping in.

69
00:04:56.842 --> 00:05:02.245
We have these things to worry about,
and sorry, we're concatenating this.

70
00:05:02.245 --> 00:05:09.687
So actually, what we're passing is se, you
see where the accumulation is happening?

71
00:05:09.687 --> 00:05:14.097
We're accumulating by
adding things together, and

72
00:05:14.097 --> 00:05:18.906
then we're passing it down
into our recursion each time.

73
00:05:18.906 --> 00:05:23.317
So now our index is gonna be 1,

74
00:05:23.317 --> 00:05:26.723
our resultSoFar is se.

75
00:05:26.723 --> 00:05:31.412
Okay, so what is index at i,
we're gonna have that one,

76
00:05:31.412 --> 00:05:36.131
so,
&gt;&gt; Bianca: And

77
00:05:36.131 --> 00:05:41.750
this is a +=, right, so
we're to be building this string out.

78
00:05:41.750 --> 00:05:45.485
So we started with resultSoFar
which we passed in.

79
00:05:49.837 --> 00:05:53.324
&gt;&gt; Bianca: And the next item in the array,

80
00:05:53.324 --> 00:05:56.955
which is cr, so now we get secr.

81
00:05:56.955 --> 00:06:02.461
Cool, is index at the end of the array,
and this minus 1, you guys are aware,

82
00:06:02.461 --> 00:06:07.230
is cuz arrays are zero index,
that's why we have to do the minus 1.

83
00:06:07.230 --> 00:06:08.116
It is not, so

84
00:06:08.116 --> 00:06:13.461
we're gonna go into this other case
where we're going to call our recursion.

85
00:06:13.461 --> 00:06:16.520
What are the variables
that we're calling with?

86
00:06:16.520 --> 00:06:21.100
Index plus 1 is gonna be 2, and
resultSoFar, plus join string.

87
00:06:21.100 --> 00:06:23.667
So here's our resultSoFar, and

88
00:06:23.667 --> 00:06:28.261
we're gonna reach up and
get our join string, which was e.

89
00:06:28.261 --> 00:06:34.249
And then pop this on again, oops,
that's not what we're popping on.

90
00:06:34.249 --> 00:06:40.108
We're not even popping, sorry,
we're pushing this onto the stack.

91
00:06:40.108 --> 00:06:47.058
So our index in this case is 2, then we
have the string that's being constructed.

92
00:06:47.058 --> 00:06:51.785
So again,
we're going to take our resultSoFar,

93
00:06:51.785 --> 00:06:57.805
which is this, and
then we're going to add the next one.

94
00:06:57.805 --> 00:07:03.740
A word is appearing, which is t,
are we at the end of our array?

95
00:07:03.740 --> 00:07:08.630
Index is 2, array.length minus 1 is 1,
2, 3, 4, it's 4?

96
00:07:08.630 --> 00:07:14.589
Actually, it's 1, 2, 3, 4, yeah, it's 4,

97
00:07:14.589 --> 00:07:20.174
so we're not there, and
we're gonna keep going.

98
00:07:20.174 --> 00:07:26.360
And as we loop through this array, we
are going to be concatenating our string.

99
00:07:26.360 --> 00:07:31.474
And this is the accumulator method
that each time, after each loop,

100
00:07:31.474 --> 00:07:36.863
not only are we incrementing our index,
but we're saving some result.

101
00:07:36.863 --> 00:07:40.354
And that result is getting
passed down into our recursion.

102
00:07:42.224 --> 00:07:44.736
&gt;&gt; Bianca: So this is some work that's

103
00:07:44.736 --> 00:07:49.213
getting done where we
are doing some operation,

104
00:07:49.213 --> 00:07:53.504
and,
&gt;&gt; Bianca: We are also getting

105
00:07:53.504 --> 00:07:58.280
closer to our base case.
&gt;&gt; Bianca: Cool,

106
00:07:58.280 --> 00:08:01.220
mm-hm?
&gt;&gt; Speaker 2: The string at index 3,

107
00:08:01.220 --> 00:08:04.644
is that t space cod rather than just t?

108
00:08:04.644 --> 00:08:05.367
Yeah, thank you.

109
00:08:13.860 --> 00:08:15.419
&gt;&gt; Bianca: What could it say,

110
00:08:15.419 --> 00:08:18.053
I don't know, so mysterious.

111
00:08:18.053 --> 00:08:19.728
Any questions about this?

112
00:08:19.728 --> 00:08:23.204
I'm not gonna keep going with
it cuz it's gonna, you guys,

113
00:08:23.204 --> 00:08:25.193
I think, kind of get the picture.

114
00:08:25.193 --> 00:08:29.773
The one thing to note before we move
on is, eventually, when we reach this,

115
00:08:29.773 --> 00:08:32.750
we're gonna return the resultSoFar.

116
00:08:32.750 --> 00:08:37.230
Which, as you see,
is gonna be this string that we built up,

117
00:08:37.230 --> 00:08:40.280
we accumulated through
our recursive calls.

118
00:08:40.280 --> 00:08:42.290
And so that will return that, and

119
00:08:42.290 --> 00:08:44.890
since we're returning this recursion,
this will be returned.

120
00:08:44.890 --> 00:08:49.854
And it will keep popping and
popping until we finally return here, and

121
00:08:49.854 --> 00:08:53.568
that's gonna return where
we initially called it.

