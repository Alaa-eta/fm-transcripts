[00:00:00]
>> Bianca: So what if we had multiple expressions, and we put them inside of a loop? How do we reason with a function that, in the function body, has multiple expressions? And so, the way I think about it is if you have multiple expressions that are not inside of a loop, I just add them together.

[00:00:21]
So if we have a bunch in constant time, I would just say 1 + 1 + 1 equals 3. However, if these things get put inside of a loop, then you start to multiply it. So if you have a loop inside of a loop, right? We have n.

[00:00:37]
A loop is linear, right? We talked about that. And then we have a loop inside of a loop, it's n times n, which is then quadratic. If we have three loops, n times n times n. However, we also need to think about what is going on inside of those loops.

[00:00:50]
So if inside of a loop, we're doing recursion, that can add some more things. And so depending on the time complexity of that method that you're calling, you need to just multiply it by n inside of a loop. Otherwise, just add it. Does that make sense? Questions about this?

[00:01:23]

>> Bianca: Okay.
>> Bianca: Okay, so what about O(logn)? So logarithmic time, so we don't really talk about logarithms anymore, after I don't know, high school or something. Unless you're a scientist, I guess logarithms are really important if you deal with really big numbers or really small numbers. Which is what we do, right, if we're analyzing large sets of data?

[00:01:51]
I'm not gonna teach you logarithms right now, but all you need to know really is that logarithmic times. Logarithms can have different bases. You can have base 10, you can have base 2 and you can think about as your input increases, the work or the number of operations that needs to be done decreases by a fraction.

[00:02:12]
So commonly, if you are looping through an array and you have a loop and then every time you loop, you cut your problem in half, that is going to be a logarithmic time. So every time you loop, you only have to do work on half of your data set, or a third, or some fraction.

[00:02:33]
So logarithmic can be some fraction, so base 2 will be divided by 2, base 3, 3, 10, 10, etc. So as it increases, the time complexity increases at a fraction, so it grows really, really slow, which is good. Which is why it's pretty close here to constant time and it's often better than linear time when we have a large enough data set that we care about this kind of stuff.

[00:03:07]

>> Bianca: So that's what you need to know about logn.
>> Bianca: Cool. And there's also nlogn. Nlogn happens when you have a loop and then you have a linear loop, and then you're also looping and cutting it in half. So linear, and then you're cutting it in half, and you multiply them together to make nlogn.

[00:03:28]
And we'll see an example of that later. So you'll put some examples to these vocab terms. Questions?
>> Speaker 2: So you mentioned different bases, how is that determined? It says base two or base ten, is that-
>> Bianca: It's what you divide it by. So if you're dividing your input by two, it's base two.

[00:03:47]
If you're dividing by ten, it's base ten. Typically you're gonna see it divided by two, mostly.
>> Speaker 2: Kinda like a binary search?
>> Bianca: Yeah, exactly. Binary search, anything where you're cutting it in half. Okay, so here's a little table to help us have some reference. So if we're just running a statement, like returning a value for example, there's constant time.

[00:04:14]
Any sort of value look-up, array, object. Variable is going to be constant time. Again, with the needle going directly to where it is in memory, easy. So loop, you can think of this as loop that cuts the problem in half every time. And it's just gonna loop through all of them.

[00:04:32]
So anything where you have to look at everything at least once is going to be be at least n, right? So n squared is gonna be double nested loops and then we have triple nested loops of n to the three, or n cubed. So just a word of caution, I'm giving you some tools to make rough estimations here.

[00:04:56]
This is not the full version of how to calculate time complexity, which is deeply mathematical and really out of the scope of this workshop. But what you need to be mindful of is what is n, because you're gonna have a lot of different data points in your methods or in your algorithms, and so you wanna make sure that you're identifying what is the data set that's growing.

[00:05:18]
And if you have more than one data set that has a variable length, you're gonna need to take that into consideration. That's something that when people get started with this, they just assume that n is always gonna be the length of the array, or n is always gonna be a certain input, and it's not necessarily so.

[00:05:32]
You need to really think about how your code is executing and what is changing as your input changes, mm-hm?
>> Speaker 3: Can you provide a concrete example?
>> Bianca: Of what exactly?
>> Speaker 3: What you're describing.
>> Bianca: Of what I'm describing. So I will in our future slides.
>> Speaker 3: Okay.
>> Bianca: Yeah, yeah, yeah, yeah.

[00:05:54]
Yeah, and when we go through it, I'm gonna ask you, okay, what exactly is in here? And we're gonna think about, what are the things that are changing? Because that's one of the common mistakes, is assuming that n is a particular thing, when it's not necessarily a particular input.

[00:06:13]
And then we use m to call it, to make it really confusing, because those are hard to say.

