WEBVTT

1
00:00:00.650 --> 00:00:04.702
&gt;&gt; Brian Holt: So now I want you to create
a new file, and save it and it's going to

2
00:00:04.702 --> 00:00:09.732
go not in the js directory, it's gonna go
in the base directory for our project.

3
00:00:11.626 --> 00:00:14.248
&gt;&gt; Brian Holt: And it's going to be called

4
00:00:14.248 --> 00:00:20.945
.babblerc
&gt;&gt; Brian Holt: Okay,

5
00:00:20.945 --> 00:00:23.511
this is how we are going to
configure babble which is actually

6
00:00:23.511 --> 00:00:25.340
gonna do the transformations on our code.

7
00:00:29.321 --> 00:00:32.523
&gt;&gt; Brian Holt: So there is a couple
of things we are gonna be doing here.

8
00:00:32.523 --> 00:00:34.890
We are gonna be using
what are called presets.

9
00:00:39.473 --> 00:00:41.460
&gt;&gt; Brian Holt: Gonna be using two of them.

10
00:00:41.460 --> 00:00:43.860
The first one is pretty easy,
it's called react.

11
00:00:45.220 --> 00:00:49.830
This is actually what's going to
do all of our JSX translation.

12
00:00:49.830 --> 00:00:55.040
So we're gonna write JSX and
that's gonna get transformed to JS Also

13
00:00:55.040 --> 00:00:59.850
little known fact about this preset but it
also includes the flow of transformations.

14
00:00:59.850 --> 00:01:02.750
So when we go to do flow,
we don't have to do anything else.

15
00:01:02.750 --> 00:01:04.054
It's already included with react.

16
00:01:06.791 --> 00:01:08.950
&gt;&gt; Brian Holt: Okay, so
that's the first one.

17
00:01:09.990 --> 00:01:12.120
And so to talk about presets,

18
00:01:12.120 --> 00:01:17.248
the way the Babel works,Babel is
a transpiler, or compiler, right?

19
00:01:17.248 --> 00:01:18.819
You're gonna take one set of source and

20
00:01:18.819 --> 00:01:21.960
you're gonna transform it
into something else, right?

21
00:01:21.960 --> 00:01:25.280
Each kind of transformation
is called a plugin, right?

22
00:01:26.300 --> 00:01:28.180
So for example, arrow functions, right?

23
00:01:28.180 --> 00:01:29.840
Everyone loves arrow functions, right?

24
00:01:30.850 --> 00:01:31.671
Yeah, I thought so.

25
00:01:31.671 --> 00:01:35.870
[LAUGH]
Arrow functions

26
00:01:35.870 --> 00:01:37.450
is one kind of plug-in, right?

27
00:01:37.450 --> 00:01:39.500
So you have a plug-in that
takes arrow functions and

28
00:01:39.500 --> 00:01:41.940
it transforms it into functions.

29
00:01:41.940 --> 00:01:47.973
So that individual transformation
is called a plug-in.

30
00:01:47.973 --> 00:01:52.030
It would be burdensome to include every
single plug-in that we want, right?

31
00:01:52.030 --> 00:01:55.170
If you try to include
every transformation for

32
00:01:55.170 --> 00:02:00.310
ES6 to ES5 that's something like,
I can't even estimate.

33
00:02:00.310 --> 00:02:02.110
I'm guessing it's over 50 plugins though.

34
00:02:02.110 --> 00:02:05.010
So including each of those
plugins is really annoying and

35
00:02:05.010 --> 00:02:07.320
not something we necessarily wanna do.

36
00:02:07.320 --> 00:02:10.770
So they had the foresight to create
things that are called presets,

37
00:02:10.770 --> 00:02:14.850
and a preset is a group of plugins.

38
00:02:14.850 --> 00:02:16.030
That's really all it is.

39
00:02:16.030 --> 00:02:22.880
So react, I believe, is three plugins.

40
00:02:22.880 --> 00:02:27.530
It's the jsx one, it's another one for, so

41
00:02:27.530 --> 00:02:30.300
one of them is so
that Babel can understand JSX.

42
00:02:30.300 --> 00:02:34.210
One of them is so that it can transform
JSX and then the third one is flow.

43
00:02:35.600 --> 00:02:39.491
So I think that's all
that's in the react one.

44
00:02:39.491 --> 00:02:43.632
A lot of times, you'll see people do
things like here it says, like ES2015,

45
00:02:43.632 --> 00:02:44.900
which is totally valid.

46
00:02:44.900 --> 00:02:49.690
You can put that and that would
transform everything from ES6 or ES2015,

47
00:02:49.690 --> 00:02:56.230
those are synonymous terms to ES5, right?

48
00:02:56.230 --> 00:02:58.790
The problem with this is that we are
getting to the point where the browser is

49
00:02:58.790 --> 00:03:01.690
going to understand a lot of ES6, right?

50
00:03:01.690 --> 00:03:05.682
So, at no point we should
be transferring ES6 to ES5.

51
00:03:05.682 --> 00:03:12.610
So, it's kinda moving targeted
browsers to better and better, also.

52
00:03:12.610 --> 00:03:14.620
That we're introducing more and
more features, right?

53
00:03:14.620 --> 00:03:17.934
Because there's ES2016, 2017, 2018.

54
00:03:17.934 --> 00:03:19.728
Yeah, 2018 just standardized.

55
00:03:19.728 --> 00:03:22.570
So, like, there's all these new
features coming all the time.

56
00:03:22.570 --> 00:03:26.280
So, as you may imagine, trying to keep
this up to date is impossible, right,

57
00:03:26.280 --> 00:03:27.540
because it's always moving.

58
00:03:27.540 --> 00:03:30.660
It's, unless you're always on
that repo every single day,

59
00:03:30.660 --> 00:03:33.750
which I'm not, I don't know if you are,
but I'm definitely not.

60
00:03:33.750 --> 00:03:34.280
It's kinda a pain.

61
00:03:35.880 --> 00:03:42.080
So the current maintainer of Babel,

62
00:03:42.080 --> 00:03:47.490
Henry Zoo or left pad as he's known as
on Twitter, came up with this idea for

63
00:03:47.490 --> 00:03:52.950
something called env, e-n-v.

64
00:03:52.950 --> 00:03:53.460
I love env.

65
00:03:53.460 --> 00:03:57.800
This is one of my favorite
features of Babel.

66
00:03:57.800 --> 00:04:02.920
This is basically the like auto prefixer,
but for JavaScript.

67
00:04:04.570 --> 00:04:13.260
So specifically, what we're gonna do here
is we're gonna put this in an array.

68
00:04:13.260 --> 00:04:15.539
And we're gonna make this an object.

69
00:04:19.095 --> 00:04:20.971
&gt;&gt; Brian Holt: And
let's put that in the same line.

70
00:04:22.335 --> 00:04:25.572
&gt;&gt; Brian Holt: Going to say, targets.

71
00:04:29.985 --> 00:04:32.310
&gt;&gt; Brian Holt: Going to say browsers.

72
00:04:33.930 --> 00:04:38.043
And what we're gonna set,
tell it to target the last 2 versions.

73
00:04:41.651 --> 00:04:45.130
&gt;&gt; Brian Holt: So what this is going
to do is it's a moving target.

74
00:04:45.130 --> 00:04:49.052
Basically, you are telling it
as the browsers keep improving,

75
00:04:49.052 --> 00:04:51.167
keep moving that target forward.

76
00:04:51.167 --> 00:04:54.510
So this is gonna support, I don't know,
what are we on for Chrome right now?

77
00:04:55.760 --> 00:04:56.840
Not Mac.

78
00:04:56.840 --> 00:04:57.744
About Chrome.

79
00:04:59.725 --> 00:05:02.530
&gt;&gt; Brian Holt: So, we're on version
58 right now for Chrome, right?

80
00:05:02.530 --> 00:05:04.290
So it's gonna target 58 and 57, right?

81
00:05:05.340 --> 00:05:09.916
And then, when 59 is released,
it's going to target 59 and 58, right?

82
00:05:09.916 --> 00:05:11.380
And it's going to keep
moving that forward.

83
00:05:11.380 --> 00:05:14.390
Same for Firefox, Edge,
Safari, and all those.

84
00:05:15.560 --> 00:05:18.330
And the way it does it, it does, there's
another package called compat table, and

85
00:05:18.330 --> 00:05:20.100
it's just constantly
reading from compat table.

86
00:05:23.000 --> 00:05:26.000
So there's a bunch of things
you can do with this.

87
00:05:26.000 --> 00:05:32.690
You can say, something like chrome
like 56 or something like that.

88
00:05:32.690 --> 00:05:35.280
I don't remember the exact syntax,
but it is similar to that.

89
00:05:36.430 --> 00:05:37.910
Or you can pin it at a version as well.

90
00:05:40.720 --> 00:05:44.430
So really, really cool I definitely
suggest that if you're doing something

91
00:05:44.430 --> 00:05:47.330
like transpiring ES2015 or
something like that.

92
00:05:47.330 --> 00:05:50.180
That you migrate to env this is going to
be better for you it's going to make your

93
00:05:50.180 --> 00:05:52.530
bundles smaller and
it's going to make you go faster for sure.

94
00:05:54.150 --> 00:05:57.750
It's basically code that updates itself
which that's like my favorite thing,

95
00:05:57.750 --> 00:05:58.709
a code that I don't have to write.

96
00:06:01.540 --> 00:06:04.518
Okay, any questions about env?

97
00:06:04.518 --> 00:06:07.690
You can also target things like node,
right?

98
00:06:07.690 --> 00:06:11.193
You can it node versions to target,
because sometimes you need babel for node,

99
00:06:11.193 --> 00:06:12.460
in fact we will later today.

100
00:06:13.550 --> 00:06:21.670
You can tell it to target things like IoT,
different IoT versions of JavaScript.

101
00:06:21.670 --> 00:06:22.740
Various different cool stuff.

102
00:06:24.620 --> 00:06:29.500
Okay, the next thing,
something that I personally do.

103
00:06:29.500 --> 00:06:31.480
I leave it to your discussion whether or
not you want to do it.

104
00:06:31.480 --> 00:06:37.740
I'm gonna say loose calling true, set
this in JSON so you can see this better.

105
00:06:41.770 --> 00:06:48.800
So a lot of these different ES6
features and ES6 and beyond.

106
00:06:50.000 --> 00:06:55.010
In order to be spec compliant, that is
to cover every single use case, the code

107
00:06:55.010 --> 00:06:59.020
goes from really small to very large
just by handling all of the etch cases.

108
00:07:00.100 --> 00:07:01.920
Most of the time when you're
writing these features,

109
00:07:01.920 --> 00:07:06.290
you're not having complex interaction
of classes versus Generators, right?

110
00:07:06.290 --> 00:07:09.820
You don't run into these crazy edge
cases if they do have to provide for.

111
00:07:09.820 --> 00:07:11.530
So that's what loose mode is saying.

112
00:07:11.530 --> 00:07:16.200
It's saying hey, I'm not doing super
crazy stuff with the edge cases.

113
00:07:16.200 --> 00:07:20.110
Go ahead and include the smaller bit of
code rather than the huge bit of code.

114
00:07:20.110 --> 00:07:23.940
Now, as you might imagine, this is
a double-edged sword for sure, right?

115
00:07:23.940 --> 00:07:26.920
Sometimes you actually might be
running into those Etch cases, and so

116
00:07:26.920 --> 00:07:31.080
if you are, when env moves you to
a later version of JavaScript.

117
00:07:31.080 --> 00:07:35.920
Where it's moving you from the transpiled
version to the native version and you're

118
00:07:35.920 --> 00:07:41.190
running into that etch case, you can have
the interaction not be the same, right?

119
00:07:41.190 --> 00:07:42.529
There's potential for breakage here.

120
00:07:44.410 --> 00:07:46.750
This has not bitten me in the ass yet.

121
00:07:46.750 --> 00:07:48.870
So, so far so good.

122
00:07:48.870 --> 00:07:52.120
So again, do so at your own discretion.

123
00:07:56.660 --> 00:07:59.980
For example, this workshop today will
be totally fine if you put false.

124
00:07:59.980 --> 00:08:02.392
Your bundle's just going to be a little
bit bigger because you're going to

125
00:08:02.392 --> 00:08:03.052
be including more.

126
00:08:06.258 --> 00:08:12.584
&gt;&gt; Brian Holt: Lastly, we're gonna say
modules and we're gonna say false here.

127
00:08:15.373 --> 00:08:18.110
&gt;&gt; Brian Holt: And there's a very
specific reason that we're doing this.

128
00:08:18.110 --> 00:08:23.520
We're telling battle to
not transpile the modules.

129
00:08:23.520 --> 00:08:28.251
So typically,
what would happen here is battle

130
00:08:28.251 --> 00:08:32.155
migrate this import React from react,

131
00:08:32.155 --> 00:08:38.330
it would transpire to const
react = require ('react').

132
00:08:38.330 --> 00:08:43.193
This used to be requires for
things like webpack one to work, but

133
00:08:43.193 --> 00:08:47.710
we're using webpack two, and
webback two is ES6 enable.

134
00:08:50.730 --> 00:08:53.598
So this is basically telling Babel to say,

135
00:08:53.598 --> 00:08:58.500
Babel don't touch the modules,
webpack is gonns worry about it.

136
00:08:58.500 --> 00:09:00.809
That's what this particular
thing here means.

137
00:09:02.570 --> 00:09:06.945
Because babel is going to run
on the JavaScript code before

138
00:09:06.945 --> 00:09:09.690
webpack starts putting it together, right?

139
00:09:09.690 --> 00:09:13.380
So you're just telling Babels, skip
the modules, let webpack worry about it.

140
00:09:15.130 --> 00:09:16.036
Any questions about that?

141
00:09:18.115 --> 00:09:20.020
&gt;&gt; Brian Holt: The reason
why we're doing this, is so

142
00:09:20.020 --> 00:09:22.290
that we can do that live
code inclusion stuff.

143
00:09:22.290 --> 00:09:25.990
Because if it gets transposed to
the dynamic stuff webpack is gonna

144
00:09:25.990 --> 00:09:27.610
say everything's required, right?

145
00:09:27.610 --> 00:09:30.810
I don't know what's required, so
I'm just gonna include everything.

146
00:09:30.810 --> 00:09:34.410
Whereas, if you leave it as ES6 modules
that can do that static analysis and

147
00:09:34.410 --> 00:09:39.050
say, hey, this code is impossible to run,
I'm gonna leave it out.

148
00:09:39.050 --> 00:09:42.560
So by doing this, we're enabling
live code inclusion or tree shaking.

149
00:09:44.990 --> 00:09:47.165
Cool?

150
00:09:47.165 --> 00:09:51.421
Okay,
&gt;&gt; Brian Holt: That's it.

151
00:09:51.421 --> 00:09:54.754
[LAUGH] That's our Babel set up for now.

152
00:09:58.678 --> 00:10:00.320
&gt;&gt; Brian Holt: But I wanna to take
the time to explain to you so

153
00:10:00.320 --> 00:10:02.580
you understand everything
that's going into this, right?

154
00:10:02.580 --> 00:10:04.154
So it's not black magic.

155
00:10:04.154 --> 00:10:06.890
I mean, Babel kinda black magic still.

