WEBVTT

1
00:00:00.780 --> 00:00:02.570
&gt;&gt; Brian Holt: I could show you how
to do this with a command line, so

2
00:00:02.570 --> 00:00:06.820
you could actually start configuring Web
Pact through the command line to do this.

3
00:00:06.820 --> 00:00:09.180
Let's just build a config file so
we don't have to do it any more.

4
00:00:10.440 --> 00:00:17.008
So, go ahead and make a new file,
&gt;&gt; Brian Holt: And

5
00:00:17.008 --> 00:00:22.591
put it in the root director of your
project, called webpack.config.js.

6
00:00:31.669 --> 00:00:35.035
&gt;&gt; Brian Holt: And what we're gonna do
here is we're gonna say const path =

7
00:00:35.035 --> 00:00:35.900
require path.

8
00:00:38.460 --> 00:00:40.920
Now, this is meant for node, right?

9
00:00:40.920 --> 00:00:43.940
This is not going to be transpiled, so
we're not going to use the ES6 modules

10
00:00:43.940 --> 00:00:48.090
because node does not yet
understand ES6 modules.

11
00:00:48.090 --> 00:00:49.710
So we have to use common JS.

12
00:00:53.110 --> 00:01:02.930
Okay?
Then we're going to say module.exports and

13
00:01:02.930 --> 00:01:06.040
we're just gonna put a bunch of
stuff in here, context dirname.

14
00:01:08.470 --> 00:01:12.350
What this is saying is that we're running
this from our root directory always.

15
00:01:12.350 --> 00:01:17.230
So you can run web pack from
anywhere in your project, and

16
00:01:17.230 --> 00:01:19.390
it's always gonna run
from that root directory.

17
00:01:19.390 --> 00:01:23.080
That's what the context
dirname translates to.

18
00:01:23.080 --> 00:01:24.730
Dirname is just a node,

19
00:01:24.730 --> 00:01:29.610
a global variable that refers to
that root directory of your project.

20
00:01:32.921 --> 00:01:37.125
&gt;&gt; Brian Holt: Entry
&gt;&gt; Brian Holt: So for now,

21
00:01:37.125 --> 00:01:42.668
we're just gonna have one entry which
is going to be .js/clientapp.jsx.

22
00:01:45.193 --> 00:01:46.980
&gt;&gt; Brian Holt: This is just telling
you this is the front door to

23
00:01:46.980 --> 00:01:48.210
your project, right.

24
00:01:48.210 --> 00:01:50.540
Everything is going to be
included out from here.

25
00:01:55.259 --> 00:02:01.763
&gt;&gt; Brian Holt: Dev tool,
we're gonna do cheap-eval-source-map,

26
00:02:01.763 --> 00:02:04.883
I think that's what it is.

27
00:02:04.883 --> 00:02:05.870
I have to make sure that that's the case.

28
00:02:05.870 --> 00:02:08.580
There are several different

29
00:02:08.580 --> 00:02:12.660
types of devtools like you can do full
source maps and everything like that.

30
00:02:12.660 --> 00:02:15.860
This is the one that's placed the nicest
with all the tools that we're gonna use,

31
00:02:15.860 --> 00:02:17.920
that's why we're gonna stick with it.

32
00:02:17.920 --> 00:02:22.780
This is just saying it in line all of
my source maps into my bundled code.

33
00:02:22.780 --> 00:02:25.480
It's gonna make your bundled
code bigger in development but

34
00:02:25.480 --> 00:02:26.960
it won't be included in production.

35
00:02:27.990 --> 00:02:31.420
And source maps for
those who aren't familiar with them.

36
00:02:31.420 --> 00:02:35.860
If I transpile from my source
code to evaluated code.

37
00:02:35.860 --> 00:02:39.600
If I don't have source maps it's going
when I click on the error it's gonna show

38
00:02:39.600 --> 00:02:42.650
me directly in the bundled code,
which is worthless, right?

39
00:02:42.650 --> 00:02:43.430
It's impossible to read.

40
00:02:43.430 --> 00:02:48.770
If I have source maps it's actually
going to show me my code, right?

41
00:02:48.770 --> 00:02:52.250
It's gonna show me the pre-transpiled
code, that's why we do source maps.

42
00:02:55.889 --> 00:03:04.031
&gt;&gt; Brian Holt: Output
&gt;&gt; Brian Holt: Path and

43
00:03:04.031 --> 00:03:13.860
that's gonna be
path.join(_dirname,'public').

44
00:03:13.860 --> 00:03:17.830
So path is a node module that
just resolves like unique style,

45
00:03:17.830 --> 00:03:19.910
relative paths for you.

46
00:03:19.910 --> 00:03:23.835
So if we do this, dirname public, we can
be assure that's always going to land on

47
00:03:23.835 --> 00:03:26.609
this, the public directory
that we're talking about,

48
00:03:26.609 --> 00:03:28.720
no matter what we call
it from our project.

49
00:03:29.930 --> 00:03:30.730
That's why we're using it.

50
00:03:34.770 --> 00:03:42.150
And filename I call it bundle.js,
that's a common thing to call it.

51
00:03:42.150 --> 00:03:45.362
But you could call it
whatever you want to.

52
00:03:45.362 --> 00:03:50.397
Resolve.

53
00:03:50.397 --> 00:03:57.579
Extensions.

54
00:04:00.544 --> 00:04:06.320
&gt;&gt; Brian Holt: So if I say for
just, you don't have to copy on

55
00:04:06.320 --> 00:04:11.978
this const App = require./App, right?

56
00:04:11.978 --> 00:04:14.640
This is the order that it's going to try

57
00:04:14.640 --> 00:04:18.240
a file extensions before it
finds the correct one, right.

58
00:04:18.240 --> 00:04:22.574
So I'm going to say .js,

59
00:04:22.574 --> 00:04:26.940
.jsx, and then .json.

60
00:04:26.940 --> 00:04:30.230
So the first thing is it's going
to do is it's going to try and

61
00:04:30.230 --> 00:04:32.330
see if I find a file call app.

62
00:04:32.330 --> 00:04:37.000
Like app with no file extension, that's
the first thing it's going to check.

63
00:04:37.000 --> 00:04:39.300
Then it's going to say, does .js exist?

64
00:04:39.300 --> 00:04:43.440
If that doesn't exist then it's gonna
try .jsx, and if that doesn't exist then

65
00:04:43.440 --> 00:04:47.550
it's gonna try .json, and
if that doesn't exist then it fails.

66
00:04:47.550 --> 00:04:50.190
So it's the order of resolution
of the those extensions.

67
00:04:55.507 --> 00:04:58.034
&gt;&gt; Brian Holt: Stats,
this is just the various things that you

68
00:04:58.034 --> 00:05:01.350
wanna reported back to
you when you're building.

69
00:05:01.350 --> 00:05:04.330
So we're gonna say colors true,
because I like colors.

70
00:05:05.630 --> 00:05:08.870
Reasons, this is gonna give you
more useful error output, so

71
00:05:08.870 --> 00:05:10.630
I'll definitely put that.

72
00:05:10.630 --> 00:05:14.110
And chunks,
I don't think this one's useful anymore,

73
00:05:14.110 --> 00:05:15.520
but we're gonna put it in there anyway.

74
00:05:15.520 --> 00:05:20.050
This is just saying if your code is being
broken up into multiple different chunks,

75
00:05:20.050 --> 00:05:21.030
please tell me about that.

76
00:05:23.930 --> 00:05:28.127
&gt;&gt; Brian Holt: And then the last thing
we're gonna do here is we're going to

77
00:05:28.127 --> 00:05:29.621
start using bubble.

78
00:05:31.734 --> 00:05:36.650
&gt;&gt; Brian Holt: Sorry not modules,
module singular.

79
00:05:36.650 --> 00:05:41.676
Then rules inside of that which is
actually, this is gonna be an array.

80
00:05:41.676 --> 00:05:47.428
So this is going to be an array

81
00:05:47.428 --> 00:05:52.222
of rules that webpack is

82
00:05:52.222 --> 00:05:57.016
going to be used to apply

83
00:05:57.016 --> 00:06:04.650
different loaders to your code.

84
00:06:04.650 --> 00:06:05.460
Now what is a loader?

85
00:06:05.460 --> 00:06:08.930
A loader is just a plugin,
it's actually not a plugin.

86
00:06:08.930 --> 00:06:11.440
Let's not conflate words [LAUGH].

87
00:06:11.440 --> 00:06:19.710
It is a tool, that Webpack is going
to use on your code, in some fashion.

88
00:06:19.710 --> 00:06:23.440
So the first tool that we're going
to be using is double right.

89
00:06:23.440 --> 00:06:27.990
So when we give it the babel loaders so
the web pack will use babel for us right.

90
00:06:27.990 --> 00:06:28.758
That makes sense?

91
00:06:28.758 --> 00:06:33.680
So going to give it an object.

92
00:06:33.680 --> 00:06:36.370
The first thing that we're gonna do is
we're gonna give it a test of some sort,

93
00:06:36.370 --> 00:06:40.740
this could be a function, this could regx,
this could be several different things,

94
00:06:40.740 --> 00:06:42.190
we're just going to use a regx.

95
00:06:45.610 --> 00:06:51.847
So you do slash, backslash, dot jsx,

96
00:06:51.847 --> 00:06:56.761
question mark, dollar sign,

97
00:06:56.761 --> 00:07:02.184
slash
&gt;&gt; Brian Holt: And

98
00:07:02.184 --> 00:07:06.912
then we're gonna say
loader: 'babel-loader'.

99
00:07:09.929 --> 00:07:13.260
&gt;&gt; Brian Holt: I am by
no means a regex expert.

100
00:07:13.260 --> 00:07:17.990
But, what this means is
the file extension for

101
00:07:17.990 --> 00:07:23.080
the file must be .JS and
possibly x, right?

102
00:07:23.080 --> 00:07:25.990
The question mark means
that x might be there, and

103
00:07:25.990 --> 00:07:30.420
the dollar sign means this must be
at the end of the file name, right?

104
00:07:30.420 --> 00:07:34.850
So anything that ends in .js or
.jsx run through babel.

105
00:07:34.850 --> 00:07:36.290
That's what that means.

106
00:07:36.290 --> 00:07:37.510
Cool?

107
00:07:37.510 --> 00:07:38.010
Okay.

108
00:07:40.010 --> 00:07:41.810
Loader, you're just telling it here,

109
00:07:41.810 --> 00:07:43.770
this is the name of loader that
I want you to run it through.

110
00:07:43.770 --> 00:07:47.580
So it's going to call Babel and it says,
here Babel here's your thing, right.

111
00:07:47.580 --> 00:07:50.590
It's going to call it with all
the output from the file and

112
00:07:50.590 --> 00:07:53.260
then Babel is going to do something and
hand it back to Webpack.

113
00:07:53.260 --> 00:07:55.820
That's the contract that is going on here.

114
00:07:57.570 --> 00:07:59.660
Just so you know,
you could say loaders and

115
00:07:59.660 --> 00:08:03.770
then give it an array, right,
of different loaders to run it through.

116
00:08:03.770 --> 00:08:08.000
Right now we just have one, we just
want to run it through babel -loader,

117
00:08:08.000 --> 00:08:09.710
so we gonna leave it at that.

118
00:08:16.394 --> 00:08:17.555
&gt;&gt; Brian Holt: Any questions?

119
00:08:19.793 --> 00:08:20.789
&gt;&gt; Brian Holt: Make sense?

120
00:08:22.111 --> 00:08:23.019
&gt;&gt; Brian Holt: Okay.

121
00:08:25.247 --> 00:08:26.612
&gt;&gt; Brian Holt: Save it.

122
00:08:26.612 --> 00:08:28.962
Thanks to Prettier,
it's gonna be all nicely formatted.

123
00:08:32.811 --> 00:08:39.777
&gt;&gt; Brian Holt: Okay, so, now I can go to
&gt;&gt; Brian Holt: My

124
00:08:39.777 --> 00:08:43.640
command line and
notice before I was saying.

125
00:08:43.640 --> 00:08:45.550
I was giving it the entry and exit.

126
00:08:45.550 --> 00:08:47.610
I don't have to do that anymore.

127
00:08:47.610 --> 00:08:50.100
I can just say webpack.

128
00:08:50.100 --> 00:08:51.740
It's automatically going
to pick up the config,

129
00:08:51.740 --> 00:08:53.050
and it's just going to do it for me.

130
00:09:00.122 --> 00:09:02.617
&gt;&gt; Brian Holt: Now you're gonna notice
that's gonna take significantly longer

131
00:09:02.617 --> 00:09:03.890
than it was before.

132
00:09:03.890 --> 00:09:04.390
Why?

133
00:09:05.810 --> 00:09:10.460
Because everything's being run through
Babel, and it's a pretty intense process.

134
00:09:10.460 --> 00:09:13.940
So again, we're introducing tools for
the sake of ease but

135
00:09:13.940 --> 00:09:15.200
it comes with the cost of complexity.

136
00:09:17.531 --> 00:09:20.995
&gt;&gt; Brian Holt: And now, we went from
having 700 kilobytes, which was

137
00:09:20.995 --> 00:09:25.465
ridiculous, to having 2 megabytes,
which is yet further ridiculous.

138
00:09:25.465 --> 00:09:26.400
[LAUGH] But

139
00:09:26.400 --> 00:09:31.310
again, you have to remember now, Babel is
including all its polyphils too, right.

140
00:09:32.940 --> 00:09:36.610
So Babel actually is going to add quite
a bit of weight to our bundle as well.

141
00:09:38.880 --> 00:09:40.830
When we go actually to minify in G and

142
00:09:40.830 --> 00:09:44.800
goes into production it's going
to be significantly smaller.

143
00:09:44.800 --> 00:09:48.230
In fact,
I can show you what it looks like.

144
00:09:48.230 --> 00:09:51.640
If you put -P,
this is saying hey I'm building for

145
00:09:51.640 --> 00:09:56.849
production and it's going to do a whole
different set of transformations.

146
00:10:00.310 --> 00:10:01.960
&gt;&gt; Brian Holt: And
we've saved to point point one five.

147
00:10:03.420 --> 00:10:05.510
Because we have all
the source maps in there.

148
00:10:05.510 --> 00:10:07.350
Source maps are huge.

149
00:10:07.350 --> 00:10:09.970
They're going to over double
the size of your code,

150
00:10:09.970 --> 00:10:14.190
so we'd have to drop the source maps too.

151
00:10:14.190 --> 00:10:15.810
We'll talk about performance and
building for

152
00:10:15.810 --> 00:10:20.404
production in the third day, so
&gt;&gt; Brian Holt: So

153
00:10:20.404 --> 00:10:23.997
yeah, let's build and
let's go see if everything works.

154
00:10:28.990 --> 00:10:29.896
&gt;&gt; Brian Holt: Everything
is still working.

155
00:10:32.616 --> 00:10:34.227
&gt;&gt; Brian Holt: And looking good.

156
00:10:38.504 --> 00:10:39.500
&gt;&gt; Speaker 2: Can you
go back to your index?

157
00:10:39.500 --> 00:10:44.124
[INAUDIBLE]
&gt;&gt; Brian Holt: Yeah,

158
00:10:44.124 --> 00:10:46.107
you just need to include public/bundle.js.

