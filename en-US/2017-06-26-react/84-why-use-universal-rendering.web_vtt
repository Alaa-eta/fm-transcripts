WEBVTT

1
00:00:00.240 --> 00:00:02.300
&gt;&gt; Brian Holt: So,
we've written our entire application.

2
00:00:02.300 --> 00:00:04.870
We did React first,
then we integrated Redux.

3
00:00:04.870 --> 00:00:07.190
And then, we did Flow and
all that kind of fun stuff.

4
00:00:07.190 --> 00:00:09.020
And we're gonna take it down
the final stretch here,

5
00:00:09.020 --> 00:00:13.280
and do a couple more build
oriented sort of things.

6
00:00:13.280 --> 00:00:16.860
The first thing that we're gonna
do is universal rendering,

7
00:00:16.860 --> 00:00:19.300
also formally known as
isomorphic rendering,

8
00:00:19.300 --> 00:00:21.800
also formally known as a bunch
of other really dumb terms.

9
00:00:23.630 --> 00:00:26.391
Let's stick with server side rendering
because that's actually what we're

10
00:00:26.391 --> 00:00:26.986
gonna be doing.

11
00:00:26.986 --> 00:00:30.226
We're gonna take React and
we're gonna take our application,

12
00:00:30.226 --> 00:00:33.466
we're gonna stick in to node and
say render this out to a string so

13
00:00:33.466 --> 00:00:36.950
that when you go down to the client,
you have fully rendered markup.

14
00:00:38.210 --> 00:00:43.681
So kinda to demonstrate to you here,
if I view page source here.

15
00:00:43.681 --> 00:00:49.009
That is 100% of the HTML that I'm sending
down to the user, which is nothing, right?

16
00:00:49.009 --> 00:00:52.632
It's just the shell that React
then bootstraps itself, and

17
00:00:52.632 --> 00:00:54.062
renders out to the DOM.

18
00:00:54.062 --> 00:00:56.990
To be honest with you,
this is gonna be fine most of the time.

19
00:00:56.990 --> 00:01:00.050
Server side rendering is by
no means required, right?

20
00:01:00.050 --> 00:01:04.860
However, it's going to improve
perceived load time, right?

21
00:01:04.860 --> 00:01:07.980
We're playing a psychology game
here with our users, right?

22
00:01:07.980 --> 00:01:11.770
We want them to think that our web
page is as fast as possible, right?

23
00:01:11.770 --> 00:01:16.750
So if I send down complete markup,
right, the browser will read it.

24
00:01:16.750 --> 00:01:21.370
It will render out your markup and then
behind the scenes React is gonna hurry and

25
00:01:21.370 --> 00:01:24.310
bootstrap itself and
then make your page interactive, right?

26
00:01:24.310 --> 00:01:27.590
So it's kind of a game,
a little bit, right?

27
00:01:27.590 --> 00:01:32.670
It's a game in the sense
that the user sees

28
00:01:32.670 --> 00:01:36.260
the page rendered, and
it's not actually interactive yet, right?

29
00:01:36.260 --> 00:01:38.988
If they click on the buttons,
the JavaScript is not yet

30
00:01:38.988 --> 00:01:41.850
there to be interacted with, right?

31
00:01:41.850 --> 00:01:44.830
But by the time hopefully
that the user sees something,

32
00:01:44.830 --> 00:01:47.860
makes a decision in their mind that's
like, I'm going to click on that button.

33
00:01:47.860 --> 00:01:51.964
And by the time they actually move
the mouse to click on the button,

34
00:01:51.964 --> 00:01:56.656
hopefully by that point, your JavaScript
will have downloaded, parsed,

35
00:01:56.656 --> 00:02:00.419
attached to all of the DOM and
then it'll be ready to happen.

36
00:02:00.419 --> 00:02:02.100
Usually that's the case, right?

37
00:02:03.250 --> 00:02:07.440
So the user thinks that the page is
faster despite the fact that the time to

38
00:02:07.440 --> 00:02:11.010
interactive, right, the time that it
actually is ready to be clicked on,

39
00:02:11.010 --> 00:02:14.020
is gonna be about the same,
if not even a tiny bit slower, right?

40
00:02:14.020 --> 00:02:15.535
Cuz you're sending down more HTML.

41
00:02:15.535 --> 00:02:19.250
React is having to do a little bit more,
all that kind of stuff.

42
00:02:19.250 --> 00:02:20.980
So that's what we're gonna do.

43
00:02:22.080 --> 00:02:25.950
The key here is that this requires Node,
right?

44
00:02:25.950 --> 00:02:27.844
So if you're writing Rails, right?

45
00:02:27.844 --> 00:02:30.310
Rails doesn't really have
a way to run JavaScript,

46
00:02:30.310 --> 00:02:32.690
at least not directly that I'm aware of.

47
00:02:32.690 --> 00:02:35.350
Same thing with Java,
etc., etc., etc., right?

48
00:02:35.350 --> 00:02:38.650
So you're gonna need Node in here
somewhere to be able to do that.

49
00:02:38.650 --> 00:02:43.180
So, something that a lot of companies
will do, say for example you do have like

50
00:02:43.180 --> 00:02:46.680
a Java backend, they'll introduce
what we call a Node middle end.

51
00:02:46.680 --> 00:02:47.778
Or at least that's what I call it.

52
00:02:47.778 --> 00:02:49.660
[LAUGH] I don't know if
other people call it that.

53
00:02:49.660 --> 00:02:51.750
But you'll have like a Node middle end,
right?

54
00:02:51.750 --> 00:02:55.250
So you have this Node server that
makes requests to your API server,

55
00:02:55.250 --> 00:02:57.290
your Java server, your Rails server.

56
00:02:57.290 --> 00:03:00.570
It gets all the information
there in the Node middle end.

57
00:03:00.570 --> 00:03:04.278
It'll do your server side rendering for
you, and then send down complete markup.

58
00:03:04.278 --> 00:03:06.010
So, that's always a possibility as well.

59
00:03:06.010 --> 00:03:07.480
I would say it's pretty common.

60
00:03:08.780 --> 00:03:10.700
It also helps if you're just
running Node in the first place,

61
00:03:10.700 --> 00:03:12.730
because that just works.

62
00:03:14.280 --> 00:03:15.398
Cool.

63
00:03:15.398 --> 00:03:20.328
So, I wanna tell you that service side
rendering by itself is actually not

64
00:03:20.328 --> 00:03:22.167
terribly difficult to do.

65
00:03:22.167 --> 00:03:26.580
I'm gonna just pull up one
of my other repos here.

66
00:03:26.580 --> 00:03:31.994
/btholts/, I think it's the es.

67
00:03:37.008 --> 00:03:37.936
&gt;&gt; Brian Holt: I think it's this one.

68
00:03:37.936 --> 00:03:41.700
Okay, yeah, so
if I go to the GitHub project here.

69
00:03:41.700 --> 00:03:46.380
I'm just gonna show you an example
server side rendering that's a lot more

70
00:03:46.380 --> 00:03:48.132
simple than what we're gonna do today.

71
00:03:50.420 --> 00:03:56.388
So I'll make this larger.

72
00:03:56.388 --> 00:04:00.517
So I did this with Culla,
you could easily do this with Express, but

73
00:04:00.517 --> 00:04:03.499
really the big key here is 21 and
through 24.

74
00:04:05.650 --> 00:04:11.175
You just say ReactDOMServer.renderToString
and then you pass it the React app, right?

75
00:04:11.175 --> 00:04:14.178
It's going to go through and
render out your app to a string.

76
00:04:14.178 --> 00:04:18.110
And then you just put that in
a template and you send that down.

77
00:04:18.110 --> 00:04:18.660
The end.

78
00:04:18.660 --> 00:04:19.980
That's it, right?

79
00:04:19.980 --> 00:04:25.330
So React server-side rendering at
its most basic is really just that.

80
00:04:25.330 --> 00:04:27.651
That is to say, not a whole lot.

81
00:04:27.651 --> 00:04:31.690
However, we kind of have
a strange issue here.

82
00:04:31.690 --> 00:04:36.990
That we're doing client-side routing,
right, cuz we're using React Router.

83
00:04:36.990 --> 00:04:40.914
And so the fact that we're using the
client side router introduces a little bit

84
00:04:40.914 --> 00:04:41.750
of complexity.

85
00:04:41.750 --> 00:04:46.508
Because we don't have to
write the routing code twice.

86
00:04:46.508 --> 00:04:49.282
Now if you're into it,
like if you want to, right,

87
00:04:49.282 --> 00:04:53.193
you totally can write a server version
of the routing and then you can go and

88
00:04:53.193 --> 00:04:57.379
write a separate version of client routing
and just try and keep those in sync.

89
00:04:57.379 --> 00:05:00.067
I'm gonna say that's usually a bad idea,
right,

90
00:05:00.067 --> 00:05:02.190
cuz something like I say all the time is,

91
00:05:02.190 --> 00:05:06.022
if something has to be kept in sync
it's always going to fall out of sync.

92
00:05:06.022 --> 00:05:10.680
That just always happens, it's a really
prone to bugs to do it that way.

93
00:05:10.680 --> 00:05:16.440
So it's really great if we can make React
Router handle both server side routing and

94
00:05:16.440 --> 00:05:17.980
client side routing.

95
00:05:17.980 --> 00:05:19.069
And the answer is you can.

96
00:05:19.069 --> 00:05:19.830
That does work.

