WEBVTT

1
00:00:00.330 --> 00:00:02.990
&gt;&gt; Brian Holt: Let's go to landing now.

2
00:00:02.990 --> 00:00:04.220
Yep, we're gonna go landing.

3
00:00:09.010 --> 00:00:14.774
What we're gonna do here
is we're going to import

4
00:00:14.774 --> 00:00:20.273
a function called connect
from react-redux.

5
00:00:26.082 --> 00:00:31.033
&gt;&gt; Brian Holt: Now, what we're gonna do,
&gt;&gt; Brian Holt: Is we're going to write

6
00:00:31.033 --> 00:00:34.020
this function called mapStateToProps.

7
00:00:34.020 --> 00:00:39.950
mapStateToProps, it's gonna take in state.

8
00:00:42.092 --> 00:00:45.900
&gt;&gt; Brian Holt: And
it's going to return an object.

9
00:00:45.900 --> 00:00:52.116
Now, something that people get
kind of confused with here is,

10
00:00:52.116 --> 00:00:57.628
if you have a one-liner object
that you want to return,

11
00:00:57.628 --> 00:01:04.342
like let's say it was just like
searchTerm: state.searchTerm.

12
00:01:04.342 --> 00:01:07.598
This is technically not valid JavaScript
despite the fact that it really,

13
00:01:07.598 --> 00:01:09.780
really looks like it should
be valid JavaScript.

14
00:01:11.150 --> 00:01:14.490
Well, what do curly braces
mean in this particular case?

15
00:01:14.490 --> 00:01:15.640
It means the beginning of a body.

16
00:01:15.640 --> 00:01:16.850
A function body, right?

17
00:01:16.850 --> 00:01:17.730
It doesn't mean an object.

18
00:01:19.570 --> 00:01:24.220
So it's expecting me to put like
stuff in here like console outlog,

19
00:01:24.220 --> 00:01:27.655
whatever, or, I don't know,
stuff like that.

20
00:01:27.655 --> 00:01:32.151
Really common mistake to make
with ES6 arrow functions, and

21
00:01:32.151 --> 00:01:37.000
it's just because curly braces
mean more than one thing, right?

22
00:01:37.000 --> 00:01:39.886
And in this particular case,
they mean function bodies, so

23
00:01:39.886 --> 00:01:43.692
if you wrap this in parentheses with
a letter I, just kidding, that's a joke.

24
00:01:43.692 --> 00:01:48.261
[COUGH] If you wrap it with a parentheses,
then you're letting us know,

25
00:01:48.261 --> 00:01:52.004
I actually mean to return
an object literal here, right?

26
00:02:01.990 --> 00:02:04.796
&gt;&gt; Brian Holt: Does that make sense
why I put parenthesis around it, and

27
00:02:04.796 --> 00:02:05.855
why they're there?

28
00:02:05.855 --> 00:02:09.616
Okay, cool.

29
00:02:13.087 --> 00:02:17.699
&gt;&gt; Brian Holt: So what this function does
is it takes the whole state of redux,

30
00:02:17.699 --> 00:02:20.397
right, that's what this state is,

31
00:02:20.397 --> 00:02:25.590
and it pulls out just the thing
that this component cares about.

32
00:02:25.590 --> 00:02:27.769
You don't wanna be passing around
the state of redux willy nilly.

33
00:02:27.769 --> 00:02:30.040
Like that's a bad idea, promise.

34
00:02:31.316 --> 00:02:34.910
This is gonna pull out just
the things that you need,

35
00:02:34.910 --> 00:02:39.900
it's going to inject them as
a prop into your component.

36
00:02:39.900 --> 00:02:43.170
The way that it does that connecting
is with, as you may have guessed,

37
00:02:43.170 --> 00:02:45.080
the connect function.

38
00:02:45.080 --> 00:02:52.190
So we're gonna say connect
(mapStateToProps)(Landing), like that.

39
00:02:55.716 --> 00:02:57.579
&gt;&gt; Brian Holt: Kind of a weird notation,
but

40
00:02:57.579 --> 00:03:01.240
I will show you why it's in
that notation in just a second.

41
00:03:02.700 --> 00:03:03.270
But basically,

42
00:03:03.270 --> 00:03:07.360
you call connect with mapStateToProps
which returns a function, right?

43
00:03:07.360 --> 00:03:11.850
Just this bit right here is a function
that when called the something else,

44
00:03:11.850 --> 00:03:13.250
is going to connect that component.

45
00:03:13.250 --> 00:03:15.770
So we could potentially
reuse it multiple times.

46
00:03:16.870 --> 00:03:19.098
You won't, [LAUGH] but you could, right?

47
00:03:19.098 --> 00:03:21.860
So that's why there are two
function calls here.

48
00:03:23.740 --> 00:03:28.090
The first bit is going to be what you're
going to use to pull out state, and

49
00:03:28.090 --> 00:03:29.690
the second bit is that
gonna be the component.

50
00:03:30.780 --> 00:03:31.550
That make sense?

51
00:03:33.501 --> 00:03:36.070
&gt;&gt; Brian Holt: So let me show you
why that is actually the way it is.

52
00:03:38.782 --> 00:03:41.020
&gt;&gt; Brian Holt: How many of
you have heard of decorators?

53
00:03:43.192 --> 00:03:44.488
&gt;&gt; Brian Holt: Super cool, there are,

54
00:03:44.488 --> 00:03:48.563
one of the things I'm most excited about
upcoming in JavaScript, if you write

55
00:03:48.563 --> 00:03:52.810
a lot of Python inevitably you end up
writing a lot of decorators, right.

56
00:03:52.810 --> 00:03:55.070
There's a lot of other
languages that have these

57
00:03:56.450 --> 00:03:58.560
really cool language
features called decorators.

58
00:03:59.820 --> 00:04:06.430
So what we could do here if we could
use decorators, which we can't.

59
00:04:06.430 --> 00:04:10.090
But what you would do is
it would look like this.

60
00:04:12.434 --> 00:04:14.493
&gt;&gt; Brian Holt: You would say up here above

61
00:04:14.493 --> 00:04:19.068
landing,
&gt;&gt; Brian Holt: We'd have to

62
00:04:19.068 --> 00:04:21.190
convert this to a class.

63
00:04:21.190 --> 00:04:23.588
So pretend just for a second that
I had converted this to a class.

64
00:04:23.588 --> 00:04:30.750
I would say,
class landing extends React.Component.

65
00:04:30.750 --> 00:04:32.996
Or component, whatever, I don't care.

66
00:04:32.996 --> 00:04:39.520
Component, and there was a bunch
of useful stuff in here, right.

67
00:04:39.520 --> 00:04:43.235
Okay, can we all pretend momentarily,
cuz I don't wanna have to rewrite it,

68
00:04:43.235 --> 00:04:44.036
just to go back.

69
00:04:44.036 --> 00:04:50.518
So if this was class, we could put
@connect (mapStateToProps) like that,

70
00:04:50.518 --> 00:04:57.530
and then suddenly, rather than doing this
kind of awkward looking thing down here.

71
00:04:57.530 --> 00:05:00.650
This landing would just
automatically be connected to it.

72
00:05:00.650 --> 00:05:06.630
So basically, this is going to get passed
in, which is going to return the function,

73
00:05:06.630 --> 00:05:10.719
which is going to run on
the result of the landing class.

74
00:05:12.240 --> 00:05:14.320
This is called a decorator, right?

75
00:05:14.320 --> 00:05:20.790
This is gonna be Stage 2 or
Stage 3 proposal for JavaScript.

76
00:05:20.790 --> 00:05:22.495
So it's most likely gonna make it,

77
00:05:22.495 --> 00:05:25.730
cuz everyone's pretty excited about it,
me included.

78
00:05:25.730 --> 00:05:27.620
I'm really excited for
one of the day I can use this.

79
00:05:29.380 --> 00:05:31.900
You can actually do this right now,
with the bubble transform.

80
00:05:31.900 --> 00:05:34.300
The issue is that,
flow doesn't understand decorators yet.

81
00:05:35.310 --> 00:05:37.320
So we're not gonna do it today, but

82
00:05:37.320 --> 00:05:40.250
you'll see lots of people out
there using decorators this way.

83
00:05:40.250 --> 00:05:42.032
So I wanted to make you aware
that you may see it, and

84
00:05:42.032 --> 00:05:43.970
it's also something to be excited about,
in my opinion.

85
00:05:45.880 --> 00:05:48.670
But for today, we're just gonna stick
with the normal, if calling connect.

86
00:05:48.670 --> 00:05:52.240
So that's what I wanna say that
connect has this weird way

87
00:05:52.240 --> 00:05:54.945
of looking right where it looks like this.

88
00:05:54.945 --> 00:06:01.367
Connect(mapStateToProps), because

89
00:06:01.367 --> 00:06:05.222
they didn't like this.

90
00:06:05.222 --> 00:06:07.370
That's how a decorator works anyway.

91
00:06:08.480 --> 00:06:11.360
So they didn't have to make two functions,
right?

92
00:06:11.360 --> 00:06:13.990
Then it'd have to make a connect
decorator and a connect function.

93
00:06:13.990 --> 00:06:15.850
They were able to just
reuse both of those.

94
00:06:18.940 --> 00:06:20.010
Any questions about that?

95
00:06:20.010 --> 00:06:22.937
So this is kind of on the side, but
it's something I'm excited about, so

96
00:06:22.937 --> 00:06:23.708
I wanted to share.

97
00:06:23.708 --> 00:06:27.278
&gt;&gt; Audience 1: It's just
whatever function follows or

98
00:06:27.278 --> 00:06:30.957
whatever constructor, class follows?

99
00:06:30.957 --> 00:06:32.879
&gt;&gt; Brian Holt: So the at connect
is going to return a function,

100
00:06:32.879 --> 00:06:34.520
that's going to be called on the class.

101
00:06:35.600 --> 00:06:36.708
&gt;&gt; Audience 1: Whatever is next,

102
00:06:36.708 --> 00:06:39.424
cuz you didn't explicitly say like-
&gt;&gt; Brian Holt: Right,

103
00:06:39.424 --> 00:06:41.850
it's called on your behalf, right.

104
00:06:41.850 --> 00:06:45.547
The connect function is going
to be called by the language.

105
00:06:45.547 --> 00:06:52.489
Right and like [COUGH],
I had @connect mapsStateToProps, right.

106
00:06:52.489 --> 00:06:55.110
But there are gonna be
decorators like @auth, right.

107
00:06:56.110 --> 00:06:59.430
That's just gonna look like that, and
it doesn't say have to return a function.

108
00:06:59.430 --> 00:07:02.998
Well, let me rephrase that, it doesn't
have to be a function that you call that

109
00:07:02.998 --> 00:07:05.627
returns a function, right,
it could just be a function.

110
00:07:05.627 --> 00:07:09.877
&gt;&gt; Audience 2: So is that almost like
constructors and destructors in C++ or

111
00:07:09.877 --> 00:07:13.484
something like that,
where you got a class object and

112
00:07:13.484 --> 00:07:18.057
there's something that's called
either during instantiation or

113
00:07:18.057 --> 00:07:22.283
when it exits-
&gt;&gt; Brian Holt: Okay, so yeah,

114
00:07:22.283 --> 00:07:27.400
I kind of see what you are saying.

115
00:07:27.400 --> 00:07:31.002
I'm gonna say no comment on it, because I
don't actually know enough exactly what

116
00:07:31.002 --> 00:07:32.863
connection you're gonna make with that.

117
00:07:32.863 --> 00:07:36.845
But, I will say that if it's
just providing additional

118
00:07:36.845 --> 00:07:40.500
functionality in a declarative fashion,
right?

119
00:07:40.500 --> 00:07:44.048
So if I had something like this where I
was calling @auth, you basically mean

120
00:07:44.048 --> 00:07:47.717
something like, you can't construct
this unless it's authorized, right?

121
00:07:47.717 --> 00:07:50.920
So you're just kinda declaring,
this must be auth, right?

122
00:07:50.920 --> 00:07:53.570
And then you can just kinda go
about your way doing that, right?

123
00:07:54.990 --> 00:07:58.730
And this is gonna work both on whole
classes like I showed you here and

124
00:07:58.730 --> 00:08:00.740
also on individual methods.

125
00:08:00.740 --> 00:08:04.067
So that's probably where that be like you
could have a route on your router and

126
00:08:04.067 --> 00:08:05.203
then you just say @auth.

127
00:08:05.203 --> 00:08:10.430
And it's like the user can't call this
method unless they're authorized, right?

128
00:08:11.890 --> 00:08:14.280
So it's kind of declaring
in that particular sense.

129
00:08:14.280 --> 00:08:15.108
Does that make sense?

130
00:08:20.540 --> 00:08:23.680
&gt;&gt; Brian Holt: Okay, so
that's enough about decorators.

131
00:08:23.680 --> 00:08:25.654
They're super exciting, but not yet.

132
00:08:25.654 --> 00:08:26.730
They're not yet exciting.

