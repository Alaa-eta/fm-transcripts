WEBVTT

1
00:00:01.070 --> 00:00:03.980
&gt;&gt; Speaker 1: Well what do you do to
manage data base content updates that

2
00:00:03.980 --> 00:00:05.387
might break the code or

3
00:00:05.387 --> 00:00:09.150
may break the test?
&gt;&gt; Brian Holt: Well,

4
00:00:09.150 --> 00:00:12.380
your test should never be reading
directly from the database that's the big

5
00:00:12.380 --> 00:00:16.250
code smell right there that if you're
testing that integration that's too much,

6
00:00:16.250 --> 00:00:18.430
that's too much depth to your test.

7
00:00:18.430 --> 00:00:19.710
So, with Redux,

8
00:00:19.710 --> 00:00:23.960
what you're gonna do is you're going to
grab what a database response looks like.

9
00:00:25.000 --> 00:00:27.620
And then you're going to pass
that in as the action, right, and

10
00:00:27.620 --> 00:00:29.510
then you'll test that.

11
00:00:29.510 --> 00:00:32.980
And then you're probably gonna wanna have
some sort of integration test that tests

12
00:00:32.980 --> 00:00:37.350
your whole app top to bottom,
right, maybe that's Selenium.

13
00:00:37.350 --> 00:00:38.940
Maybe that's, I don't know,
something else, and

14
00:00:38.940 --> 00:00:42.430
you should also have server side
tests that would catch regressions,

15
00:00:42.430 --> 00:00:47.500
in terms of like the shape of your
API responses on the server side.

16
00:00:47.500 --> 00:00:52.853
So, yeah, there should be several layers
of testing that should catch that,

17
00:00:52.853 --> 00:00:56.260
so that's not necessarily test here.

18
00:00:56.260 --> 00:01:00.000
I think it's the answer to that or
at least, that's what I would do.

