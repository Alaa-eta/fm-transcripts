WEBVTT

1
00:00:00.470 --> 00:00:04.110
&gt;&gt; Brian Holt: So the next thing we're
gonna mess with is Webpack and Babel.

2
00:00:04.110 --> 00:00:06.750
Which again are two things that
people find pretty frustrating.

3
00:00:06.750 --> 00:00:13.850
They're pretty complicated tools, but they
afford some really cool possibilities.

4
00:00:13.850 --> 00:00:19.410
So let's talk about Webpack first and
then talk about Babel.

5
00:00:19.410 --> 00:00:22.810
Webpack at its most simple
level is just a packager, so

6
00:00:22.810 --> 00:00:25.700
it's gonna take your five
different JavaScript files and

7
00:00:25.700 --> 00:00:27.900
it's gonna combine them down
into one JavaScript file.

8
00:00:29.190 --> 00:00:31.390
In and of itself,
it doesn't do any transformations.

9
00:00:31.390 --> 00:00:35.371
Really all it does is combining and
minifying, right?

10
00:00:35.371 --> 00:00:38.380
And it only does minifying
when you tell it to, right?

11
00:00:38.380 --> 00:00:42.072
So at its most basic level,
it's just going to say like okay,

12
00:00:42.072 --> 00:00:45.853
you have this file depends on this
one that depends on this one.

13
00:00:45.853 --> 00:00:48.944
It's gonna take all of those files and
compile them down to one file, so

14
00:00:48.944 --> 00:00:50.760
you'll just send one file down the wire.

15
00:00:52.390 --> 00:00:55.589
It has some other really unique
possibilities and capabilities.

16
00:00:55.589 --> 00:00:58.250
Things like code splitting,
which we'll talk about later.

17
00:00:59.460 --> 00:01:02.270
But at its most basic level
that's all it's gonna do.

18
00:01:02.270 --> 00:01:06.210
Then, on top of that,
we're gonna add another tool called Babel.

19
00:01:07.240 --> 00:01:09.760
Babel is what actually does
the transformations, right?

20
00:01:09.760 --> 00:01:11.767
So, for example, we're gonna write jsx.

21
00:01:11.767 --> 00:01:16.107
It's gonna take jsx, which is technically
invalid JavaScript, and it's gonna run it

22
00:01:16.107 --> 00:01:20.170
through a transformation and output valid
JavaScript that your browser can run.

23
00:01:21.660 --> 00:01:24.609
It can also do this for
ES6 for example, right?

24
00:01:24.609 --> 00:01:29.007
For example, most browsers still do
not understand generators, right?

25
00:01:29.007 --> 00:01:33.215
Which are a really cool feature that got
added in ES6 but are for most browsers

26
00:01:33.215 --> 00:01:38.220
invalid JavaScript because they don't
have the engines to support them.

27
00:01:38.220 --> 00:01:41.380
What Babel is gonna do is it's
going to take your ES6 code,

28
00:01:41.380 --> 00:01:43.390
it's going to run them
through a transformation and

29
00:01:43.390 --> 00:01:48.930
it's going to output valid ES5 code
which every browser today understands.

30
00:01:48.930 --> 00:01:51.795
So that's what Babel does, and
that's how those two pieces work together.

31
00:01:51.795 --> 00:01:55.729
One does the concatenation and
packaging together of files, and

32
00:01:55.729 --> 00:01:58.099
one does the transformation of files.

33
00:02:00.740 --> 00:02:04.570
And that's one facet of them.

34
00:02:04.570 --> 00:02:06.200
They both do multiple things.

35
00:02:06.200 --> 00:02:08.315
But that's what we're
going to use them for.

