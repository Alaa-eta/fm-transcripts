[00:00:00]
>> Brian Holt: Now, I want you to go to header.jsx. And now we're gonna say import connect at the top, from react-redux. And we're going to import set searchTerm. From
>> Brian Holt: ./actionCreators.
>> Brian Holt: Okay,
>> Brian Holt: We come down here for defaultProps, get rid of handleSearchTermChange.
>> Brian Holt: Get rid of searchTerm.
>> Brian Holt: Cuz these are no longer optional types,

[00:00:55]

>> Brian Holt: Right?
>> Brian Holt: You also are gonna get rid of the maybe types here. So get rid of the question marks. Cuz now is just always gonna be reading from Redux and it since only gonna occasionally be using it.
>> Brian Holt: Okay, then down here at the bottom. You're still gonna have a defaultProps for showSearch.

[00:01:22]
You're gonna stay const mapStateToProps equals state which is gonna return an object of searchTerm: state.searchTerm.
>> Brian Holt: And you're gonna have a const mapDispatchToProps which is gonna be equal to dispatch which is a function.
>> Brian Holt: And, again, you're gonna be returning an object with a HandleSearchTermChange and all that's going to do is take an event, which is going to be a, actually don't think you don't even have to type this one.

[00:02:17]
And you're gonna dispatch a setSearchTerm, oops, set,
>> Brian Holt: From event.target.value.
>> Brian Holt: Did I import this up there? No, I guess I didn't. Sorry, this should be setSearchTerm.
>> Brian Holt: Yep.
>> Brian Holt: And then down here we're just gonna connect.
>> Brian Holt: mapStateToProps. mapDispatchToProps.
>> Brian Holt: And that is it.
>> Brian Holt: Yup, cool.

[00:03:20]
So, the nice thing is we had this handle search term change that was coming in as a prop before, right? The nice thing is we don't have to refactor that because that's already the contract that we have there, so it's totally fine to leave that as is.
>> Brian Holt: So now handleSearchTermChange and searchTerm are both gonna be required.

[00:03:43]
showSearchTerm is still a maybe type because it might be coming, or it might not be. And then, yeah, we're gonna have this input that may or may not be reading from Redux, depending on which context it's called in. So let's save that and refresh.
>> Brian Holt: Yep, still getting some errors, which is not, it doesn't matter.

[00:04:06]
So now if I say I'm gonna search for black and I hit Enter. I'm going to go to the landing page with that filled in from Redux, right.
>> Brian Holt: Right, and then I can modify it up here and it still give me reading from Redux. Another cool thing as a nice product of this.

[00:04:26]
If I click into Atlanta, and then I click back, still gonna have the same search term because that's being perpetuated in Redux, right. Nothing's modifying Redux when I go there.
>> Brian Holt: Something else that actually is a problem, if I go back to s video, right, well, I mean it's still the reading Atlanta.

[00:04:45]
That's fine, but if I say browse all I actually, technically I haven't fixed that yet, but the only thing you would have to do is if they clicked it, dispatch an action to Redux to clear out the search term and that's fine. I'm not gonna do it here because I literally just explained to you how to do it.

[00:05:00]
I have all faith that you can go and do it. Any questions? It only took us 2 hours, but we've at least completed the first bit of migrating to Redux. It is pretty cool. I mean, the tradeoff here is that, for example, if you look at Search. Search got a lot more simple, right.

[00:05:27]
Search out used to have to worry about state and passing props into the right header, and all that kind of stuff. It no longer has to care about that because search in and of itself, all it wants to do is read search term and do searching, and it doesn't actually wanna read and write to Redux, right.

[00:05:41]
It can leave that problem to header. So by virtue of that, it doesn't have to care anymore because it only matters where you're actually doing the writing. And the writing is actually happening in header and it's not happening in search. So that is a nice city, right. It's gonna externalize this reading and writing to your data store into like separate files and separate functions and it's gonna simplify your react components.

[00:06:06]
That's a net positive, in my opinion, right? However, we greatly complicated the process of reading and writing to our state, right? It's deliberate. It's very deliberate, which is a good thing in general, right, but it's a pain. Yeah, it's just more code, right? It's more code and more things to think about, which is always hard.

[00:06:27]

>> Brian Holt: What we'll talk about tomorrow is we'll talk about testing Redux. Cuz you can see, as you may imagine, a lot of the stuff that we just did like the action creators, and the reducers are extremely testable. So that's gonna be really positive for us. And I'm gonna show you how to actually have Redux generate tests for itself, which is pretty cool.

[00:06:51]
Any questions about Redux? I have shown you the happy path for Redux. This is most of what Redux is. It's just dispatching actions into the reducers. And letting the reducers take care of things, which then update the store, which then gets fed back into UI, right? That's most of Redux.

[00:07:13]
Everything else is an advanced use case.
>> Brian Holt: I would also say, you can actually write Redux only ever doing stuff like this. I will show you tomorrow how to do asynchronous stuff. You can actually externalize the asynchronous stuff and never drive in Redux, but you wouldn't do that, I guess [LAUGH].

