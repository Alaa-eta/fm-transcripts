[00:00:00]
>> Brian Holt: So let's go to search, so let's go to search.jsx, come to search.jsx, we import connect up here, show card in header. Cool, that all looks really good. What's going to be really cool about what we're going to do is we're going to eliminate state from search, and we're going to eliminate handle's search term change.

[00:00:33]

>> Brian Holt: And we're going to eliminate props here.
>> Brian Holt: So all this stuff is going away, which means search has now become a stateless functional component. So now we can migrate this back into something that's a little bit more simple. So we're going to say, const, search, equals this and we're going to get rid of that.

[00:01:09]

>> Brian Holt: Okay, so now this is back to being a not a class anymore, but being a function. It's going to take in props which is going to be. We're going to have to type those props, it's going to take in search term which is going to be a string, and it's going to take in shows, which is going to be an array of show, okay?

[00:01:33]
Then here is where we say search term equals that we're going to say is equal to Props.searchTerm. And handleSearchTermChange is going to be equal to props.handleSearchTermChange, which we'll write here momentarily.
>> Brian Holt: I guess that's one worth putting on there is handleSearchTermChange is going to be a function. Instead of having props.shows, it's going to just be just that.

[00:02:14]
No this, this is going to be props.searchterm.
>> Brian Holt: That's getting on just a little bit more succinct each time.
>> Brian Holt: Not even that, I forgot. Okay, so actually drop this handleSearchTermChange. Because now we can do instead of making search have to worry about handle search term change and all this kind of stuff, it can just make header write directly to redux and it doesn't have to be the intermediary anymore, right?

[00:02:55]
So actually get rid of all of that. And this is just going to be showSearch now. Yup, that's exactly right.
>> Brian Holt: And, now we're going to filter on props.searchTerm, why is that upset?
>> Brian Holt: That's right. So we're going to run up against into a flow edge case right now.

[00:03:34]
It's pretty good about following through, but because we're inside a block which is inside of a block, here it actually can't follow it further enough for ES Lint to say, hey, you're never using this prop type. We actually are, it's just ES Lint can't go that deep. It's not smart enough, right?

[00:03:55]
It's not actually evaluating your code, it's doing static analysis.
>> Brian Holt: So what we're going to do here is we're just going to say I know that this is what you think, but you're actually wrong. Eslint-disable-line react/no-unused-prop-types.
>> Brian Holt: And this is just us telling eslint, no, I know better than you.

[00:04:28]

>> Brian Holt: Okay, now we need to make a maps state to props down here, so we're going to say const mapStateToProps
>> Brian Holt: equals state, and we're going to return an object of searchTerm is state.searchTerm.
>> Brian Holt: And then we're going to call connect with mapStateToProps.
>> Brian Holt: And we don't need this component up here anymore.

[00:05:14]

>> Brian Holt: Okay, so now we've successfully disentangled that component state from search. It's now totally reading from redux. And it no longer has to care about writing to redux, because that's going to become header's problem.

