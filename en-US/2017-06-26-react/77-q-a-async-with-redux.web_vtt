WEBVTT

1
00:00:00.710 --> 00:00:05.850
&gt;&gt; Brian Holt: So, we concluded making
all of our asynchronous Redux work.

2
00:00:05.850 --> 00:00:10.100
And now we have this really cool ability
to kinda navigate around our site.

3
00:00:10.100 --> 00:00:12.237
And make API request cache them and

4
00:00:12.237 --> 00:00:16.830
then not re-request them which
I think is pretty compelling.

5
00:00:16.830 --> 00:00:19.900
So again, you just see that that,
it just pops up right away,

6
00:00:19.900 --> 00:00:24.094
which I think is great.
&gt;&gt; Brian Holt: So

7
00:00:24.094 --> 00:00:32.535
this is just kind of the most simple way
of doing asynchronous actions with Redux.

8
00:00:34.070 --> 00:00:37.780
Again, you can get into
libraries like redux-promise,

9
00:00:37.780 --> 00:00:40.440
is another one that I find
very intuitive to use.

10
00:00:40.440 --> 00:00:44.840
That you, instead of dispatching
functions, you dispatch promises, right?

11
00:00:45.990 --> 00:00:47.170
Same thing with redux-observable.

12
00:00:47.170 --> 00:00:50.840
You dispatch an observable with RXJS or
something like that.

13
00:00:50.840 --> 00:00:53.580
And then saga is this kinda
like the heavy lifter.

14
00:00:53.580 --> 00:00:58.780
It's really cool but I would assert
that it's much more complicated.

15
00:00:58.780 --> 00:01:01.210
And more difficult to kinda
get your mind around.

16
00:01:01.210 --> 00:01:03.190
So if you're familiar,

17
00:01:03.190 --> 00:01:08.280
ES6 had another feature called generators,
which are really cool.

18
00:01:08.280 --> 00:01:11.625
They're really powerful, but
they can be a bit unwielding and

19
00:01:11.625 --> 00:01:15.060
kinda difficult to understand
what's going on sometimes.

20
00:01:15.060 --> 00:01:18.570
With sagas you can dispatch generators and

21
00:01:18.570 --> 00:01:23.730
take care of things and kind of complex
orchestrations using various generators.

22
00:01:23.730 --> 00:01:25.010
So it's cool but

23
00:01:25.010 --> 00:01:30.777
make sure you want to undertake that
complexity if you're gonna use them.

24
00:01:30.777 --> 00:01:33.899
But suffice to say, thunks usually
handle most of your use cases,

25
00:01:33.899 --> 00:01:39.036
that's why I tend to stick with them.
&gt;&gt; Brian Holt: So does anyone have any

26
00:01:39.036 --> 00:01:46.887
questions about redux in general?
&gt;&gt; Audience 1: I'm just curious,

27
00:01:46.887 --> 00:01:52.320
the persistent data that you get between
pages, can you do that with React still?

28
00:01:52.320 --> 00:01:55.670
Or is that Redux specific?
&gt;&gt; Brian Holt: The answer is you can

29
00:01:55.670 --> 00:01:59.410
absolutely do it with React,
but you're gonna have to have

30
00:01:59.410 --> 00:02:03.300
basically something on the side
holding onto that data, right?

31
00:02:03.300 --> 00:02:05.480
If you unmount data, right?

32
00:02:05.480 --> 00:02:06.960
It's going to, or

33
00:02:06.960 --> 00:02:10.020
if you unmount a React component
it's going to lose all that state.

34
00:02:10.020 --> 00:02:12.540
So it can't live in that state.

35
00:02:12.540 --> 00:02:15.580
However, if it's living up
at the app level, right?

36
00:02:15.580 --> 00:02:18.869
App is still technically being rendered,
so if you push that up into app, right?

37
00:02:18.869 --> 00:02:22.274
It's going to persist across different
views, right, it's still live right,

38
00:02:22.274 --> 00:02:23.720
it's still being rendered.

39
00:02:23.720 --> 00:02:27.279
So that's how you would achieve that.
&gt;&gt; Audience 1: Cool.

40
00:02:27.279 --> 00:02:27.786
&gt;&gt; Brian Holt: Cool.

41
00:02:27.786 --> 00:02:30.815
Good question.

42
00:02:30.815 --> 00:02:35.660
Other questions?
&gt;&gt; Audience 2: Is the search

43
00:02:35.660 --> 00:02:36.430
still working?

44
00:02:36.430 --> 00:02:38.430
Cuz I did a colon and

45
00:02:38.430 --> 00:02:41.171
the search didn't seem to be working.
&gt;&gt; Brian Holt: I think

46
00:02:41.171 --> 00:02:45.371
so.
&gt;&gt; Brian Holt: What'd you do?

47
00:02:45.371 --> 00:02:47.494
I'm just kidding.

48
00:02:47.494 --> 00:02:54.615
[LAUGH]
&gt;&gt; Brian Holt: Any

49
00:02:54.615 --> 00:03:02.844
other questions?
&gt;&gt; Brian Holt: The good

50
00:03:02.844 --> 00:03:05.893
news here is we are done
with application code,

51
00:03:05.893 --> 00:03:10.480
everything that I'm gonna show you
from here on out is just more tools.

52
00:03:10.480 --> 00:03:13.220
[LAUGH] More techniques, right?

53
00:03:14.650 --> 00:03:16.250
Tests, all that kind of stuff.

54
00:03:16.250 --> 00:03:19.000
But now you pretty much have a full,

55
00:03:19.000 --> 00:03:23.770
I would deem a full grasp
on how to write React.

56
00:03:23.770 --> 00:03:27.460
And how to write at least
the basic levels of Redux,

57
00:03:27.460 --> 00:03:30.320
not getting into the crazy
stuff like that.

58
00:03:30.320 --> 00:03:33.290
There are still more facets of it
that we haven't really explored.

59
00:03:33.290 --> 00:03:35.656
But suffice to say that I've shown you,

60
00:03:35.656 --> 00:03:38.865
I would say 90% of use cases
on both React and Redux.

61
00:03:38.865 --> 00:03:44.304
So I would say, armed with the knowledge
that I have shown you over the past

62
00:03:44.304 --> 00:03:49.329
two and a half days, you can write
large scale React applications.

63
00:03:49.329 --> 00:03:53.259
And I think that's pretty awesome
that React is small enough and

64
00:03:53.259 --> 00:03:56.752
intuitive enough, or
at least I deem intuitive enough,

65
00:03:56.752 --> 00:03:59.840
that you really can learn it in two and
a half days.

