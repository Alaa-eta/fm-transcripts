[00:00:00]
>> Brian Holt: Let's go put into our package.json how to build, so we're gonna put build. Now notice I don't have webpack installed globally right now cuz I was running it from the node modules. Well I can just actually put webpack here. And when you do yarn build, or npm run build, it's actually smart enough to look first in its node modules to see if it's there first, right?

[00:00:28]
So every time I wanna build, I'm just gonna say yarn webpack, and it's gonna build for me, right?
>> Brian Holt: So I just put yarn or build right there. So, now if I go back to my command line,
>> Brian Holt: And I say clear, yarn build, notice it runs webpack.

[00:00:59]

>> Brian Holt: And same thing happens.
>> Brian Holt: Now I wanna show you something else that's kind of a cool trick too. Say I wanted to run it with that -p again. I can say yarn build -- everything after the -- is going to be provided as a command line argument to the command being ran underneath, right?

[00:01:21]
So if I say -p, notice it's gonna say webpack -p, right? So if you just want to try something out real quick that's a easy cheat way to do it.
>> Brian Holt: And as was pointed out earlier, what's annoying about what's happening right now, is I have to run build every single time I run a change of file, which is a non-starter for me.

[00:01:42]
I'm way to lazy to have to do that. So, luckily webpack takes care of that for you. If I just provide --watch,
>> Brian Holt: It's gonna build once, and now notice that it doesn't exit. It's still going. If I come in here to clientApp.jsx and I change this to be instead of Silicon Valley, I put House of Cards and I save it.

[00:02:18]
Notice it rebuilt really fast because it keeps everything in memory for you. And now if I refresh here, it says House of Cards.
>> Brian Holt: Any questions about that?
>> Brian Holt: So again, let's go put that into our package.json, cuz I think that's useful to have. So what we're gonna do here,

[00:02:42]

>> Brian Holt: Is we're gonna say watch and it's gonna be webpack --watch.
>> Brian Holt: Okay, and now, you can just say yarn watch, and you're off to the races. So the last thing I wanna do, that I wanna show you. And so if I say yarn lint right now, it's gona lose its mind in about the bundle file, right?

[00:03:16]
Because it's gonna have literally every eslint problem there is, and we don't care, right? It's compiled code, we don't care if it passes lint or not, right? We care that our source code passes lint. So real quick, I want you to go create a new file.
>> Brian Holt: And I want you to call it .eslintignore, I think it's what it's called.

[00:03:42]
Yup.
>> Brian Holt: And then inside of eslintignore, I want you put public/ and node_modules/ right? Because if some node maintainer is not passing your lint rules, then you don't care about that either, right?
>> Speaker 2: Can you go back to package JSON?
>> Brian Holt: Yeah, sure.
>> Brian Holt: Now right after this I'll push a branch.

[00:04:17]
So you can have all the built config and stuff like that.
>> Brian Holt: So now if I come back here and I say yarn lint, we should be passing lint again.
>> Brian Holt: So if you ever have arrows with lints, the best thing to do is just ignore them. That's ultimately what I'm getting at here.

[00:04:42]
That's a joke. Don't do that. But you can definitely ignore your bundled files.
>> Brian Holt: And the other thing, I believe, I should check. I'm pretty sure prettier also reads your eslintignore, so that's also helpful as well.

