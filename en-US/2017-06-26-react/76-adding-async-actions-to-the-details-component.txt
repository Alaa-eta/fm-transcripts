[00:00:00]
>> Brian Holt: We still haven't closed the loop here. So we actually need to go make details actually do all of this stuff for us. So go to details.jsx.
>> Brian Holt: So the first thing that we need to do up here is we're going to import. You're gonna get rid of axios up here, and we're going to import connect from react-redux,

[00:00:31]

>> Brian Holt: Redux. And we're going to import action creator. My notes are wrong here, so, sorry, I'll fix that. getAPIData from ./actionCreators,
>> Brian Holt: Okay, we're gonna get rid of the state here.
>> Brian Holt: And instead of doing all this axios stuff in componentDidMount, what we're gonna instead do is, say, if I'm not getting ratings back, so if (!this.props.rating), then I need to go request it.

[00:01:18]
So you're gonna say, this.props.getAPIData.
>> Brian Holt: Cuz you have to think of the case of, what happens if I click into Orange is the New Black, go back to the search page, and then go back into Orange is the New Black? You don't need to request the data a second time, right?

[00:01:39]
So that's why in componentDidMount, you're gonna check, do I already have data for this? If not, go request it. That's why we're doing this check up here.
>> Brian Holt: Props for this, we're going to get rating, which is going to be a string. And we're also going to get a function called getAPIData, which is going to be a function,

[00:02:15]

>> Brian Holt: Okay?
>> Brian Holt: So everywhere that says this.state.apiData, we just need to modify it, so it says this.props, right? Cuz this is gonna be coming from props, not from state anymore. And I modified that, so yeah, not apiData, just this.props.rating.
>> Brian Holt: Right, so if that this.props.rating, then put it out there, otherwise, put out the loading spinner,

[00:02:52]

>> Brian Holt: Okay? Then at the bottom, we're gonna make our mapStateToProps, so const mapStateToProps = (state), which is going to return an object.
>> Brian Holt: Yeah, let's actually make that a full function. I think this is more clear if we do it this way, so I'm gonna say const apiData = state.apiData.

[00:03:31]

>> Brian Holt: And we have to get ownProps as well, don't we? So secretly, mapStateToProps, there's a second parameter here called ownProps, which is going to be the props passed down from the parent, right? And we need this because that's how we're going to determine which API data we're going to pull out of our Redux store, right?

[00:03:49]
So that's what ownProps is, so if you look up here, ownProps, and we're gonna be getting the Show from the parent, right? So we're going to use the show coming from the parents to determine which API data we're gonna pull out of our Redux store.
>> Brian Holt: Okay, so we're gonna do here is ownProps.show.imdbID, right?

[00:04:14]
That's where that show is coming from. So if that exists, then return that, right?
>> Brian Holt: If you're not familiar with this question mark, we're doing what's called a ternary operator here, right? So, if this is true, do this first thing. Otherwise, after the colon here, do the other thing, right?

[00:04:45]
So, if I have API data for this particular show, return that API data. Otherwise, return empty object. You can totally write this out as an if statement, and I'm 100% okay with that.
>> Brian Holt: And then we're gonna return down here an object with rating: apiData.rating.
>> Brian Holt: Oops, I don't need that semicolon.

[00:05:19]
So if it's this empty object, then the rating is going to be Undefined, and that's fine.
>> Brian Holt: If you want it to be empty string, you could totally just do this as well, either way.
>> Brian Holt: Okay, now we need to mapDispatchToProps. So we're gonna say const mapDispatchToProps.
>> Brian Holt: It's going to take in dispatch, which is going to be a function.

[00:06:02]
And so I was gonna take in the ownProps as well. And it's going to return this object with the function on it, getAPIData, which takes in nothing, that's fine. And you're going to dispatch(getAPIData(ownProps.show.imdbID)). So if you call this function, it's gonna say okay, what show are you? And it's gonna grab that show, and it's gonna take that imdbID and then throw that out to the thunk, which is gonna take care of all the data requests behind the scenes, right?

[00:06:50]
Then down here at the bottom, I'm gonna say connect,
>> Brian Holt: mapStateToProps and then mapDispatchToProps.
>> Brian Holt: But now, we should be able to save this. Go over to our application.
>> Brian Holt: And that is large, let's go back to normal. So I'll refresh the page, let's open our Redux tools, we can see what's happening here.

[00:07:23]
So if I click into Billions,
>> Brian Holt: Am I getting an error here? Cool, that's neat.
>> Brian Holt: Did I not save here? So did I import getAPIData from actionCreators?
>> Speaker 2: It's supposed to be add API data.
>> Brian Holt: Add API, no, you want getAPIDetails, that's what it is. So, details,

[00:07:59]

>> Brian Holt: getAPIDetails. And then down here, we're gonna call this getAPIDetails.
>> Brian Holt: Yep, okay,
>> Brian Holt: So, yeah, just to recap, we changed this to getAPIDetails cuz that's what I called the function inside of actionCreators. And then down here, I just changed that as well to be getAPIDetails. Okay, now if we go back over here,

[00:08:34]

>> Brian Holt: Go into Redux, we can see what has happened here. We can see that an ADD_API_DATA action was called, and we were able to get this payload, which was Billions, right? But now, what's really cool, if I go back and then I click on Billions again, notice that I will not get the loading spinner.

[00:08:56]
And it's just gonna instantly load that rating, cuz it already has it in the store.
>> Brian Holt: So, same thing if you go into Atlanta,
>> Brian Holt: First time I made the request, you can see the request down here in our explorer.
>> Brian Holt: So,
>> Brian Holt: That one, and [COUGH] now if we go back, click into Atlanta, it's still gonna be there.

[00:09:30]
And same thing if I go back to Billions, still there, right? But if I refresh, notice on the first time, it's gonna make that request, so

