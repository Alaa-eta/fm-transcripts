[00:00:00]
>> Brian Holt: One more thing, 76 kilobytes for a pretty simple app like this still kinda sucks, right? We didn’t build a giant sprawling app, and it’s kind of unfortunately we still are loading upwards of 70 kilobytes. So how can be push on this a little bit harder? But really it's library code at this point, we're doing the best we can with what we have.

[00:00:21]
So wouldn't it be smaller, if, instead of being 45 kilobytes, if React was only 3 kilobytes?
>> Brian Holt: Three, yeah, I mean that would be really nice, right? So, what you can do is, instead of importing React, you can import something called Preact. So Preact is a React compatible library that does everything that React does in the sense that it uses the same API to achieve the same results, except it does it with something called, or it does it with 3 kilobytes instead of 45.

[00:00:52]
Now, you might ask yourself, that doesn't really seem to make sense. One, the guy the right said, Jason Miller, is actually a wizard, so I'm told. And secondly, it actually tends to be a little bit faster because he's not doing all the, kind of debugging checks that React is doing for you.

[00:01:13]
Some of that stuff is not present. It doesn't have a synthetic event system, it just uses the dom event system which most of the time is usually enough. So there's trade offs to be made here of whether or not you wanna include Preact. It's really cool, it's something you should consider.

[00:01:27]
It's something you should try, but I'm not saying that it's a must. But let's go see how it works. We're going to not change any of our code, and it's just gonna work. It's just magical. Okay, so inside of Resolve,
>> Brian Holt: We're gonna do something here called alias.

[00:01:49]

>> Brian Holt: And what we're gonna do is we're going to, any time that we call for React, we're gonna call for a library called preact-compat. Same thing with react-dom, anytime that it calls for react-dom, I'm gonna give it preact-compat.
>> Brian Holt: What this is doing is that anywhere I say import React from React, it's actually secretly going to give it Preact.

[00:02:17]
And preact compat has a couple of more things built into it to make it totally React compatible. So this is actually gonna be about eight kilobytes cuz it has that five kilobytes of compatibility stuff that we're gonna need.
>> Brian Holt: We might be able to do it without compat, we'll try here in just a second, but let's try with compat for just a moment.

[00:02:36]
And same thing with react-dom, every time that we ask for react-dom, it's gonna give it this preact library, which is able to do all of this stuff.
>> Brian Holt: Okay, and then last thing is some of it needs to be run through Babel. So inside of the Babel library, we're gonna have to give it an include.

[00:02:57]

>> Brian Holt: So include,
>> Brian Holt: This stuff.
>> Brian Holt: And we're gonna do path.resolve js.
>> Brian Holt: But the other thing we're gonna have to run through is node_modules/preact.compat/src. Typically, you don't wanna run your node_modules through Babel, but for whatever reason, Preact needs it. So, that's why,
>> Brian Holt: Sorry, and this doesn't go inside of eslint, this goes inside of Bable.

[00:03:51]
Okay, so let's go and run our build again. So keep in mind, it was 76 kilobytes before, right? So now, we're gonna do yarn build. Let's see what happens.
>> Brian Holt: Sorry, we were 226, right? 226, the un-gzipped version. Now we're down to 131. The routes should be about the same, they shouldn't change at all because Preact is being included with the main bundle.

[00:04:34]
We broke server side rendering, well, actually we didn't. So our server side rendering is gonna do React, and our client side is gonna do Preact. Kinda weird, you wouldn't typically do that but I'm not gonna fix it right now. So yarn start.
>> Brian Holt: We'll see if this actually works.

[00:04:57]
So we went from 76, right? Which was the g zip size down to 39. So we're able to save about 30 kilobytes just by switching to Preact, and guess what? Everything still works. Still pretty zippy, right? No real problems. For this application, we absolutely should be using Preact, right?

[00:05:22]
There's another library called Inferno that achieves the same thing. It's a little bit bigger, but it has some different performance strategies. So the answer of which one should you use Preact or Inferno, I would say try both and do the one that feels faster. They're both amazing. In fact, Facebook actually hired the guy that does Inferno, and now he's working on performance on React.

[00:05:44]
So that guy's amazing, yeah.
>> Speaker 2: If Axios was used in two separate routes, what would be the inclusion strategy, would you include it in the main bundle, or both the routes that included?
>> Brian Holt: The answer to that question is you're never going to choose. You can kind of structure your code in such a way, but it's actually web pack, web pack that's gonna have the final say.

[00:06:10]
Now the question might be, which one is it going to be included in. I'm not actually sure, and I think we can kinda test real quick. So if I go into, let's say landing real quick, and I say import axios up here.
>> Brian Holt: I don't even have to use it, but it should still be, or maybe I'll just do consol.log axios here.

[00:06:36]

>> Brian Holt: So now, it's required in landing as well, right? So if I go in here and say,
>> Brian Holt: Yeah, I'm having a bunch of promise stuff, but that's fine.
>> Brian Holt: All right, I need to do build again.
>> Brian Holt: Yarn build.
>> Brian Holt: See what it comes out with? So my guess is it might, I don't know what it did here.

[00:07:20]

>> Brian Holt: All right, so. I think I know what happened here, so Yarn start.
>> Brian Holt: Network. All right, so I put it on landing now. Yeah, now I get an 11 megabyte library, or 11 kilobyte library there. So that's that one. So that's 1.bundle.js, right, okay. Now, if I go to here, and I need it here,

[00:08:05]

>> Brian Holt: How big was that one? Zero was also 11 kilobytes.
>> Brian Holt: Interesting. Okay, yeah, so it just included axios in both bundles. And so now, it still leaves the second bundle alone, so that's the answer to that question.

