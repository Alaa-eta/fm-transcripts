[00:00:00]
>> Brian Holt: So now we have showCard being typed. So let's go do client app real quick. At the top do @flow. The first thing it's gonna say is, I don't know what module is like many of you did. [LAUGH] And that's because it has no definition for that. So I'm gonna go show you how to create your own definitions.

[00:00:25]

>> Brian Holt: So inside of the flow type directory, I create a new file called types dot.js.
>> Brian Holt: This is gonna be a place where you create types that the rest of your project can use. So if you wanted to use module in multiple places, this is where you would do it.

[00:00:47]
So we're gonna do @flow up here and there's a couple ways of doing this. But we're just gonna say for now, declare var module, hot. And it's gonna be accept path, string, and callback which is going to return void and it itself returns void.
>> Brian Holt: So what we did here is we declared a new type.

[00:01:25]
So this is basically acknowledging this is going to be a global variable. This is how you interact with it, right? So it’s going to be an object, it’s gonna have a method called, or it’s gonna have an object called hot, and the only method that we acknowledge on it is called accept.

[00:01:41]
And it's going to take a path which is a string, and it's gonna take a function that returns void which means it's not going to return anything. And then accept, the function itself, returns void.
>> Brian Holt: Any questions about that?
>> Brian Holt: So now, we can use module .hot.accept anywhere in our code, and flow is gonna know about the types that go in and out of it.

[00:02:15]
There's more to module. I don't remember what's in it, but if you needed to use more things you would just come in and annotate this a little bit more. So now if we go back to clientapp.jsx, hopefully,
>> Brian Holt: We'll see if flow has figured it out.
>> Brian Holt: Yeah, it has.

[00:02:44]

>> Brian Holt: Is that a lint error? Sometimes it's tough to tell the difference. No, it's cool with it.
>> Brian Holt: Yep, okay, it's fine. Again, sometimes flow type can be a little bit slow to update with sublime. Any questions about type definitions? A lot of times I just put all the types in one file cuz I usually don't have enough types to warrant making a separate file for each type, but that kinda falls to your discretion.

[00:03:16]
I usually only end up typing five to ten objects, and that's fine.
>> Brian Holt: Okay, let's go to landing.
>> Brian Holt: And we're gonna do @flow, and guess what? No changes. It just hopped into the type checker and it's already good to go. So landing's all checked and good to go.

[00:03:49]

>> Brian Holt: And what else do we need to do? Js here.
>> Brian Holt: We did search. We did landing. Client app, app. App needs to be typed as well. So we're gonna do /flow up here and that should be good as well.
>> Brian Holt: So something that's gonna be really cool that flow just kinda gets you out of the box,

[00:04:20]

>> Brian Holt: If I start saying something like, hey I'm gonna pass in somethingNotReal
>> Brian Holt: Is it this way to do? Yarn flow. Nope, not that, the other way around. So you can pass in things
>> Brian Holt: But yeah, here in props I could say props.thing and it's gonna give me something like, hey, you don't have any props for this, so I'm not gonna let you do this.

[00:05:02]
So it's gonna be constantly checking your React, your props, and your state. Like a good way of also visualizing this, something that would not otherwise be caught. So if I go to search.jsx. I have searchTerm right here, but if I try and say this.state.searchTerm.
>> Brian Holt: What's something that's not on the stream, well let's say this was five for just a second.

[00:05:33]
Say it was a number and try and say .toUpperCase
>> Brian Holt: It's gonna say, hey you said you're calling toUpperCase, that's a string thing not a number thing, so that's gonna fail. And so your flow typing's gonna start failing. The other thing is notice right here where it says this.setState, it's trying to set that state to be a string.

[00:05:55]
It's gonna say you're calling setstate with a string here, this is a number. You're gonna mess things up if you give this a string. How does it know that? Well by doing state like this, it's gonna type your state implicitly based on the initial strings or the initial things that are given there.

[00:06:15]
So I didn't tell it that searchTerm was a number, it just knows that which is pretty cool. So now I change this back to a string and everything's fine because all of that works with strings. Does it make sense? So this is gonna catch issues that you wouldn't otherwise see.

[00:06:37]

>> Brian Holt: So again, this is why I say like, it is work to get flow and TypeScript up and working, but I guarantee you it's gonna save you bucks. This just eliminates an entire class of bucks. Even if I said, this.state.searchTerm.toUppercase, and I did a lowercase like that. This would totally fly, right?

[00:07:02]
In the sense of, this is gonna make a pass lint, this is gonna make a pass of a bunch of different things. But it's gonna get caught a lot sooner by flow types, it's like, hey, this isn't a real function. So this kinda fat finger or not remembering the C here is capitalized, all that class of problems get's eliminated by using a type checker.

[00:07:22]
So it's pretty awesome. I'm a fan.
>> Brian Holt: Yeah?
>> Audience 1: Have you used it in production?
>> Brian Holt: Yeah, Netflix uses flow. I would say, and they use type script as well, it depends on which team you're on. But I know Facebook has over 50% coverage on their flow for their entire code base which is crazy.

[00:07:50]

>> Brian Holt: I would say Netflix's code coverage was lower than that. Where we found great success is that when we would export components to other teams, we would just ship along with them some flow typings. And so when they were using and consuming those, they were going to be assured that this is how it's supposed to work.

[00:08:07]
Yeah?
>> Audience 1: Greg's asking if all the code from flowTypes.js should be checked in.
>> Brian Holt: Yes, yep, it should be.
>> Brian Holt: I think that's the recommendation off the repo. But I mean, you can use flow type to install it as well so you can probably ignore it as well.

[00:08:32]

>> Audience 1: And the NPM folder too?
>> Brian Holt: I think so, I think that's what they recommend cuz as those files get updated, even if your code is basing itself on broken types, or not broken types just maybe outdate types, you wanna be explicit that you want to opt into those upgrades.

[00:08:54]
It's not like MPM where you're assured that if you pull in this version you're getting this version 100% of the time. It's not so robust cuz it really is just a repository full of types.
>> Brian Holt: So I believe the recommendation from the flow team is to check in your types, and then update them yourself.

