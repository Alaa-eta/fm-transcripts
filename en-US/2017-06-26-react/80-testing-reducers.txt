[00:00:00]
>> Brian Holt: Alright V3-24 is pushed, now we're going to get into testing Redux, which is way more fun, why is it fun? Because you don't actually have to write the tests, the dev tools will write tests for you, so let me show you what I mean unless there's any questions?

[00:00:21]

>> Brian Holt: All right, let's keep going then, so refreshing the page, we're still on the search page and I want to test right now the ability to do a search, right? So what I'm gonna do is I'm gonna copy the word black.
>> Brian Holt: And I'm going to paste it in here so I have one atomic action from going from empty string to black.

[00:00:51]
So I'm gonna paste that okay, that dispatched one action to the Redux store right, so my state went from empty string to black. So now if I go in here to Redux, the tools down at the bottom, I'm gonna go into Inspector okay, I'm gonna click on this search term one.

[00:01:11]
That's the action that I care about at this moment, and you can see here, I went from empty string to black, exactly like I expected, okay. Notice this test thing over here, and I'm going to click on that, and if you look at this, this is a test case written just for you without doing anything.

[00:01:34]
I can literally just copy that, go over here, create a new file, this is still going into the test directory inside of JS, I'm gonna call it reducers dot spec dot JS. Going to paste that in there, it did get the path wrong so you're gonna have to fix the path but it's a small price to pay in my opinion.

[00:02:03]

>> Brian Holt: And then I'm going to save it.
>> Brian Holt: And you're gonna have to fix some lint errors there but that's again, not too bad.
>> Brian Holt: And now, I have a free test case, it's not really doing anything too crazy, it's pulling in the root reducer. It's saying, given this initial state which is the initial state of your app, given this action, I expect that to equal this.

[00:02:41]

>> Brian Holt: So now if I go in here and say yarn test, I should having a passing test, which I do.
>> Brian Holt: I get super excited about this because this is just free, it is like, I don't have to do anything. I just have to copy and paste to fix my lint errors and it is just done, so I'm gonna make this a little more succinct.

[00:03:05]
So what we're actually testing here is Set search term, I think that's helpful, that people can know that's exactly what you're testing. If you wanted to, you could go in here and create several test cases of like, going from black to two or something like that. But for now I'm plenty pleased with this, so let's go in and do the same thing for our API test case.

[00:03:33]
So I'm going to go into, let's do West, I'm going to West World. So I'm going to Open West World, but I'm actually going to refresh the page because I'm interested in going from no state to having state. I need the API server to be up as well, so I'm gonna go into talks > fam.

[00:04:00]

>> Brian Holt: So I'm back in my directory, I'm gonna say, yarn api.
>> Brian Holt: And now I'm gonna refresh the page.
>> Brian Holt: And now I get this test case back, so I'm gonna click on the add API one, I need Inspector, so this one right here, click on that, click on test.

[00:04:30]
Something worth noting is there are multiple templates here so if you wanna do a Mocha test or a Tape test or an Ova test, it's not tied to Jest. You don't have to use Jest, that's just the one that we're using okay, I'm gonna copy my test here.

[00:04:44]
Come in here, it's grabbing all of the API data, which is fine with me.
>> Brian Holt: This is gonna be ADD_API_DATA, I'm gonna say const state = blah, and lo and behold, we have another test case. And, it's nice formatting, I think you're prettier, and let's go run our test to make sure it's working the way we anticipate, yarn test.

[00:05:19]

>> Brian Holt: All passing, so cool, two free test cases.
>> Brian Holt: Any questions about that so far?
>> Speaker 2: If you were to restart your API server though, it would get a different reading, so then this test case would fail?
>> Brian Holt: This isn't really hitting the API though, right, this is just calling reducer with this search term or this initial state, right?

[00:05:48]
And this action, right, so this action came from the API once but it's just saying, given this action, it looks like this, right, that's gonna be true always.
>> Speaker 2: All right, gotcha.
>> Brian Holt: I think you're hitting an important concept here is that this is why Redux is so awesome.

[00:06:08]
This is why I absolutely adore it is that, given an action and an initial state it returns a new state. And that's really easy to test, right, input in, output out, nothing in between, right, that's really it, so given this state, given this action, it looks like this.

[00:06:28]
And if you wanna test something more complicated, right, if I come in here and say for example, let's say I had a bug. That if I go into Westworld then go back out and immediately got into Game of Thrones, I have some bug, let's say I fix it.

[00:06:43]
And I wanna make sure that doesn't happen again, I can come back in here on the second one and I go in here and say, test, right? It's giving me the test case of going from having just Westworld to having Westworld and Game of Thrones, right? So, feel free again to come in here, this is gonna be a longer test case, right, but if I come in here and say that.

[00:07:05]
To say constate, and this is add API data with two shows, right, now I have another test case that tests that as well, and again you can run yarn test.
>> Brian Holt: And I have one fill-in, yeah, because I didn't delete the import reducers up here.
>> Brian Holt: So that's up to you, it depends on how crazy you wanna get right, for me, one of the things that really drives what test case I write.

[00:07:46]
Is I wait for something to fail, right, I fix it and then I write another test case so I don't regress that way again. That's been a pretty successful strategy for me, I'll typically test the happy paths, like making sure that the things work out the way that I anticipate.

[00:08:01]
I will test error cases that I anticipate it might hit, and then from there I just wait for errors to come in. Once I fix an error, I try and write a test so that I don't regress back into that, cool, any other questions?
>> Brian Holt: Cool.
>> Brian Holt: So that's how you are gonna test the reducers, that's a really easy way of doing it.

[00:08:31]
There is nothing to say, you can't go write these tests yourself but why not get them for free?

