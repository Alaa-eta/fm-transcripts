WEBVTT

1
00:00:00.390 --> 00:00:04.560
&gt;&gt; Brian Holt: Let's go into
plugins in our Babel-RC file.

2
00:00:07.300 --> 00:00:13.700
So right now, we already have
babel-plugin-transform-class-properties,

3
00:00:13.700 --> 00:00:16.740
and we're going to add
this one as the first one,

4
00:00:16.740 --> 00:00:20.065
which is going to be react-hotloader.

5
00:00:23.507 --> 00:00:24.503
&gt;&gt; Brian Holt: /babel.

6
00:00:27.350 --> 00:00:31.918
&gt;&gt; Brian Holt: This is going to do a Babel
transformation that basically it's going

7
00:00:31.918 --> 00:00:36.879
to make the joints that the hot module
replacement knows where to cut off and

8
00:00:36.879 --> 00:00:38.970
reinsert itself into.

9
00:00:38.970 --> 00:00:42.310
It just does that all for free for
you behind the scenes, thanks to Babel.

10
00:00:45.425 --> 00:00:50.301
&gt;&gt; Brian Holt: Okay,
&gt;&gt; Brian Holt: Now,

11
00:00:50.301 --> 00:00:52.520
I want you to go into your webpack config.

12
00:00:54.296 --> 00:00:56.540
&gt;&gt; Brian Holt: Gonna have to make
it a tiny bit more complicated.

13
00:00:58.040 --> 00:01:03.320
First thing is we're gonna import,
&gt;&gt; Brian Holt: Webpack as well.

14
00:01:05.773 --> 00:01:08.922
&gt;&gt; Brian Holt: I should say that this is
a feature that was already built into

15
00:01:08.922 --> 00:01:13.590
Webpack and React is just kind of
the first that would take advantage of it.

16
00:01:13.590 --> 00:01:18.170
But Webpack was already armed with this
ability with Webpack one, I believe.

17
00:01:18.170 --> 00:01:23.040
It's just no one was really taking
any advantage of it yet until

18
00:01:23.040 --> 00:01:28.220
the same guy that wrote Redux and
now works in the React Core Team,

19
00:01:28.220 --> 00:01:33.610
Dan Abramov, said like,
I should do this, and so he did.

20
00:01:34.710 --> 00:01:36.940
The first thing we need
to change here is entry.

21
00:01:36.940 --> 00:01:41.100
This is gonna have to now be an array, cuz
we have to give it some additional code so

22
00:01:41.100 --> 00:01:43.200
it knows how to do the hot
module replacement.

23
00:01:46.794 --> 00:01:49.305
&gt;&gt; Brian Holt: Okay, and we're gonna do,

24
00:01:49.305 --> 00:01:53.920
first one is gonna be
react-hot-loader/patch.

25
00:01:53.920 --> 00:01:56.778
I will say that the order
here is critical, so

26
00:01:56.778 --> 00:01:59.270
make sure you get it in the right order.

27
00:02:01.149 --> 00:02:06.701
&gt;&gt; Brian Holt: Webpack-devserver/client,
&gt;&gt; Brian Holt: and

28
00:02:06.701 --> 00:02:10.652
then you need to give it some,
&gt;&gt; Brian Holt: you need to give it the URL

29
00:02:10.652 --> 00:02:17.355
that it's going to live on, so
we're gonna do localhost:8080.

30
00:02:21.051 --> 00:02:25.651
&gt;&gt; Brian Holt: And then we're gonna do

31
00:02:25.651 --> 00:02:33.277
webpack/hot/only-dev-server.

32
00:02:33.277 --> 00:02:37.449
There are several types
of hot reloaders and

33
00:02:37.449 --> 00:02:43.660
I went through them and chose this one,
and I do not remember why.

34
00:02:43.660 --> 00:02:47.788
But, feel free to go check
out the web pack docs,

35
00:02:47.788 --> 00:02:53.550
there are a couple different types
of the way it does hot reloading.

36
00:02:55.741 --> 00:02:59.418
&gt;&gt; Brian Holt: So make sure you're
doing cheap-evol-source-map.

37
00:02:59.418 --> 00:03:02.933
Something I need to tell you about hot
module reload is that, again, it's kind

38
00:03:02.933 --> 00:03:06.360
of a new thing so browsers haven't
totally caught up that this is happening.

39
00:03:06.360 --> 00:03:09.799
So, the first thing you're gonna
mess up is your source map.

40
00:03:09.799 --> 00:03:11.853
So your source maps upon hot reload,

41
00:03:11.853 --> 00:03:15.160
they're not going to
necessarily follow along.

42
00:03:15.160 --> 00:03:16.170
It's a bug with a browser.

43
00:03:16.170 --> 00:03:20.280
I know Chromium, as of last week,
is working on it.

44
00:03:20.280 --> 00:03:23.190
And Firefox just says like,
that seems like a problem.

45
00:03:23.190 --> 00:03:24.960
And that's about all
we've gotten out of them.

46
00:03:24.960 --> 00:03:29.860
So it'll eventually get fixed,
I'm sure, just not today.

47
00:03:31.844 --> 00:03:37.002
&gt;&gt; Brian Holt: Okay so under devServer,
&gt;&gt; Brian Holt: You just need to say,

48
00:03:37.002 --> 00:03:39.000
hey, I need this to be a hot server.

49
00:03:43.262 --> 00:03:47.560
&gt;&gt; Brian Holt: Okay, and
now I want you to go down to

50
00:03:49.474 --> 00:03:50.478
&gt;&gt; Brian Holt: right underneath stats,

51
00:03:50.478 --> 00:03:52.160
we'll do it there.

52
00:03:52.160 --> 00:03:53.960
There's another thing called plugins.

53
00:03:55.637 --> 00:03:58.565
&gt;&gt; Brian Holt: This is augmenting
the abilities of webpack.

54
00:04:00.450 --> 00:04:06.929
So we need to give it two plugins

55
00:04:06.929 --> 00:04:11.913
here, one of them is new

56
00:04:11.913 --> 00:04:21.390
webpack.HotModuleReplacementPlugin and

57
00:04:21.390 --> 00:04:29.383
new webpack.NamedModulesPlugin.

58
00:04:33.153 --> 00:04:36.854
&gt;&gt; Brian Holt: So, I'm sure you can
imagine why we have HotModuleReplacement,

59
00:04:36.854 --> 00:04:42.110
that's just giving it the additional
abilities to insert those hot connectors.

60
00:04:42.110 --> 00:04:44.000
And NamedModules,

61
00:04:44.000 --> 00:04:47.320
it's gonna send down the names of
whatever modules you're replacing.

62
00:04:47.320 --> 00:04:49.130
So at least, if something goes wrong,

63
00:04:49.130 --> 00:04:51.726
it's going to tell you something
went wrong with search.

64
00:04:51.726 --> 00:04:55.150
That's the NamedModulesPlugins does for

65
00:04:55.150 --> 00:04:58.490
you, is it just sends down the names
as well for debugging purposes.

66
00:05:06.328 --> 00:05:08.685
&gt;&gt; Brian Holt: Okay, we are not done yet.

67
00:05:08.685 --> 00:05:12.790
[LAUGH]
The problem that we have now,

68
00:05:14.350 --> 00:05:17.380
if we go to clientApp.jsx,

69
00:05:17.380 --> 00:05:21.990
is what happens if app changes.

70
00:05:23.340 --> 00:05:29.160
We have no way to, because this is the
entry file, we have no way to replace it.

71
00:05:29.160 --> 00:05:32.675
And so we actually have to
enable our code to be replaced.

72
00:05:32.675 --> 00:05:37.457
So what we're going to do is we're going
to put split client app into a separate

73
00:05:37.457 --> 00:05:40.864
file, and
then we're going to have a clientApp.jsx,

74
00:05:40.864 --> 00:05:44.000
which will be an entry point for
hot module reload.

75
00:05:45.470 --> 00:05:49.060
This will also be useful later for
several purposes,

76
00:05:49.060 --> 00:05:52.070
one of them which is code splitting, and
one of which is service side rendering, so

77
00:05:52.070 --> 00:05:55.158
we would have to do this anyway
eventually, so it's okay.

78
00:05:55.158 --> 00:05:58.865
[LAUGH] I see some looks like,
I don't wanna do that.

79
00:05:58.865 --> 00:06:04.150
[LAUGH] I get it, but believe me, overall,
this is gonna be a positive thing.

80
00:06:05.870 --> 00:06:10.330
So I want you to create
a new file called app.jsx.

81
00:06:10.330 --> 00:06:13.790
And this is going to be a file that can
also be used service-side rendered and

82
00:06:13.790 --> 00:06:15.593
all that kind of stuff, so it's good.

83
00:06:15.593 --> 00:06:20.040
So in app.jsx we're gonna have
to basically take most of this.

84
00:06:21.940 --> 00:06:25.662
&gt;&gt; Brian Holt: We're gonna have to take
the browser router, we're gonna have to

85
00:06:25.662 --> 00:06:30.720
take react, basically everything but the
render statements, that's gonna stay here.

86
00:06:31.970 --> 00:06:36.040
So we're gonna pull that out and
go to app.jsx.

87
00:06:36.040 --> 00:06:39.670
I'm gonna pull copy react cuz
it's needed in both places.

88
00:06:43.005 --> 00:06:46.620
&gt;&gt; Brian Holt: And then down here,
we're gonna pull out 404 and app.

89
00:06:50.830 --> 00:06:53.390
&gt;&gt; Brian Holt: And
we're going to put that in here.

90
00:06:56.230 --> 00:06:59.330
Then down here we're going
to export default App.

91
00:07:03.290 --> 00:07:05.510
And I think that should be enough for
this.

92
00:07:10.270 --> 00:07:16.770
&gt;&gt; Brian Holt: Now, if we come in to
clientApp.jsx, we're going to import app.

93
00:07:23.287 --> 00:07:24.871
&gt;&gt; Brian Holt: ./App.

94
00:07:26.695 --> 00:07:27.950
&gt;&gt; Brian Holt: So now,
this should work again, right?

95
00:07:27.950 --> 00:07:32.190
Now we have Apps split out as a separate
component on all client app does

96
00:07:32.190 --> 00:07:33.306
is render it out.

97
00:07:33.306 --> 00:07:35.900
But we wanna make this
a little bit more smart,

98
00:07:35.900 --> 00:07:38.080
we want this to be able to hot reload.

99
00:07:38.080 --> 00:07:43.060
So what we're gonna do is we're gonna

100
00:07:43.060 --> 00:07:47.887
make a function called renderApp and

101
00:07:47.887 --> 00:07:53.023
it's gonna be a function that all it's

102
00:07:53.023 --> 00:07:57.692
gonna do is to render(&lt; App /&gt;,

103
00:07:57.692 --> 00:08:04.720
document.getElementById(' ')) App, okay.

104
00:08:08.730 --> 00:08:10.040
So basically what we had down here.

105
00:08:10.040 --> 00:08:12.840
And then the first thing we're gonna
do is we're gonna call renderApp, so

106
00:08:12.840 --> 00:08:14.220
it gets rendered the first time.

107
00:08:15.360 --> 00:08:22.060
And then down here we're
gonna say if module.hot,

108
00:08:22.060 --> 00:08:24.880
which will only be available in dev,
right?

109
00:08:24.880 --> 00:08:28.373
So this will not be enabled in production.

110
00:08:28.373 --> 00:08:35.779
We're gonna say module.hot.accept('./App'.

111
00:08:40.375 --> 00:08:41.701
&gt;&gt; Brian Holt: and then renderApp.

112
00:08:47.696 --> 00:08:50.010
&gt;&gt; Brian Holt: So,
what this is really doing.

113
00:08:52.660 --> 00:08:57.890
If hot module replacement is for

114
00:08:57.890 --> 00:09:03.426
this particular build, it's going to say,
okay, I see that module.hot exists, right?

115
00:09:03.426 --> 00:09:06.930
So if module.hot exists you can be
assured that you're in development.

116
00:09:08.400 --> 00:09:09.580
And then it says,

117
00:09:09.580 --> 00:09:13.770
every time that you tell me that app has
changed, I need to call this function.

118
00:09:15.080 --> 00:09:18.240
So any time that app changes,
just re-render the whole app.

119
00:09:20.968 --> 00:09:23.653
&gt;&gt; Brian Holt: Everything else, because
there is those joints that we did with

120
00:09:23.653 --> 00:09:26.100
the battle plugin,
they know how to replace themselves.

121
00:09:26.100 --> 00:09:29.440
It's just the top level component that
you need to give a little extra help

122
00:09:29.440 --> 00:09:30.600
to be able to know how to replace.

123
00:09:35.170 --> 00:09:35.852
&gt;&gt; Brian Holt: Doing this,

124
00:09:35.852 --> 00:09:39.730
some people get worried about this
calling render multiple times.

125
00:09:39.730 --> 00:09:40.630
It's okay.

126
00:09:40.630 --> 00:09:41.840
React knows how to handle that.

127
00:09:41.840 --> 00:09:45.085
That's the preferred way that if you need
to force a re-render of the top level

128
00:09:45.085 --> 00:09:48.020
component, this is the way
you're supposed to do it.

129
00:09:48.020 --> 00:09:49.720
It'll do the same virtual DOM diffing.

130
00:09:49.720 --> 00:09:53.350
It just works like a normal replacement.

131
00:09:53.350 --> 00:09:57.580
So that's okay,
you can definitely do that.

132
00:09:57.580 --> 00:10:00.380
&gt;&gt; Speaker 2: In the module variable,
where is that coming from?

133
00:10:00.380 --> 00:10:00.880
&gt;&gt; Brian Holt: Webpack.

134
00:10:01.900 --> 00:10:04.390
It's a webpack thing, so
it's specific to webpack.

135
00:10:10.542 --> 00:10:13.470
&gt;&gt; Brian Holt: Any questions before
we go see how awesome it is?

136
00:10:14.640 --> 00:10:16.520
&gt;&gt; Speaker 3: Could you
show the app file again?

137
00:10:16.520 --> 00:10:21.560
&gt;&gt; Brian Holt: Sure.
App, that one.

138
00:10:21.560 --> 00:10:24.200
It's pretty much what we had before so
it's not doing any cleanse head rendering.

139
00:10:25.770 --> 00:10:32.290
So again, I wanted to emphasize, this
is a good pattern to split out App.jsx,

140
00:10:32.290 --> 00:10:37.680
which has no necessarily browser
concerns of it's own, right?

141
00:10:37.680 --> 00:10:41.070
So now this can be run in Node.

142
00:10:42.710 --> 00:10:46.120
You have to take care of browser router
it but there's a way to do that.

143
00:10:46.120 --> 00:10:46.900
So don't worry about that.

144
00:10:50.066 --> 00:10:50.870
&gt;&gt; Brian Holt: In fact,
we'll do that later.

145
00:10:52.610 --> 00:10:54.790
And then client app here.

146
00:10:56.440 --> 00:11:00.040
If you need to do anything specifically
from the browser, like module.hot,

147
00:11:00.040 --> 00:11:01.860
this is where you would do it.

148
00:11:01.860 --> 00:11:08.377
Now let's say you needed to, I don't know,
&gt;&gt; Brian Holt: mess

149
00:11:08.377 --> 00:11:09.025
with the documents somehow.

150
00:11:09.025 --> 00:11:12.195
You can be assured that if you're inside
of client app and you wanna do something

151
00:11:12.195 --> 00:11:15.235
only in the browser and not in Node,
this is the place that you would do it.

152
00:11:15.235 --> 00:11:18.035
So client app is the place for
your browser code.

153
00:11:21.422 --> 00:11:24.474
&gt;&gt; Brian Holt: If you need to just fire
off Google Analytics, you would only wanna

154
00:11:24.474 --> 00:11:27.921
do that in the browser, this would be
the place that you'd want to do that.

155
00:11:32.152 --> 00:11:35.120
&gt;&gt; Brian Holt: And people get a little
upset just like, well, this is dev code

156
00:11:35.120 --> 00:11:39.300
that I'm gonna be shipping down to
the client, I don't wanna do that.

157
00:11:39.300 --> 00:11:42.900
If you really don't wanna do that,
there's a tool called groundskeeper

158
00:11:42.900 --> 00:11:46.520
that you can remove code before
you send it down to production.

159
00:11:46.520 --> 00:11:50.840
You can do that, but this is gonna
end up being like a few bites, so

160
00:11:50.840 --> 00:11:52.760
it doesn't bother me but
it might bother you.

161
00:11:55.030 --> 00:11:59.270
Okay, so let's restart webpack
since we messed a bunch with it.

162
00:12:03.171 --> 00:12:06.157
&gt;&gt; Brian Holt: Then once this hopefully
works, I will refresh your branch for you

163
00:12:13.340 --> 00:12:14.848
&gt;&gt; Brian Holt: Take a second for

164
00:12:14.848 --> 00:12:17.222
webpack to build, okay?

165
00:12:20.568 --> 00:12:25.170
&gt;&gt; Brian Holt: That's a good sign, you can
see here that it's including some webpack

166
00:12:25.170 --> 00:12:29.446
hot stuff
&gt;&gt; Brian Holt: So, the one thing,

167
00:12:29.446 --> 00:12:35.000
this is gonna balloon your Dev build even
bigger than it was before, which is okay.

168
00:12:35.000 --> 00:12:38.340
None of this will get
shipped down to production.

169
00:12:39.680 --> 00:12:43.620
So now, if we come back here,
and if you look at your console,

170
00:12:45.480 --> 00:12:48.510
you can see what it's getting
back from the Dev Server.

171
00:12:48.510 --> 00:12:53.225
It's gonna say how module replacement
enabled, and then, hopefully, so

172
00:12:53.225 --> 00:12:54.930
I'm gonna go change this.

173
00:12:54.930 --> 00:12:59.170
So first of all, I'm gonna give this some
state, so if there's a hard refresh on

174
00:12:59.170 --> 00:13:04.550
state, if there's a hard refresh,
the state would be blown away,

175
00:13:04.550 --> 00:13:06.690
I guess it's gonna be anyway,
it doesn't matter, anyway.

176
00:13:07.870 --> 00:13:13.627
So if we come in here to search and modify
s video and have this be something else,

177
00:13:27.799 --> 00:13:28.434
&gt;&gt; Brian Holt: all right, let's

178
00:13:28.434 --> 00:13:28.993
try that again.

179
00:13:32.216 --> 00:13:38.824
&gt;&gt; Brian Holt: Let’s do it with,
&gt;&gt; Brian Holt: let’s do it with landing.

180
00:13:38.824 --> 00:13:42.982
Okay, so with the landing, I'm going
to change this to be, yet different.

181
00:13:47.457 --> 00:13:49.347
&gt;&gt; Brian Holt: Hard refreshes,
that’s kind of annoying.

182
00:13:56.837 --> 00:13:57.680
&gt;&gt; Brian Holt: Okay.

183
00:13:57.680 --> 00:13:59.850
&gt;&gt; Speaker 4: People are asking,
where is module coming from?

184
00:14:01.020 --> 00:14:01.940
&gt;&gt; Brian Holt: Webpack.

185
00:14:01.940 --> 00:14:03.041
Webpack injects that.

186
00:14:07.129 --> 00:14:08.244
&gt;&gt; Speaker 4: So
you don't need to import it.

187
00:14:08.244 --> 00:14:09.367
&gt;&gt; Brian Holt: No.

188
00:14:12.587 --> 00:14:22.152
&gt;&gt; Brian Holt: All right, for those,
&gt;&gt; Brian Holt: let's see.

189
00:14:22.152 --> 00:14:26.737
Preserve log, that's what I wanted.

190
00:14:26.737 --> 00:14:32.822
So clear, and
we'll change this to be landing.

191
00:14:41.662 --> 00:14:44.798
&gt;&gt; Brian Holt: So that's what I wanted
to see, it's for whatever reason,

192
00:14:44.798 --> 00:14:46.407
404ing on the hot updates.

193
00:14:46.407 --> 00:14:49.377
So it says, cannot find update,
need to do a full reload.

194
00:14:57.679 --> 00:15:01.152
&gt;&gt; Brian Holt: So let's try,
why are you doing a full reload?

195
00:15:11.372 --> 00:15:14.670
&gt;&gt; Brian Holt: I think that's
something I messed up.

196
00:15:14.670 --> 00:15:17.040
So go to webpack config.

197
00:15:18.100 --> 00:15:22.010
It's a very delicate balance
to get this tool to work.

198
00:15:22.010 --> 00:15:29.192
You need to do here in,
&gt;&gt; Brian Holt: so

199
00:15:29.192 --> 00:15:30.000
we need to require webpack.

200
00:15:30.000 --> 00:15:33.260
Need additional files.

201
00:15:33.260 --> 00:15:36.085
Output, yeah, that's what I messed up.

202
00:15:36.085 --> 00:15:37.328
So, here in output,

203
00:15:37.328 --> 00:15:42.050
you need to make the output aware of
where it's going to be searched from.

204
00:15:42.050 --> 00:15:45.643
So, because those hots.json
files are going to be

205
00:15:45.643 --> 00:15:50.410
served from the same directory,
so we're gonna have to do output.

206
00:15:50.410 --> 00:15:57.990
And it's going to be the same as what's in
the dev server, which is gonna be /public

207
00:16:05.233 --> 00:16:07.253
&gt;&gt; Brian Holt: So let's try that again.

208
00:16:09.920 --> 00:16:15.019
&gt;&gt; Brian Holt: And we go to landing.jsx
and change this to something else.

209
00:16:18.213 --> 00:16:19.484
&gt;&gt; Brian Holt: And I need to restart.

210
00:16:19.484 --> 00:16:21.592
Gotta restart web pack.

211
00:16:27.979 --> 00:16:29.030
&gt;&gt; Brian Holt: Did I put output?

212
00:16:29.030 --> 00:16:33.862
I meant public path.

213
00:16:33.862 --> 00:16:35.514
Yep, sorry.

214
00:16:35.514 --> 00:16:40.970
PublicPath inside of the output object,
which should be the same as,

215
00:16:40.970 --> 00:16:46.062
cuz there's gonna be a publicPath
both in output and devServer.

216
00:16:49.648 --> 00:16:51.294
&gt;&gt; Brian Holt: Okay, try that again.

217
00:16:54.904 --> 00:16:57.510
&gt;&gt; Brian Holt: Okay, fingers crossed.

218
00:17:01.645 --> 00:17:07.800
&gt;&gt; Brian Holt: Okay, so hot module
replaces are in effect, go to landing.

219
00:17:07.800 --> 00:17:11.155
Change this back to something yet else.

220
00:17:14.331 --> 00:17:14.955
&gt;&gt; Brian Holt: There we go.

221
00:17:14.955 --> 00:17:16.321
It worked!

222
00:17:16.321 --> 00:17:21.064
[LAUGH] Cool, so if you look down
here you can see it says hot update,

223
00:17:21.064 --> 00:17:25.557
checking for updates on the server,
updated the modules, and

224
00:17:25.557 --> 00:17:28.120
then it did something different.

225
00:17:28.120 --> 00:17:29.229
So if I go back here and

226
00:17:29.229 --> 00:17:33.894
change this to svideo,
&gt;&gt; Brian Holt: It will actually

227
00:17:33.894 --> 00:17:38.950
change it without actually doing the hard
refresh on the page, which is pretty cool.

228
00:17:38.950 --> 00:17:41.670
&gt;&gt; Speaker 3: So
this is primarily just for development?

229
00:17:41.670 --> 00:17:42.390
&gt;&gt; Brian Holt: It's only for development.

230
00:17:43.840 --> 00:17:46.452
You would never, ever, ever,
ever launch this down to production.

231
00:17:49.749 --> 00:17:52.535
&gt;&gt; Speaker 4: Can you
show having state then?

232
00:17:52.535 --> 00:17:53.510
&gt;&gt; Brian Holt: Yeah, let's do that.

233
00:17:53.510 --> 00:17:59.670
So if you go to search.jsx, so
we have something else right here, right?

234
00:17:59.670 --> 00:18:04.744
I'm going to do black right here and
if I change something else to be back

235
00:18:04.744 --> 00:18:09.619
what it should be, which is svideo,
&gt;&gt; Brian Holt: Notice

236
00:18:09.619 --> 00:18:12.983
that black state here and
svideo was able to change.

237
00:18:15.241 --> 00:18:17.991
&gt;&gt; Speaker 4: So
you can write code with state?

238
00:18:17.991 --> 00:18:21.038
&gt;&gt; Brian Holt: And
it will constantly be replacing itself.

239
00:18:23.006 --> 00:18:27.570
&gt;&gt; Brian Holt: So this is a huge win,
in my opinion, for developer productivity.

240
00:18:27.570 --> 00:18:30.128
It's just a really tight feedback loop,
and

241
00:18:30.128 --> 00:18:33.764
I think that's something that
Facebook does a really good job of

242
00:18:33.764 --> 00:18:37.422
putting emphasis on is the tighter
you make that feedback loop.

243
00:18:37.422 --> 00:18:41.861
The faster you can go as a developer,
cuz how many times you save something and

244
00:18:41.861 --> 00:18:45.410
you have to wait, even 30 seconds for
something to run, and

245
00:18:45.410 --> 00:18:49.711
before long you're just on Twitter and
you waste 10 minutes on Twitter,

246
00:18:49.711 --> 00:18:51.870
at least that's exactly what I do.

247
00:18:51.870 --> 00:18:54.889
I'm projecting myself on you [LAUGH].

248
00:18:54.889 --> 00:18:55.977
&gt;&gt; Speaker 4: And then you hit refresh,

249
00:18:55.977 --> 00:18:59.070
and then you have to click three buttons
to see if that bug was fixed [LAUGH].

250
00:18:59.070 --> 00:19:01.263
&gt;&gt; Brian Holt: Yeah, which ends up for
me like 10 more minutes on news.

251
00:19:01.263 --> 00:19:02.030
&gt;&gt; Speaker 4: Cuz you're replacing state.

252
00:19:02.030 --> 00:19:03.232
Yeah.

253
00:19:03.232 --> 00:19:05.262
&gt;&gt; Brian Holt: [LAUGH]
&gt;&gt; Speaker 4: 10 more,

254
00:19:05.262 --> 00:19:09.928
it seems like a good
place to push a branch.

255
00:19:09.928 --> 00:19:11.064
&gt;&gt; Brian Holt: Yeah, totally.

256
00:19:11.064 --> 00:19:15.770
I changed a lot of stuff
to get that to work.

257
00:19:15.770 --> 00:19:17.827
So it is really fun.

258
00:19:17.827 --> 00:19:18.810
It's really cool.

259
00:19:18.810 --> 00:19:21.750
The thing with hot module reload is it
doesn't really play well with some of

260
00:19:21.750 --> 00:19:23.710
the newer technologies.

261
00:19:23.710 --> 00:19:28.290
Like its doable with, well so

262
00:19:28.290 --> 00:19:31.870
you have hot module replace,
you have service side rendering, and

263
00:19:31.870 --> 00:19:34.990
you have code splitting, and
it's pretty much a choose to scenario.

264
00:19:36.040 --> 00:19:39.512
Getting all three to work at
the same time, as far as I know,

265
00:19:39.512 --> 00:19:41.046
is actually impossible.

266
00:19:41.046 --> 00:19:44.516
&gt;&gt; Speaker 4: I was asking if I was
using import to import CSS files,

267
00:19:44.516 --> 00:19:49.464
would I be able to edit the CSS and
have that update without having to reload?

268
00:19:51.664 --> 00:19:56.661
&gt;&gt; Brian Holt: If using the CSS modules
with hot module reload, or refresh,

269
00:19:56.661 --> 00:19:57.534
replace?

270
00:19:57.534 --> 00:20:01.596
[LAUGH] I don't know, I think-
&gt;&gt; Speaker 4: It seems like you were using

271
00:20:01.596 --> 00:20:03.920
CSS as in JavaScript solution like-
&gt;&gt; Brian Holt: Style components will for

272
00:20:03.920 --> 00:20:05.870
sure work,-
&gt;&gt; Speaker 4: Like style components.

273
00:20:05.870 --> 00:20:07.600
&gt;&gt; Brian Holt: No issue for sure.

274
00:20:07.600 --> 00:20:14.414
But if you're actually using CSS imports,
I'm gonna go with a strong maybe.

275
00:20:14.414 --> 00:20:17.716
[LAUGH] I think so, but I'm not positive.

276
00:20:17.716 --> 00:20:22.980
Well,
&gt;&gt; Brian Holt: Yeah, maybe.

277
00:20:22.980 --> 00:20:24.859
Maybe is my best answer to that.

278
00:20:31.802 --> 00:20:34.802
&gt;&gt; Brian Holt: v3-13

279
00:20:41.570 --> 00:20:43.446
&gt;&gt; Brian Holt: v3-13.

280
00:20:46.615 --> 00:20:49.930
&gt;&gt; Brian Holt: Cool,
v3-13 is now up and available.

