WEBVTT

1
00:00:00.470 --> 00:00:03.990
&gt;&gt; Brian Holt: Let's talk
about react perf tools then.

2
00:00:03.990 --> 00:00:10.221
Okay, so go into client app .jsx and

3
00:00:10.221 --> 00:00:15.045
I want you to import Perf from

4
00:00:15.045 --> 00:00:19.270
react-addons-perf.

5
00:00:23.280 --> 00:00:27.134
&gt;&gt; Brian Holt: And
we're going to say window.Perf = Perf.

6
00:00:27.134 --> 00:00:33.110
And then we're gonna

7
00:00:33.110 --> 00:00:38.472
say Perf.start.

8
00:00:38.472 --> 00:00:41.060
So what we've done here,

9
00:00:41.060 --> 00:00:44.020
this is not something that
you're gonna ship to production.

10
00:00:44.020 --> 00:00:47.600
This is only something you're gonna
temporarily bring in the perf tools,

11
00:00:47.600 --> 00:00:49.720
do your profiling and
then remove it from your code.

12
00:00:52.370 --> 00:00:55.190
So I brought in the perf tools,
I set it on the windows so

13
00:00:55.190 --> 00:00:56.850
I can directly mess with it.

14
00:00:57.900 --> 00:01:00.919
And then I also told it to start
recording as soon as the page loads.

15
00:01:03.506 --> 00:01:05.620
&gt;&gt; Brian Holt: Okay, so
what I want you to do now,

16
00:01:16.392 --> 00:01:19.233
&gt;&gt; Brian Holt: Okay, localhost 80 80.

17
00:01:22.370 --> 00:01:24.020
So now the perf tools are running.

18
00:01:26.410 --> 00:01:28.770
So what I'm gonna do now is I'm just
gonna browse around a little bit.

19
00:01:31.080 --> 00:01:35.835
And so I can kind of get
like a nice profile going.

20
00:01:35.835 --> 00:01:39.880
I'm just gonna click into a bunch
of these, go to the homepage.

21
00:01:44.560 --> 00:01:47.048
&gt;&gt; Brian Holt: Yeah, that's true.

22
00:01:47.048 --> 00:01:52.108
So, now what I'm gonna say

23
00:01:52.108 --> 00:01:57.860
is I'm gonna say perf.stop.

24
00:01:57.860 --> 00:01:59.900
Okay, so now it stopped recording.

25
00:01:59.900 --> 00:02:05.287
Now I'm gonna say perf.print wasted,
wasted.

26
00:02:08.413 --> 00:02:17.080
&gt;&gt; Brian Holt: So,
that actually wasn't too bad.

27
00:02:17.080 --> 00:02:19.140
So let's talk about what
we actually did first.

28
00:02:19.140 --> 00:02:22.266
So when I was clicking around
it's doing a bunch of renders.

29
00:02:22.266 --> 00:02:25.158
It's doing a bunch of like destroying and
reupping of components,

30
00:02:25.158 --> 00:02:26.330
all that different stuff.

31
00:02:28.480 --> 00:02:31.390
When I call print wasted
it's going to print out

32
00:02:31.390 --> 00:02:34.750
times that it was running the render
method and nothing changed.

33
00:02:34.750 --> 00:02:36.940
Which is considered a wasted render.

34
00:02:36.940 --> 00:02:38.180
Normally this is not a problem.

35
00:02:38.180 --> 00:02:43.090
What you see here where I'm wasting
0.1 millisecond, you don't care.

36
00:02:45.770 --> 00:02:48.490
You're really worried about things
that are wasting tens of milliseconds,

37
00:02:48.490 --> 00:02:50.900
hundreds of milliseconds and
God forbid seconds.

38
00:02:52.780 --> 00:02:53.780
So like this one.

39
00:02:53.780 --> 00:02:55.380
This one wasted 2 Render counts.

40
00:02:55.380 --> 00:02:57.280
This one wasted 1.

41
00:02:57.280 --> 00:03:00.710
No big deal if you have
a performance profile like that.

42
00:03:00.710 --> 00:03:02.360
No big deal at all.

43
00:03:02.360 --> 00:03:04.530
However, we're gonna
refresh the page again.

44
00:03:04.530 --> 00:03:08.240
I'm going to say or browse all.

45
00:03:08.240 --> 00:03:14.100
Now it's recording again and
I'm just going to type a bunch of stuff.

46
00:03:14.100 --> 00:03:19.100
And then untyped it and
then type more and type home and

47
00:03:19.100 --> 00:03:23.860
then now I'm gonna go in and say
&gt;&gt; Brian Holt: Perf.stop and

48
00:03:23.860 --> 00:03:27.724
then I'm gonna say perf.printWasted.

49
00:03:27.724 --> 00:03:33.110
And you're gonna see here I have
138 render counts that were wasted.

50
00:03:33.110 --> 00:03:37.541
And now we're started to
waste 23.25 milliseconds.

51
00:03:37.541 --> 00:03:40.940
As you can see that's a problem.

52
00:03:40.940 --> 00:03:44.560
That's going to spiral out of control,
in particular if people are typing long

53
00:03:44.560 --> 00:03:47.090
things, and then untyping them,
and all that kinda stuff.

54
00:03:49.070 --> 00:03:52.950
So right now this is a small perf problem
but as show card becomes more and

55
00:03:52.950 --> 00:03:54.056
more complicated.

56
00:03:54.056 --> 00:03:57.200
It's going to balloon into
a very large perf problem.

57
00:03:57.200 --> 00:04:00.620
And like if someone's on like
a really crappy Android phone I mean,

58
00:04:00.620 --> 00:04:02.360
this is a brand new Macbook Pro, right?

59
00:04:02.360 --> 00:04:03.870
So it's gonna be fine, but

60
00:04:03.870 --> 00:04:07.880
a crappy Android phone, that's gonna
be a way bigger amount of stuff wasted.

61
00:04:10.660 --> 00:04:14.020
So, again, yeah, this search.showcard,

62
00:04:14.020 --> 00:04:18.694
this 59 number, that's how many times
it rendered and nothing changed.

63
00:04:18.694 --> 00:04:26.880
So, what's nice about this is
show card is totally static.

64
00:04:26.880 --> 00:04:28.600
It doesn't really need to re-render.

65
00:04:28.600 --> 00:04:31.480
Once it renders the first time,
it doesn't change.

66
00:04:31.480 --> 00:04:32.870
There's nothing dynamic about it.

67
00:04:33.960 --> 00:04:36.830
So, this is a really easy
performance optimization here.

68
00:04:37.900 --> 00:04:39.630
So I want you to open
show card real quick.

69
00:04:42.670 --> 00:04:45.270
Because, ES6 classes don't
have lifecycle methods.

70
00:04:45.270 --> 00:04:48.470
We're gonna have to convert
this into an ES6 class.

71
00:04:48.470 --> 00:04:55.372
So, we're gonna say class
ShowCard extends Component.

72
00:04:55.372 --> 00:04:59.564
We're gonna have to import

73
00:04:59.564 --> 00:05:04.676
Component to the top from React.

74
00:05:04.676 --> 00:05:07.080
We're gonna have a render method.

75
00:05:10.080 --> 00:05:18.570
&gt;&gt; Brian Holt: That is going to return
&gt;&gt; Brian Holt: that.

76
00:05:18.570 --> 00:05:23.420
So return.

77
00:05:23.420 --> 00:05:25.110
Pretty able will fix my formatting for me.

78
00:05:26.920 --> 00:05:36.004
And then it's going to have a props of,
&gt;&gt; Brian Holt: What did I,

79
00:05:36.004 --> 00:05:41.950
and props is just gonna be Show I think,
like that.

80
00:05:47.544 --> 00:05:50.410
&gt;&gt; Brian Holt: And cool.

81
00:05:50.410 --> 00:05:53.685
And then here wherever it says props
we're gonna have to say this.props.

82
00:06:01.219 --> 00:06:06.609
&gt;&gt; Brian Holt: Okay, ES6, or Lint is
gonna yell at you because it should

83
00:06:06.609 --> 00:06:11.350
be a stateless functional component,
whatever.

84
00:06:14.598 --> 00:06:20.500
&gt;&gt; Brian Holt: Above props I think,
we're gonna say shouldComponentUpdate.

85
00:06:29.155 --> 00:06:32.988
&gt;&gt; Brian Holt: So in shouldComponentUpdate
you're gonna say this is basically

86
00:06:32.988 --> 00:06:36.611
a method that instead of doing
react's dif-ing algorithm to

87
00:06:36.611 --> 00:06:39.410
see if something has
changed between renders.

88
00:06:39.410 --> 00:06:40.589
It's gonna call your method and

89
00:06:40.589 --> 00:06:42.600
you're going to tell react
should you update or not.

90
00:06:42.600 --> 00:06:46.040
In this particular case, we have no state.

91
00:06:46.040 --> 00:06:50.480
And we don't expect the props to change
for any one individual show card.

92
00:06:50.480 --> 00:06:55.350
So, how often do we want this
component to update its mark-up.

93
00:06:55.350 --> 00:06:55.950
Never.

94
00:06:55.950 --> 00:06:57.790
We never want it to update.

95
00:06:57.790 --> 00:07:01.080
So here,
you're just gonna say return false.

96
00:07:07.029 --> 00:07:10.095
&gt;&gt; Brian Holt: So this is telling us,
like, once this component has rendered for

97
00:07:10.095 --> 00:07:15.687
the first time, never update it
&gt;&gt; Brian Holt: Okay,

98
00:07:15.687 --> 00:07:20.410
so now we're going to come over here,
refresh so we have a fresh start of it.

99
00:07:20.410 --> 00:07:26.250
And we're gonna start typing a bunch
atlanta and then black and then game.

100
00:07:26.250 --> 00:07:31.394
And then now we're gonna say Perf.stop and

101
00:07:31.394 --> 00:07:36.720
Perf.printWasted much fewer things.

102
00:07:36.720 --> 00:07:38.750
We still have some in the headered link,

103
00:07:38.750 --> 00:07:41.600
but we're not gonna worry about that for
now.

104
00:07:46.695 --> 00:07:47.450
&gt;&gt; Brian Holt: In any case,

105
00:07:47.450 --> 00:07:52.230
we've mostly solved, well,
we totally solved our show card problem.

106
00:07:52.230 --> 00:07:53.090
We don't even see it show

107
00:07:53.090 --> 00:07:54.779
up anymore because it's not
doing that render anymore.

108
00:07:58.210 --> 00:07:59.040
Any questions about that?

109
00:08:00.900 --> 00:08:02.650
&gt;&gt; Audience 1: Can you
just go back to show card?

110
00:08:02.650 --> 00:08:03.150
&gt;&gt; Brian Holt: Sure.

111
00:08:06.991 --> 00:08:11.896
&gt;&gt; Audience 2: It's not related
to performance, but is doing the,

112
00:08:11.896 --> 00:08:16.365
importing the component
at the top is that more,

113
00:08:16.365 --> 00:08:20.860
is that cheaper than
doing extendsreact.com?

114
00:08:20.860 --> 00:08:22.320
&gt;&gt; Brian Holt: No, just preference.

115
00:08:22.320 --> 00:08:23.410
Instead of doing this.

116
00:08:23.410 --> 00:08:24.080
&gt;&gt; Audience 1: Yeah.

117
00:08:24.080 --> 00:08:24.860
&gt;&gt; Brian Holt: Just preference.

118
00:08:24.860 --> 00:08:25.360
&gt;&gt; Audience 1: Okay.

119
00:08:28.630 --> 00:08:31.190
&gt;&gt; Brian Holt: So I just gave
you a really big hammer, right?

120
00:08:31.190 --> 00:08:32.640
Should component update?

121
00:08:32.640 --> 00:08:33.590
It's a really big hammer.

122
00:08:33.590 --> 00:08:41.250
I will say that I very rarely
write the should component update.

123
00:08:42.450 --> 00:08:45.510
Components, and it's not because I'm
particularly good at writing react or

124
00:08:45.510 --> 00:08:47.110
something like that and
I'm avoiding these cases.

125
00:08:47.110 --> 00:08:48.830
Sometimes these cases are just inevitable.

126
00:08:50.530 --> 00:08:54.695
The issue here is,
let's say I come back next week and

127
00:08:54.695 --> 00:08:59.151
now I need to have show
components also show the ratings.

128
00:08:59.151 --> 00:09:01.514
So it would also needs to request from
the API or something like that so

129
00:09:01.514 --> 00:09:02.840
it's keeping track of state as well.

130
00:09:05.170 --> 00:09:09.100
So soon as I add state to this,
if I don't forget or

131
00:09:09.100 --> 00:09:14.170
if I forget to update the should component
update, it's never going to update.

132
00:09:14.170 --> 00:09:17.810
Cuz I've told react now,
never update these components.

133
00:09:18.990 --> 00:09:21.970
So it's very easy to write these
components that never update.

134
00:09:21.970 --> 00:09:26.590
And then have to go back later and update
them so they have to update themselves.

135
00:09:26.590 --> 00:09:31.220
And unless you're aware that they have
a shift component update method on them,

136
00:09:31.220 --> 00:09:34.120
it's a big [INAUDIBLE] because
you're going to go and

137
00:09:34.120 --> 00:09:37.600
try to change your code or
you're going to try and run it.

138
00:09:37.600 --> 00:09:38.650
And nothing's gonna change, and

139
00:09:38.650 --> 00:09:42.110
you'll be like, what the hell,
why is this not updating anymore?

140
00:09:42.110 --> 00:09:43.730
It's because you told it
not to update anymore.

141
00:09:46.210 --> 00:09:50.798
So, this is the most simple use case,
and I'll also say that,

142
00:09:50.798 --> 00:09:54.360
as far as I can remember,
no, that's not true.

143
00:09:54.360 --> 00:09:59.147
95% of should component updates
that I've written look like this,

144
00:09:59.147 --> 00:10:01.310
that's just returning false.

145
00:10:01.310 --> 00:10:07.690
However, you can get like,
maybe only year is a thing that updates.

146
00:10:07.690 --> 00:10:10.950
Or maybe, let's say rating, right?

147
00:10:10.950 --> 00:10:13.144
Let's say it has a rating.

148
00:10:13.144 --> 00:10:18.322
Then you could say,
return this.props.rating is

149
00:10:18.322 --> 00:10:23.747
not equal to this has a next
props right here, I think.

150
00:10:23.747 --> 00:10:26.985
nextProps.ratings.

151
00:10:26.985 --> 00:10:32.620
So you could do something like that
that only update if rating is updating,

152
00:10:32.620 --> 00:10:34.240
and you can do that.

153
00:10:34.240 --> 00:10:37.110
So you can kinda shortcut the amount
of things that it needs to check.

154
00:10:38.190 --> 00:10:41.350
But, again, this is a really big hammer.

155
00:10:41.350 --> 00:10:45.010
Do not write should component updates
until you actually need them.

156
00:10:45.010 --> 00:10:46.800
Do not prematurely optimize your code.

157
00:10:46.800 --> 00:10:49.970
That's just a general piece
of life advice for coding.

158
00:10:49.970 --> 00:10:52.410
Do not prematurely update your code or
optimize your code.

159
00:10:52.410 --> 00:10:56.710
But in particular here, do not optimize
this until it's actually needed.

160
00:10:59.500 --> 00:11:00.260
Any questions about that?

161
00:11:03.597 --> 00:11:05.052
&gt;&gt; Brian Holt: Cool.

162
00:11:08.936 --> 00:11:10.478
&gt;&gt; Brian Holt: So, return false.

163
00:11:14.097 --> 00:11:17.830
&gt;&gt; Brian Holt: Cool, so
that is the perf tools.

164
00:11:17.830 --> 00:11:21.240
Since we're not gonna
be using that anymore,

165
00:11:21.240 --> 00:11:25.270
you can feel free to go into
client app and remove them.

166
00:11:25.270 --> 00:11:28.860
So that you're not including something
that you don't need in production.

167
00:11:28.860 --> 00:11:34.950
The other thing is that because perf tools
are hooking into the internals of react,

168
00:11:34.950 --> 00:11:38.790
it is going to make react
itself a little bit slower.

169
00:11:40.740 --> 00:11:42.880
Actually something else I
just wanted to show you.

170
00:11:42.880 --> 00:11:43.980
I showed you print wasted.

171
00:11:43.980 --> 00:11:46.020
Because that's the one
you actually care about.

172
00:11:47.290 --> 00:11:52.580
But If I come in here and navigate
around a little bit and come back and

173
00:11:52.580 --> 00:11:55.188
say or browse all.

174
00:11:55.188 --> 00:11:57.065
Atlanta.

175
00:11:57.065 --> 00:11:58.133
Game.

176
00:12:00.540 --> 00:12:07.910
So now if I say, perf.stop,
there's two other methods on here as well.

177
00:12:07.910 --> 00:12:13.046
There's perf.printInclusive.

178
00:12:13.046 --> 00:12:17.720
So this is going to print everything
including things that were not wasted.

179
00:12:19.300 --> 00:12:22.910
So this is going to print timers for

180
00:12:22.910 --> 00:12:26.250
everything including
the life cycle methods.

181
00:12:27.650 --> 00:12:30.110
So you can see app is taking
the most time to render but

182
00:12:30.110 --> 00:12:32.190
that makes sense because app
is literally everything.

183
00:12:32.190 --> 00:12:33.410
It's the sum of everything.

184
00:12:34.900 --> 00:12:39.610
But you can see here like,
&gt;&gt; Audience 2: That is over 60

185
00:12:39.610 --> 00:12:45.570
milliseconds, then you're gonna get some
performance problems and painting, right?

186
00:12:47.660 --> 00:12:54.252
&gt;&gt; Brian Holt: This is a sum,
this is not a rate.

187
00:12:54.252 --> 00:12:55.330
&gt;&gt; Audience 2: Okay.
&gt;&gt; Brian Holt: So it depends on how long

188
00:12:55.330 --> 00:12:58.010
you're clicking around,
but that will happen.

189
00:12:58.010 --> 00:12:58.840
&gt;&gt; Audience 2: Makes sense
&gt;&gt; Brian Holt: Yeah.

190
00:13:00.430 --> 00:13:02.420
But definitely if there
are things in here, like for

191
00:13:02.420 --> 00:13:06.640
example, browser app you would expect
that cuz that's rendering everything out.

192
00:13:08.460 --> 00:13:13.230
But let say like here, component.Search.

193
00:13:13.230 --> 00:13:15.200
You can see here,
the one that's taking the most time,

194
00:13:15.200 --> 00:13:19.620
the least performing component
that we have here is search.

195
00:13:19.620 --> 00:13:22.560
It's still performant enough for
sure, by far.

196
00:13:22.560 --> 00:13:25.060
But that isn't the least
performant component that we have.

197
00:13:25.060 --> 00:13:32.480
And you can see here the hot code path
is the show card inside of there.

198
00:13:32.480 --> 00:13:35.940
That's taking most of
the time inside of search.

199
00:13:35.940 --> 00:13:38.910
But that's just the nature of the beast
because we're doing lots of re-rendering

200
00:13:38.910 --> 00:13:40.260
every time we're typing.

201
00:13:40.260 --> 00:13:42.060
That just takes time.

202
00:13:42.060 --> 00:13:43.240
So that's expected.

203
00:13:43.240 --> 00:13:47.620
So that's inclusive, so
that includes lifecycle methods.

204
00:13:47.620 --> 00:13:51.880
And if you're not interested in how much
time the lifecycle methods are taking,

205
00:13:51.880 --> 00:13:55.750
then you can say exclusive like that.

206
00:13:55.750 --> 00:13:56.250
Come on.

207
00:13:59.880 --> 00:14:00.740
&gt;&gt; Brian Holt: There we go.

208
00:14:02.420 --> 00:14:05.500
And now this is exclusive
of lifecycle methods.

209
00:14:14.672 --> 00:14:17.420
&gt;&gt; Brian Holt: Well and
all the parent components as well, right.

210
00:14:17.420 --> 00:14:20.430
So you can see here that Styled(Link)
right now is the thing that is least

211
00:14:20.430 --> 00:14:21.700
performant.

212
00:14:21.700 --> 00:14:25.410
That's because it's doing a bunch
of stuff with manipulating styles.

213
00:14:25.410 --> 00:14:29.330
So styles components are not necessarily
the fastest react components.

214
00:14:29.330 --> 00:14:30.880
They are typically fast enough though.

215
00:14:35.540 --> 00:14:38.209
&gt;&gt; Brian Holt: Something
else that bears mentioning,

216
00:14:38.209 --> 00:14:43.387
that with the advent of React Fibre just
around the corner, these perf tools,

217
00:14:43.387 --> 00:14:48.110
these ones in particular are not going
to directly work with the fiber.

218
00:14:49.534 --> 00:14:53.750
And that's just because these hook into
internal methods inside of react and so

219
00:14:53.750 --> 00:14:55.990
the way that fiber works
is totally different.

220
00:14:55.990 --> 00:14:59.420
So we will eventually get a different
set of perf tools for react fiber.

