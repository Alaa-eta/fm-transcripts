[00:00:00]
>> Brian Holt: I wanna show you a problem with what we have right now. So if I come in here to showcard.jsx, and I change this to be, I don't know, I put like another thing in here, something different. So I have changed Showcard, And I have not changed search.jsx, right?

[00:00:24]
If I run jest again what's gonna happen?
>> Brian Holt: Let's do it, yarn test.
>> Brian Holt: It failed my test. So something going wrong in showcard is failing my search component test. Now, some people say that's fine, right, I don't care, I just want something to fail, and that can be your opinion.

[00:00:48]
It's wrong, but that can be your opinion. Just kidding, I mean, maybe, I think it's wrong, [LAUGH] but my problem with this is that if there's nothing wrong with search, I don't want search to fail, I want ShowCard to fail. I want the test for ShowCard to fail so that I immediately have to go and check out ShowCard.

[00:01:09]
So let's bring in a library that's actually going to allow us to do that.
>> Brian Holt: In fact I'm gonna leave this for now and then we'll fix it here in just a second. So come back to search.spec.jsx.
>> Brian Holt: And we're going to import a library called enzyme, so import [ shallow ] from 'enzyme', and we're gonna modify this a little bit and we're also going to drop renderer.

[00:01:54]
Because enzyme is actually going to use renderer underneath the hood, so we don't actually have to import it directly. In fact you can't import it directly if you, you can't have renderer and enzyme in the same import. Okay, so what we're gonna do here is we're going to, instead of doing render.create, we're going to do shallow,

[00:02:17]

>> Brian Holt: And then we can actually just do this directly, so expect(component).toMatchSnapshot.
>> Brian Holt: So what enzyme is a wrapper on top of react test renderer, but it's gonna do certain things for us. One of the things is it's going to address the problem that I just showed you. It's actually going to stub out all of the children components, right?

[00:02:42]
So, for example, we have ShowCard, right? It's going to not actually go down and render everything in ShowCard, it's just going to say a ShowCard was rendered here with these props, and then it doesn't actually dive down into that child component. So what's awesome about that, it stops caring what's happening in ShowCard and it will only fail things in search, when something in search is actually wrong.

[00:03:07]
This is still not gonna work yet. We have to do one more thing. Save that, go to package.json and we need to tell, you can put this anywhere, wherever. We have to give this a jest top level property. We have to tell jest how to snapshot enzyme components.

[00:03:32]
So what we're going to do here is we're going to say, snapshotSerializers,
>> Brian Holt: Which is gonna be an array, because you could have multiple kinds of serializers, but we just have one, it's gonna be jest-serializer-enzyme.
>> Brian Holt: So again, what this is doing is this is telling Jest hey, whenever you encounter an enzyme component, this is how you serialize it.

[00:04:09]
It's giving it code to know how to serialize that into a snapshot, does that make sense? Okay. Cool. So, go back to your search.spec.jsx and now save it, and come back and run yarn test again, and now it's going to fail again, because now it has the enzyme output and not the previous output, but this is what the enzyme output looks like.

[00:04:44]
Notice it's actually going down and like rendering like the Game of Thrones. All of the mark up inside a ShowCard. Now it just says I'm getting a ShowCard, here's the props passed in, I don't know anything else about it.
>> Brian Holt: Does that make sense? So let's go ahead and run yarn test:update so that we can actually just go in and look at the snapshot.

[00:05:08]
Okay so we updated that, and let's go look at the snap.snap. So again looking here. Rather than actually outputting the markup for ShowCard it's just actually giving you a react looking component.
>> Brian Holt: Make sense? Pretty cool I think. So now, even though that we're messing around with ShowCard in here, so I can go back and delete this, save it, and try running this again.

[00:05:42]
Oops, not update, just test.
>> Brian Holt: It'll still pass despite the fact that I'm changing things in ShowCard. You have a question?
>> Speaker 2: Yeah, Doug's asking, with the test and test update scripts, does that automatically set the environment ENV?
>> Brian Holt: It must be, I had not thought of that.

[00:06:13]

>> Brian Holt: Yeah, I wonder if jest, let's actually look, I have no idea. So, if you look at my notes, I actually have in there, setting the node EMV, but if we go to speck.jsx.
>> Brian Holt: (process.env.NODE_ENV) So, let's try running that.
>> Brian Holt: Yeah, check that out. It actually sets the node ENV in for you.

[00:06:47]
Who knew? I did not know that. Today I learned. That is pure fortunate happenstance. [LAUGH]
>> Brian Holt: So the way that you would handle that in here,
>> Brian Holt: So you could say NODE_ENV=test jest, and you can change this to be whatever you want, like production for your server or whatever

[00:07:21]

>> Brian Holt: This is okay, if you're using it just for yourself, and you're sure that everyone using it has Bash. This is not going to work across shells. So there's a tool called crossenv, which I don't remember the API for it. It looks like this,
>> Brian Holt: And then you provide it, I think it looks something like that, it's another node package that you would install, that will take care of all those various different shells to cover.

[00:07:46]
So if you need to be setting your environment across shells, this is how you do it.
>> Brian Holt: Anyway, that's cool. Any questions?
>> Brian Holt: All right.
>> Brian Holt: Enzymes a super cool tool. There is an interesting thread on the GitHub for React, that they're considered making it the official testing suite of React, and they ended up not doing it, but they said like internal at Facebook, they actually do use enzyme for all testing.

[00:08:25]
The only reason that they don't make it official is they thought it might stunt the innovation happening around testing in React. So, nonetheless, pretty much any company that's testing React is probably using enzyme.
>> Brian Holt: Okay, so let's go back and look at spec.jsx here.
>> Brian Holt: Enzyme has several layers of rendering.

[00:08:52]
The one that you want to be using as much as possible is shallow. You can see that our test is pretty zippy, right? It's not doing anything particularly crazy cuz it's not actually creating any sort of like thick dom or anything like that. It's just rendering up the component and testing against the markup that's being rendered there.

[00:09:11]
If you need to go deeper, there's another one called render, and if you wanna go deeper than that there's one called static. You don't have to bring those in, Im just showing you that they're available. Render's actually going to emulate a dom with like jsdom. But if you've ever tested with jsdom before it's real slow.

[00:09:29]
It's gonna greatly slow down your tests, and a fast test suite is a happy test [LAUGH] suite in my opinion. Static is actually going to bring in Cheerio, if you're familiar with Cheerio. It's an awesome library for doing dom exploring in a node like environment. So you can actually fetch a page using ajax on your server and pull stuff off of it.

[00:09:50]
So if you wanna do web scraping, Cheerio's a really great way to do it. So that's what static does, it uses Cheerio to explore your react components and those are also available to you.
>> Brian Holt: But again, both static and render are much slower than shallow. Shallow is pretty fast, so stick to shallow where possible.

