[00:00:00]
>> Brian Holt: So let's go actually use the dynamic import now, so go to app.jsx and we are going to just do landing first, right, and then we'll work through the other ones. So we're going to import AsyncRoute from ./AsyncRoute, and then I want you to delete Landing. So delete Landing here, the reason why that's important is as soon as we delete our Landing, it's not going to include that anymore in the initial bundle.

[00:00:36]

>> Brian Holt: Okay, and what we're going to do here, we'll make sure I get this correct.
>> Brian Holt: Let's just put this on multiple lines cuz this is gonna make it easier for me to read.
>> Brian Holt: No, it's fine, okay, path=/ okay, and then component, we're not gonna load Landing cuz that's no longer available upfront.

[00:01:02]
What we're gonna do is we're going to make this another function, another arrow function, right, it's gonna take in props and then it's going to render AsyncRoute. Props are going to be equal to whatever props are passed in, so props = props. And then the last thing is going to be loadingPromise= import./Landing.

[00:01:45]

>> Brian Holt: What I mess up here? All right, so that's fine, it needs to be that, right.
>> Brian Holt: I always mess this up.
>> Brian Holt: Okay, so, it's still a route, right, with three act router, but the component's going to render, it's going to render this AsyncRoute component, right. So AsyncRoute, the first time it renders is going to be the loading spinner, right, but we're also passing it this promise.

[00:02:30]
This promise is coming from import, import is going to go out to our server, and say, I don't have this, please get this to me. Our server is going to hand them another bundle of JavaScript, and then once that JavaScript is loaded, parsed, and ready to go, it's going to resolve that promise with that module.

[00:02:55]
Now you might be asking, where's the code split actually happening? Where do I tell it split the code here, right? The answer is, it's just smart enough to say you called import there, I can cut off this entire part of the dependency graph. So anything that landing is depending on, which is not much at the moment, but anything that is coming along with Landing will be asynchronously loaded here.

[00:03:22]

>> Brian Holt: So let's take a look at what that actually looks like, so first of all if you go back to, I think I put this in a bad state, so let's try running this again.
>> Brian Holt: You changed your .babelrc files, any time you change .babelrc you're gonna have to start and stop your server again.

[00:03:46]

>> Brian Holt: It still doesn't like that, unexpected token there.
>> Brian Holt: All right so, this gets a little dense for me so I'm just gonna put this on to multiple lines, figure out where I'm going wrong.
>> Brian Holt: All right so I have Route, exact, path, component, this is props that returns AsyncRoute props loadingPromise.

[00:04:27]

>> Brian Holt: And loadingPromise.
>> Brian Holt: That looks like it should work, right, did I mess something else up?
>> Brian Holt: I might of not saved my babel file, I didn't, ha! There it is, gotta save your .babblerc or it doesn't work.
>> Brian Holt: Hopefully it works this time.
>> Brian Holt: Okay, so now what I want you to come up and check out is we got 0.bundle.js and we have bundle.js, right.

[00:05:28]
Now granted, this is 5.58 megabytes, this is 10 kilobytes, not a whole lot of savings, right, but imagine if you have large dependency graphs on each route. Like one of them is bringing in moment.js, right, moment's a fairly large library, so you only wanna load moment when it's necessary.

[00:05:47]

>> Brian Holt: So if we refresh this again,
>> Brian Holt: What I want you to look at if we open network,
>> Brian Holt: We're gonna refresh. Notice how it loads bundle and 0.bundle.js cuz this is the landing route, so it's gonna have to load both of those. But again, go to Browse All but now refresh again hard, I'm just gonna look at JS for the moment.

[00:06:16]
Notice that only bundle.js is being loaded, then as soon as I go to Home it's gonna load another bundle, right. So this is what code splitting is gonna buy for you, it's gonna buy you the ability to have this code split out so that you can have smaller initial bundle sizes.

[00:06:33]
Again, this is something you're gonna have to carefully consider, whether or not it's going to be useful for you. This is not useful, right, landing is so small that the ability to like split this out, it's not super interesting. It would be better if we just included it the first time instead of having to split this out.

[00:06:48]
But, if in a normal application, when each route is going to be fairly sizeable, you're gonna be saving maybe 100 kilobytes and that's a big deal.
>> Brian Holt: Also keep in mind that these file sizes look really large but where it's un-menofied, it's un-gzipped. All like of this stuff is not production ready at this moment in time.

