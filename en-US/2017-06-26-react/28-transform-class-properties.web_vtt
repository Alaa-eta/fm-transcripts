WEBVTT

1
00:00:00.530 --> 00:00:04.520
&gt;&gt; Brian Holt: However, along that route,
we can actually do one better than this.

2
00:00:04.520 --> 00:00:08.060
Which is I would say the most recent way
and my preferred way of writing this.

3
00:00:09.270 --> 00:00:13.110
However, depending on a stage to proposal,
right?

4
00:00:14.950 --> 00:00:22.560
So, for those of you who are not familiar
with how Java script is standardized.

5
00:00:22.560 --> 00:00:23.740
Things can be stages.

6
00:00:23.740 --> 00:00:27.500
When we add a new feature to Java script
it can be feature one, two, three,

7
00:00:27.500 --> 00:00:28.040
or four.

8
00:00:29.570 --> 00:00:34.330
If something is stage zero it's like a
strawman proposal, there's like a very low

9
00:00:34.330 --> 00:00:36.760
chance actually that it's going
to make it in the language.

10
00:00:36.760 --> 00:00:38.260
Stage one you're getting a better chance,

11
00:00:38.260 --> 00:00:41.650
once you're stage two,
you're probably going to make it.

12
00:00:41.650 --> 00:00:45.860
Stage three is almost certainly going
to make it, and stage four has made it.

13
00:00:45.860 --> 00:00:48.490
Once things are stage four,
they're ready to go into the language.

14
00:00:50.480 --> 00:00:54.660
So, I'm gonna show you right
now a stage two proposal,

15
00:00:54.660 --> 00:00:57.650
that as far as anybody I
ever talked to on TC39,

16
00:00:57.650 --> 00:01:01.910
the body that standardizes Java Script,
this is definitely going to make it.

17
00:01:01.910 --> 00:01:05.400
In other words,
I feel comfortable writing this and

18
00:01:05.400 --> 00:01:11.050
if this doesn't make it, I guarantee you
not only are you going to be screwed,

19
00:01:11.050 --> 00:01:12.950
but we're all going to be screwed, right?

20
00:01:12.950 --> 00:01:14.800
In other words,
there's going to be a way forward for

21
00:01:14.800 --> 00:01:16.858
us
&gt;&gt; Brian Holt: So again,

22
00:01:16.858 --> 00:01:22.970
there's some level of danger to this,
I'm just going to throw that out there.

23
00:01:22.970 --> 00:01:26.120
Be aware of that.

24
00:01:26.120 --> 00:01:30.990
But, we're going to make this
a tiny bit easier for ourselves.

25
00:01:32.010 --> 00:01:39.910
So the first thing that we gotta to do is,
I want you to go to your babelrc.

26
00:01:39.910 --> 00:01:41.770
Cuz we need to add
an additional plugin in here.

27
00:01:46.801 --> 00:01:50.030
&gt;&gt; Brian Holt: So, there we go.

28
00:01:50.030 --> 00:01:56.520
Go and add another thing called plugins,

29
00:01:56.520 --> 00:02:02.215
so we're gonna include just one additional
plugin here and this plugin is going to be

30
00:02:02.215 --> 00:02:12.215
babel-plugin-transform-class-properties.

31
00:02:14.297 --> 00:02:19.010
This is going to add the,

32
00:02:19.010 --> 00:02:24.240
just one ability for
us to add class properties onto our ES6

33
00:02:24.240 --> 00:02:30.964
classes.
&gt;&gt; Brian Holt: Okay,

34
00:02:30.964 --> 00:02:34.438
so now come back to search.jsx,

35
00:02:34.438 --> 00:02:40.272
instead of having
handleSearchTermChange like this,

36
00:02:40.272 --> 00:02:44.368
what we're gonna do is we're gonna say

37
00:02:44.368 --> 00:02:49.459
handleSearchTermChange equals
arrow function

38
00:02:49.459 --> 00:02:55.433
like that.
&gt;&gt; Brian Holt: Right?

39
00:03:02.740 --> 00:03:03.580
&gt;&gt; Brian Holt: My lint is yelling, but

40
00:03:03.580 --> 00:03:06.829
I don't think that's actually correct.
&gt;&gt; Brian Holt: I think it should work.

41
00:03:17.578 --> 00:03:20.294
&gt;&gt; Brian Holt: Maybe no, parsing error.

42
00:03:34.178 --> 00:03:35.576
&gt;&gt; Brian Holt: Hm.

43
00:04:11.047 --> 00:04:12.029
&gt;&gt; Brian Holt: It looks like it's still

44
00:04:12.029 --> 00:04:17.593
working.
&gt;&gt; Brian Holt: It

45
00:04:17.593 --> 00:04:19.456
looks like it is just my
linter failing for the moment.

46
00:04:37.418 --> 00:04:37.999
&gt;&gt; Brian Holt: So, I'll

47
00:04:37.999 --> 00:04:42.140
have to figure out later why my,
are you also seeing the same error?

48
00:04:42.140 --> 00:04:47.048
So, I wonder if that's just
something with ES Lint for

49
00:04:47.048 --> 00:04:50.581
me to tell that it needs to understand.

50
00:04:56.684 --> 00:04:57.974
&gt;&gt; Brian Holt: Better JavaScript.

51
00:05:05.814 --> 00:05:07.171
&gt;&gt; Brian Holt: Well in any case,

52
00:05:07.171 --> 00:05:08.529
it is actually a,

53
00:05:08.529 --> 00:05:16.982
it is working.
&gt;&gt; Brian Holt: So

54
00:05:16.982 --> 00:05:20.780
let's just press forward.

55
00:05:20.780 --> 00:05:24.020
And so come back here to search.

56
00:05:24.020 --> 00:05:30.865
There's actually something else we
can do here to also simplify this.

57
00:05:30.865 --> 00:05:36.152
We can actually get rid of
the constructor all together,

58
00:05:36.152 --> 00:05:42.355
and we can say state =
&gt;&gt; Brian Holt: searchTerm,

59
00:05:42.355 --> 00:05:46.440
colon like that, and then we can
just drop the whole constructor.

60
00:05:51.850 --> 00:05:53.630
&gt;&gt; Brian Holt: That's super weird.

61
00:05:53.630 --> 00:05:57.890
This wasn't failing my Lint error earlier.
&gt;&gt; Brian Holt: And

62
00:05:57.890 --> 00:06:06.395
prettier understands it.
&gt;&gt; Brian Holt: And

63
00:06:06.395 --> 00:06:09.464
again, you can come back here and
everything works just like

64
00:06:09.464 --> 00:06:14.433
you expect.
&gt;&gt; Brian Holt: Cool,

65
00:06:14.433 --> 00:06:15.413
any questions about that?

66
00:06:29.484 --> 00:06:31.422
&gt;&gt; Brian Holt: So
I'll push out a branch of this.

67
00:06:31.422 --> 00:06:37.232
Get checkout, v3/9,

68
00:06:37.232 --> 00:06:41.457
get commit/m9,

69
00:06:41.457 --> 00:06:47.267
get push origin v3/9,

70
00:06:47.267 --> 00:06:49.800
cool.
&gt;&gt; Speaker 2: Can

71
00:06:49.800 --> 00:06:51.380
you go back to your search please?
&gt;&gt; Brian Holt: Yeah.

72
00:06:55.045 --> 00:06:59.614
&gt;&gt; Brian Holt: So this right here this

73
00:06:59.614 --> 00:07:04.454
is the dangerous part.

74
00:07:04.454 --> 00:07:11.490
So the ability to add properties like
this onto your es six classes is not

75
00:07:11.490 --> 00:07:16.847
standard yet but it coming.
&gt;&gt; Brian Holt: And so what our friend

76
00:07:16.847 --> 00:07:21.906
over here was talking about, why this
actually works where as it didn't before,

77
00:07:21.906 --> 00:07:31.610
is that,`
&gt;&gt; Brian Holt: Well that is it.

78
00:07:39.690 --> 00:07:46.230
Is that arrow functions do not create new
contexts when they are created, right?

79
00:07:46.230 --> 00:07:52.140
So if I create an arrow function,
it does not create a new context.

80
00:07:52.140 --> 00:07:57.340
Why it's important is if I say,
&gt;&gt; Brian Holt: Or if I call render, right.

81
00:07:57.340 --> 00:08:01.170
Render whenever it's called creates
a new context wherever it is.

82
00:08:01.170 --> 00:08:05.500
So in this particular case it's called
within search so this refers to search,

83
00:08:05.500 --> 00:08:08.541
right?
&gt;&gt; Brian Holt: But if I pull render out

84
00:08:08.541 --> 00:08:12.030
and then call it in a different context
it will create a new context there.

85
00:08:12.030 --> 00:08:14.940
The difference with arrow functions is
this will never create a new context.

86
00:08:14.940 --> 00:08:17.500
So it's always just going to
refer it to search, right?

87
00:08:19.370 --> 00:08:22.830
So semantically,
it's similar to binding the function.

88
00:08:24.000 --> 00:08:25.840
So if I call like dot bind this,

89
00:08:25.840 --> 00:08:30.010
right, whatever context I want it to be
bound, it's semantically similar to it.

90
00:08:30.010 --> 00:08:32.578
The only differences is that
when you bind the contact,

91
00:08:32.578 --> 00:08:35.500
you're actually like melting
the context together.

92
00:08:35.500 --> 00:08:38.620
Whereas with an arrow function
you just never use a new context.

93
00:08:42.950 --> 00:08:43.660
And in state here,

94
00:08:43.660 --> 00:08:46.540
we're just setting the default state
which is gonna be search term.

95
00:08:47.860 --> 00:08:52.730
Some of the people often ask me,
why do we not have prop types for state?

96
00:08:54.110 --> 00:08:56.590
Well, we don't need one, right?

97
00:08:56.590 --> 00:08:59.440
Because search term it's always
just gonna be string, right?

98
00:08:59.440 --> 00:09:02.040
So it kind of is implicitly typed here.

99
00:09:09.686 --> 00:09:10.879
&gt;&gt; Brian Holt: Questions?

100
00:09:14.790 --> 00:09:15.440
&gt;&gt; Speaker 3: Does the state

101
00:09:17.540 --> 00:09:22.880
variable have to be state, named state?
&gt;&gt; Brian Holt: Yeah, good question.

102
00:09:22.880 --> 00:09:27.119
It has to be named state.
&gt;&gt; Speaker 4: I don't know if you

103
00:09:27.119 --> 00:09:29.970
wanna take a peek at the chat room?
&gt;&gt; Brian Holt: That's gonna

104
00:09:29.970 --> 00:09:32.630
figure out what I'm doing wrong.
&gt;&gt; Speaker 4: It's sorta like the last ten

105
00:09:32.630 --> 00:09:35.270
messages I don't really
even know what to ask

106
00:09:35.270 --> 00:09:40.159
there.
&gt;&gt; Brian Holt: Yeah,

107
00:09:40.159 --> 00:09:43.190
so people are saying that
it failed to compile.

108
00:09:45.150 --> 00:09:48.389
That's not entirely true, whoops.

109
00:09:49.850 --> 00:09:54.430
So whenever wet pack has a problem

110
00:09:54.430 --> 00:09:58.630
with any of it's loaders, right?

111
00:09:58.630 --> 00:10:01.010
So in this particular case we
have the ES Length loader.

112
00:10:01.010 --> 00:10:03.470
It says that it's a fail to compile.

113
00:10:03.470 --> 00:10:05.000
It's not actually super true.

114
00:10:05.000 --> 00:10:08.670
It actually will still compile
even though the ES Length fails.

115
00:10:08.670 --> 00:10:11.540
So that's why we're still able to see our
changes despite the fact that it says

116
00:10:11.540 --> 00:10:12.320
failed to compile.

117
00:10:13.430 --> 00:10:15.060
It still compiled, I promise, right?

118
00:10:16.660 --> 00:10:20.600
Now if Babel fails, then it actually will
fail to compile and nothing will change.

119
00:10:22.520 --> 00:10:26.730
But the thing is here, it won't auto
reload when it fails to compile, so

120
00:10:26.730 --> 00:10:30.971
that's something to keep in mind.
&gt;&gt; Brian Holt: Then I'll just have

121
00:10:30.971 --> 00:10:35.000
to figure out here in a second why es link
decided that it doesn't like me anymore.

122
00:10:36.860 --> 00:10:42.401
It's gotta be something
with that eslinks.jayson.

123
00:10:45.234 --> 00:10:47.796
&gt;&gt; Brian Holt: Let's see I'm sure I have

124
00:10:47.796 --> 00:10:51.639
it here in the Complete intro to React,

125
00:10:51.639 --> 00:10:56.720
ESLint.json.
&gt;&gt; Brian Holt: Parser,

126
00:10:56.720 --> 00:10:59.110
that's it, found it.

127
00:11:00.940 --> 00:11:04.960
Okay, everyone go to your ESLint.json, and

128
00:11:04.960 --> 00:11:12.652
just put parser babel-eslint.
&gt;&gt; Brian Holt: So

129
00:11:12.652 --> 00:11:16.670
this means it'll use the parser from Babel
so that it can understand everything that

130
00:11:16.670 --> 00:11:23.259
Babel can understand.
&gt;&gt; Brian Holt: So line 10 there,

131
00:11:23.259 --> 00:11:32.515
that's what I'm pointing at.
&gt;&gt; Brian Holt: Okay,

132
00:11:32.515 --> 00:11:35.933
so now hopefully,
if we come back here and start and

133
00:11:35.933 --> 00:11:39.680
stop our desk server again,
it'll stop yelling at us.

134
00:11:50.114 --> 00:11:52.996
&gt;&gt; Brian Holt: Please, yes, nailed it.

135
00:11:52.996 --> 00:11:56.140
&gt;&gt; Speaker 3: So it's Babel-eslint?

136
00:11:56.140 --> 00:11:56.720
&gt;&gt; Brian Holt: Yeah,

137
00:11:56.720 --> 00:11:57.440
I need to pull up here.

138
00:11:58.700 --> 00:12:02.590
This gonna tell which parts are used,
cuz otherwise it won't run it through

139
00:12:02.590 --> 00:12:07.886
Babel.
&gt;&gt; Brian Holt: Something

140
00:12:07.886 --> 00:12:11.210
else I wanted to talk
about with search.jsx.

141
00:12:11.210 --> 00:12:15.160
Someone asked in chat that I saw,
what happens to the parenthesis here?

142
00:12:16.390 --> 00:12:19.080
I just mentioned earlier but
I'll mention it again.

143
00:12:19.080 --> 00:12:21.170
As soon as I save it,
those parenthesis are gonna go away.

144
00:12:21.170 --> 00:12:25.503
If you have exactly one parameter
is optional to have parenthesis and

145
00:12:25.503 --> 00:12:28.020
premier will drop them.

146
00:12:28.020 --> 00:12:30.630
So I typically would put them on.

147
00:12:31.670 --> 00:12:33.270
That's what standard required and

148
00:12:33.270 --> 00:12:37.070
I was used to writing standard but
premier drops them.

149
00:12:40.240 --> 00:12:44.040
So that's fine and let's talk about
event right here and what is event.

150
00:12:45.320 --> 00:12:50.905
So I'm sure most of you are used to
seeing event.target.value right?

151
00:12:50.905 --> 00:12:53.550
Yeah that's a very common way
of interacting with the DOM and

152
00:12:53.550 --> 00:12:54.760
with DOM events.

153
00:12:54.760 --> 00:12:58.580
You can also put current target there,
right?

154
00:12:58.580 --> 00:12:59.570
Either one of those works.

155
00:13:01.700 --> 00:13:04.850
It's safe enough to say target.value
with the way the react works.

156
00:13:07.520 --> 00:13:11.100
So this is semantically totally
similar to a DOM event, right?

157
00:13:11.100 --> 00:13:14.970
You can actually never know that
this is not really a DOM event.

158
00:13:14.970 --> 00:13:17.910
It's technically a synthetic react event.

159
00:13:17.910 --> 00:13:20.878
And the only reason that it's done this
way is it's a little bit more performant

160
00:13:20.878 --> 00:13:25.780
and react can get a little more speed off
of doing its own event system rather than

161
00:13:27.050 --> 00:13:27.820
letting the DOM do it.

162
00:13:28.950 --> 00:13:33.500
So the only reason I mentioned
that is if you ever call like or

163
00:13:33.500 --> 00:13:35.870
anything like that it might scare you.

164
00:13:35.870 --> 00:13:40.250
But it's totally similar, like you can
use the MDM Docs, like the API for

165
00:13:40.250 --> 00:13:43.670
this event is exactly the same
as the one that MDM has.

166
00:13:43.670 --> 00:13:51.132
So it's a totally normal event other than
the fact that it's not an event [LAUGH].

167
00:13:51.132 --> 00:13:54.524
And yeah, any questions about

168
00:13:54.524 --> 00:14:01.601
that?
&gt;&gt; Brian Holt: So this is the way

169
00:14:01.601 --> 00:14:05.930
that we will be doing both state and
handle search term changes from now on.

170
00:14:05.930 --> 00:14:08.020
I don't think we'll ever
use the constructor again.

171
00:14:08.020 --> 00:14:12.030
Just because it's kind of burdensome and I
think this is a little bit more succinct.

172
00:14:12.030 --> 00:14:14.020
So, I would invite you to do it this way,

173
00:14:14.020 --> 00:14:15.700
this is a very common
way of writing react.

174
00:14:17.970 --> 00:14:20.740
But again, it's always up to
you to make your own tradeoffs.

