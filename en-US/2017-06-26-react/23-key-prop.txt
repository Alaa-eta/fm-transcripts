[00:00:00]
>> Brian: Now if we come back here everything should be working. But we're getting this error down here in the console, which is each child array should have a unique key property. So you should be seeing that right now cuz we have not fixed it. Let's talk about that.

[00:00:17]

>> Brian: So imagine we had a sort ability on here, that we could sort shows by title, ascending, descending, sort by when it was released, sort by all these different things, right? Well, what would be happening is we'd have this array of components and we'd be changing the order of them, right?

[00:00:34]
And each one of these components has a somewhat nested style of components right? There's components within components within components, right? Well right now the way it works is React is going to check, is this array as the same as when the last one was there? And it's gonna say no and then it's gonna blow everything away and totally re-render everything.

[00:00:59]
Now that should set off some warning bells in your head because that's really inefficient, right? What it could be doing is just reorganizing them, right, because that's all we're doing. So it could keep all of that dom structure, all those dom nodes, and just move them around. And these aren't particularly complicated components, right?

[00:01:18]
But imagine if they were deeply nested components, that have D3 charts, and svgs, and all that kind of crazy stuff on there. That could get really expensive really fast, especially if you have a hundred nodes. So now I'm painting worst case scenario for you, but hopefully, I'm demonstrating into the problem that can exist here.

[00:01:37]
So the way that you can sidestep this, if we go back to search.jsx, we can give basically, reacts like, hey here's a handle that you could hold on to, right? Something really fast that you can compare to see if something changed, and if the order of things changed, right?

[00:01:56]
So I can say key and I can say key= show.something that is unique about it, right? There's that several pieces of information here that are unique about it, but the most obvious one is the imdb ID, right? Typically, it's going to be some sort of identifier like that.

[00:02:13]
But, I mean, maybe it's your user's table and you can use the email as the key, right? The only thing that's required here, is it's unique for that particular object. And a big no, no here, which a lot of people are tempted to do, is just say index right here, right?

[00:02:31]
And then use index here, well what did that buy us? Literally nothing, right? Because if anything gets sorted out of order, then the index is gonna change and it's gonna rerender anyway, right? So don't use index that way. Unless that's literally the only thing that changes.
>> Brian: So in this case, we're gonna use imdbID.

[00:02:52]
That way, let's say if I move Atlanta from the first one to the last one, it can just say, okay, this imdbID is the same. I'm just gonna take this one and plop it down here. Makes sense?
>> Brian: Cool.
>> Brian: So yeah, now we should be able to go back over here.

[00:03:14]
And everything is all good.

