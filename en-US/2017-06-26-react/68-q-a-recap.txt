[00:00:00]
>> Brian Holt: Congratulations, all of you that survived Flow, React, and Redux over the past couple of days. Really excited to be back here, and we're gonna be chatting about, more about Redux today. It's more advanced use cases, like server side rendering, code splitting, and we're even gonna be talking a little bit about Preact.

[00:00:20]
So cool, hopefully you were able to pull down the latest branch. Latest branch is gonna be v3-21 and that's currently available on GitHub.
>> Brian Holt: So kinda to recap where we were, and I guess before we get started, does anyone have any questions that they want to ask?
>> Speaker 2: There was a question before we broke last night about the MobX versus Redux.

[00:00:55]

>> Brian Holt: Yeah, which was a great question, so there's a library called MobX, and inevitably, when talking about Redux, MobX usually gets brought up. It fulfills the same use case as Redux and it's a centralized state repository for your entire application. You would use MobX in the same situations that you would use Redux.

[00:01:19]
Similar to how like, you wouldn't use Redux and MobX together, just like you wouldn't use Ember and Angular together, right. Same sort of idea here. MobX is a really cool piece of technology that relies on some more new types of technologies and it's really fun to play with.

[00:01:36]
It's very powerful, you can achieve some pretty cool patterns. They rely heavily on things called computer properties, which end up being really cool. But again, I kinda prefer my technologies to be as simple as possible, which is why I do enjoy Redux. It's pretty, again, you just have this reducer cycle and that's really it.

[00:02:00]
So for me personally, while I've toyed around with MobX and had a great time. I haven't had a situation where I needed that much power for my repository, or my state repository. So that's why I choose to not use it typically, but that's purely a personal call on my part.

[00:02:18]
You're welcome to disagree and use it on your own as well. And that's a totally valid choice.

