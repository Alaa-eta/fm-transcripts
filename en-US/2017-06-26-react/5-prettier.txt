[00:00:00]
>> Brian Holt: So first thing, let's just go ahead get this out of just being in a script tag. So I'm just gonna cut this.
>> Brian Holt: I'm gonna create a new file. And I'm actually gonna create a new directory as well, New Folder. I'm just gonna call it js.
>> Brian Holt: And inside of js, I'm gonna create a new file.

[00:00:32]
And I am going to call this,
>> Brian Holt: Let's call it ClientApp.jsx.
>> Brian Holt: And we're just gonna put all that in there.
>> Brian Holt: Okay.
>> Brian Holt: And I have turned off my Settings real quick. So give me one second to modify. That's not what I wanted to do. JsPrettier, User, and don't look at the man behind the curtain.

[00:01:22]
Okay, so save that, and now, we're gonna get to start talking about some tools for just a moment before we go back to writing more react. So the first tool that I wanna talk about, which I am just incredibly excited about, to the point that I have contributed a couple times, is a tool called prettier.

[00:01:43]
I've written a little bit of Go, just here and there. And one of my favorite, favorite parts about writing Go is a tool called Go Format, which is just amazing. That it's amazing because the Go community has standardized on this tool that just automatically formats or code for them.

[00:02:02]
They don't have to do anything. It is just always looks the same. And there's just never any question. Just everyone always uses Go Format and there is no bikeshedding about how many stabs or spaces, or semicolons or no semicolons, or spaces between function and the parentheses. All of the stuff just, it's never talked about because this tool just already takes care of it for them and there's no room to argue about it.

[00:02:26]
Now, if anyone has been writing JavaScript for any length of time, there's lots of room to talk about it, right? How many of us have had just this week a conversation like that? Pretty much, most of us, right? So Enter Prettier. Prettier is kind of aiming to be this Go Format, that it does all of this formatting stuff for you.

[00:02:45]
And this actually scares a lot of people. Like when I introduced it at Netflix, there was some fear and uncertainty and doubt, right? Because people have their patterns that they're accustomed to and that they like, right? However, the way that I like to propose it to people is imagine that when you're writing code, you always have this background thread in your brain of how am I gonna make this more readable?

[00:03:09]
How am I gonna format this right? Is all the spacing correct? And so do I have the right commas in the right places? Should I be writing semicolons, should I not write? All these decisions are just constantly going on in the background. Imagine, if you could just shut down that thread, right?

[00:03:22]
And that you just free up more resources to be thinking about anything else. This is even a great example right here. So here, I pasted this code, right, and the indentation's off, right? Because the first one is correct, but there is extra tabs coming in from the HTML.

[00:03:40]
And furthermore, there's now mixed tabs and spaces too, which is kind of a problem. So I had to actually go in and fix this. I pasted it, and the first thing I instantly did is I went and said, okay, I'm gonna fix this and get all of it right.

[00:03:52]
Prettier can just fix this for you automatically on the fly every single time. So you can paste code and not have to worry about like, well, should I break line here? Should I break at 180? Should I break at 120? All these different things, Prettier is just gonna do for you.

[00:04:09]

>> Brian Holt: So I invite you to tool around with it. They actually did give us quite a few you can choose, right. We can tell it to wrap at 80 characters. We can tell it to wrap at 120. We can tell it to use semicolons. We can tell it not to, tab, spaces, etc.

[00:04:22]
I kinda wish that they hadn't. I kinda wish they had just said, this is the way it is and just deal with it. But I'm just happy it exists, so [LAUGH] let's go with that. So what I want you to do now is I want you to go to you're command line, and I want you to do yarn global add prettier.

[00:04:51]

>> Brian Holt: I think mine should already be up-to-date.
>> Brian Holt: 1.31
>> Brian Holt: Yep.
>> Brian Holt: So this is going to give us the ability to do it. So if I go into, I'm in node_modules. So if I go into js, I saved this, right? So notice that the, in fact, let's just really mess it up.

[00:05:23]
So now, everything's really unformatted, right? This is just a mess, but still valid JavaScript, right? This would totally would work in a browser. Now if I say, prettier
>> Brian Holt: And what we're gonna do here is we're gonna say, --single-quote. So we're gonna give it parameters to tell how we want it to be formatted.

[00:05:46]
We're gonna do, --print-width=120. It's default is still 80, which is too small from my opinion. I'm no coding on an old school terminal, so.
>> Brian Holt: And then, we're just gonna run it on ClientApp.jsx, okay? So if I just hit Enter right now, it's not actually going to write it.

[00:06:11]
It's just going to show me what it's gonna look like. So this is what it actually printed out.
>> Brian Holt: Well, I ran that. But notice, nothing's changed here yet, right? So it's still broken. So, now, if I come in here and say, --write,
>> Brian Holt: It's gonna tell me which one it wrote in 56 milliseconds.

[00:06:43]
And notice, I come back here, everything is well formatted.
>> Brian Holt: And also, notice, for example, that I was not writing semicolons before, and it just did it automatically.
>> Speaker 2: We're asking why you put jsx instead of js. That's the file extension name.
>> Brian Holt: So right now, I'm putting jsx because momentarily, we wanna be introducing Babble, which is going to make it possible for us to use jsx.

[00:07:15]
So you can put .js for now, but you're gonna have to rename it in ten minutes. So [LAUGH] yeah, I would just recommend keeping it as jsx.
>> Brian Holt: And the reason why I do that is, the real reason is that our Linting rows are going to require it.

[00:07:31]
But the secondary reason that they chose that is they required that anything they use jsx and needs to be transpiled must have a jsx extension just to kinda of to denote that this is something to be transpiled.
>> Speaker 3: Sorry, so after you ran the prettier on jsx, what else did you do?

[00:07:54]

>> Brian Holt: You'd have to just put --write.
>> Brian Holt: Otherwise, it just displays it and it doesn't actually write it. So again, if I write it again, it's gonna show it as gray because it didn't actually change anything, so.
>> Speaker 4: Can that be added automatically to Sublime, so it saves it running prettier?

[00:08:14]

>> Brian Holt: Yep, we're gonna do that.
>> Brian Holt: So exactly, this is kind of burdensome to do. So if you go to the class website here, toward downward, it says prettier.
>> Brian Holt: Prettier.
>> Brian Holt: Nope, not that one.
>> Brian Holt: Editor integration, right? So right now, Prettier doesn'tt have a good way of doing project level configs, which is annoying, right?

[00:08:59]
They're working on it, it's something that's gonna get done. But for now, you'll have to configure it for every individual developer that is writing on your project. That's one limitation you keep in mind. So come here too and go here, which is gonna take you to the Prettier repo.

[00:09:17]
And it's going to take you down to the various editor integrations. So it's possible to do with Atom, Emacs, Vim. They have it for Visual Studio code, Visual Studio, Sublime, and WebStorm. If you're not using one of those, good luck. [LAUGH] No, I'm sure, it's possible. These are just the ones that they have notes for.

[00:09:43]
So I will show you how to do it with Sublime.
>> Brian Holt: You're gonna come in and say, install package. And I already have it installed, so it's not gonna show up, it's called jsprettier, all one word. Install that, and then, what you're gonna do is you're gonna go in to come into Sublime.

[00:10:03]
So I'm bringing up this menu by hitting Shift + Command + P, then open up jsprettier user settings, okay? So for me, I'm using MVM, so I had to define where prettier was, which is easy to do. You just come in here and say, which prettier, and it's gonna give you a path.

[00:10:27]
So just copy and paste that. node_path, again, I had to say again, which node. Copy and paste that. And then, this is the one that you might wanna change, which is auto_format_on_save. Just stick that to be true. And then, here are the prettier options that you want to use.

[00:10:52]
You welcome to change any of these. The only one that I asked you that you use is you need to use parser flow. Since we'll be using Flow later in the day, it will be useful if we'd use the Flow parser instead of the Babel and parser.
>> Speaker 2: Sorry, how did you get to that file in Sublime?

[00:11:10]
I'm also using.
>> Brian Holt: So you Shift + Cmd + P, then jsprettier, and then go to the Prettier Settings User.
>> Brian Holt: If you wanna see all of that ones, you can look at the default ones. It'll show you all of the things that you can change.
>> Brian Holt: But the key is here, you wanna do auto_format_on_save, right?

[00:11:36]
This will make things a ton easier. So for example, if I do this and mess it up again, all I have to do is click Save and everything just fixes itself automatically.
>> Brian Holt: And you can get, again, really wildly out of touch here. It makes things that are technically valid JavaScript, but it'll just fix all of it for you.

[00:12:05]
And we'll do some respecting like, so for example, here, I put an extra line break here. It will respects things like that. It'll respect that I wanna keep these on two separate lines. It'll also respect that I wanna try and keep these on one line.
>> Brian Holt: So some of those things it'll keep.

[00:12:27]
Maybe not.
>> Brian Holt: There we go.
>> Brian Holt: The last thing I wanna do is I wanna make it so people can actually do the entire project from the command line. So going back to this, we're gonna say, it's at the top. We're gonna do prettier --write --single-quote --print width=120, and then --parser=flow.

[00:13:16]
What are the settings that we have in here?
>> Brian Holt: I think most of these are just, these are all the default ones. "tabWidth"= 2, --tab-width=2. So this is what I'm saying that you can't actually, there's no config file. You actually have do it every single time in the command line.

[00:13:42]
And then, we wanted to make sure that it hits every JS file and every JSX file, right? Cuz we wanna always format those two different things. So we're gonna do here is \'js/**/*.js. Sorry no, we're gonna do js,jsx}''.
>> Brian Holt: Does that look right? Let's try that.
>> Brian Holt: Yeah, I didn't think so.

[00:14:34]

>> Brian Holt: So let's see if that works.
>> Brian Holt: This doesn't even look like it's hitting any files.
>> Brian Holt: Yeah, I don't need the backslashes. I can just put the quotes, that's what it is. Okay, so, [COUGH] what this is gonna do is it's gonna hit everything in your js directory that has a js or a jsx kind of file extension.

[00:15:17]
So this would be useful, for example, if someone didn't want to install Prettier and was working on your project or you could put it as maybe some sort of like Precommit hook, you could put it into your continuous integration. So anything that you're gonna require your users to do, it's probably good to have kind of an escape hatch if they don't want to install all of your tooling for them inside of your editor.

[00:15:36]
So what we're gonna do is we're actually going to. This is a pain to remember, right? Slash impossible to remember. [LAUGH] Like, I had to look at my notes here to get it. So we're going to put this inside of our project directory. So we're gonna go into package.json.

[00:15:51]
And here, I have scripts, and you can see that there's already one here for the API, which we'll run later, don't worry about it for now. We're gonna put another one here that says, format, and we're just going to put that thing that we just already had.
>> Brian Holt: But you're gonna have to escape those backslashes.

[00:16:19]

>> Brian Holt: Let's do View > Word Wrap.
>> Brian Holt: So now, I'll let you finish. Well, let me show you, then I'll come back and let you finish it. And then we'll take a quick break after that. I can come to the command line and I can say, yarn. We're gonna use yarn for this.

[00:16:44]
And then, all I have to say is yarn format. And it's gonna go through and run that command, right? So I can save that Bash command into the package.json and then run it. This is the same thing as saying, mpm run format. Same diff, but this is nice now because I have kind of like preemptively saved this.

[00:17:05]
And so that we can always use it. That make sense?
>> Brian Holt: Cool.
>> Brian Holt: And what's nice is we don't have to go and tell it every single file. It's always just gonna pick up everything in that js directory.
>> Brian Holt: Now, to be honest, for the rest of the day, we're not gonna use this because our editor is already configured for it.

[00:17:29]
So that's nice.

