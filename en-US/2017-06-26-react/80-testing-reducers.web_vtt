WEBVTT

1
00:00:00.520 --> 00:00:05.254
&gt;&gt; Brian Holt: Alright V3-24 is pushed,
now we're going to get into testing Redux,

2
00:00:05.254 --> 00:00:07.594
which is way more fun, why is it fun?

3
00:00:07.594 --> 00:00:12.307
Because you don't actually have to write
the tests, the dev tools will write

4
00:00:12.307 --> 00:00:16.960
tests for you, so let me show you what
I mean unless there's any questions?

5
00:00:21.048 --> 00:00:25.314
&gt;&gt; Brian Holt: All right,
let's keep going then, so

6
00:00:25.314 --> 00:00:31.521
refreshing the page,
we're still on the search page and

7
00:00:31.521 --> 00:00:37.878
I want to test right now
the ability to do a search, right?

8
00:00:37.878 --> 00:00:42.469
So what I'm gonna do is I'm
gonna copy the word black.

9
00:00:46.372 --> 00:00:47.922
&gt;&gt; Brian Holt: And
I'm going to paste it in here so

10
00:00:47.922 --> 00:00:51.380
I have one atomic action from
going from empty string to black.

11
00:00:51.380 --> 00:00:55.760
So I'm gonna paste that okay,
that dispatched

12
00:00:55.760 --> 00:00:59.680
one action to the Redux store right, so
my state went from empty string to black.

13
00:01:00.950 --> 00:01:04.310
So now if I go in here to Redux,
the tools down at the bottom,

14
00:01:06.040 --> 00:01:11.570
I'm gonna go into Inspector okay,
I'm gonna click on this search term one.

15
00:01:11.570 --> 00:01:15.390
That's the action that I care about
at this moment, and you can see here,

16
00:01:15.390 --> 00:01:18.810
I went from empty string to black,
exactly like I expected, okay.

17
00:01:20.035 --> 00:01:23.579
Notice this test thing over here, and

18
00:01:23.579 --> 00:01:28.449
I'm going to click on that,
and if you look at this,

19
00:01:28.449 --> 00:01:34.452
this is a test case written just for
you without doing anything.

20
00:01:34.452 --> 00:01:40.748
I can literally just copy that,
go over here, create a new file,

21
00:01:40.748 --> 00:01:46.245
this is still going into
the test directory inside of JS,

22
00:01:46.245 --> 00:01:50.500
I'm gonna call it
reducers dot spec dot JS.

23
00:01:50.500 --> 00:01:56.290
Going to paste that in there,
it did get the path wrong so

24
00:01:56.290 --> 00:02:00.170
you're gonna have to fix the path but
it's a small price to pay in my opinion.

25
00:02:03.804 --> 00:02:05.290
&gt;&gt; Brian Holt: And
then I'm going to save it.

26
00:02:10.425 --> 00:02:13.660
&gt;&gt; Brian Holt: And you're gonna have
to fix some lint errors there but

27
00:02:13.660 --> 00:02:15.430
that's again, not too bad.

28
00:02:18.425 --> 00:02:20.391
&gt;&gt; Brian Holt: And now,
I have a free test case,

29
00:02:20.391 --> 00:02:25.120
it's not really doing anything too crazy,
it's pulling in the root reducer.

30
00:02:25.120 --> 00:02:31.770
It's saying, given this initial state
which is the initial state of your app,

31
00:02:32.850 --> 00:02:37.690
given this action,
I expect that to equal this.

32
00:02:41.598 --> 00:02:45.548
&gt;&gt; Brian Holt: So
now if I go in here and say yarn test,

33
00:02:45.548 --> 00:02:50.130
I should having a passing test,
which I do.

34
00:02:54.359 --> 00:02:57.131
&gt;&gt; Brian Holt: I get super excited
about this because this is just free,

35
00:02:57.131 --> 00:02:59.172
it is like, I don't have to do anything.

36
00:02:59.172 --> 00:03:03.224
I just have to copy and paste to fix
my lint errors and it is just done, so

37
00:03:03.224 --> 00:03:05.880
I'm gonna make this
a little more succinct.

38
00:03:05.880 --> 00:03:10.344
So what we're actually testing here is
Set search term, I think that's helpful,

39
00:03:10.344 --> 00:03:14.550
that people can know that's
exactly what you're testing.

40
00:03:14.550 --> 00:03:17.375
If you wanted to, you could go in here and
create several test cases of like,

41
00:03:17.375 --> 00:03:23.450
going from black to two or
something like that.

42
00:03:23.450 --> 00:03:28.112
But for
now I'm plenty pleased with this, so

43
00:03:28.112 --> 00:03:33.765
let's go in and do the same thing for
our API test case.

44
00:03:33.765 --> 00:03:40.626
So I'm going to go into, let's do West,
I'm going to West World.

45
00:03:40.626 --> 00:03:45.368
So I'm going to Open West World,
but I'm actually going to refresh

46
00:03:45.368 --> 00:03:50.864
the page because I'm interested in
going from no state to having state.

47
00:03:50.864 --> 00:03:56.985
I need the API server to be up as well,
so I'm gonna go into talks &gt; fam.

48
00:04:00.268 --> 00:04:02.990
&gt;&gt; Brian Holt: So I'm back in my
directory, I'm gonna say, yarn api.

49
00:04:07.928 --> 00:04:09.980
&gt;&gt; Brian Holt: And
now I'm gonna refresh the page.

50
00:04:14.240 --> 00:04:17.810
&gt;&gt; Brian Holt: And
now I get this test case back, so

51
00:04:17.810 --> 00:04:23.284
I'm gonna click on the add API one,
I need Inspector,

52
00:04:23.284 --> 00:04:28.760
so this one right here,
click on that, click on test.

53
00:04:30.170 --> 00:04:34.650
Something worth noting is there are
multiple templates here so if you wanna do

54
00:04:34.650 --> 00:04:37.980
a Mocha test or a Tape test or
an Ova test, it's not tied to Jest.

55
00:04:37.980 --> 00:04:42.676
You don't have to use Jest,
that's just the one that we're using okay,

56
00:04:42.676 --> 00:04:44.586
I'm gonna copy my test here.

57
00:04:44.586 --> 00:04:49.890
Come in here, it's grabbing all of
the API data, which is fine with me.

58
00:04:52.847 --> 00:04:58.209
&gt;&gt; Brian Holt: This is gonna be
ADD_API_DATA, I'm gonna say const

59
00:04:58.209 --> 00:05:04.280
state = blah, and lo and behold,
we have another test case.

60
00:05:04.280 --> 00:05:09.867
And, it's nice formatting,
I think you're prettier, and

61
00:05:09.867 --> 00:05:17.400
let's go run our test to make sure it's
working the way we anticipate, yarn test.

62
00:05:19.027 --> 00:05:21.970
&gt;&gt; Brian Holt: All passing,
so cool, two free test cases.

63
00:05:29.310 --> 00:05:30.690
&gt;&gt; Brian Holt: Any questions about that so
far?

64
00:05:32.260 --> 00:05:36.330
&gt;&gt; Speaker 2: If you were to
restart your API server though,

65
00:05:36.330 --> 00:05:39.580
it would get a different reading,
so then this test case would fail?

66
00:05:39.580 --> 00:05:42.100
&gt;&gt; Brian Holt: This isn't really hitting
the API though, right, this is just

67
00:05:43.860 --> 00:05:48.670
calling reducer with this search term or
this initial state, right?

68
00:05:48.670 --> 00:05:53.690
And this action, right, so
this action came from the API once but

69
00:05:53.690 --> 00:05:58.345
it's just saying, given this action,
it looks like this,

70
00:05:58.345 --> 00:06:01.377
right, that's gonna be true always.

71
00:06:01.377 --> 00:06:03.300
&gt;&gt; Speaker 2: All right, gotcha.

72
00:06:03.300 --> 00:06:05.910
&gt;&gt; Brian Holt: I think you're
hitting an important concept here

73
00:06:05.910 --> 00:06:08.370
is that this is why Redux is so awesome.

74
00:06:08.370 --> 00:06:12.740
This is why I absolutely adore it is that,
given an action and

75
00:06:12.740 --> 00:06:15.300
an initial state it returns a new state.

76
00:06:15.300 --> 00:06:19.780
And that's really easy to test,
right, input in, output out,

77
00:06:19.780 --> 00:06:24.370
nothing in between, right,
that's really it, so

78
00:06:24.370 --> 00:06:28.620
given this state, given this action,
it looks like this.

79
00:06:28.620 --> 00:06:31.890
And if you wanna test something more
complicated, right, if I come in here and

80
00:06:31.890 --> 00:06:36.740
say for example, let's say I had a bug.

81
00:06:36.740 --> 00:06:39.280
That if I go into Westworld
then go back out and

82
00:06:39.280 --> 00:06:43.676
immediately got into Game of Thrones,
I have some bug, let's say I fix it.

83
00:06:43.676 --> 00:06:46.570
And I wanna make sure that
doesn't happen again,

84
00:06:46.570 --> 00:06:51.330
I can come back in here on the second one
and I go in here and say, test, right?

85
00:06:51.330 --> 00:06:55.960
It's giving me the test
case of going from having

86
00:06:55.960 --> 00:06:59.160
just Westworld to having Westworld and
Game of Thrones, right?

87
00:07:00.240 --> 00:07:04.640
So, feel free again to come in here, this
is gonna be a longer test case, right, but

88
00:07:04.640 --> 00:07:05.825
if I come in here and say that.

89
00:07:05.825 --> 00:07:08.511
To say constate, and

90
00:07:08.511 --> 00:07:14.032
this is add API data with two shows,
right,

91
00:07:14.032 --> 00:07:20.598
now I have another test case
that tests that as well,

92
00:07:20.598 --> 00:07:24.642
and again you can run yarn test.

93
00:07:28.716 --> 00:07:30.325
&gt;&gt; Brian Holt: And
I have one fill-in, yeah,

94
00:07:30.325 --> 00:07:32.890
because I didn't delete
the import reducers up here.

95
00:07:37.348 --> 00:07:41.709
&gt;&gt; Brian Holt: So that's up to you, it
depends on how crazy you wanna get right,

96
00:07:41.709 --> 00:07:46.470
for me, one of the things that really
drives what test case I write.

97
00:07:46.470 --> 00:07:48.491
Is I wait for something to fail,
right, I fix it and

98
00:07:48.491 --> 00:07:51.086
then I write another test case so
I don't regress that way again.

99
00:07:51.086 --> 00:07:56.454
That's been a pretty successful strategy
for me, I'll typically test the happy

100
00:07:56.454 --> 00:08:01.450
paths, like making sure that the things
work out the way that I anticipate.

101
00:08:01.450 --> 00:08:04.983
I will test error cases that I
anticipate it might hit, and

102
00:08:04.983 --> 00:08:07.950
then from there I just wait for
errors to come in.

103
00:08:07.950 --> 00:08:11.314
Once I fix an error,
I try and write a test so

104
00:08:11.314 --> 00:08:16.660
that I don't regress back into that,
cool, any other questions?

105
00:08:21.437 --> 00:08:22.133
&gt;&gt; Brian Holt: Cool.

106
00:08:24.358 --> 00:08:28.280
&gt;&gt; Brian Holt: So that's how you
are gonna test the reducers,

107
00:08:28.280 --> 00:08:31.428
that's a really easy way of doing it.

108
00:08:31.428 --> 00:08:34.046
There is nothing to say, you can't
go write these tests yourself but

109
00:08:34.046 --> 00:08:35.050
why not get them for free?

