[00:00:00]
>> Brian Holt: Lets go start making some cool stuff in search. Search.jsx, while this is a mighty fine component, we will be expanding this a little bit.
>> Brian Holt: And we're going to import our preload data, so we are going to say import preload from ./data. All right, if you remember that's via that data.json file.

[00:00:30]
If you need a refresher of what it looks like, this is what it looks like. It's just a bunch if metadata about TV shows. Okay, and then we're going to create a div className =,
>> Brian Holt: Search.
>> Brian Holt: And,
>> Brian Holt: Yeah, if you want to, something that's kind of useful sometimes to do is you can use a pre and code to view JSON output.

[00:01:13]
This is just a debugging trick that I've used a bunch. And honestly, stole from Ryan Florence, the creator of React Router, and he also does a Frontend Masters course.
>> Brian Holt: So all this is going to do is it's going to preformat and print out whatever is in preload.

[00:01:44]

>> Brian Holt: So if we refresh here, I partialed that down. Can't resolve ./data. It's gonna be ../data.
>> Brian Holt: Looks like the eslint is going to require that we put .json on there, so put .json.
>> Brian Holt: And now, hopefully, if you go refresh here, you can see this is what our data looks like.

[00:02:21]

>> Brian Holt: So that trick that I showed you with the JSON stringfy and pre and code, that's really useful if you're not sure what props are coming in or how your state's changing overtime. It's just a really useful way to dump a bunch of data to the DOM really quick.

[00:02:36]

>> Brian Holt: Cool, so now that we have that, let's go and do.
>> Brian Holt: Let's actually go and print out all of our shows. So first thing we're gonna do, is we're gonna wanna print out the title for every show individually. You wanna make it into an h3. What we have is we have an array of show data, right?

[00:02:58]
And we want to transform that into an array of show components of some sort. So for those of you that have any functional programming background, some bells should be going off in your head, of what you should do here, right? For transforming one array from array of one thing to an array of another thing, that's a map, right?

[00:03:15]
That's an all day map. So that's what we're gonna be using here. And this is actually one of my favorite points about React. Is most of React is just JavaScript. Now it seems kind of obvious to say that out loud, but I mean that in the regard of, I want to pick on Angular just cuz that's the one I know.

[00:03:32]
And I'm talking about old Angular, Angular 1 and before. There's a lot of domain specific language in Angular, right? You had to know how to do an ng4, and those were very specifically Angular skills. And then once you moved on from Angular, those skills no longer applied, right?

[00:03:50]
You can't use ng4 with Ember, it doesn't make any sense. What I like about React is, for the most part, it's just JavaScript. There's very little domain specific language for React. There's some, I'm not denying that there isn't some. Now I need to put className in there, it's annoying, right?

[00:04:10]
It's a very React-specific thing to do. But I'm getting on to say that we're gonna be using array map here to do what ng4 does in Angular and what pound each does in Ember, right? So let's take a look at what that actually looks like.
>> Brian Holt: We're going to do preload.shows.map.

[00:04:36]

>> Brian Holt: Then we're going to say show.
>> Brian Holt: And for now, we're just going to return an h3.
>> Brian Holt: With show.title.
>> Brian Holt: So prettier it took it away, but what I had here was this. So this, right here, in the map.
>> Brian Holt: This is just a normal arrow function, right?

[00:05:16]
We're taking a show, which we're. Well, let's go back and talk about map for just a moment, right? So preload.shows is an array, right? We're gonna take that array and we're gonna call map on it. And what that does is it's going to call this function right here, once on every element.

[00:05:36]
Whatever this function returns, it's going to be returned in a new array, right? So, we're going to take this array, which is an array of objects, and we're going to transform it into an array of React components. Cool, are we cool so far with that idea?
>> Brian Holt: Now if you remember, what I referenced very briefly earlier, React knows what to do with array of elements, right?

[00:06:05]
So if we give it an array of elements, it knows how to render those. So that's precisely what we're doing, is we're giving it an array of elements, okay? So that's what's going on here. Now, particularly with arrow functions, if you have exactly one parameter, no more no less, the parenthesis around the parameters are optional.

[00:06:34]
So, as soon as I save this, it's going to take away these parenthesis. That's where they're going. It's prettier that takes them away.
>> Brian Holt: Okay, so now, if I come back here, you'll notice that I have a bunch of h3s on the page.
>> Brian Holt: Any questions about that?

[00:07:06]

>> Audience 1: Is it best practice to pull out the preload.shows into another JSX variable and then put it inside the div? Or is it still, I don't know, would you consider doing the map function inside the div to be best practice?
>> Brian Holt: I mean, it definitely depends on what you're doing.

[00:07:30]
I mean, another beautiful point about React is it's not really super specific about what it wants you to break into components and what not. I found, when I was first writing React, I had a tendency to break things down into just tiny, tiny, tiny components to the point that it was no longer useful, right?

[00:07:47]
Because things were made up of too many components and just didn't really make a lot of sense. So now I try and break them down into atomic objects. In fact, that's what, you kind of you're beating me to my punch here, jerk. No, I'm just kidding. Then we're gonna build a component in here.

[00:08:02]
And then I'm gonna comment to you that this is too big and we should break it into two components. So let's go make it too big first and then we'll break it into two components. But for now this is a tiny component, if this was all this was doing.

[00:08:16]
Yeah, this is great. Let's just leave it that way, right? There's no hard and fast rules, if there's a map then you must do this. I don't know, someone make that rule I don't. I just trying to do what's sane, right? I find those dogmatic rules typically don't serve you in the long-run.

