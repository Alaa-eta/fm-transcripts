WEBVTT

1
00:00:00.450 --> 00:00:04.080
&gt;&gt; Brian Holt: So let's move beyond what
happens after we get done with the UI.

2
00:00:04.080 --> 00:00:07.490
So a handleSearchTermChange gets
called cuz an event happened, right?

3
00:00:07.490 --> 00:00:09.356
I type black in here, right?

4
00:00:09.356 --> 00:00:13.890
So I get events.target.value.

5
00:00:13.890 --> 00:00:15.300
This is gonna be black.

6
00:00:15.300 --> 00:00:18.270
I'm going to create a new action
based on what happened in the action

7
00:00:18.270 --> 00:00:18.908
creator, right?

8
00:00:18.908 --> 00:00:22.630
So it's gonna be action
type setSearchTerm.

9
00:00:22.630 --> 00:00:25.250
Action.payload is going to be black,
right.

10
00:00:25.250 --> 00:00:29.945
And this is going to get
dispatched to redux, okay.

11
00:00:29.945 --> 00:00:35.800
So let's go to reducers.js, okay.

12
00:00:35.800 --> 00:00:40.028
The rootReducer is now going to be
called with the existing state, right?

13
00:00:40.028 --> 00:00:44.260
So the DEFAULT_STATE is gonna
be something here, right?

14
00:00:45.640 --> 00:00:49.310
And the action,
which is the one we just created, right?

15
00:00:49.310 --> 00:00:53.130
It's gonna be action type setSearchTerm,
an action payload black, okay.

16
00:00:54.630 --> 00:00:56.220
It's gonna say, okay,

17
00:00:56.220 --> 00:01:01.010
I'm gonna go into this switch
statement based on the action type.

18
00:01:01.010 --> 00:01:05.960
I'm just gonna say what is the action
type here, is it SET_SEARCH_TERM.

19
00:01:05.960 --> 00:01:08.930
Yes, it is a SET_SEARCH_TERM.

20
00:01:08.930 --> 00:01:14.800
So it's going to be turn the result of
setSearchTerm the reducer with state and

21
00:01:14.800 --> 00:01:15.930
action, right?

22
00:01:15.930 --> 00:01:20.800
So state here is still the same state,
it's the initial state of the Redux store.

23
00:01:20.800 --> 00:01:23.720
And action is going to be that
same action that we created in

24
00:01:23.720 --> 00:01:24.980
the action creator, right?

25
00:01:24.980 --> 00:01:29.970
Type setSearchTerm, and
payload black, right?

26
00:01:29.970 --> 00:01:36.440
It's then going to call object.assign
with a new object, the old state.

27
00:01:36.440 --> 00:01:42.011
So if there was for example,
other stuff here, right?

28
00:01:43.959 --> 00:01:45.847
&gt;&gt; Brian Holt: It's not
gonna overwrite that,

29
00:01:45.847 --> 00:01:49.360
it's only going to overwrite SearchTerm,
right?

30
00:01:49.360 --> 00:01:51.950
That's why you have to be careful not
to blow away the rest of your state.

31
00:01:53.180 --> 00:01:56.115
And then it's going to overwrite
only SearchTerm with whatever is in

32
00:01:56.115 --> 00:01:56.990
action.payload.

33
00:01:56.990 --> 00:01:59.910
So in this particular case it's going to
be black cuz that's what the user typed.

34
00:02:01.010 --> 00:02:03.950
So something is going to become black,
right?

35
00:02:05.760 --> 00:02:08.580
We're going to return this,
which then gets returned here.

36
00:02:08.580 --> 00:02:10.960
Which then gets returned back to redux.

37
00:02:10.960 --> 00:02:14.240
And whatever the results
of setSearchTerm here,

38
00:02:14.240 --> 00:02:18.690
is going to be the new state of Redux,
right?

39
00:02:18.690 --> 00:02:22.920
That's going to inform React,
just like, hey, I have a change, right?

40
00:02:22.920 --> 00:02:25.740
And then React is gonna say cool,
I'm gonna re-render.

41
00:02:25.740 --> 00:02:30.510
And then that's how we end up
back at a Redux state, right.

42
00:02:30.510 --> 00:02:31.810
Now Redux has a new state and

43
00:02:31.810 --> 00:02:34.730
then the UI is going to re-render
based on the state of Redux.

44
00:02:37.937 --> 00:02:39.113
&gt;&gt; Brian Holt: [NOISE] And that's it.

45
00:02:39.113 --> 00:02:43.974
[LAUGH] So like I told you,
we used to have a pretty tight loop and

46
00:02:43.974 --> 00:02:49.320
we extended this loop quite a bit
to get Redux into the application.

47
00:02:52.739 --> 00:02:54.290
&gt;&gt; Brian Holt: So
let's see that in action.

48
00:02:55.410 --> 00:02:58.080
It's not gonna be super
exciting up front and

49
00:02:58.080 --> 00:03:00.019
then I'll push a branch right after this.

50
00:03:01.700 --> 00:03:05.900
So there is nothing in here right now,
but now I can type and do it.

51
00:03:05.900 --> 00:03:07.410
Hopefully I'm we're not
gonna see any errors.

52
00:03:11.998 --> 00:03:17.280
&gt;&gt; Brian Holt: So
let's just prove it to you really quick.

53
00:03:17.280 --> 00:03:20.500
Let's go into landing.jsx.

54
00:03:20.500 --> 00:03:25.378
Instead of saying this,
we're gonna say props.searchTerm.

55
00:03:27.259 --> 00:03:30.067
&gt;&gt; Brian Holt: So now if we refresh
nothing should be there up front but

56
00:03:30.067 --> 00:03:34.170
as soon as I start typing into it, it's
gonna be reading that props from Redux.

57
00:03:37.581 --> 00:03:40.090
&gt;&gt; Brian Holt: All right,
what questions do you have here?

58
00:03:40.090 --> 00:03:41.539
I mean the question you might ask is why?

59
00:03:41.539 --> 00:03:44.890
[LAUGH] Why would you do this to yourself?

60
00:03:44.890 --> 00:03:50.290
That's a very good question of why
would you do this to yourself?

61
00:03:50.290 --> 00:03:52.500
As you can see here,
this adds a lot of complexity,

62
00:03:52.500 --> 00:03:55.000
and there's multiple more steps
that we need to get through.

63
00:03:55.000 --> 00:03:56.950
We used to be able to see
everything in one file.

64
00:03:56.950 --> 00:03:59.890
Like the whole loop used to be
tightly wound into one file.

65
00:03:59.890 --> 00:04:01.670
And now we're spread across five files.

66
00:04:01.670 --> 00:04:05.080
It's still very predictable, right?

67
00:04:05.080 --> 00:04:10.020
What I showed you, this long loop that we
went through, it's the same every time.

68
00:04:10.020 --> 00:04:13.280
And being able to predict how your
state is going to influence your app

69
00:04:13.280 --> 00:04:15.100
is very valuable.

70
00:04:15.100 --> 00:04:18.160
So it's not horrible, it's just longer.

71
00:04:18.160 --> 00:04:22.400
And when you're dealing with states spread
across multiple different parts, right.

72
00:04:22.400 --> 00:04:24.860
The only thing you have to do,
as you see here with landing.

73
00:04:27.819 --> 00:04:31.630
&gt;&gt; Brian Holt: See,
I just subscribed to the state right here.

74
00:04:31.630 --> 00:04:34.990
So if I have another part of the
application that cares about searchTerm

75
00:04:34.990 --> 00:04:38.360
just as much as landing does,
it just has to subscribe to the store and

76
00:04:38.360 --> 00:04:40.480
it's magically available.

77
00:04:40.480 --> 00:04:42.180
So that's powerful.

78
00:04:42.180 --> 00:04:42.930
That's really cool and

79
00:04:42.930 --> 00:04:47.440
that's really the big payoff here is that
only the components that care about that

80
00:04:47.440 --> 00:04:51.440
piece of state have to subscribe, and
none of the parents have to care about it.

81
00:04:52.720 --> 00:04:54.520
That's what's powerful about Redux.

82
00:04:57.527 --> 00:05:00.100
&gt;&gt; Brian Holt: So anyway,
any questions or should we keep going?

83
00:05:03.130 --> 00:05:05.240
Usually those people are like, nope.

84
00:05:05.240 --> 00:05:06.420
I hate you Redux.

85
00:05:06.420 --> 00:05:07.080
I don't care.

86
00:05:07.080 --> 00:05:08.770
Never gonna use you.

87
00:05:08.770 --> 00:05:12.240
And I really try not to sell it short, but

88
00:05:12.240 --> 00:05:14.670
I also want you to be aware of
what you're getting yourself into.

89
00:05:14.670 --> 00:05:16.362
Because a lot of people
just start as like,

90
00:05:16.362 --> 00:05:20.230
well if I'm gonna use Redux I guess I
have to use Redux and that is not true.

91
00:05:20.230 --> 00:05:20.839
Definitely not true.

92
00:05:23.669 --> 00:05:28.867
&gt;&gt; Audience 1: I have a question about
the separation of the action type?

93
00:05:32.819 --> 00:05:38.500
&gt;&gt; Audience 1: The action creator and
the action reducer.

94
00:05:38.500 --> 00:05:40.642
So for example setSearchTerm.

95
00:05:40.642 --> 00:05:45.930
We have the constant, we've got a function

96
00:05:45.930 --> 00:05:49.090
that creates an action and then we have
the reducer that implements the action.

97
00:05:50.640 --> 00:05:51.700
Why the separation?

98
00:05:51.700 --> 00:05:55.710
Why can't we just leverage
JacaScript's functional

99
00:05:57.130 --> 00:06:02.260
capabilities and invoke setSearchTerm
that creates a function action, and

100
00:06:02.260 --> 00:06:04.253
then pass that into
the dispatch [INAUDIBLE].

101
00:06:04.253 --> 00:06:05.660
&gt;&gt; Brian Holt: You're totally could.

102
00:06:05.660 --> 00:06:09.220
So I think rather than having
the setSearchTerm here,

103
00:06:09.220 --> 00:06:11.390
why couldn't we just dispatch and
action directly here?

104
00:06:12.460 --> 00:06:13.770
Is that.

105
00:06:13.770 --> 00:06:16.710
&gt;&gt; Audience 1: Yeah.
So let's say setSearchTerm was the global

106
00:06:16.710 --> 00:06:19.989
action, and you pass it.

107
00:06:21.095 --> 00:06:24.358
&gt;&gt; Audience 1: You pass it the,
&gt;&gt; Audience 1: You pass it

108
00:06:24.358 --> 00:06:29.348
the SEARCH_TERM tag that
was input by the user.

109
00:06:29.348 --> 00:06:30.574
&gt;&gt; Brian Holt: Mm-hm
&gt;&gt; Audience 1: And

110
00:06:30.574 --> 00:06:33.690
then that returns a function
that captured that.

111
00:06:33.690 --> 00:06:39.620
That then can be invoked in the reducer.

112
00:06:39.620 --> 00:06:43.710
So the incoming action is
actually a function that you.

113
00:06:43.710 --> 00:06:44.210
&gt;&gt; Brian Holt: Okay.

114
00:06:45.910 --> 00:06:51.370
So the first to answer that question,
actions are always objects.

115
00:06:51.370 --> 00:06:53.020
And they always have a type.

116
00:06:53.020 --> 00:06:55.690
&gt;&gt; Audience 1: Okay, and
since functions are objects,

117
00:06:55.690 --> 00:06:57.429
they can also have a type property?

118
00:07:00.059 --> 00:07:01.544
&gt;&gt; Brian Holt: I mean you could get there,

119
00:07:01.544 --> 00:07:04.460
I mean I guess I've never
really thought about that.

120
00:07:04.460 --> 00:07:09.103
You should go create a new framework,
I guess.

121
00:07:09.103 --> 00:07:16.712
[LAUGH]
&gt;&gt; Brian Holt: The answer

122
00:07:16.712 --> 00:07:19.000
to the question is,
I'm sure it would work, right.

123
00:07:19.000 --> 00:07:20.520
You could definitely get that to work.

124
00:07:25.113 --> 00:07:27.580
&gt;&gt; Brian Holt: The question
is do you want to?

125
00:07:27.580 --> 00:07:30.460
I never really thought about it before.

126
00:07:30.460 --> 00:07:32.425
I will think about it, and
I will have an answer for you.

