WEBVTT

1
00:00:00.340 --> 00:00:02.990
&gt;&gt; Brian Holt: Let's go make
our other routes enabled.

2
00:00:02.990 --> 00:00:05.519
Let's go to app.jsx.

3
00:00:05.519 --> 00:00:09.410
I want you to delete both details and
search.

4
00:00:13.420 --> 00:00:15.289
After this I will push another branch.

5
00:00:23.741 --> 00:00:26.393
&gt;&gt; Brian Holt: And what I want to do here,
just make sure I get this correct.

6
00:00:31.684 --> 00:00:34.320
&gt;&gt; Brian Holt: I'm gonna
do another AsyncRoute.

7
00:00:36.320 --> 00:00:38.520
Props is gonna be equal to props.

8
00:00:44.686 --> 00:00:52.750
&gt;&gt; Brian Holt: Actually props is
going to be equal Object.assign.

9
00:00:52.750 --> 00:00:57.385
We're gonna have an object of shows
cuz we're gonna to have to pass in

10
00:00:57.385 --> 00:01:01.296
preload.shows cuz it's
what we were doing before.

11
00:01:05.691 --> 00:01:06.556
&gt;&gt; Brian Holt: ,props, so

12
00:01:06.556 --> 00:01:11.203
we're making sure that we're also
bringing in all the props as well.

13
00:01:14.491 --> 00:01:16.600
&gt;&gt; Brian Holt: So
that is object out of sign.

14
00:01:16.600 --> 00:01:17.737
That's the end of props.

15
00:01:20.831 --> 00:01:26.127
&gt;&gt; Brian Holt: And then here, we're also
gonna have to pass in loadingPromise,

16
00:01:26.127 --> 00:01:30.588
which is going to be equal
to import search ./Search.

17
00:01:30.588 --> 00:01:36.680
That should be enough, okay so
that's our second route.

18
00:01:39.740 --> 00:01:44.010
And then the last route here, we are going
to mess around with this component here.

19
00:01:48.718 --> 00:01:52.337
&gt;&gt; Brian Holt: So down here what we
are going to return is instead of

20
00:01:52.337 --> 00:01:58.045
returning details right here,
we are going to return async route.

21
00:01:58.045 --> 00:01:59.705
&gt;&gt; Brian Holt: Props is
going to be equal to.

22
00:02:04.450 --> 00:02:11.230
&gt;&gt; Brian Holt: Again Object.assign and
show is going to be selected show.

23
00:02:22.745 --> 00:02:27.439
&gt;&gt; Brian Holt: And do we really need that?

24
00:02:27.439 --> 00:02:28.596
I hope we don't need that.

25
00:02:33.488 --> 00:02:35.016
&gt;&gt; Brian Holt: And props.

26
00:02:46.580 --> 00:02:51.539
&gt;&gt; Brian Holt: Okay, so
to placate the type checker and saying,

27
00:02:51.539 --> 00:02:57.206
hey I need you to guarantee me
that match is coming because

28
00:02:57.206 --> 00:03:02.182
details depends on match,
if you remember that.

29
00:03:02.182 --> 00:03:07.314
So just to placate the type checker,
just to make sure

30
00:03:07.314 --> 00:03:13.484
that always come through is we're
gonna pass it match that way.

31
00:03:13.484 --> 00:03:14.119
Oops.

32
00:03:14.119 --> 00:03:22.538
&gt;&gt; Brian Holt: Match.

33
00:03:22.538 --> 00:03:28.736
So what happened here
&gt;&gt; Brian Holt: And

34
00:03:28.736 --> 00:03:32.287
we're gonna say match colon that, okay.

35
00:03:41.239 --> 00:03:42.170
&gt;&gt; Brian Holt: Now,
what are you mad about?

36
00:03:46.180 --> 00:03:47.900
And you need loading promise, obviously.

37
00:03:50.180 --> 00:03:53.250
So the other thing you could do if
you didn't want this type error,

38
00:03:53.250 --> 00:03:57.260
is you could go make match or
maybe type and then do default props.

39
00:03:57.260 --> 00:03:58.010
And that would work okay.

40
00:03:58.010 --> 00:04:00.795
I don't really have a problem
doing with this either way.

41
00:04:00.795 --> 00:04:02.361
It's up to you.

42
00:04:02.361 --> 00:04:07.799
loadingPromise is going
to be equal to ./details.

43
00:04:08.940 --> 00:04:11.760
So again another reason
why I left flow here

44
00:04:11.760 --> 00:04:14.270
is I totally forgot to put
loading promise on there.

45
00:04:14.270 --> 00:04:19.200
But flow is quick to say hey you promised
me that this loading promise is coming in.

46
00:04:19.200 --> 00:04:19.870
Where is it?

47
00:04:19.870 --> 00:04:20.540
Right?
And

48
00:04:20.540 --> 00:04:22.830
it just instantly reminded me to do that.

49
00:04:22.830 --> 00:04:26.618
So it's just very tight feedback
loop coming from the type checker.

50
00:04:26.618 --> 00:04:27.980
&gt;&gt; Speaker 2: Don't you
have to import that?

51
00:04:27.980 --> 00:04:31.790
&gt;&gt; Brian Holt: You do, thank you.

52
00:04:31.790 --> 00:04:36.150
Import, so again if you see right there,
it was erroring out.

53
00:04:36.150 --> 00:04:38.927
It's saying you're passing me a string and
I want to promise.

54
00:04:49.044 --> 00:04:50.323
&gt;&gt; Brian Holt: Okay.

55
00:04:50.323 --> 00:04:56.100
So now if we go to our webpack console, we
should see three different bundles right?

56
00:04:57.240 --> 00:05:00.169
So if we go down here all
the way to the bottom,

57
00:05:00.169 --> 00:05:04.582
you're gonna see 0.bundle,
bundle, bundle 4, bundle.5.

58
00:05:04.582 --> 00:05:07.440
So it's actually being quite
a bit stuff going out here.

59
00:05:07.440 --> 00:05:10.090
And a lot of times I get to bundle
in weird and mysterious ways.

60
00:05:10.090 --> 00:05:12.980
Sometimes you will have two
bundles that'll share a library so

61
00:05:12.980 --> 00:05:15.530
it will spit that out into a yet
different bundle.

62
00:05:15.530 --> 00:05:20.030
So that the last bundle doesn't have get
it and only the other two have to get it.

63
00:05:20.030 --> 00:05:24.640
It does some really clever stuff that it's
only possible if the machine is analyzing

64
00:05:24.640 --> 00:05:25.910
your dependency graph and not you.

65
00:05:30.078 --> 00:05:33.481
&gt;&gt; Brian Holt: So again,
I got bundle and 5.bundle.js.

66
00:05:33.481 --> 00:05:36.030
As soon as I go to Browse All,
I'm gonna get 0.

67
00:05:36.030 --> 00:05:38.600
And as soon as I go to the last one,
I'm gonna get 4.

68
00:05:38.600 --> 00:05:41.750
And then again, I can go back, and

69
00:05:41.750 --> 00:05:45.330
it's not going to request it after that,
cuz it's already in the cache.

70
00:05:45.330 --> 00:05:47.770
And webpack is very good
about keeping that cache so

71
00:05:47.770 --> 00:05:48.698
you can keep handing it to it.

72
00:05:48.698 --> 00:05:53.360
So pretty awesome.

73
00:05:53.360 --> 00:05:54.480
Any questions about that?

74
00:05:58.490 --> 00:06:00.340
Well, let me pose
a question on your behalf.

75
00:06:01.380 --> 00:06:07.319
What we're doing server side rendering and
if you look at our server side rendering.

76
00:06:08.350 --> 00:06:10.370
Well we're not doing
service site rendering now.

77
00:06:10.370 --> 00:06:12.090
But when we do service site rendering.

78
00:06:12.090 --> 00:06:15.773
I think we can just do that right now.

79
00:06:15.773 --> 00:06:16.599
Yes, that should work.

80
00:06:16.599 --> 00:06:19.990
Yarn start.

81
00:06:19.990 --> 00:06:20.720
Shut that down.

82
00:06:25.380 --> 00:06:25.930
Whatever.

83
00:06:25.930 --> 00:06:27.170
Screw you hot module reload.

84
00:06:34.033 --> 00:06:37.230
&gt;&gt; Brian Holt: If you look
here at the output of it,

85
00:06:37.230 --> 00:06:42.570
we're getting the loading
spinner as the output, right?

86
00:06:42.570 --> 00:06:46.412
Because the first load is going
to be the loading spinner.

87
00:06:46.412 --> 00:06:47.813
That's what we expect.

88
00:06:47.813 --> 00:06:51.463
So this is the dark side
of splitting your code,

89
00:06:51.463 --> 00:06:56.761
is there's not really a good way
of doing server-side rendering and

90
00:06:56.761 --> 00:07:02.540
code splitting because those initial
renders are never going to match up.

91
00:07:02.540 --> 00:07:05.536
And so what's gonna happen is
you're gonna load that markup.

92
00:07:05.536 --> 00:07:08.095
And say your able to
inject that component so

93
00:07:08.095 --> 00:07:11.420
it's loading synchronously on the server.

94
00:07:11.420 --> 00:07:13.090
It gets sent down to the client.

95
00:07:13.090 --> 00:07:16.330
React is gonna say this is
different than what I render.

96
00:07:16.330 --> 00:07:19.053
My first render is a loading spinner.

97
00:07:19.053 --> 00:07:20.047
I'm gonna blow this away.

98
00:07:20.047 --> 00:07:21.764
But then it blows that away,
puts the loading spinner up,

99
00:07:21.764 --> 00:07:23.250
and then it's gonna reload
the one that you have.

100
00:07:24.260 --> 00:07:27.360
And right now it's kind of
an unavoidable problem.

101
00:07:27.360 --> 00:07:30.260
Just by the architecture of web pack,
we really can't get around it.

102
00:07:32.260 --> 00:07:36.100
So, we're working on it is
the answer to that question.

103
00:07:37.230 --> 00:07:41.860
The web pack team's aware of it,
there's a couple, James Kyle put

104
00:07:41.860 --> 00:07:46.140
out a component called react-loadable
that kinda seeks to sidestep it.

105
00:07:46.140 --> 00:07:50.270
But suffice to say that for today we're
not going to be able to sidestep it.

106
00:07:50.270 --> 00:07:52.113
So server side rendering and

107
00:07:52.113 --> 00:07:55.750
code splitting are kind
of choose one right now.

108
00:07:55.750 --> 00:07:58.540
And it's kind of up to you to
decide which one is the best one.

109
00:08:01.128 --> 00:08:02.270
&gt;&gt; Brian Holt: Don't get me wrong.

110
00:08:02.270 --> 00:08:03.390
You can do both.

111
00:08:03.390 --> 00:08:05.900
There's some difficulties
in getting it to work.

112
00:08:08.366 --> 00:08:09.970
&gt;&gt; Brian Holt: Any other questions?

113
00:08:11.320 --> 00:08:16.020
&gt;&gt; Speaker 3: So for our purposes we just
have to change the web pack config, right?

114
00:08:16.020 --> 00:08:19.230
From the server side to the client side?

115
00:08:19.230 --> 00:08:19.790
With the HMR?

116
00:08:19.790 --> 00:08:22.230
Like when we read this?

117
00:08:22.230 --> 00:08:27.270
Do we change it back to the-
&gt;&gt; Brian Holt: The dev server?

118
00:08:28.636 --> 00:08:29.260
&gt;&gt; Speaker 3: Yeah.

119
00:08:29.260 --> 00:08:30.490
&gt;&gt; Brian Holt: Yeah.
I did.

120
00:08:30.490 --> 00:08:31.780
But it's easier to work with.

121
00:08:31.780 --> 00:08:32.290
&gt;&gt; Speaker 3: Yeah.

122
00:08:32.290 --> 00:08:32.790
&gt;&gt; Brian Holt: Yeah.

