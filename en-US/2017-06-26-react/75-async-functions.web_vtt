WEBVTT

1
00:00:00.530 --> 00:00:03.020
&gt;&gt; Brian Holt: Now go to action creators.

2
00:00:04.200 --> 00:00:07.651
The first thing that I wanna do here
is I'm gonna import ADD_API_DATA.

3
00:00:11.030 --> 00:00:16.689
&gt;&gt; Brian Holt: I'm gonna export
another function called ADD_API_DATA

4
00:00:20.520 --> 00:00:22.877
&gt;&gt; Brian Holt: It's gonna take in apiData,

5
00:00:22.877 --> 00:00:26.184
which is going to be of type Show, right?

6
00:00:31.478 --> 00:00:36.286
&gt;&gt; Brian Holt: And then in here,
we're going to return a well-formed

7
00:00:36.286 --> 00:00:41.708
action object, which is going
to be of type ADD_API_DATA and

8
00:00:41.708 --> 00:00:44.637
payload,
&gt;&gt; Brian Holt: apiData.

9
00:00:51.754 --> 00:00:54.462
&gt;&gt; Brian Holt: So in particular here,
we're actually not going to

10
00:00:54.462 --> 00:00:58.350
be calling ADD_API_DATA outside of
this particular function, right?

11
00:00:58.350 --> 00:01:01.504
We're gonna actually handle
this inside of action creators.

12
00:01:01.504 --> 00:01:03.801
But it's a good idea to export it anyway.

13
00:01:03.801 --> 00:01:10.967
Say, for example, you got API data maybe
from local storage, right, for example.

14
00:01:10.967 --> 00:01:16.221
You could use this ADD_API_DATA action to
kind of load it from different sources,

15
00:01:16.221 --> 00:01:16.741
right?

16
00:01:16.741 --> 00:01:19.689
This is going to be useful other
places other than just stuff coming

17
00:01:19.689 --> 00:01:20.540
back from the API.

18
00:01:21.840 --> 00:01:23.280
So that's why it's good to do that.

19
00:01:23.280 --> 00:01:25.790
And this is also good because
now this is testable, right?

20
00:01:25.790 --> 00:01:29.540
So I can import it into my test suite and
test it.

21
00:01:29.540 --> 00:01:32.570
And it's a good idea to
test action creators.

22
00:01:32.570 --> 00:01:35.221
In fact, we're gonna do it, so, cool.

23
00:01:37.807 --> 00:01:40.668
&gt;&gt; Brian Holt: Okay, so
now everything's all ready for

24
00:01:40.668 --> 00:01:45.830
us to start adding action,
our API datas into our redux store.

25
00:01:45.830 --> 00:01:50.020
Now we wanna tackle the problem of
making that asynchronous request,

26
00:01:50.020 --> 00:01:51.730
it's add inside of a thunk.

27
00:01:53.040 --> 00:01:57.584
So what we're gonna do now is we're
going to export another function called

28
00:01:57.584 --> 00:01:58.649
getAPIDetails.

29
00:02:02.963 --> 00:02:05.381
&gt;&gt; Brian Holt: Okay,
this is gonna take an imdbID,

30
00:02:05.381 --> 00:02:07.800
which is going to be a string, okay?

31
00:02:11.580 --> 00:02:16.140
Now, these action creators
always return objects, right?

32
00:02:16.140 --> 00:02:18.440
That's kind of the contract there.

33
00:02:18.440 --> 00:02:20.840
However, this is going to return a thunk,
right?

34
00:02:20.840 --> 00:02:22.630
And what is a thunk?

35
00:02:22.630 --> 00:02:24.540
A thunk is a function, right?

36
00:02:24.540 --> 00:02:27.120
So this function returns a function.

37
00:02:27.120 --> 00:02:28.260
It kinda throws people off,

38
00:02:28.260 --> 00:02:32.900
but just remember that we're dispatching
this function into the redux store, and

39
00:02:32.900 --> 00:02:35.970
then redux is gonna say cool,
this is a deferred action.

40
00:02:35.970 --> 00:02:37.630
So something's going to come from this.

41
00:02:37.630 --> 00:02:40.420
I'm gonna call this function and
wait for it to dispatch, okay?

42
00:02:41.440 --> 00:02:42.833
So, that's why here,

43
00:02:42.833 --> 00:02:46.808
you're gonna say return,
&gt;&gt; Brian Holt: Function.

44
00:02:46.808 --> 00:02:51.535
So, it's gonna be a function that

45
00:02:51.535 --> 00:02:55.936
has dispatch injected into it,

46
00:02:55.936 --> 00:03:01.212
which is going to be a function.

47
00:03:01.212 --> 00:03:03.164
&gt;&gt; Brian Holt: Okay, so that's why
we're returning a function here.

48
00:03:07.818 --> 00:03:09.093
&gt;&gt; Brian Holt: And then in here,

49
00:03:09.093 --> 00:03:14.114
we're just gonna do pretty much what
we were doing inside of details.

50
00:03:14.114 --> 00:03:17.056
We're just gonna make our
axios request here, in fact,

51
00:03:17.056 --> 00:03:19.040
you need to go import axios at the top.

52
00:03:19.040 --> 00:03:21.603
Import axios from axios.

53
00:03:26.952 --> 00:03:33.664
&gt;&gt; Brian Holt: Okay, and
then we're gonna say, axios.get.

54
00:03:33.664 --> 00:03:40.121
And this is gonna go to
http://localhost:3000/,

55
00:03:40.121 --> 00:03:46.838
and then we're just gonna put
that imdbID right there, okay?

56
00:03:46.838 --> 00:03:51.152
And then we're gonna say .then,

57
00:03:51.152 --> 00:03:54.579
thine, .then response,

58
00:03:59.812 --> 00:04:04.560
&gt;&gt; Brian Holt: The response is gonna be
something that the API gave back to us.

59
00:04:04.560 --> 00:04:08.800
All we're gonna do at this point is now
we're gonna use this dispatch function,

60
00:04:08.800 --> 00:04:12.540
which redux gives you to
dispatch an action, right?

61
00:04:12.540 --> 00:04:16.130
So this is where the thunk is resolving
and finally giving out an action.

62
00:04:16.130 --> 00:04:22.473
So it's gonna say dispatch,
&gt;&gt; Brian Holt: addAPIData

63
00:04:22.473 --> 00:04:26.536
with response.data.

64
00:04:30.893 --> 00:04:33.847
&gt;&gt; Brian Holt: Then as is always is the
case with an API, it's usually good idea

65
00:04:33.847 --> 00:04:38.030
to have a catch statement at the end,
just in case something goes wrong.

66
00:04:38.030 --> 00:04:43.023
It's gonna be an error, and
here, I just say console.error,

67
00:04:43.023 --> 00:04:46.177
so it doesn't get dropped on the floor.

68
00:04:46.177 --> 00:04:51.544
Axios error, error, it's gonna warn here,
it's gonna say hey,

69
00:04:51.544 --> 00:04:55.704
I don't like console logs
going down a production.

70
00:04:55.704 --> 00:04:57.978
But for me,
this is useful to have as a developer.

71
00:04:57.978 --> 00:05:03.419
So I'm just gonna say hey,

72
00:05:03.419 --> 00:05:07.678
eslint, go ahead and

73
00:05:07.678 --> 00:05:11.234
shut up about it.

74
00:05:13.624 --> 00:05:16.489
&gt;&gt; Brian Holt: So we're just saying hey,
disable the console warning just for

75
00:05:16.489 --> 00:05:17.557
this particular line.

76
00:05:25.054 --> 00:05:29.890
&gt;&gt; Brian Holt: So, to recap again,
this is a thunk, this particular piece.

77
00:05:29.890 --> 00:05:35.330
This function that gets returned here,
that's the thunk, right?

78
00:05:35.330 --> 00:05:40.180
The thunk function is going to be invoked
by Redux, right, the Redux thunk thing,

79
00:05:40.180 --> 00:05:42.410
that middleware that we put in there.

80
00:05:42.410 --> 00:05:44.910
It's going to inject this
dispatch function and

81
00:05:44.910 --> 00:05:47.510
just say, cool,
go do whatever you need to do and

82
00:05:47.510 --> 00:05:51.220
then call me back whenever you have
the action that you wanna do, right?

83
00:05:51.220 --> 00:05:55.250
So what we do is we go out to our API
via axios, and once it resolves, it's

84
00:05:55.250 --> 00:06:00.300
gonna say cool, now I have the action data
that I wanna dispatch, so I call dispatch.

85
00:06:00.300 --> 00:06:03.740
With addAPIData,
which gives me back a real action object,

86
00:06:03.740 --> 00:06:06.430
which then gets passed into Redux.

87
00:06:08.220 --> 00:06:10.620
So, this is how you do
asynchronous code with Redux.

88
00:06:12.800 --> 00:06:15.173
So, I would say thunks
are the easiest way.

89
00:06:15.173 --> 00:06:17.356
I don't wanna say easiest, maybe simplest.

90
00:06:17.356 --> 00:06:20.340
There's just not a lot to it,
it's just a callback, right?

91
00:06:20.340 --> 00:06:21.430
But there are other ways to do this.

92
00:06:21.430 --> 00:06:23.760
You can dispatch promises
with Redux promise,

93
00:06:23.760 --> 00:06:27.383
observables with Redux observables,
and generators with Redux sagas.

94
00:06:27.383 --> 00:06:30.222
And I would say those
are the most common ones.

95
00:06:30.222 --> 00:06:32.680
&gt;&gt; Speaker 2: Well, there's a bunch
of debating going on about-

96
00:06:32.680 --> 00:06:33.324
&gt;&gt; Brian Holt: Which one's the best?

97
00:06:33.324 --> 00:06:38.831
&gt;&gt; Speaker 2: Redux and the whole fact
that you have tons of actions and

98
00:06:38.831 --> 00:06:41.525
how the scales, whether or

99
00:06:41.525 --> 00:06:46.816
not someone like Facebook
is using Redux and across.

100
00:06:46.816 --> 00:06:51.350
&gt;&gt; Brian Holt: I assert pretty
unequivocably that this does scale, right?

101
00:06:51.350 --> 00:06:51.850
So right now,

102
00:06:51.850 --> 00:06:56.250
if you go to our reducers file, we have
all of our reducers living in one file.

103
00:06:56.250 --> 00:06:59.030
Typically in a large application,

104
00:06:59.030 --> 00:07:01.850
you're gonna separate your
reducers into separate files.

105
00:07:01.850 --> 00:07:05.588
But when you're using
combined reducers like this,

106
00:07:05.588 --> 00:07:08.420
this one reducer owns API data, right?

107
00:07:08.420 --> 00:07:11.714
It owns that one particular
piece of the state tree, and

108
00:07:11.714 --> 00:07:15.022
it has no concept of search term,
for example, right?

109
00:07:15.022 --> 00:07:19.180
So the fact that these are siloed from
each other is why this scales, right?

110
00:07:19.180 --> 00:07:22.960
If you are worrying about every single
object and every single reducer, that gets

111
00:07:22.960 --> 00:07:26.460
unruly, especially when you start
getting 50 things in your Redux store.

112
00:07:26.460 --> 00:07:28.717
But the fact that these are so
siloed from each other,

113
00:07:28.717 --> 00:07:30.936
I can keep them in separate
parts of my application.

114
00:07:30.936 --> 00:07:35.837
And they can be tested individually,
that's why this scales, for sure.

115
00:07:35.837 --> 00:07:37.710
I would confidently
assert that this scales.

116
00:07:39.240 --> 00:07:42.538
&gt;&gt; Speaker 2: And
then what about adding typings to, say,

117
00:07:42.538 --> 00:07:45.080
some of the things you're returning and

118
00:07:45.080 --> 00:07:49.023
what not to make the actions-
&gt;&gt; Brian Holt: Like this stuff right here?

119
00:07:49.023 --> 00:07:49.561
&gt;&gt; Speaker 2: More clear?

120
00:07:52.805 --> 00:07:56.189
&gt;&gt; Brian Holt: The response and the error
typings are coming from the axios typings

121
00:07:56.189 --> 00:07:59.520
from flow typed, so
that's why we don't have to type these.

122
00:07:59.520 --> 00:08:02.484
It knows that there's a response.data.

123
00:08:02.484 --> 00:08:05.870
You could do it explicitly if you needed
to, but I don't think you need to.

124
00:08:10.417 --> 00:08:13.178
&gt;&gt; Brian Holt: Yeah,
there's nothing that you need to do with

125
00:08:13.178 --> 00:08:14.980
this in particular right now.

126
00:08:17.623 --> 00:08:22.610
&gt;&gt; Brian Holt: And addAPIData, we already
told it that APIdata's gonna be a show.

127
00:08:22.610 --> 00:08:24.818
And that's fine, so.

128
00:08:24.818 --> 00:08:25.958
&gt;&gt; Speaker 2: And they said,

129
00:08:25.958 --> 00:08:31.156
does something like Immutable.js
help with immutability of state?

130
00:08:31.156 --> 00:08:33.300
&gt;&gt; Brian Holt: For sure, Immutable.js and

131
00:08:33.300 --> 00:08:36.690
there's also the other one that I
can't think of off the top of my head.

132
00:08:36.690 --> 00:08:40.200
There's a couple of libraries that
handle immutability with JavaScript.

133
00:08:40.200 --> 00:08:42.800
Immutability just makes things
a little bit safer, right,

134
00:08:42.800 --> 00:08:44.740
that you can't directly modify things.

135
00:08:44.740 --> 00:08:47.966
And it also allows for really fast
checking for things to say like,

136
00:08:47.966 --> 00:08:49.531
is this the same object as this?

137
00:08:49.531 --> 00:08:51.649
No, cool, they're not equal anymore, and

138
00:08:51.649 --> 00:08:55.460
there's no sort of deep nesting that you
need to check, that definitely helps.

139
00:08:55.460 --> 00:08:58.594
My problem with Immutable.js and
why I don't use it and

140
00:08:58.594 --> 00:09:01.604
why I don't teach it is it's
a pretty large library.

141
00:09:01.604 --> 00:09:06.464
And yeah, so
the value that it gives me in my developer

142
00:09:06.464 --> 00:09:11.000
experience does not match
how big the library is.

143
00:09:11.000 --> 00:09:14.573
I think it's, the last time I was
checking, I think it was 50 KB, which is,

144
00:09:14.573 --> 00:09:16.480
for me, kind of a non-starter, right?

145
00:09:16.480 --> 00:09:20.300
I think it's bigger than React,
which is a problem, right?

146
00:09:20.300 --> 00:09:22.580
So it is cool,
there are reasons to use it.

147
00:09:22.580 --> 00:09:25.087
I've just not so far chosen to use it.

148
00:09:27.122 --> 00:09:29.750
&gt;&gt; Speaker 2: I'm sure there's micro
libraries and whatnot as well.

149
00:09:29.750 --> 00:09:32.142
&gt;&gt; Brian Holt: I'm sure,
I think Joffer was writing one,

150
00:09:32.142 --> 00:09:33.571
last time I talked to him.

151
00:09:38.935 --> 00:09:39.737
&gt;&gt; Brian Holt: Any other questions?

152
00:09:42.603 --> 00:09:43.953
&gt;&gt; Brian Holt: To be honest with you,

153
00:09:43.953 --> 00:09:48.359
a lot of that same similar type benefits
that Immutable is gonna gain you,

154
00:09:48.359 --> 00:09:52.446
you're gonna get from having
typings with your language, right?

155
00:09:52.446 --> 00:09:55.000
Cuz it's gonna catch some
similar problems, like, hey,

156
00:09:55.000 --> 00:09:58.180
you're modifying this and
probably shouldn't be modifying that.

157
00:09:58.180 --> 00:10:01.880
So, a type system can
help catch similar bugs.

158
00:10:01.880 --> 00:10:06.681
Not totally the same, and
Immutable, in particular cases,

159
00:10:06.681 --> 00:10:11.480
will have some speed benefits,
just by checking high level,

160
00:10:11.480 --> 00:10:15.564
shallow checking,
is this the same object as this?

161
00:10:15.564 --> 00:10:18.209
But so far, I haven't felt
the need to use it, personally.

162
00:10:20.580 --> 00:10:25.080
&gt;&gt; Speaker 2: And a few people are
commenting that they use React set state

163
00:10:25.080 --> 00:10:28.953
for UI state and then Redux for
application state.

164
00:10:28.953 --> 00:10:30.730
&gt;&gt; Brian Holt: Yep, totally,
we talked about that yesterday too.

165
00:10:34.306 --> 00:10:35.930
&gt;&gt; Brian Holt: But I agree,
I think that's a good thing to do.

