[00:00:00]
>> Brian Holt: So we're gonna get going, we're gonna create another route. So let's create a new file here, call it details.jsx. Oops, and we're gonna put that inside a js. One thing I was gonna mention is. That we haven't written tests for details or show card or any of our other components.

[00:00:22]
You would, right? You typically would write tests for every single component if you're gonna write tests at all for those. We're not going to because it would be redundant, right? I wouldn't be showing you new concepts, which is kinda the point of what we're doing here. So, for now, we're only gonna be writing tests for search.

[00:00:39]
And then eventually we'll write more tests for redux. But we're not going to write the other rest of tests. But you should, right? In fact, it might even be a good exercise for you to understand how to write tests. Okay. So, we have details, first thing. Since we're already typed everywhere else, we're going to first thing opt in to typing.

[00:01:02]
import React from 'react'. And we're just gonna make a barebones const. Details equals. We're gonna have div className='details;
>> Brian Holt: And you can put an h1 in here with hi lol, or whatever you want to put in there, just kind of make sure everything's gonna work first before we work too much on it, export default Details.

[00:01:40]

>> Brian Holt: Okay, so now we have a bare bones component And then we're going to go import that into our router, and make use of that. So, go to App.jsx, sorry, App.jsx, not We're going to import details from ./Details. And we're going to make a new route here, which is going to be Route path="/details/:id And component is going to be ={Details}.

[00:02:31]

>> Brian Holt: So what this is saying is we're gonna make a details page for each individual show that we have, right?
>> Brian Holt: And we wanna be able to address each show individually, right, so where gonna have details Slash colon ID, right. So that colon ID is going to be the IMDB ID for that particular element.

[00:02:55]
And then if it matches that it's going to call the details router. And it's going to pass this ID into details as well, cool.
>> Brian Holt: So what we're going to do here is we're going to first check to make sure that it works.
>> Brian Holt: My routes, my notes are incorrect here.

[00:03:23]
So if you're following my notes, just be aware that I need to fix that.
>> Brian Holt: So we're gonna go here into our page.
>> Brian Holt: And it's not running right now, so we're going to get it running first.
>> Brian Holt: yarn dev.
>> Brian Holt: Okay, and then we're gonna come in here to this page.

[00:03:49]
And then just to make sure everything works, we're just going to write a URL that would match that route. So /details/something right? It could be literally anything. And notice that we get this hi lol, right? So it's working.
>> Brian Holt: In fact, something you can do here just to so you can see what that looks like We come in here to details really quick.

[00:04:14]
We're coming to see those prems that route's passing in. We can do <pre><code>, and then do a {JSON.stringify}. We've done this before so hopefully this looks familiar to (props. )</code></pre> null, 4,
>> Brian Holt: And we're gonna pass in props here. So the first thing it's gonna yell at us and say, hey, I don't know what those types are.

[00:04:41]
That's fine, I don't care yet.
>> Brian Holt: I'm more interested in just seeing what it looks like. So you can see here this is probably hard to see but let's make it a little bit bigger So notice that we've got something of a match, right? So we can see what information is coming from the match, right?

[00:05:01]
So this is the path that it matched, the exact URL, if it was an exact match. And the params that came in. Right? So, I called this URL with /details/1. Right? If I call this with something-else, it's going to come in with something-else as that id. Right? So, that's going to be pulled from the URL for you.

[00:05:22]
You can see the location, that's being passed in as well. As well as the history object. And this is going to be literally the history package from mpm. That's how react-router-dom works, is it works with this package called history. And so you're able to manipulate the history that way as well.

[00:05:46]

>> Brian Holt: Okay, so Let's go ahead and actually do something with it now. So, we'll drop this right here, because we don't need it. And, yep, I showed you that.
>> Brian Holt: Actually, what we're going to do first. There's a couple strategies that we could employ here to get the correct data into the details page.

[00:06:23]
Right? So, we're reading stuff out of this props. No it's not props, but data.json. Right? And for a details page, it's concentrating on one show, right? It's not concentrating on all of the shows, it's just one. So one thing that we could do is inside of the details page is just given that parameter ID we could go and find the correct show out of our data.json I don't think that's the best approach.

[00:06:48]
I think the details page should be unaware that other shows even exist, right? It should just have the one show and that will make it more flexible. That way, the details like the particular show can come from any number of sources, right? It could come from the API, it could come from a hydrated server side rendering data store It could be side loaded some other way, right?

[00:07:09]
It makes it more flexible as well as more testable.
>> Brian Holt: So what we're gonna do instead is we're gonna go to app.jsx. And what we're gonna do up here is we're going to import the data up here,
>> Brian Holt: preload from dot slash or dot dot slash data dot json.

[00:07:34]
K. Now we wanna pass the correct shell from preload into details. Right? However notice we're not actually rendering We're not creating an instance of Details right here. We're just passing at the general component, and then Route is rendering the component, right? So how do we pass props from what we have inside of app into Details?

[00:08:02]

>> Brian Holt: Well there's kind of a cool trick you can do here. If you have a function. That returns a component that in that itself is a component, right? Because you can have these functions, right? In fact this one is perfect, this is perfect example right there. This is a function that that we trans markup, right?

[00:08:21]
So, here we could have a function that returns details
>> Brian Holt: And that also works right? Because now, this in and of itself, this block right here, is another component. What's cool about this is now we can pass things into detail. We can pass props into details. So, like, stuff=cool.

[00:08:44]
Right. I don't know. Whatever you want to put in there.
>> Brian Holt: But now what we can do instead, we can say show={} and then we can figure out which particular show we want to pass into there. So we can do preload.shows.find I think is the method I wanna use.

[00:09:15]

>> Brian Holt: I'm doing this kind of out of order, if that's okay.
>> Brian Holt: So we're gonna do find
>> Brian Holt: And this is going to be a show. And it's going to be props.params.id === show.imdbID
>> Brian Holt: So we have a couple of problems here. Well, first of all, this is actually going to work.

[00:09:59]
And now if we save this, we have some complaining from our type system but we're going to Figure that out real quick.
>> Speaker 2: Does that arrow function have to accept props?
>> Brian Holt: Yep. Exactly. Thank you. So this is going to be mad that this isn't typed either. But we'll click it type system momentarily.

[00:10:26]
In fact you'll kind of see this pattern emerging of how I write flow. It's like I'll write whatever the hell I want to write then I'll go back and figure out the types. Right? And then I'll make solid, my type annotation. But I'll first take advantage of the dynamic nature of JavaScript and just throw stuff to the wind and figure it out.

[00:10:45]
And then come back and say okay let's make this mature. So if something else is not actually a valid id right but if I put in something like one of these
>> Brian Holt: Did I break it, I broke it didn't I?
>> Brian Holt: But anyway, what I'm gonna be pulling out, if you look here in your data.json You can just pick anyone of these imdbIDs right here so let's look at like I don't know, how about stranger things?

[00:11:31]
I'll pull out one off going here and paste that one in here see what is going on
>> Brian Holt: Cannot read ID. So let's go in and figure out why it can't read the ID. So we are going back to app.jsx.
>> Brian Holt: So component here, props which is going to return a details parameter.

[00:12:00]
preload.shows.find(show.
>> Brian Holt: This should refer to that props, props.params.id === show.imdbID.
>> Brian Holt: All right, let's make this a little bit more
>> Brian Holt: A little less clever.
>> Brian Holt: Okay, and then we're gonna pull this out here, just a sec.
>> Brian Holt: const selectedShow equals that. And we'll pass in selectedShow right there.

[00:13:06]
Okay,
>> Brian Holt: Still getting an error there, so props.
>> Brian Holt: .params, so I guess that's just console.log(props) here.
>> Brian Holt: Cannot read ID. There. Well that is not super useful.
>> Brian Holt: [COUGH]
>> Brian Holt: So for now, we'll just come into that outcome, I'm sure that's where it is, and return an h1.

[00:14:15]

>> Brian Holt: Let's see what's going on.
>> Brian Holt: Okay, so that's all fine. I think. So it's from match. See. Okay. So this is something that my type checker was trying to tell me, and I was just ignoring. So it should be, so if we go back down here, it should be props.match.params.id.

[00:14:52]

>> Brian Holt: And if you come back in here and get rid of this h1 right here.
>> Brian Holt: There you go, and now notice that show is actually being passed down Into details, right?
>> Brian Holt: Okay, so like let's recap cuz there was a lot that went on there. So what we put in here was this is a component here that It's going to select the correct show and its going to pass that show down into details.

[00:15:31]
Now notice that we lost the match detail, the history, all that stuff that was being passed on to details. And that's kind of the problem, you want those things to still show up because details is a route and it should have access to that data. So what we're gonna do here after show is just put in Hey, just give it the rest of the props as well.

[00:15:54]

>> Brian Holt: That's just good practice so that if it's a route it should get all that detail.
>> Brian Holt: So now if you go back here and refresh,
>> Brian Holt: So the reason why it's not actually refreshing right now for us is because It's encountering errors and it will only refresh when there are no errors.

[00:16:13]
That's why hot module reload is not firing right now. But now notice it's getting the show, the match, the location, the history, and all that kind of stuff. Cool?
>> Brian Holt: So let's actually go and fix some of our types here because this is saying hey you're accessing match and I can't validate that that's not going to cause an error so please help me understand what's happening here.

[00:16:43]
Well, what's cool is, is match is actually a type that Direct writer Dom exports for you, so we actually just pull in match. So we're going to come up here and say specific to flow right now. You're going to import type match. From react-router-dom. This is what, this came from flow typed.

[00:17:11]
Okay. So now we have this matched type and we can tell this props right here that it's going to come from. It's going to have a match. And that match is going to be a match.
>> Brian Holt: That make sence? So props is gonna be an object on that.

[00:17:33]
It's going to have a match object, which is going to be of type match.
>> Brian Holt: So this match corresponds to that, right? And this capital M match Corresponds to that Match right there. It's a little confusing when things are called the same thing, but that's what's happening.
>> Brian Holt: Now let's talk about that we're accessing this object called params, right?

[00:17:58]
Params is going to be defined by definition on Match. Or else something else is gonna throw a flow type error. So we know for a fact that Match. Always comes with params, and then everything else on params is anyone's bet, right. But flow type's not gonna validate that for you.

[00:18:16]

>> Brian Holt: I don't think, I think if I put other here.
>> Brian Holt: No, it's not, it's smart enough to know that Id's gonna be from this, right, it's It's not gonna do string interpolation for you, sorry. So what match is going to be, it's gonna be an object of anything and it's just not gonna validate anything that's coming back from params.

[00:18:39]
Any questions, does that make sense?
>> Speaker 3: What was the import line for the match?
>> Brian Holt: Import type

