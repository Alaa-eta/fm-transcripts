[00:00:00]
>> Brian Holt: So, hopefully most of you were able to get this integrated into your editor. That would be super helpful as we keep going. Throughout the course today, I will be pushing out branches so that you can kind of see where we are. And if you get lost or fall behind, this is a really easy way to catch up.

[00:00:16]
So you don't have to stay behind, right? So I pushed up v3-1, right there you can see that, and as we keep going on just keep in coming to that second number. So yeah, you're welcomed to go fetch v3-1, check it out and the you can start going.

[00:00:37]
So just to show you how that works if you're not super familiar with git. You would say making sure that your git remote -vv, so making sure your URL looks something like this for origin that your pointed at btholt/complete-intro-to-react, right? Then you're gonna say git fetch origin v3-1, right?

[00:01:05]
And then you're going to say git checkout v3-1, and that was such you onto the branch that has that code.
>> Brian Holt: And again, you can do that throughout the day as I keep pushing branches.
>> Brian Holt: And for those of you that are watching right now and or here, if you fall behind, just ask me to push a branch, I'm happy to do that.

[00:01:34]
Okay, so let's go back to our notes here, hopefully you've got it integrated into your browser. The notes that I have there in my particular notes are for sublime. So if your not using sublime these are not super useful to you. But hopefully, the different editor integrations are pretty hopefully, their notes are useful for how to do it.

[00:02:03]

>> Brian Holt: There were a couple people here that had issues with yarn global add. I've had this issue as well, and I do not remember how I solved it. It's typically a problem if you installed node via MVM or N or one of those node version managers. So, what I'm going to tell you to do right now to get around this issue is just say npm install --global and just use that for all of your global installs.

[00:02:30]
And then later look up how to fix yarn global ads. So this is how you would do it for prettier. For now, so that we can keep going, just do npm install --global. Great, any other questions before we move forward?
>> Mark: And also when you do, get checkout v3-1, if you're getting errors and you wanna just blow out your local changes, you can just add a -f and that'll force in.

[00:03:00]

>> Brian Holt: So I git check out.
>> Mark: Well, you have to fetch there.
>> Brian Holt: Checkout v3-1 -f or --force just anytime you're using git and --force just exercise extra caution. That's only thing I'm going to caution you Okay, so we good with-
>> Mark: All people are saying the index.HTML on that branch is actually not pointing to the client app on JSX.

[00:03:32]

>> Brian Holt: It's not, no I broke it for sure. So we are gonna unbreak it. This is the workshop for breaking and unbreaking things. But that's astute. I would say the best way to code is have 300 people watching while you do it or 200. I think that's what we were at.

[00:03:54]
Okay, so, we're gonna move on to ESLint. We shouldn't have to mess with prettier for the rest of the time. It's Just going to work magically. Sometimes, like, for example, this is kind of something that's easy to get thrown off. Like what let's say I have invalid JavaScript here, right?

[00:04:13]
So, say if I'm, I don't know. So, I have like, this, right? So, I would expect this to fix with prettier, right? And it's not if I save right now, because this is not valid JavaScript right now. So if you have syntax errors prettier can't fix everything, right?

[00:04:32]
So it's gonna depend on your various editors. How do you know that that's happening? It's kinda hard to tell in sublime. With sublime, you actually have to open the console. Which I think is Ctrl-tilde, yeah. And you can see here, Prettier returned with 2 which means id didn't exit correctly.

[00:04:52]
So you can see right here, SyntaxError:Unexpected token. So You hae to make sure that you have valid JavaScript or else Prettier is not gonna work. So now I fix it that fixes everything and everything works well. So this will only be a problem temporarily because we're gonna put in ESLint and ESLint will first tell that it failed before Prettier fails.

[00:05:21]
Okay, so ESLint. So Prettier is just going to take care of like stylistic things, right? It's not actually gonna handle code style. I guess what I am trying to say there is It's gonna handle like syntax things, like spaces. How many characters go on a line, all that kinda that's all prettier worries about, it doesn't actually worry about things like not using old JavaScript features they don't wanna use, or enforcing ES6 rules or things like that.

[00:05:51]
So we're gonna bring in another tool called ESLint to kinda help out with some of those rules. And again, previously in this class we've used something called standard. This is driven by my desire to never write semicolons. In fact, I got a lot of blowback from not continuing to use standard.

[00:06:08]
But the reason being is that the Airbnb ESLink configurals have really matured to a point where I feel like I dont have a good reason not to use them. Because it catches so many bugs and enforces really good code style. So, today we gonna be using the AirBnB config together with Prettier and I think that's a really winning combination.

[00:06:30]
So the first thing we gonna do now is were going to create a file called es.eslint rc.json. And we're gonna put this in the root directory of our project.
>> Brian Holt: So yes, use dot. So this is going to be the config for our ESLint.
>> Brian Holt: And we're gonna put some config rules in here.

[00:07:04]
So the first one is extends.
>> Brian Holt: And the order here is important, so make sure you put these in this order. The first thing you wanna put is Airbnb, the second one is prettier, and the third one is prettier/react. Now, why we pulling in prettier? Well, the reason why we're putting in prettier is that prettier actually invalidates some of the things that airbnb checks for, right?

[00:07:38]
Airbnb will check for things like too many characters on a line. It's gonna check for things like semicolons. It's gonna check things for white spaces. This is not actually useful for Airbnb, like the ESLint to check for anymore. prettier and prettier/react actually disable a bunch of rules, just to make sure that prettier can run without ESLint about it, does that make sense, right?

[00:08:01]
It's just getting rid of a lot of the noise.
>> Brian Holt: Okay, the next thing that we're gonna put is plug ins
>> Brian Holt: And we're just gonna have one which is gonna be the prettier plugin, so that we can run those rules. And then we're gonna put some parserOptions.

[00:08:28]

>> Brian Holt: And ecmaVersion, I have 2016 on here I think that was the latest when I was working with Lotus it might be later now but as long as you're passed 2015, you should be golden. SourceType so we're gonna be using ES6 modules today, like that particular way of writing JavaScript.

[00:08:57]
So we're not going to use common JS, in other words, so that's what that means. And then ecmaFeatures we're going to tell it that it needs to parse jsx which is true, it does. And then the last thing is env which is just telling it what global variables to not fail you on.

[00:09:28]
So ES6 So this will tell it not to fail on things like symbol for example, right? Symbol is only available on es6. Browser, this is telling it to not fail on things like window and document and I know, things like that. And lastly, node so this is telling you to not film other things that are like process.m which is only available in note.

[00:10:04]
Okay, and this should be our airbnb config. We'll, have to modify it later to accommodate more features as we add though. But, this should be enough for now.
>> Brian Holt: So now we can come back here to our command line. I have eslint installed here. But if you don't, feel free to do yarn global add or npm install --global eslint.

[00:10:41]

>> Brian Holt: And I'm gonna say eslint **/*.either js or jsx.
>> Brian Holt: And I want it to be quiet.
>> Brian Holt: So this is going to run the rules that we just barely brought in and is running on ClientApp.jsx and it has these two violations. So ReactDOM is not defined, and React is not defined, right?

[00:11:16]
Which makes sense, if we go back to clientapp.jsx, we're referring to React, and ReactDOM down here and they're being brought in using those script tags, but we actually haven't
>> Brian Holt: We haven't set those apart as global variables.
>> Speaker 3: Could you install ESLint?
>> Brian Holt: I did, yeah, I just, so I did npm install --global eslink.

[00:11:51]

>> Speaker 3: Okay.
>> Brian Holt: I think we missed that step.
>> Speaker 3: Missed that step.
>> Brian Holt: Okay.
>> Brian Holt: And yeah, go ahead, Mark.
>> Mark: Doug is asking if you could elaborate on the difference between prettier, ESLint and Airbnb?
>> Brian Holt: Sure. So, prettier is a formatter, so all it does is it takes your code and it rearranges it into a nicely formatted piece of code, right?

[00:12:26]
It doesn't do any checking for style, it doesn't do any checking for... Like for example, we have if we run that again, this is what ESLint is checking for. It's checking for more things like did you use something that's more undefined, are you calling functions that don't exist, right?

[00:12:46]
It's going to check for more of those sorts of things. Whereas prettier is just taking [INAUDIBLE] of text, reformatting it and then printing it back out. Doesn't change anything else about your code. Airbnb so its actually eslint-config-airbnb that's what it's called.
>> Brian Holt: So this is a specific configuration of airbnb, of eslint, right?

[00:13:16]
That's all it is.
>> Brian Holt: So, yeah, that's a, that's the difference. One formats, one checks for style, and one is just a configuration of the ESLint. It's a good question.
>> Brian Holt: Do you have a question?
>> Brian Holt: What error are you getting?
>> Speaker 4: Argument list too long.
>> Speaker 5: So I'm having one that says it's looking for eslint-plugin-prettier when I try to run the eslint quiet.

[00:13:55]

>> Brian Holt: Yeah,
>> Brian Holt: It should be in here, I guess more package.json,
>> Brian Holt: eslint-config-prettier, right there.
>> Speaker 5: I'll try reinstalling that.
>> Mark: It was plugin-prettier.
>> Brian Holt: Did you miss the plugin-prettier part?
>> Brian Holt: Potentially.
>> Brian Holt: So what we're gonna do now is we're gonna take this eslint part right here, this command that just we just ran.

[00:14:43]

>> Brian Holt: I want you to copy that.
>> Brian Holt: We'll eventually fix those, the errors that are coming out of it like the argument lists is too long and all that. Cuz we're gonna blow away all the code that we wrote anyway and write a new code. So I'm not super interested in fixing it.

[00:15:03]

>> Brian Holt: But we're gonna put the lint in here as well. So lint, I'm gonna do that. So again, this is if you're companions don't necessarily want to integrate ESLints into their editor and all that kinda stuff. You can put this in, and it can also be run in your Continuous Integration.

[00:15:28]
So if, for example, you fail your ESLint paths, it will fail the build, and then they have to go back and fix it, right?
>> Brian Holt: So now that we've done that, which I just put in this line right here.
>> Brian Holt: Then I'm gonna say,
>> Brian Holt: Yarn lint, and it should work.

[00:15:54]
The reason why we did quiet, just say now, is we want it to only show errors and not warnings. Again, that's typically for a Continuous Integration. You don't want to fail your build just for warnings. You want to fail it just on error.

