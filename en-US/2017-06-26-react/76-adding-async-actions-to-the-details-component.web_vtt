WEBVTT

1
00:00:00.160 --> 00:00:02.430
&gt;&gt; Brian Holt: We still
haven't closed the loop here.

2
00:00:02.430 --> 00:00:06.680
So we actually need to go make details
actually do all of this stuff for us.

3
00:00:07.730 --> 00:00:10.855
So go to details.jsx.

4
00:00:14.258 --> 00:00:16.835
&gt;&gt; Brian Holt: So the first thing that
we need to do up here is we're going

5
00:00:16.835 --> 00:00:17.380
to import.

6
00:00:19.190 --> 00:00:24.936
You're gonna get rid of axios up here,
and we're going to import connect from

7
00:00:24.936 --> 00:00:33.009
react-redux,
&gt;&gt; Brian Holt: Redux.

8
00:00:33.009 --> 00:00:35.691
And we're going to import action creator.

9
00:00:35.691 --> 00:00:41.078
My notes are wrong here,
so, sorry, I'll fix that.

10
00:00:41.078 --> 00:00:48.534
getAPIData from ./actionCreators,

11
00:00:54.829 --> 00:00:57.920
&gt;&gt; Brian Holt: Okay,
we're gonna get rid of the state here.

12
00:01:01.529 --> 00:01:07.066
&gt;&gt; Brian Holt: And instead of doing all
this axios stuff in componentDidMount,

13
00:01:07.066 --> 00:01:13.508
what we're gonna instead do is, say,
if I'm not getting ratings back, so

14
00:01:13.508 --> 00:01:18.866
if (!this.props.rating),
then I need to go request it.

15
00:01:18.866 --> 00:01:21.280
So you're gonna say,
this.props.getAPIData.

16
00:01:21.280 --> 00:01:24.720
&gt;&gt; Brian Holt: Cuz you have
to think of the case of,

17
00:01:24.720 --> 00:01:29.766
what happens if I click into
Orange is the New Black,

18
00:01:29.766 --> 00:01:37.240
go back to the search page, and
then go back into Orange is the New Black?

19
00:01:37.240 --> 00:01:39.290
You don't need to request
the data a second time, right?

20
00:01:39.290 --> 00:01:42.930
So that's why in componentDidMount, you're
gonna check, do I already have data for

21
00:01:42.930 --> 00:01:43.490
this?

22
00:01:43.490 --> 00:01:45.760
If not, go request it.

23
00:01:45.760 --> 00:01:47.610
That's why we're doing this check up here.

24
00:01:54.244 --> 00:01:59.364
&gt;&gt; Brian Holt: Props for this,
we're going to get rating,

25
00:01:59.364 --> 00:02:02.745
which is going to be a string.

26
00:02:02.745 --> 00:02:07.019
And we're also going to get a function
called getAPIData, which is going to be

27
00:02:07.019 --> 00:02:16.736
a function,
&gt;&gt; Brian Holt: Okay?

28
00:02:20.212 --> 00:02:22.588
&gt;&gt; Brian Holt: So
everywhere that says this.state.apiData,

29
00:02:22.588 --> 00:02:25.420
we just need to modify it, so
it says this.props, right?

30
00:02:25.420 --> 00:02:31.706
Cuz this is gonna be coming from props,
not from state anymore.

31
00:02:31.706 --> 00:02:37.179
And I modified that, so yeah,
not apiData, just this.props.rating.

32
00:02:39.820 --> 00:02:44.721
&gt;&gt; Brian Holt: Right, so if that
this.props.rating, then put it out there,

33
00:02:44.721 --> 00:02:53.639
otherwise, put out the loading spinner,
&gt;&gt; Brian Holt: Okay?

34
00:02:53.639 --> 00:03:00.954
Then at the bottom,
we're gonna make our mapStateToProps,

35
00:03:00.954 --> 00:03:05.877
so const mapStateToProps = (state),

36
00:03:05.877 --> 00:03:10.108
which is going to return an object.

37
00:03:15.646 --> 00:03:17.640
&gt;&gt; Brian Holt: Yeah,
let's actually make that a full function.

38
00:03:17.640 --> 00:03:23.737
I think this is more clear
if we do it this way,

39
00:03:23.737 --> 00:03:31.294
so I'm gonna say const
apiData = state.apiData.

40
00:03:31.294 --> 00:03:33.470
&gt;&gt; Brian Holt: And
we have to get ownProps as well, don't we?

41
00:03:34.900 --> 00:03:39.914
So secretly, mapStateToProps, there's
a second parameter here called ownProps,

42
00:03:39.914 --> 00:03:44.230
which is going to be the props
passed down from the parent, right?

43
00:03:44.230 --> 00:03:46.980
And we need this because that's how
we're going to determine which API data

44
00:03:46.980 --> 00:03:49.510
we're going to pull out of
our Redux store, right?

45
00:03:49.510 --> 00:03:53.900
So that's what ownProps is, so
if you look up here, ownProps,

46
00:03:53.900 --> 00:03:56.630
and we're gonna be getting
the Show from the parent, right?

47
00:03:56.630 --> 00:03:59.890
So we're going to use the show coming
from the parents to determine which API

48
00:03:59.890 --> 00:04:01.859
data we're gonna pull
out of our Redux store.

49
00:04:06.387 --> 00:04:14.257
&gt;&gt; Brian Holt: Okay, so we're gonna do
here is ownProps.show.imdbID, right?

50
00:04:14.257 --> 00:04:18.280
That's where that show is coming from.

51
00:04:18.280 --> 00:04:23.050
So if that exists,
then return that, right?

52
00:04:27.497 --> 00:04:30.618
&gt;&gt; Brian Holt: If you're not
familiar with this question mark,

53
00:04:30.618 --> 00:04:34.573
we're doing what's called
a ternary operator here, right?

54
00:04:34.573 --> 00:04:41.710
So, if this is true, do this first thing.

55
00:04:41.710 --> 00:04:45.108
Otherwise, after the colon here,
do the other thing, right?

56
00:04:45.108 --> 00:04:51.910
So, if I have API data for this
particular show, return that API data.

57
00:04:51.910 --> 00:04:53.920
Otherwise, return empty object.

58
00:04:53.920 --> 00:04:59.235
You can totally write this out as an if
statement, and I'm 100% okay with that.

59
00:05:04.077 --> 00:05:07.185
&gt;&gt; Brian Holt: And then we're gonna
return down here an object with rating:

60
00:05:07.185 --> 00:05:08.207
apiData.rating.

61
00:05:09.388 --> 00:05:14.057
&gt;&gt; Brian Holt: Oops, I don't need

62
00:05:14.057 --> 00:05:18.180
that semicolon.

63
00:05:19.970 --> 00:05:24.650
So if it's this empty object,
then the rating is going to be Undefined,

64
00:05:24.650 --> 00:05:25.400
and that's fine.

65
00:05:29.528 --> 00:05:31.955
&gt;&gt; Brian Holt: If you want
it to be empty string,

66
00:05:31.955 --> 00:05:35.782
you could totally just do this as well,
either way.

67
00:05:44.246 --> 00:05:46.992
&gt;&gt; Brian Holt: Okay,
now we need to mapDispatchToProps.

68
00:05:46.992 --> 00:05:54.196
So we're gonna say const
mapDispatchToProps.

69
00:05:55.470 --> 00:06:01.140
&gt;&gt; Brian Holt: It's going to take in
dispatch, which is going to be a function.

70
00:06:02.570 --> 00:06:04.440
And so
I was gonna take in the ownProps as well.

71
00:06:07.030 --> 00:06:13.127
And it's going to return this object
with the function on it, getAPIData,

72
00:06:13.127 --> 00:06:17.380
which takes in nothing, that's fine.

73
00:06:19.280 --> 00:06:21.250
And you're going

74
00:06:21.250 --> 00:06:30.644
to
dispatch(getAPIData(ownProps.show.imdbI-

75
00:06:30.644 --> 00:06:35.620
D)).

76
00:06:35.620 --> 00:06:38.781
So if you call this function,
it's gonna say okay, what show are you?

77
00:06:38.781 --> 00:06:43.213
And it's gonna grab that show, and
it's gonna take that imdbID and

78
00:06:43.213 --> 00:06:45.389
then throw that out to the thunk,

79
00:06:45.389 --> 00:06:50.394
which is gonna take care of all the data
requests behind the scenes, right?

80
00:06:50.394 --> 00:06:51.323
Then down here at the bottom,

81
00:06:51.323 --> 00:06:56.910
I'm gonna say connect,
&gt;&gt; Brian Holt: mapStateToProps and

82
00:06:56.910 --> 00:06:58.590
then mapDispatchToProps.

83
00:07:01.301 --> 00:07:06.260
&gt;&gt; Brian Holt: But now,
we should be able to save this.

84
00:07:07.480 --> 00:07:10.092
Go over to our application.

85
00:07:12.992 --> 00:07:15.008
&gt;&gt; Brian Holt: And that is large,
let's go back to normal.

86
00:07:15.008 --> 00:07:20.511
So I'll refresh the page,
let's open our Redux tools,

87
00:07:20.511 --> 00:07:23.959
we can see what's happening here.

88
00:07:23.959 --> 00:07:26.149
So if I click into Billions,

89
00:07:32.510 --> 00:07:34.584
&gt;&gt; Brian Holt: Am I getting an error here?

90
00:07:34.584 --> 00:07:38.227
Cool, that's neat.

91
00:07:41.302 --> 00:07:42.330
&gt;&gt; Brian Holt: Did I not save here?

92
00:07:42.330 --> 00:07:46.302
So did I import getAPIData
from actionCreators?

93
00:07:46.302 --> 00:07:49.497
&gt;&gt; Speaker 2: It's supposed
to be add API data.

94
00:07:49.497 --> 00:07:53.996
&gt;&gt; Brian Holt: Add API, no,
you want getAPIDetails, that's what it is.

95
00:07:53.996 --> 00:08:01.137
So, details,
&gt;&gt; Brian Holt: getAPIDetails.

96
00:08:01.137 --> 00:08:07.486
And then down here,
we're gonna call this getAPIDetails.

97
00:08:10.620 --> 00:08:16.308
&gt;&gt; Brian Holt: Yep, okay,
&gt;&gt; Brian Holt: So,

98
00:08:16.308 --> 00:08:20.772
yeah, just to recap, we changed this
to getAPIDetails cuz that's what I

99
00:08:20.772 --> 00:08:24.160
called the function
inside of actionCreators.

100
00:08:24.160 --> 00:08:27.059
And then down here, I just changed
that as well to be getAPIDetails.

101
00:08:29.440 --> 00:08:34.549
Okay, now if we go back over here,
&gt;&gt; Brian Holt: Go

102
00:08:34.549 --> 00:08:39.130
into Redux,
we can see what has happened here.

103
00:08:40.290 --> 00:08:43.297
We can see that an ADD_API_DATA
action was called, and

104
00:08:43.297 --> 00:08:46.625
we were able to get this payload,
which was Billions, right?

105
00:08:46.625 --> 00:08:52.809
But now, what's really cool, if I go
back and then I click on Billions again,

106
00:08:52.809 --> 00:08:56.575
notice that I will not
get the loading spinner.

107
00:08:56.575 --> 00:08:58.974
And it's just gonna
instantly load that rating,

108
00:08:58.974 --> 00:09:00.639
cuz it already has it in the store.

109
00:09:10.720 --> 00:09:12.579
&gt;&gt; Brian Holt: So,
same thing if you go into

110
00:09:12.579 --> 00:09:17.093
Atlanta,
&gt;&gt; Brian Holt: First time I made

111
00:09:17.093 --> 00:09:20.420
the request, you can see the request
down here in our explorer.

112
00:09:22.566 --> 00:09:26.275
&gt;&gt; Brian Holt: So,
&gt;&gt; Brian Holt: That one,

113
00:09:26.275 --> 00:09:30.270
and [COUGH] now if we go back, click
into Atlanta, it's still gonna be there.

114
00:09:30.270 --> 00:09:34.290
And same thing if I go back to Billions,
still there, right?

115
00:09:34.290 --> 00:09:39.210
But if I refresh, notice on the first
time, it's gonna make that request, so

