WEBVTT

1
00:00:00.470 --> 00:00:02.554
&gt;&gt; Brian: So, let's go ahead and
add two more tests here.

2
00:00:02.554 --> 00:00:08.690
The first I'm going to say is hey,
giving it a particular type of search.

3
00:00:08.690 --> 00:00:11.300
We want to make sure that we're rendering
a correct amount of cards, right?

4
00:00:11.300 --> 00:00:12.723
So, going back to my app here.

5
00:00:12.723 --> 00:00:19.891
If I type, what do I
&gt;&gt; Brian: If I type,

6
00:00:19.891 --> 00:00:20.969
&gt;&gt; Brian: If I type like orange, right.

7
00:00:22.080 --> 00:00:22.930
It should only render one.

8
00:00:22.930 --> 00:00:25.300
Once in a while it'll render two.

9
00:00:25.300 --> 00:00:26.150
Black, yep.

10
00:00:26.150 --> 00:00:29.685
If I type black it should render black
mirror and orange is the new black.

11
00:00:29.685 --> 00:00:30.960
Does that makes sense?

12
00:00:30.960 --> 00:00:34.040
So I want to test that functionality to
make sure that that search is happening

13
00:00:34.040 --> 00:00:34.930
the way that I anticipated.

14
00:00:37.300 --> 00:00:38.550
So, let's go in here.

15
00:00:38.550 --> 00:00:45.322
The first thing we're gonna do is
we're gonna import show card as well.

16
00:00:45.322 --> 00:00:49.050
So, import ShowCard from
dash dash ShowCard.

17
00:00:49.050 --> 00:00:55.049
And we're also going to import preload

18
00:00:55.049 --> 00:01:01.605
from dot dot slash dot dot slash data.json

19
00:01:04.488 --> 00:01:08.253
&gt;&gt; Brian: Okay.under that we're gonna say

20
00:01:08.253 --> 00:01:16.700
test Search should render correct
amount of shows based on search term').

21
00:01:21.378 --> 00:01:22.242
&gt;&gt; Brian: Something like that.

22
00:01:28.042 --> 00:01:29.910
&gt;&gt; Brian: Sorry,
that's the third test screen, right?

23
00:01:29.910 --> 00:01:32.050
Getting a little ahead of myself.

24
00:01:33.550 --> 00:01:36.710
The first one, I just want to make sure is
that given no search term that it's going

25
00:01:36.710 --> 00:01:37.660
to render everything.

26
00:01:37.660 --> 00:01:41.420
So, we'll put that third test aside for
a second.

27
00:01:41.420 --> 00:01:47.120
I'm gonna say Search should
render correct amount of shows.

28
00:01:54.035 --> 00:01:57.398
&gt;&gt; Brian: So, just in case if you're not
familiar with testing in JavaScript or

29
00:01:57.398 --> 00:02:01.360
in general, this is the string that
you're gonna be shown if the test fails.

30
00:02:01.360 --> 00:02:04.710
So, you want something descriptive
enough that you can read that line and

31
00:02:04.710 --> 00:02:06.920
say, I know what failed.

32
00:02:06.920 --> 00:02:08.123
That's the goal here.

33
00:02:14.790 --> 00:02:22.232
&gt;&gt; Brian: So, I'm gonna say const
component equals shallow search.

34
00:02:25.410 --> 00:02:29.636
And here I want to say,

35
00:02:29.636 --> 00:02:38.311
expect preload dot shows
dot length to equal,

36
00:02:38.311 --> 00:02:42.982
[SOUND] Component dot find

37
00:02:42.982 --> 00:02:47.218
ShowCard dot length.

38
00:02:53.322 --> 00:02:56.480
&gt;&gt; Speaker 2: You said that what
should be shown if it fails?

39
00:02:58.540 --> 00:02:59.980
&gt;&gt; Brian: Right.

40
00:02:59.980 --> 00:03:02.070
&gt;&gt; Speaker 2: So for the first test, so

41
00:03:02.070 --> 00:03:05.560
we're trying this correctly,
is what it shows when it fails?

42
00:03:05.560 --> 00:03:06.970
&gt;&gt; Brian: Right.
So it's going to say,

43
00:03:06.970 --> 00:03:08.010
this is the test that failed.

44
00:03:08.010 --> 00:03:09.190
And it's going to highlight in red.

45
00:03:09.190 --> 00:03:11.510
So, search does not render correctly.

46
00:03:11.510 --> 00:03:14.340
That's kind of the negate.

47
00:03:14.340 --> 00:03:15.720
I see what you're getting at that,

48
00:03:15.720 --> 00:03:18.470
you'd say something like search
did not render correctly, right?

49
00:03:18.470 --> 00:03:20.430
Like an error type message?

50
00:03:21.820 --> 00:03:24.070
That's not typically the paradigm
that you're writing with,

51
00:03:24.070 --> 00:03:28.220
typically write with a paradigm like
this is what this is testing, right?

52
00:03:28.220 --> 00:03:30.320
This is testing the search
renders correctly, right?

53
00:03:30.320 --> 00:03:33.040
And then it shows in the red
that this did not happen.

54
00:03:33.040 --> 00:03:36.010
Right?
That's kind of the implicit way of doing.

55
00:03:36.010 --> 00:03:37.280
It's up to you, right?

56
00:03:37.280 --> 00:03:39.820
If that works better for
you, then do that, right?

57
00:03:39.820 --> 00:03:40.860
Okay.

58
00:03:40.860 --> 00:03:42.920
Yeah, Mark?
&gt;&gt; Speaker 3: Is there a describe record

59
00:03:42.920 --> 00:03:44.780
to group the test by type?

60
00:03:44.780 --> 00:03:45.840
&gt;&gt; Brian: There is, yeah.

61
00:03:45.840 --> 00:03:48.750
I can totally wrap these both describe.

62
00:03:48.750 --> 00:03:51.670
In fact,
I'll show it to you if you're interested.

63
00:03:53.210 --> 00:03:55.690
Describe search, right.

64
00:03:55.690 --> 00:03:57.840
So this will be a search test suite.

65
00:03:59.390 --> 00:04:04.000
And then I would wrap all of
these test statements in that.

66
00:04:04.000 --> 00:04:11.280
And then typically inside of
describe you would call this, It.

67
00:04:11.280 --> 00:04:12.410
It and test are the same thing.

68
00:04:14.160 --> 00:04:18.666
And here I would write, instead of saying

69
00:04:18.666 --> 00:04:23.190
Search,I would say renders correctly.

70
00:04:23.190 --> 00:04:27.693
So it's like, instead of saying like test
that this happens, it says it renders

71
00:04:27.693 --> 00:04:31.620
correctly, it should render correct amount
of shows and it should render, right?

72
00:04:31.620 --> 00:04:33.390
That's the way that you would do that.

73
00:04:34.550 --> 00:04:35.870
Totally up to you, totally valid,

74
00:04:35.870 --> 00:04:41.010
I would do that if I had multiple
things I was testing in one suite.

75
00:04:41.010 --> 00:04:42.840
But in this particular case.

76
00:04:42.840 --> 00:04:46.390
I've search that's tied to just
the search component, and so

77
00:04:46.390 --> 00:04:48.170
it makes sense to put them
all on top level thing.

78
00:04:48.170 --> 00:04:53.840
I know with Moca they kind of advise
against using [INAUDIBLE] function

79
00:04:53.840 --> 00:04:56.404
&gt;&gt; Speaker 2: Using their testing because

80
00:04:56.404 --> 00:04:58.062
context.

81
00:04:58.062 --> 00:05:01.680
Is that not true of just or.

82
00:05:03.140 --> 00:05:05.030
&gt;&gt; Brian: Their docs use it, so.

83
00:05:05.030 --> 00:05:05.530
&gt;&gt; Speaker 2: Okay.
&gt;&gt; [LAUGH]

84
00:05:05.530 --> 00:05:06.850
&gt;&gt; Brian: That's good enough for me.

85
00:05:06.850 --> 00:05:09.281
&gt;&gt; Speaker 2: You can sorta get
away with it in [INAUDIBLE], too.

86
00:05:09.281 --> 00:05:10.424
I was just curious.

87
00:05:10.424 --> 00:05:12.300
&gt;&gt; Brian: I haven't heard
anything that affects.

88
00:05:12.300 --> 00:05:17.210
But, this is less useful for

89
00:05:17.210 --> 00:05:22.380
stack traces, so, if I have an error here,
I'm gonna get an anonymous function,

90
00:05:22.380 --> 00:05:26.690
not like a named function, so
you have to make a trade off.

91
00:05:28.440 --> 00:05:31.820
I don't want those line 17 test to run
right now cuz it's not actually doing

92
00:05:31.820 --> 00:05:34.350
anything so you can just put xtest.

93
00:05:35.680 --> 00:05:37.600
And, it's just not going to run it.

94
00:05:37.600 --> 00:05:40.750
So, for example,
if this test was flaky and

95
00:05:40.750 --> 00:05:42.810
I didn't want it to run right now
while I'm testing other things,

96
00:05:42.810 --> 00:05:45.420
just put xtest in front of it and
it will stop running it.

97
00:05:45.420 --> 00:05:48.079
And then when you're ready for
it to run, just take the x off.

98
00:05:48.079 --> 00:05:50.890
&gt;&gt; Speaker 2: Is that
the same with the It?

99
00:05:50.890 --> 00:05:54.050
&gt;&gt; Brian: Yeah, X, X It and also xdescribe
works for entire suites, as well.

100
00:05:56.920 --> 00:05:58.660
So let's go to head and
run our test again.

101
00:06:02.036 --> 00:06:05.392
&gt;&gt; Brian: So you can see here
it says one skipped that's

102
00:06:05.392 --> 00:06:09.740
the one that we skipped at the bottom and
too fast,right?

103
00:06:09.740 --> 00:06:10.690
So let's go make it fail.

104
00:06:12.230 --> 00:06:14.690
It's always a good idea to make sure
that your tests fail when we expect them

105
00:06:14.690 --> 00:06:15.370
fail too.

106
00:06:15.370 --> 00:06:18.120
So I'm going to go to search.jsx.

107
00:06:18.120 --> 00:06:21.460
And I'm going to put game back in here.

108
00:06:21.460 --> 00:06:25.780
So now, I'm going to expect it to
render a show card for every item,

109
00:06:25.780 --> 00:06:28.330
but it's not going to do it, its only
going to render Game of Thrones, right?

110
00:06:29.860 --> 00:06:37.239
So if I run this test again,
&gt;&gt; Brian: You can see here,

111
00:06:37.239 --> 00:06:40.510
I failed my snapshot, that's fine.

112
00:06:40.510 --> 00:06:41.010
I expected that.

113
00:06:44.235 --> 00:06:47.260
&gt;&gt; Brian: So in this particular case,
I expected the value to equal one and

114
00:06:47.260 --> 00:06:48.050
received 15.

115
00:06:48.050 --> 00:06:51.660
I have these backwards, don't I?

116
00:06:51.660 --> 00:06:52.950
Okay, hold on.

117
00:06:52.950 --> 00:06:53.466
I do this all the time.

118
00:06:56.789 --> 00:07:00.317
&gt;&gt; Brian: So what I have in
expect should be in to equal.

119
00:07:02.170 --> 00:07:04.795
I'm pretty sure this literally on
the last to make you this course too.

120
00:07:10.117 --> 00:07:11.340
&gt;&gt; Brian: Yep, yep, yep, yep.

121
00:07:12.970 --> 00:07:16.068
So what goes inside of the expect
is what you're testing, and

122
00:07:16.068 --> 00:07:18.941
what goes inside of to equal,
what the answer should be.

123
00:07:22.961 --> 00:07:27.545
&gt;&gt; Brian: It is minorly semantic but
you get more useful failures.

124
00:07:27.545 --> 00:07:33.464
So now if I run this again,
&gt;&gt; Brian: I expected to get 15 but

125
00:07:33.464 --> 00:07:36.380
I actually only got one, right?

126
00:07:36.380 --> 00:07:38.930
The reason by that it only
rendered Game of thrones and

127
00:07:38.930 --> 00:07:41.710
I expected it to render all 15
shows that I have possible.

128
00:07:41.710 --> 00:07:42.401
Does that make sense?

129
00:07:45.824 --> 00:07:49.637
&gt;&gt; Speaker 4: Do the focuses work
also like the de-describe and

130
00:07:49.637 --> 00:07:52.660
the like how in Jasmine?

131
00:07:52.660 --> 00:07:53.569
&gt;&gt; Brian: Yeah, you can use all of those.

132
00:07:58.603 --> 00:08:03.060
&gt;&gt; Brian: Cool, so I'm gonna go back
to search.jsx, I'm gonna drop this.

133
00:08:03.060 --> 00:08:03.831
Say that.

134
00:08:03.831 --> 00:08:08.098
&gt;&gt; Speaker 2: Sorry, I can understand why
you get confuse about that because it

135
00:08:08.098 --> 00:08:11.340
expect actually value to
equal expected value.

136
00:08:11.340 --> 00:08:13.900
&gt;&gt; Brian: Yeah, totally right.

137
00:08:13.900 --> 00:08:16.850
No matter,
I'm gonna keep passing it up forever.

138
00:08:16.850 --> 00:08:20.170
There are probably still test
that are still inverted.

139
00:08:21.250 --> 00:08:22.540
So, it's their problem now.

