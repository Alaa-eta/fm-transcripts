WEBVTT

1
00:00:00.790 --> 00:00:03.690
&gt;&gt; Brian Holt: And so
now all of our flow errors are resolved.

2
00:00:03.690 --> 00:00:07.240
So now we have kind of
an inconsistency with our app.

3
00:00:08.650 --> 00:00:12.030
We have search,
which is reading from preload and

4
00:00:12.030 --> 00:00:14.270
we have app that's reading from preload.

5
00:00:14.270 --> 00:00:17.570
It would be better since
app is the parent of search

6
00:00:17.570 --> 00:00:21.210
that if we could just pass that
date from the app into search.

7
00:00:21.210 --> 00:00:24.800
So we don't have kind of two
places reading from the same data.

8
00:00:24.800 --> 00:00:29.170
We'd rather have this one parent
component reading that search data.

9
00:00:29.170 --> 00:00:32.020
And then passing that into both search and
into details.

10
00:00:32.020 --> 00:00:35.840
In this particular case when
you're just loading a JSON file,

11
00:00:35.840 --> 00:00:37.266
it's probably not a big deal.

12
00:00:37.266 --> 00:00:40.700
However, like I mentioned,
this was coming back from the API.

13
00:00:40.700 --> 00:00:42.860
You don't want to request
it in two places.

14
00:00:42.860 --> 00:00:45.800
You want to have it be requested once and
then passed into two different spaces.

15
00:00:45.800 --> 00:00:50.810
So, that's the reason why I'm going
to show you this particular part.

16
00:00:50.810 --> 00:00:54.630
So, what I'm going to do here, is change
search into a component like this as well.

17
00:00:59.059 --> 00:01:01.628
&gt;&gt; Brian Holt: And this is gonna be props,

18
00:01:01.628 --> 00:01:06.450
and we're just gonna pass shows in here,
as well.

19
00:01:06.450 --> 00:01:10.314
And we're just gonna pass
all of preload.shows,

20
00:01:12.631 --> 00:01:13.899
&gt;&gt; Brian Holt: As well as the props.

21
00:01:20.660 --> 00:01:21.859
&gt;&gt; Brian Holt: Now notice we don't have to

22
00:01:21.859 --> 00:01:25.212
type these props cuz we're not actually
really reading from them, right?

23
00:01:25.212 --> 00:01:27.742
It's we're just taking an object and
passing stuff in.

24
00:01:27.742 --> 00:01:32.910
And with flow you don't have to go back
and say, this is what these types are.

25
00:01:32.910 --> 00:01:34.380
The types inference is
gonna be enough here.

26
00:01:35.850 --> 00:01:38.949
You can if you want to.
&gt;&gt; Brian Holt: But

27
00:01:38.949 --> 00:01:44.117
there's no good reason to.
&gt;&gt; Brian Holt: So now, we have to

28
00:01:44.117 --> 00:01:50.390
go back to search and make it read from
data or not read from preload anymore.

29
00:01:51.460 --> 00:01:53.430
So what we're gonna do is we're
gonna remove preload from

30
00:01:53.430 --> 00:01:58.610
this.
&gt;&gt; Brian Holt: And

31
00:01:58.610 --> 00:02:01.310
rather than doing preload.shows,

32
00:02:01.310 --> 00:02:06.631
instead of doing that we're gonna say,
this.props.shows, right?

33
00:02:06.631 --> 00:02:14.960
Yeah.
&gt;&gt; Brian Holt: Okay?

34
00:02:14.960 --> 00:02:18.370
Now we have prop types errors,
because we have to type our props.

35
00:02:26.290 --> 00:02:26.955
&gt;&gt; Brian Holt: Okay, so

36
00:02:26.955 --> 00:02:28.960
let's go up to the top here.

37
00:02:30.710 --> 00:02:33.960
And underneath state, we're gonna add

38
00:02:33.960 --> 00:02:39.971
props.
&gt;&gt; Brian Holt: So

39
00:02:39.971 --> 00:02:47.360
you might be noticing that state
here is different than props here.

40
00:02:47.360 --> 00:02:51.320
That's because this is in particular for
typing, and

41
00:02:51.320 --> 00:02:55.780
this one here is actually a real
variable that exists on search,

42
00:02:55.780 --> 00:02:59.246
right?
&gt;&gt; Brian Holt: Okay, so what we're gonna

43
00:02:59.246 --> 00:03:04.180
do here is we're gonna have shows
which is going to be an array, right?

44
00:03:04.180 --> 00:03:05.600
Cuz it's gonna be an array of shows.

45
00:03:08.100 --> 00:03:13.990
And what we're gonna do here,
it's gonna be an array of stuff, right?

46
00:03:13.990 --> 00:03:16.460
If it was an array of strings,
it would look like that.

47
00:03:17.460 --> 00:03:21.060
So basically this is a parameter that
you can pass into an array to say,

48
00:03:21.060 --> 00:03:23.310
this is gonna be an array of strings.

49
00:03:23.310 --> 00:03:26.930
Or an array of mixed,
it can be an array of stuff.

50
00:03:26.930 --> 00:03:30.200
It can be an array of any,
I don't care what's in here,

51
00:03:30.200 --> 00:03:35.075
it can be an array of anything.
&gt;&gt; Brian Holt: Any's a cheating way by

52
00:03:35.075 --> 00:03:36.100
the way.

53
00:03:36.100 --> 00:03:38.950
Any just says,
don't prop check this at all,

54
00:03:38.950 --> 00:03:41.360
which is not actually what you wanna do,
right?

55
00:03:41.360 --> 00:03:46.720
So if at all possible, don't ever use any.

56
00:03:46.720 --> 00:03:49.060
You wanna use other things, right?

57
00:03:49.060 --> 00:03:54.220
If you are tempted to use any,
it's probably better to use mixed, right?

58
00:03:54.220 --> 00:03:58.710
Cuz mixed is saying, this could be
anything but it's going to then try and

59
00:03:58.710 --> 00:04:00.280
continue doing type inference.

60
00:04:00.280 --> 00:04:02.820
If you say this is an any,
it's like all bets are off,

61
00:04:02.820 --> 00:04:04.600
I don't care about this anymore, right?

62
00:04:04.600 --> 00:04:08.829
So be careful about that.
&gt;&gt; Speaker 2: If you choose mixed and

63
00:04:08.829 --> 00:04:11.075
then end up only putting in strings,

64
00:04:11.075 --> 00:04:13.800
is it gonna yell at you?
&gt;&gt; Brian Holt: It's not gonna yell at you,

65
00:04:13.800 --> 00:04:15.630
I mean it's not a good idea, right?

66
00:04:15.630 --> 00:04:17.190
But it's not gonna yell at you, however,

67
00:04:18.320 --> 00:04:23.250
what is a blessing slash a curse with
mixed, so let's say I was down here.

68
00:04:23.250 --> 00:04:28.051
And I've tried to reference
something in this.shows,

69
00:04:28.051 --> 00:04:33.390
or this.props.shows,
props.shows[0], right?

70
00:04:33.390 --> 00:04:36.040
It's gonna say,
I don't know anything about this.

71
00:04:36.040 --> 00:04:39.414
So the next thing you're gonna have
to do with this is say, if typeof,

72
00:04:39.414 --> 00:04:45.570
this [INAUDIBLE] cuz you're gonna have to
what's called do a type refinement, right?

73
00:04:45.570 --> 00:04:48.790
You're gonna have to validate
to the type checkers, hey,

74
00:04:48.790 --> 00:04:52.130
I went through this process enough and
I'm positive this is a string try, so

75
00:04:52.130 --> 00:04:55.820
then I can call methods
that are on strings, right?

76
00:04:55.820 --> 00:04:58.499
And if you try do that before hand,
it's gonna say I don't know what this is.

77
00:05:00.530 --> 00:05:03.640
Whereas if it's any, it's gonna say,
I don't care, do whatever you want, right?

78
00:05:05.290 --> 00:05:08.520
So, any is a crutch, so
don't use any if at all possible.

79
00:05:13.134 --> 00:05:14.800
&gt;&gt; Brian Holt: Another things is,

80
00:05:14.800 --> 00:05:20.200
if you're doing imports on
something that's not type checked.

81
00:05:20.200 --> 00:05:23.110
So if I create another file
that's not prop checked, and

82
00:05:23.110 --> 00:05:26.490
I import it,
it's going to import as an any type.

83
00:05:26.490 --> 00:05:27.980
And it just makes it easier to work with,
right?

84
00:05:27.980 --> 00:05:32.460
So files that are not opted into type
checking are exported as any types.

85
00:05:35.130 --> 00:05:37.700
Okay, so
that was kind of a side note on that.

86
00:05:39.620 --> 00:05:44.770
So we're going to give it a particular
shape of object to look for.

87
00:05:45.840 --> 00:05:47.660
It's going to be a title,
which is a string.

88
00:05:47.660 --> 00:05:51.030
It's going to be a description,
which is a string.

89
00:05:51.030 --> 00:05:54.070
It's going to be a year,
which is a string.

90
00:05:55.570 --> 00:05:57.538
It's going to be an imdbID,

91
00:05:57.538 --> 00:06:02.938
which is a string.
&gt;&gt; Brian Holt: It's gonna be a trailer,

92
00:06:02.938 --> 00:06:07.756
which is a string.
&gt;&gt; Brian Holt: And it's gonna be a poster,

93
00:06:07.756 --> 00:06:12.075
which is a string.
&gt;&gt; Brian Holt: I think I got all of them,

94
00:06:12.075 --> 00:06:20.072
okay.
&gt;&gt; Brian Holt: So,

95
00:06:20.072 --> 00:06:24.090
now I know I have this array of this
particular type of thing, right?

96
00:06:24.090 --> 00:06:26.810
Now I can be guaranteed that I
can read anything off of it.

97
00:06:29.093 --> 00:06:29.626
&gt;&gt; Brian Holt: Now,

98
00:06:29.626 --> 00:06:33.040
we have this particular object here.

99
00:06:33.040 --> 00:06:35.870
One, this is kind of ugly the way
it exists right now, right?

100
00:06:37.000 --> 00:06:41.040
And the other thing is that we're
going to be using these shows all over

101
00:06:41.040 --> 00:06:42.330
our site, right?

102
00:06:42.330 --> 00:06:46.400
So it would be really nice if we could
just declare this as its own type, right?

103
00:06:48.520 --> 00:06:50.890
So we can say type Show,

104
00:06:50.890 --> 00:06:54.917
equals all of this business.
&gt;&gt; Brian Holt: And

105
00:06:54.917 --> 00:07:00.420
we can pass that in right here so
we have an array of Show, right?

106
00:07:02.210 --> 00:07:03.590
Now we can even take
this one step further.

107
00:07:03.590 --> 00:07:08.240
This is going to restrict this
show to this particular file.

108
00:07:08.240 --> 00:07:11.260
We wanna be able to use shows all over our
project cuz we're gonna be reading out of

109
00:07:11.260 --> 00:07:12.670
details as well.

110
00:07:12.670 --> 00:07:15.630
So you could do something like
export a type from this file or

111
00:07:15.630 --> 00:07:18.270
something like that, but
we're going to take this one step further.

112
00:07:18.270 --> 00:07:22.450
And we're going to save this, and
we're gonna go to our types file and

113
00:07:22.450 --> 00:07:25.482
just put it in here.
&gt;&gt; Brian Holt: And

114
00:07:25.482 --> 00:07:31.510
I think the way that we're gonna want to
do this is just say export type Show.

115
00:07:32.590 --> 00:07:36.750
And now this is going to be available
throughout our entire website.

116
00:07:38.170 --> 00:07:44.600
So, because it exists here,
we can go back over here to search.jsx.

117
00:07:44.600 --> 00:07:47.760
We don't have to import it since
it's in our flow type directory,

118
00:07:47.760 --> 00:07:50.420
that's automatically just going
to be filtered into our page.

119
00:07:54.360 --> 00:07:57.897
&gt;&gt; Brian Holt: I believe.

120
00:08:02.310 --> 00:08:03.621
&gt;&gt; Brian Holt: So if we come in here and

121
00:08:03.621 --> 00:08:06.270
say yarn flow I think we
should still be good.

122
00:08:06.270 --> 00:08:13.946
No, it doesn't like show.
&gt;&gt; Brian Holt: Yeah,

123
00:08:13.946 --> 00:08:15.017
it's gonna yell at us for

124
00:08:15.017 --> 00:08:19.788
all of our tests.
&gt;&gt; Brian Holt: Yep, that's true,

125
00:08:19.788 --> 00:08:20.729
we did that.

126
00:08:31.210 --> 00:08:32.062
&gt;&gt; Brian Holt: So, I mean,

127
00:08:32.062 --> 00:08:35.280
this is a good thing, though, right?

128
00:08:35.280 --> 00:08:40.060
Because now we're telling it that, hey,
we have this prop type shows, right?

129
00:08:40.060 --> 00:08:42.950
And it's going to say, hey,
you're rendering this over here and

130
00:08:42.950 --> 00:08:48.310
you're not giving it shows, flow is kind
of saying, you broke all of your tests.

131
00:08:48.310 --> 00:08:50.090
Do you know that you just
broke all of your tests?

132
00:08:51.330 --> 00:08:54.940
Now what you can do is you can make
this what's called a maybe type.

133
00:08:54.940 --> 00:08:56.650
We're kind of getting off
into the weeds too, but

134
00:08:56.650 --> 00:08:58.710
I like showing you how to do this.

135
00:08:58.710 --> 00:09:03.180
If I put a question mark here,
maybe I'll have some shows,

136
00:09:03.180 --> 00:09:07.859
right?
&gt;&gt; Brian Holt: So

137
00:09:07.859 --> 00:09:09.395
this is now a lint error, but

138
00:09:09.395 --> 00:09:13.619
that's what this question mark means,
is like this is now an optional thing.

139
00:09:14.630 --> 00:09:20.630
Now what the AirBnB default rules,
or the AirBnB ES Lint rules, it says

140
00:09:20.630 --> 00:09:26.560
that you have to have a default prop type
if you don't have, or this is option.

141
00:09:27.700 --> 00:09:35.046
So what you would have to then
do is say defaultProps = shows,

142
00:09:35.046 --> 00:09:41.870
just make it an empty array.
&gt;&gt; Brian Holt: AirBnB is super particular

143
00:09:41.870 --> 00:09:44.002
on what order they want things in.

144
00:10:14.437 --> 00:10:17.240
&gt;&gt; Brian Holt: Anyway that's
how that should work.

145
00:10:17.240 --> 00:10:19.496
Is you should be able to give
it a default property type and

146
00:10:19.496 --> 00:10:21.150
it should be okay with a maybe type.

147
00:10:21.150 --> 00:10:22.850
We're gonna require shows
every single time, so

148
00:10:22.850 --> 00:10:27.450
it's not particularly important.
&gt;&gt; Brian Holt: Yeah,

149
00:10:27.450 --> 00:10:32.691
because,
&gt;&gt; Brian Holt: Yeah, that's fine.

150
00:10:32.691 --> 00:10:35.300
So in any case,
we don't need defaultProps right now.

151
00:10:35.300 --> 00:10:38.650
So this is not important because
this is not a maybe type.

152
00:10:42.134 --> 00:10:46.560
&gt;&gt; Brian Holt: So, now we're good to go.

153
00:10:46.560 --> 00:10:50.670
We have this array of shows, so
now we're very safe to refer to, for

154
00:10:50.670 --> 00:10:55.530
example, here where I say,
show.title and show.description.

155
00:10:55.530 --> 00:10:56.970
All that stuff is guaranteed to be there,

156
00:10:56.970 --> 00:10:59.290
because I typed that to be a show type,
right?

157
00:10:59.290 --> 00:11:01.340
And now it's available to
us throughout our entire

158
00:11:01.340 --> 00:11:07.822
application.
&gt;&gt; Brian Holt: So

159
00:11:07.822 --> 00:11:12.760
we have this.props.shows,
that's all good to go.

160
00:11:14.610 --> 00:11:19.100
Let's go back to, let's see,
make sure everything works still.

161
00:11:20.110 --> 00:11:25.580
So we're going to go back to 8080,
browse all.

162
00:11:25.580 --> 00:11:28.025
Everything is still working which is good.

163
00:11:28.025 --> 00:11:31.345
And now all of this is
coming from app.jsx,

164
00:11:31.345 --> 00:11:34.780
is being fed into search that way.

165
00:11:34.780 --> 00:11:39.483
Any questions about that so far?
&gt;&gt; Brian Holt: So

166
00:11:39.483 --> 00:11:43.070
let's go ahead and cut our brunch for
anyone that's clawed behind there.

167
00:11:48.573 --> 00:11:49.225
&gt;&gt; Brian Holt: Again,

168
00:11:49.225 --> 00:11:55.550
if you're in Flow typing right now,
all of your tests are going to fail.

169
00:11:55.550 --> 00:12:00.960
If you want to,
you can come into your spec and

170
00:12:00.960 --> 00:12:05.883
just pass them in
&gt;&gt; Brian Holt: shows=preload.shows.

171
00:12:11.591 --> 00:12:12.308
&gt;&gt; Brian Holt: And

172
00:12:12.308 --> 00:12:17.692
right there.
&gt;&gt; Brian Holt: And

173
00:12:17.692 --> 00:12:19.790
that's all we had to do to fix our tests.

174
00:12:19.790 --> 00:12:25.680
So yarn flow,
we're missing some prop type validations.

175
00:12:25.680 --> 00:12:26.650
We will get there momentarily.

