[00:00:00]
>> Brian Holt: Let's talk about react perf tools then. Okay, so go into client app .jsx and I want you to import Perf from react-addons-perf.
>> Brian Holt: And we're going to say window.Perf = Perf. And then we're gonna say Perf.start. So what we've done here, this is not something that you're gonna ship to production.

[00:00:44]
This is only something you're gonna temporarily bring in the perf tools, do your profiling and then remove it from your code. So I brought in the perf tools, I set it on the windows so I can directly mess with it. And then I also told it to start recording as soon as the page loads.

[00:01:03]

>> Brian Holt: Okay, so what I want you to do now,
>> Brian Holt: Okay, localhost 80 80. So now the perf tools are running. So what I'm gonna do now is I'm just gonna browse around a little bit. And so I can kind of get like a nice profile going. I'm just gonna click into a bunch of these, go to the homepage.

[00:01:44]

>> Brian Holt: Yeah, that's true. So, now what I'm gonna say is I'm gonna say perf.stop. Okay, so now it stopped recording. Now I'm gonna say perf.print wasted, wasted.
>> Brian Holt: So, that actually wasn't too bad. So let's talk about what we actually did first. So when I was clicking around it's doing a bunch of renders.

[00:02:22]
It's doing a bunch of like destroying and reupping of components, all that different stuff. When I call print wasted it's going to print out times that it was running the render method and nothing changed. Which is considered a wasted render. Normally this is not a problem. What you see here where I'm wasting 0.1 millisecond, you don't care.

[00:02:45]
You're really worried about things that are wasting tens of milliseconds, hundreds of milliseconds and God forbid seconds. So like this one. This one wasted 2 Render counts. This one wasted 1. No big deal if you have a performance profile like that. No big deal at all. However, we're gonna refresh the page again.

[00:03:04]
I'm going to say or browse all. Now it's recording again and I'm just going to type a bunch of stuff. And then untyped it and then type more and type home and then now I'm gonna go in and say
>> Brian Holt: Perf.stop and then I'm gonna say perf.printWasted. And you're gonna see here I have 138 render counts that were wasted.

[00:03:33]
And now we're started to waste 23.25 milliseconds. As you can see that's a problem. That's going to spiral out of control, in particular if people are typing long things, and then untyping them, and all that kinda stuff. So right now this is a small perf problem but as show card becomes more and more complicated.

[00:03:54]
It's going to balloon into a very large perf problem. And like if someone's on like a really crappy Android phone I mean, this is a brand new Macbook Pro, right? So it's gonna be fine, but a crappy Android phone, that's gonna be a way bigger amount of stuff wasted.

[00:04:10]
So, again, yeah, this search.showcard, this 59 number, that's how many times it rendered and nothing changed. So, what's nice about this is show card is totally static. It doesn't really need to re-render. Once it renders the first time, it doesn't change. There's nothing dynamic about it. So, this is a really easy performance optimization here.

[00:04:37]
So I want you to open show card real quick. Because, ES6 classes don't have lifecycle methods. We're gonna have to convert this into an ES6 class. So, we're gonna say class ShowCard extends Component. We're gonna have to import Component to the top from React. We're gonna have a render method.

[00:05:10]

>> Brian Holt: That is going to return
>> Brian Holt: that. So return. Pretty able will fix my formatting for me. And then it's going to have a props of,
>> Brian Holt: What did I, and props is just gonna be Show I think, like that.
>> Brian Holt: And cool. And then here wherever it says props we're gonna have to say this.props.

[00:06:01]

>> Brian Holt: Okay, ES6, or Lint is gonna yell at you because it should be a stateless functional component, whatever.
>> Brian Holt: Above props I think, we're gonna say shouldComponentUpdate.
>> Brian Holt: So in shouldComponentUpdate you're gonna say this is basically a method that instead of doing react's dif-ing algorithm to see if something has changed between renders.

[00:06:39]
It's gonna call your method and you're going to tell react should you update or not. In this particular case, we have no state. And we don't expect the props to change for any one individual show card. So, how often do we want this component to update its mark-up.

[00:06:55]
Never. We never want it to update. So here, you're just gonna say return false.
>> Brian Holt: So this is telling us, like, once this component has rendered for the first time, never update it
>> Brian Holt: Okay, so now we're going to come over here, refresh so we have a fresh start of it.

[00:07:20]
And we're gonna start typing a bunch atlanta and then black and then game. And then now we're gonna say Perf.stop and Perf.printWasted much fewer things. We still have some in the headered link, but we're not gonna worry about that for now.
>> Brian Holt: In any case, we've mostly solved, well, we totally solved our show card problem.

[00:07:52]
We don't even see it show up anymore because it's not doing that render anymore. Any questions about that?
>> Audience 1: Can you just go back to show card?
>> Brian Holt: Sure.
>> Audience 2: It's not related to performance, but is doing the, importing the component at the top is that more, is that cheaper than doing extendsreact.com?

[00:08:20]

>> Brian Holt: No, just preference. Instead of doing this.
>> Audience 1: Yeah.
>> Brian Holt: Just preference.
>> Audience 1: Okay.
>> Brian Holt: So I just gave you a really big hammer, right? Should component update? It's a really big hammer. I will say that I very rarely write the should component update. Components, and it's not because I'm particularly good at writing react or something like that and I'm avoiding these cases.

[00:08:47]
Sometimes these cases are just inevitable. The issue here is, let's say I come back next week and now I need to have show components also show the ratings. So it would also needs to request from the API or something like that so it's keeping track of state as well.

[00:09:05]
So soon as I add state to this, if I don't forget or if I forget to update the should component update, it's never going to update. Cuz I've told react now, never update these components. So it's very easy to write these components that never update. And then have to go back later and update them so they have to update themselves.

[00:09:26]
And unless you're aware that they have a shift component update method on them, it's a big [INAUDIBLE] because you're going to go and try to change your code or you're going to try and run it. And nothing's gonna change, and you'll be like, what the hell, why is this not updating anymore?

[00:09:42]
It's because you told it not to update anymore. So, this is the most simple use case, and I'll also say that, as far as I can remember, no, that's not true. 95% of should component updates that I've written look like this, that's just returning false. However, you can get like, maybe only year is a thing that updates.

[00:10:07]
Or maybe, let's say rating, right? Let's say it has a rating. Then you could say, return this.props.rating is not equal to this has a next props right here, I think. nextProps.ratings. So you could do something like that that only update if rating is updating, and you can do that.

[00:10:34]
So you can kinda shortcut the amount of things that it needs to check. But, again, this is a really big hammer. Do not write should component updates until you actually need them. Do not prematurely optimize your code. That's just a general piece of life advice for coding. Do not prematurely update your code or optimize your code.

[00:10:52]
But in particular here, do not optimize this until it's actually needed. Any questions about that?
>> Brian Holt: Cool.
>> Brian Holt: So, return false.
>> Brian Holt: Cool, so that is the perf tools. Since we're not gonna be using that anymore, you can feel free to go into client app and remove them.

[00:11:25]
So that you're not including something that you don't need in production. The other thing is that because perf tools are hooking into the internals of react, it is going to make react itself a little bit slower. Actually something else I just wanted to show you. I showed you print wasted.

[00:11:43]
Because that's the one you actually care about. But If I come in here and navigate around a little bit and come back and say or browse all. Atlanta. Game. So now if I say, perf.stop, there's two other methods on here as well. There's perf.printInclusive. So this is going to print everything including things that were not wasted.

[00:12:19]
So this is going to print timers for everything including the life cycle methods. So you can see app is taking the most time to render but that makes sense because app is literally everything. It's the sum of everything. But you can see here like,
>> Audience 2: That is over 60 milliseconds, then you're gonna get some performance problems and painting, right?

[00:12:47]

>> Brian Holt: This is a sum, this is not a rate.
>> Audience 2: Okay.
>> Brian Holt: So it depends on how long you're clicking around, but that will happen.
>> Audience 2: Makes sense
>> Brian Holt: Yeah. But definitely if there are things in here, like for example, browser app you would expect that cuz that's rendering everything out.

[00:13:08]
But let say like here, component.Search. You can see here, the one that's taking the most time, the least performing component that we have here is search. It's still performant enough for sure, by far. But that isn't the least performant component that we have. And you can see here the hot code path is the show card inside of there.

[00:13:32]
That's taking most of the time inside of search. But that's just the nature of the beast because we're doing lots of re-rendering every time we're typing. That just takes time. So that's expected. So that's inclusive, so that includes lifecycle methods. And if you're not interested in how much time the lifecycle methods are taking, then you can say exclusive like that.

[00:13:55]
Come on.
>> Brian Holt: There we go. And now this is exclusive of lifecycle methods.
>> Brian Holt: Well and all the parent components as well, right. So you can see here that Styled(Link) right now is the thing that is least performant. That's because it's doing a bunch of stuff with manipulating styles.

[00:14:25]
So styles components are not necessarily the fastest react components. They are typically fast enough though.
>> Brian Holt: Something else that bears mentioning, that with the advent of React Fibre just around the corner, these perf tools, these ones in particular are not going to directly work with the fiber. And that's just because these hook into internal methods inside of react and so the way that fiber works is totally different.

[00:14:55]
So we will eventually get a different set of perf tools for react fiber.

