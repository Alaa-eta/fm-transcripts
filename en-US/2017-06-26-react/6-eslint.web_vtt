WEBVTT

1
00:00:00.430 --> 00:00:03.557
&gt;&gt; Brian Holt: So, hopefully most of you
were able to get this integrated into

2
00:00:03.557 --> 00:00:04.266
your editor.

3
00:00:04.266 --> 00:00:06.150
That would be super
helpful as we keep going.

4
00:00:07.550 --> 00:00:11.443
Throughout the course today,
I will be pushing out branches so

5
00:00:11.443 --> 00:00:13.726
that you can kind of see where we are.

6
00:00:13.726 --> 00:00:16.710
And if you get lost or fall behind,
this is a really easy way to catch up.

7
00:00:16.710 --> 00:00:19.603
So you don't have to stay behind, right?

8
00:00:19.603 --> 00:00:24.163
So I pushed up v3-1,
right there you can see that, and

9
00:00:24.163 --> 00:00:29.020
as we keep going on just keep
in coming to that second number.

10
00:00:30.630 --> 00:00:37.360
So yeah, you're welcomed to go fetch v3-1,
check it out and the you can start going.

11
00:00:37.360 --> 00:00:41.280
So just to show you how that works if
you're not super familiar with git.

12
00:00:41.280 --> 00:00:45.558
You would say making sure
that your git remote -vv, so

13
00:00:45.558 --> 00:00:49.465
making sure your URL looks
something like this for

14
00:00:49.465 --> 00:00:55.622
origin that your pointed at
btholt/complete-intro-to-react, right?

15
00:00:55.622 --> 00:01:01.157
Then you're gonna say git fetch

16
00:01:01.157 --> 00:01:05.671
origin v3-1, right?

17
00:01:05.671 --> 00:01:09.907
And then you're going to
say git checkout v3-1, and

18
00:01:09.907 --> 00:01:13.885
that was such you onto
the branch that has that code.

19
00:01:20.605 --> 00:01:22.514
&gt;&gt; Brian Holt: And again, you can do
that throughout the day as I keep

20
00:01:22.514 --> 00:01:23.245
pushing branches.

21
00:01:26.872 --> 00:01:30.543
&gt;&gt; Brian Holt: And for those of you
that are watching right now and or here,

22
00:01:30.543 --> 00:01:34.959
if you fall behind, just ask me to
push a branch, I'm happy to do that.

23
00:01:34.959 --> 00:01:38.656
Okay, so let's go back to our notes here,

24
00:01:38.656 --> 00:01:43.930
hopefully you've got it
integrated into your browser.

25
00:01:43.930 --> 00:01:48.160
The notes that I have there in my
particular notes are for sublime.

26
00:01:48.160 --> 00:01:53.162
So if your not using sublime these
are not super useful to you.

27
00:01:53.162 --> 00:01:58.015
But hopefully, the different editor
integrations are pretty hopefully,

28
00:01:58.015 --> 00:02:00.532
their notes are useful for how to do it.

29
00:02:03.311 --> 00:02:07.250
&gt;&gt; Brian Holt: There were a couple people
here that had issues with yarn global add.

30
00:02:07.250 --> 00:02:11.530
I've had this issue as well, and
I do not remember how I solved it.

31
00:02:11.530 --> 00:02:15.960
It's typically a problem if you
installed node via MVM or N or

32
00:02:15.960 --> 00:02:17.910
one of those node version managers.

33
00:02:19.100 --> 00:02:25.200
So, what I'm going to tell you to do
right now to get around this issue

34
00:02:25.200 --> 00:02:30.360
is just say npm install --global and just
use that for all of your global installs.

35
00:02:30.360 --> 00:02:34.450
And then later look up how
to fix yarn global ads.

36
00:02:34.450 --> 00:02:38.684
So this is how you would do it for
prettier.

37
00:02:38.684 --> 00:02:41.495
For now, so that we can keep going,
just do npm install --global.

38
00:02:45.970 --> 00:02:48.060
Great, any other questions
before we move forward?

39
00:02:48.060 --> 00:02:51.370
&gt;&gt; Mark: And also when you do,
get checkout v3-1,

40
00:02:51.370 --> 00:02:55.940
if you're getting errors and you wanna
just blow out your local changes,

41
00:02:55.940 --> 00:03:00.580
you can just add a -f and
that'll force in.

42
00:03:00.580 --> 00:03:03.132
&gt;&gt; Brian Holt: So I git check out.

43
00:03:03.132 --> 00:03:05.132
&gt;&gt; Mark: Well, you have to fetch there.

44
00:03:05.132 --> 00:03:12.034
&gt;&gt; Brian Holt: Checkout v3-1 -f or
--force just anytime you're using git and

45
00:03:12.034 --> 00:03:16.425
--force just exercise extra caution.

46
00:03:16.425 --> 00:03:21.635
That's only thing I'm going to caution

47
00:03:21.635 --> 00:03:27.040
you Okay, so we good with-
&gt;&gt; Mark: All people are saying

48
00:03:27.040 --> 00:03:32.840
the index.HTML on that branch is actually
not pointing to the client app on JSX.

49
00:03:32.840 --> 00:03:35.340
&gt;&gt; Brian Holt: It's not,
no I broke it for sure.

50
00:03:35.340 --> 00:03:37.720
So we are gonna unbreak it.

51
00:03:37.720 --> 00:03:39.789
This is the workshop for
breaking and unbreaking things.

52
00:03:42.430 --> 00:03:44.233
But that's astute.

53
00:03:44.233 --> 00:03:48.877
I would say the best way
to code is have 300 people

54
00:03:48.877 --> 00:03:52.118
watching while you do it or 200.

55
00:03:52.118 --> 00:03:54.511
I think that's what we were at.

56
00:03:54.511 --> 00:03:57.800
Okay, so, we're gonna move on to ESLint.

57
00:03:57.800 --> 00:03:59.610
We shouldn't have to mess with
prettier for the rest of the time.

58
00:03:59.610 --> 00:04:04.619
It's Just going to work magically.

59
00:04:04.619 --> 00:04:06.084
Sometimes, like, for example,

60
00:04:06.084 --> 00:04:09.380
this is kind of something
that's easy to get thrown off.

61
00:04:09.380 --> 00:04:12.170
Like what let's say I have
invalid JavaScript here, right?

62
00:04:13.280 --> 00:04:15.830
So, say if I'm, I don't know.

63
00:04:16.880 --> 00:04:17.810
So, I have like, this, right?

64
00:04:17.810 --> 00:04:20.709
So, I would expect this to
fix with prettier, right?

65
00:04:22.710 --> 00:04:27.020
And it's not if I save right now, because
this is not valid JavaScript right now.

66
00:04:27.020 --> 00:04:32.061
So if you have syntax errors prettier
can't fix everything, right?

67
00:04:32.061 --> 00:04:35.880
So it's gonna depend on
your various editors.

68
00:04:35.880 --> 00:04:37.180
How do you know that that's happening?

69
00:04:37.180 --> 00:04:39.120
It's kinda hard to tell in sublime.

70
00:04:39.120 --> 00:04:41.640
With sublime,
you actually have to open the console.

71
00:04:41.640 --> 00:04:45.640
Which I think is Ctrl-tilde, yeah.

72
00:04:45.640 --> 00:04:47.195
And you can see here,

73
00:04:47.195 --> 00:04:52.047
Prettier returned with 2 which
means id didn't exit correctly.

74
00:04:52.047 --> 00:04:57.826
So you can see right here,
SyntaxError:Unexpected token.

75
00:04:57.826 --> 00:05:01.290
So You hae to make sure that
you have valid JavaScript or

76
00:05:01.290 --> 00:05:03.120
else Prettier is not gonna work.

77
00:05:03.120 --> 00:05:06.090
So now I fix it that fixes everything and
everything works well.

78
00:05:09.120 --> 00:05:15.897
So this will only be a problem temporarily
because we're gonna put in ESLint and

79
00:05:15.897 --> 00:05:21.170
ESLint will first tell that it
failed before Prettier fails.

80
00:05:21.170 --> 00:05:23.120
Okay, so ESLint.

81
00:05:25.650 --> 00:05:29.480
So Prettier is just going to take
care of like stylistic things, right?

82
00:05:29.480 --> 00:05:32.340
It's not actually gonna handle code style.

83
00:05:33.380 --> 00:05:38.490
I guess what I am trying to say there is
It's gonna handle like syntax things,

84
00:05:38.490 --> 00:05:39.446
like spaces.

85
00:05:39.446 --> 00:05:43.640
How many characters go on a line, all that
kinda that's all prettier worries about,

86
00:05:43.640 --> 00:05:47.546
it doesn't actually worry about things
like not using old JavaScript features

87
00:05:47.546 --> 00:05:51.030
they don't wanna use, or
enforcing ES6 rules or things like that.

88
00:05:51.030 --> 00:05:53.640
So we're gonna bring in
another tool called ESLint to

89
00:05:53.640 --> 00:05:55.219
kinda help out with some of those rules.

90
00:05:56.400 --> 00:05:59.780
And again, previously in this class
we've used something called standard.

91
00:05:59.780 --> 00:06:03.890
This is driven by my desire
to never write semicolons.

92
00:06:03.890 --> 00:06:07.810
In fact, I got a lot of blowback
from not continuing to use standard.

93
00:06:08.810 --> 00:06:13.163
But the reason being is that
the Airbnb ESLink configurals have really

94
00:06:13.163 --> 00:06:17.824
matured to a point where I feel like I
dont have a good reason not to use them.

95
00:06:17.824 --> 00:06:21.070
Because it catches so many bugs and
enforces really good code style.

96
00:06:22.290 --> 00:06:26.460
So, today we gonna be using the AirBnB
config together with Prettier and

97
00:06:26.460 --> 00:06:28.270
I think that's a really
winning combination.

98
00:06:30.360 --> 00:06:35.177
So the first thing we gonna do

99
00:06:35.177 --> 00:06:40.596
now is were going to create a file

100
00:06:40.596 --> 00:06:45.829
called es.eslint rc.json.

101
00:06:45.829 --> 00:06:48.574
And we're gonna put this in
the root directory of our project.

102
00:06:52.553 --> 00:06:54.140
&gt;&gt; Brian Holt: So yes, use dot.

103
00:06:55.320 --> 00:06:57.964
So this is going to be the config for
our ESLint.

104
00:06:59.538 --> 00:07:03.420
&gt;&gt; Brian Holt: And
we're gonna put some config rules in here.

105
00:07:04.560 --> 00:07:06.282
So the first one is extends.

106
00:07:10.257 --> 00:07:11.775
&gt;&gt; Brian Holt: And
the order here is important, so

107
00:07:11.775 --> 00:07:13.400
make sure you put these in this order.

108
00:07:15.320 --> 00:07:21.700
The first thing you wanna put is Airbnb,
the second one is prettier, and

109
00:07:22.860 --> 00:07:28.249
the third one is prettier/react.

110
00:07:28.249 --> 00:07:31.140
Now, why we pulling in prettier?

111
00:07:31.140 --> 00:07:35.251
Well, the reason why we're putting in
prettier is that prettier actually

112
00:07:35.251 --> 00:07:38.787
invalidates some of the things
that airbnb checks for, right?

113
00:07:38.787 --> 00:07:41.830
Airbnb will check for
things like too many characters on a line.

114
00:07:41.830 --> 00:07:43.810
It's gonna check for
things like semicolons.

115
00:07:43.810 --> 00:07:46.040
It's gonna check things for white spaces.

116
00:07:46.040 --> 00:07:51.754
This is not actually useful for Airbnb,
like the ESLint to check for anymore.

117
00:07:51.754 --> 00:07:56.740
prettier and prettier/react actually
disable a bunch of rules, just to make

118
00:07:56.740 --> 00:08:01.270
sure that prettier can run without ESLint
about it, does that make sense, right?

119
00:08:01.270 --> 00:08:03.028
It's just getting rid
of a lot of the noise.

120
00:08:06.004 --> 00:08:08.912
&gt;&gt; Brian Holt: Okay, the next
thing that we're gonna put is plug

121
00:08:08.912 --> 00:08:13.885
ins
&gt;&gt; Brian Holt: And we're just gonna have

122
00:08:13.885 --> 00:08:17.840
one which is gonna be the prettier plugin,
so that we can run those rules.

123
00:08:20.140 --> 00:08:22.506
And then we're gonna
put some parserOptions.

124
00:08:28.747 --> 00:08:33.499
&gt;&gt; Brian Holt: And ecmaVersion,
I have 2016 on here I think that was

125
00:08:33.499 --> 00:08:38.746
the latest when I was working with
Lotus it might be later now but

126
00:08:38.746 --> 00:08:43.700
as long as you're passed 2015,
you should be golden.

127
00:08:45.370 --> 00:08:50.010
SourceType so we're gonna be using

128
00:08:51.560 --> 00:08:55.450
ES6 modules today, like that
particular way of writing JavaScript.

129
00:08:57.170 --> 00:09:01.106
So we're not going to use common JS,
in other words, so that's what that means.

130
00:09:01.106 --> 00:09:04.024
And then

131
00:09:04.024 --> 00:09:10.160
ecmaFeatures we're going
to tell it that it needs

132
00:09:10.160 --> 00:09:15.250
to parse jsx which is true, it does.

133
00:09:15.250 --> 00:09:19.490
And then the last thing is env

134
00:09:21.870 --> 00:09:28.610
which is just telling it what global
variables to not fail you on.

135
00:09:28.610 --> 00:09:34.860
So ES6 So this will tell it not to fail
on things like symbol for example, right?

136
00:09:34.860 --> 00:09:36.750
Symbol is only available on es6.

137
00:09:38.080 --> 00:09:42.700
Browser, this is telling it to not
fail on things like window and

138
00:09:42.700 --> 00:09:47.340
document and I know, things like that.

139
00:09:50.190 --> 00:09:53.600
And lastly, node so
this is telling you to not film

140
00:09:53.600 --> 00:09:57.090
other things that are like process.m
which is only available in note.

141
00:10:04.080 --> 00:10:06.630
Okay, and
this should be our airbnb config.

142
00:10:06.630 --> 00:10:10.711
We'll, have to modify it later to
accommodate more features as we add

143
00:10:10.711 --> 00:10:11.274
though.

144
00:10:11.274 --> 00:10:12.462
But, this should be enough for now.

145
00:10:19.734 --> 00:10:23.700
&gt;&gt; Brian Holt: So now we can come
back here to our command line.

146
00:10:24.850 --> 00:10:27.210
I have eslint installed here.

147
00:10:27.210 --> 00:10:33.946
But if you don't,
feel free to do yarn global add or

148
00:10:33.946 --> 00:10:38.342
npm install --global eslint.

149
00:10:41.013 --> 00:10:45.541
&gt;&gt; Brian Holt: And I'm gonna say eslint

150
00:10:45.541 --> 00:10:50.937
**/*.either js or jsx.

151
00:10:54.024 --> 00:10:56.426
&gt;&gt; Brian Holt: And I want it to be quiet.

152
00:11:04.003 --> 00:11:07.648
&gt;&gt; Brian Holt: So this is going to run the
rules that we just barely brought in and

153
00:11:07.648 --> 00:11:11.239
is running on ClientApp.jsx and
it has these two violations.

154
00:11:12.760 --> 00:11:16.210
So ReactDOM is not defined, and
React is not defined, right?

155
00:11:16.210 --> 00:11:21.353
Which makes sense,
if we go back to clientapp.jsx,

156
00:11:21.353 --> 00:11:26.611
we're referring to React,
and ReactDOM down here and

157
00:11:26.611 --> 00:11:31.642
they're being brought in
using those script tags,

158
00:11:31.642 --> 00:11:37.676
but we actually haven't
&gt;&gt; Brian Holt: We

159
00:11:37.676 --> 00:11:40.995
haven't set those apart
as global variables.

160
00:11:40.995 --> 00:11:43.810
&gt;&gt; Speaker 3: Could you install ESLint?

161
00:11:43.810 --> 00:11:50.720
&gt;&gt; Brian Holt: I did, yeah, I just,
so I did npm install --global eslink.

162
00:11:51.940 --> 00:11:52.580
&gt;&gt; Speaker 3: Okay.
&gt;&gt; Brian Holt: I think we

163
00:11:52.580 --> 00:11:53.390
missed that step.

164
00:11:53.390 --> 00:11:54.606
&gt;&gt; Speaker 3: Missed that step.

165
00:11:54.606 --> 00:11:55.281
&gt;&gt; Brian Holt: Okay.

166
00:12:08.198 --> 00:12:10.130
&gt;&gt; Brian Holt: And yeah, go ahead, Mark.

167
00:12:10.130 --> 00:12:13.390
&gt;&gt; Mark: Doug is asking if you
could elaborate on the difference

168
00:12:13.390 --> 00:12:14.891
between prettier, ESLint and Airbnb?

169
00:12:16.040 --> 00:12:16.540
&gt;&gt; Brian Holt: Sure.

170
00:12:17.960 --> 00:12:24.000
So, prettier is a formatter, so
all it does is it takes your code and

171
00:12:24.000 --> 00:12:26.990
it rearranges it into a nicely
formatted piece of code, right?

172
00:12:26.990 --> 00:12:30.810
It doesn't do any checking for style,
it doesn't do any checking for...

173
00:12:32.700 --> 00:12:33.410
Like for example,

174
00:12:33.410 --> 00:12:38.750
we have if we run that again,
this is what ESLint is checking for.

175
00:12:38.750 --> 00:12:43.698
It's checking for more things like did
you use something that's more undefined,

176
00:12:43.698 --> 00:12:46.957
are you calling functions
that don't exist, right?

177
00:12:46.957 --> 00:12:50.340
It's going to check for
more of those sorts of things.

178
00:12:53.080 --> 00:12:57.380
Whereas prettier is just taking
[INAUDIBLE] of text, reformatting it and

179
00:12:57.380 --> 00:12:58.530
then printing it back out.

180
00:12:58.530 --> 00:13:02.150
Doesn't change anything
else about your code.

181
00:13:02.150 --> 00:13:02.840
Airbnb so

182
00:13:02.840 --> 00:13:07.766
its actually eslint-config-airbnb
that's what it's called.

183
00:13:11.973 --> 00:13:16.310
&gt;&gt; Brian Holt: So this is a specific
configuration of airbnb, of eslint, right?

184
00:13:16.310 --> 00:13:17.549
That's all it is.

185
00:13:22.172 --> 00:13:23.100
&gt;&gt; Brian Holt: So, yeah,
that's a, that's the difference.

186
00:13:23.100 --> 00:13:27.137
One formats, one checks for style, and

187
00:13:27.137 --> 00:13:31.422
one is just a configuration of the ESLint.

188
00:13:31.422 --> 00:13:32.030
It's a good question.

189
00:13:34.923 --> 00:13:37.620
&gt;&gt; Brian Holt: Do you have a question?

190
00:13:40.330 --> 00:13:41.950
&gt;&gt; Brian Holt: What error are you getting?

191
00:13:41.950 --> 00:13:43.281
&gt;&gt; Speaker 4: Argument list too long.

192
00:13:45.487 --> 00:13:49.446
&gt;&gt; Speaker 5: So
I'm having one that says it's looking for

193
00:13:49.446 --> 00:13:55.810
eslint-plugin-prettier when I
try to run the eslint quiet.

194
00:13:55.810 --> 00:14:01.589
&gt;&gt; Brian Holt: Yeah,
&gt;&gt; Brian Holt: It should be in here,

195
00:14:01.589 --> 00:14:08.964
I guess more package.json,
&gt;&gt; Brian Holt: eslint-config-prettier,

196
00:14:08.964 --> 00:14:09.980
right there.

197
00:14:09.980 --> 00:14:12.490
&gt;&gt; Speaker 5: I'll try reinstalling that.

198
00:14:12.490 --> 00:14:14.520
&gt;&gt; Mark: It was plugin-prettier.

199
00:14:14.520 --> 00:14:16.078
&gt;&gt; Brian Holt: Did you miss
the plugin-prettier part?

200
00:14:20.022 --> 00:14:20.982
&gt;&gt; Brian Holt: Potentially.

201
00:14:32.671 --> 00:14:36.850
&gt;&gt; Brian Holt: So what we're gonna do now
is we're gonna take this eslint part right

202
00:14:36.850 --> 00:14:39.456
here, this command that just we just ran.

203
00:14:43.896 --> 00:14:45.379
&gt;&gt; Brian Holt: I want you to copy that.

204
00:14:48.826 --> 00:14:51.899
&gt;&gt; Brian Holt: We'll eventually fix those,
the errors that are coming

205
00:14:51.899 --> 00:14:55.570
out of it like the argument
lists is too long and all that.

206
00:14:55.570 --> 00:14:59.960
Cuz we're gonna blow away all the code
that we wrote anyway and write a new code.

207
00:14:59.960 --> 00:15:01.499
So I'm not super interested in fixing it.

208
00:15:03.960 --> 00:15:05.830
&gt;&gt; Brian Holt: But
we're gonna put the lint in here as well.

209
00:15:07.160 --> 00:15:11.060
So lint, I'm gonna do that.

210
00:15:13.730 --> 00:15:18.430
So again, this is if you're
companions don't necessarily want to

211
00:15:21.490 --> 00:15:24.100
integrate ESLints into their editor and
all that kinda stuff.

212
00:15:25.490 --> 00:15:28.510
You can put this in, and it can also
be run in your Continuous Integration.

213
00:15:28.510 --> 00:15:31.344
So if, for example,
you fail your ESLint paths,

214
00:15:31.344 --> 00:15:35.405
it will fail the build, and then they
have to go back and fix it, right?

215
00:15:39.133 --> 00:15:40.412
&gt;&gt; Brian Holt: So
now that we've done that,

216
00:15:40.412 --> 00:15:42.158
which I just put in this line right here.

217
00:15:44.483 --> 00:15:49.485
&gt;&gt; Brian Holt: Then I'm gonna say,
&gt;&gt; Brian Holt: Yarn

218
00:15:49.485 --> 00:15:54.223
lint, and it should work.

219
00:15:54.223 --> 00:15:58.388
The reason why we did quiet, just say now,

220
00:15:58.388 --> 00:16:03.260
is we want it to only show errors and
not warnings.

221
00:16:05.910 --> 00:16:07.830
Again, that's typically for
a Continuous Integration.

222
00:16:07.830 --> 00:16:09.560
You don't want to fail your build just for
warnings.

223
00:16:09.560 --> 00:16:10.660
You want to fail it just on error.

