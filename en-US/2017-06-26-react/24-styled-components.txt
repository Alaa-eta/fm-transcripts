[00:00:00]
>> Brian Holt: We're going to be talking about styled-components, which is kind of a fun thing. So, let's kind of go off on a little bit of a tangent, tell a story. So, writing CSS can be all the way from really great to really unfun, depending on what kind of CSS you're writing and what you need to do with it.

[00:00:27]
We've kind of come up with all these different tools like Sas and Less and Post CSS that have kind of been helpers to us to get this rather undecorated rule decoration language to be a little bit more programmatic. You know, allows us to do all these different kind of cool features with them.

[00:00:52]
Plus some smart people came along and said well it would be really nice if we could you know use JavaScript like a fully torrent complete language not that actually CSS technically is torrent complete. Let's not go there, but we can use JavaScript and then we can manipulate all these styles programmatically, right, and then rather than having to do things like add a classes and subtract classes we can actually just be directly manipulating the style.

[00:01:18]
All these different things, right, it's kind of opening the door for a lot of new and interesting paradigms. And things that were just kind of barely exploring. So we ended up with things like Radium, was one of the first big ones that came out, then Aphrodite was another big CSS and JS library that came out.

[00:01:41]
And some time afterwards, we landed on this one called style components. Which I think is really fun to use, for sure. And then there's two more that have kind of come out that have also kind of captured the consciousness, which are Glamor and Glamorous, which are both amazing.

[00:02:00]
In fact, I know the authors of all three of those, right? One of them has given in front of masters, Kent C Dodds. He was instrumental in Glamorous. In fact, I think he literally wrote the first version of it. So all really, really cool, awesome ideas, and I'm a fan.

[00:02:17]
However, it's become quite controversial. The reason being is that we're kind of deviating from the way that the browser has previously worked, right? Previously, you put your link tag that had a separate style sheet that was downloaded and then all things could be kind of eventually run in parallel, right?

[00:02:32]
We're very optimized for that path because the web has been doing that for 20 years? I don't know how long has CSS been around? Probably longer than that. So yeah, we ended up with the CSS and JS thing, which definitely has it's drawbacks, right? It's drawbacks, for example, stopped components that you have these long CSS strings, which I'll show you here momentarily, that get parsed twice, right?

[00:03:01]
They get parsed in Java script. They output a style tag, which then gets parsed by the CSS parser, right? You're paying double the parse cost. Which is not trivial, right? For sure it's definitely not trivial. We have deviated from the optimized path. So these are all things to keep in mind when you're kind of selecting how you want to do CSS.

[00:03:25]
However, what I'm really bullish on why I think these are paths that are worth exploring, is the idea of tying your styling to your components is very, very promising to me. My favorite thing in the entire world is deleting code, literally, like I just adore deleting code. Because when you're deleting code that means things are moving forward.

[00:03:49]
Now you went from having this many things to think about, to having this many things to think about, and that's just a huge win in my book. We're getting pretty good at deleting Java script and we're being able to detect, this file's never included, you might consider deleting this, right?

[00:04:04]
There are ways to statically analyze your Java script that's possible. However, how often do delete CSS? And most of you can be like, yeah. Pretty much never, right? Because it's really difficult to untangle about like, this is use somewhere but this is not use somewhere, right? And you have this like these crazy style sheets that just grow out to be huge, right?

[00:04:24]
I remember recently LinkedIn, cCC I think, was pushing like megabytes, right? Which is crazy. But it's totally understandable how you get there, right? Because once you write a rule, it's really difficult to know when you can pull that out again. We're getting some new tools from Chrome dev tools, which are kind of letting us see like hey, you have this CSS rule and I never saw it called.

[00:04:48]
What's still difficult about that is that might be called on another part of the website, right. Super difficult to tell where things are coming from. All this tirade to say is that if you are doing something like styled components, what styled components is, it's going to bring that styling inside the component.

[00:05:05]
So if you never include the component, you never include the CSS, right? So if you delete the component, you delete the CSS. Amazing. I'm so excited about this for that reason. And this is not the only way to achieve this for sure, right? There's things like CSS modules.

[00:05:22]
So, I talked about a little bit about them in V2 if you're interested in that. But you can do something like, import show, or public show card, let's just do assume it's in the same directory, ./showcard.css, right? We don't have this set up, right now you'd have to do some more stuff with web pack to get this to work.

[00:05:50]
But what would be really cool about this is that anywhere that you included this file. You would also pull in the CSS with it. And it's also cool because I know as soon as I delete Showcard.jsx, I know I know I can also delete Showcard.css. So CSS modules definitely one path forward.

[00:06:06]
And I would say maybe for production use right now at this very moment, a better way to go. That's a Brian Holt opinion, so take that with all the grains of salt. But I want to show you how to do styled components. We're not going to do it all day, because we'd spent a lot of time writing CSS, but we are going to do this much of it.

[00:06:28]
Okay, so I want you to go up here and say import styled from styled dash components. And we are going to create a couple kind of elements here. The first we are going to do is called wrapper equals styled.
>> Brian Holt: So this syntax is new for a lot of people.

[00:07:06]
So what this is right here, I have styled and then I have a back tick, right, and then I have another back tick back here. This is called a tagged template literal. It is valid JavaScript, this is not jsx, this is not anything but pure JavaScript right here.

[00:07:23]
In here, I can start writing some CSS, just like you normally would.
>> Brian Holt: Border two pixels solid,
>> Brian Holt: and we'll do border-radius,
>> Brian Holt: four pixels, margin bottom. 25 pixels. Padding right. 10 pixels. Overflow hidden. So you might be asking like what what is this, right? Tagged template literals are still not something widely in use.

[00:08:11]
They came with ES6, right, so this is already valid standard JavaScript. A bunch of browsers even still support it. What is happening here is we have this template literal, right? We've seen these before, these are,
>> Brian Holt: what we were just using before. So if I said like const color equals, I could totally replace this with color, right, so that would totally work here, because it's just a normal template literal.

[00:08:44]
I can do that right now, so that's what that would like like. But this styled right here is a tag on this template literal, which means it's going to be run through a function that's getting called here, right? Or from styled components. So it's going to be fed into styled components, and what this returns is a react component, right?

[00:09:03]
Sorry, it's styled.div. That's important.
>> Brian Holt: So what this styled.div is going to return to you a div that has been styled like this.
>> Brian Holt: Which is pretty cool. So now, I have this wrapper component. So I'm going to replace this right here with wrapper, and down here at the bottom.

[00:09:37]
So instead of having that encapsulating div, now I have this styled component that I've pulled in from styled components.
>> Brian Holt: Questions?
>> Brian Holt: I guess it probably bears mentioning if like what's actually happening, like where the style's coming from. A lot of people just assume it's in line style.

[00:10:08]
It is not, because that's less efficient. What it's actually going to do is it's going to create a style tag somewhere on the page. And then it's going to output this stuff into that style tag. And then it's going to give this div right here a class that matches that.

[00:10:28]
Make sense? And we can look at how that works. So we're going to do one more, because we need some style around our image too, so we're going to say.
>> Audience 1: Quick question.
>> Brian Holt: Yeah? [COUGH]
>> Audience 1: So we replaced the Dave ShowCard. What if I wanted to keep that class name within the wrapper tag?

[00:10:53]
Okay.
>> Brian Holt: Then I would just add it. Yep. I think later we actually have to do that. I don't remember why. But, yeah. For now we'll leave it off because I forgot why.
>> Audience 2: So is it Babble that's interpreting that and putting it into the CSS style tag?

[00:11:14]

>> Brian Holt: It's magic. [LAUGH] No, it's the style's components library. It has nothing to do with Babble. I don't know what actual mechanism it's outputting into the DOM. I haven't looked that closely at it. But it is taking that and now putting it into a style tag somewhere on your page.

[00:11:35]
The nice thing slash gross thing about CSS is it is universal. If you put a style tag anywhere on the page it is all global. As long as it is on there somewhere, it will work.
>> Audience 2: Could you forsee almost like a webpack tool in the future that would go through and find all of the embedded styles and?

[00:11:54]

>> Brian Holt: It's already happening. So, styles components doesn't have one it's on their road map. I actually met with the creator, like a week and a half ago in Austria. And, yeah, they're already, they just released styles components two last week. Which is what we're using today. And I think for the three year, something like that.

[00:12:16]
They actually going to do something where they separate it out into a separate style sheet which you can include and kind of get into the more optimized cow path. I believe glamorous already does it. Glamorous or glamour and or both will allow you to extract that CSS make a separate file and include it.

[00:12:35]
Which is pretty cool.
>> Audience 2: So then that replaces sass or less then at that point?
>> Brian Holt: Yep. Totally. What's cool about this too, it automatically gets run through pre fixer, auto pre fixer. Which is really nice, so you can just do like display flex, and then forget about it.

[00:12:55]

>> Brian Holt: So I do one more for our image tag which is going to be styles.img. As you may have guessed, style.tag is how you create that particular type of tag and they have everything that's valid CSS. Sorry valid html. Width: 46%; float: left; and margin-right: 10 pixels. If there are things that you like in SaaS like lighten and darken and some of those things, there's a library called Polish.

[00:13:37]
Which is a partner that goes with styled components. That will do things like lighten and darken and some of those other SASS specific features. Okay, so now we have image here. I'm just going to change this image right here from img to image. Everything else can stay exactly the same.

[00:13:59]
So now if we save that, we come back here. This looks like it's mostly working. This doesn't look as nice as it was supposed to. That's nice. That's what I was going for. Well, after that at the next break I'll figure out why those CSS went wrong. But this should look a little bit nicer.

[00:14:30]

>> Audience 3: Is there supposed to be an actual data directly under the search one.
>> Brian Holt: Damnit, you know I think I messed that up last time I used this as well. Yeah, then you will see it div here. [BLANK AUDIO] Yep, hey it looks all nice now. [LAUGH] So you just need an extra div down here.

[00:15:01]
Thanks friend.

