WEBVTT

1
00:00:00.330 --> 00:00:02.350
&gt;&gt; Brian Holt: One more thing,
76 kilobytes for

2
00:00:02.350 --> 00:00:06.790
a pretty simple app like this
still kinda sucks, right?

3
00:00:06.790 --> 00:00:08.960
We didn’t build a giant sprawling app, and

4
00:00:08.960 --> 00:00:13.090
it’s kind of unfortunately we still
are loading upwards of 70 kilobytes.

5
00:00:13.090 --> 00:00:15.368
So how can be push on
this a little bit harder?

6
00:00:15.368 --> 00:00:18.339
But really it's library
code at this point,

7
00:00:18.339 --> 00:00:21.396
we're doing the best we
can with what we have.

8
00:00:21.396 --> 00:00:24.885
So wouldn't it be smaller, if,
instead of being 45 kilobytes,

9
00:00:24.885 --> 00:00:26.548
if React was only 3 kilobytes?

10
00:00:29.422 --> 00:00:33.300
&gt;&gt; Brian Holt: Three, yeah,
I mean that would be really nice, right?

11
00:00:33.300 --> 00:00:36.340
So, what you can do is,
instead of importing React,

12
00:00:36.340 --> 00:00:38.360
you can import something called Preact.

13
00:00:39.940 --> 00:00:44.119
So Preact is a React compatible library
that does everything that React does in

14
00:00:44.119 --> 00:00:47.980
the sense that it uses the same API to
achieve the same results, except it

15
00:00:47.980 --> 00:00:52.255
does it with something called, or
it does it with 3 kilobytes instead of 45.

16
00:00:52.255 --> 00:00:57.200
Now, you might ask yourself,
that doesn't really seem to make sense.

17
00:00:58.470 --> 00:01:02.862
One, the guy the right said, Jason Miller,
is actually a wizard, so I'm told.

18
00:01:02.862 --> 00:01:07.850
And secondly, it actually tends to
be a little bit faster because he's

19
00:01:07.850 --> 00:01:13.610
not doing all the, kind of debugging
checks that React is doing for you.

20
00:01:13.610 --> 00:01:15.560
Some of that stuff is not present.

21
00:01:15.560 --> 00:01:17.190
It doesn't have a synthetic event system,

22
00:01:17.190 --> 00:01:20.189
it just uses the dom event system which
most of the time is usually enough.

23
00:01:21.440 --> 00:01:25.132
So there's trade offs to be made here of
whether or not you wanna include Preact.

24
00:01:26.380 --> 00:01:27.839
It's really cool,
it's something you should consider.

25
00:01:27.839 --> 00:01:32.420
It's something you should try, but
I'm not saying that it's a must.

26
00:01:32.420 --> 00:01:34.350
But let's go see how it works.

27
00:01:34.350 --> 00:01:37.760
We're going to not change any of our code,
and it's just gonna work.

28
00:01:37.760 --> 00:01:38.990
It's just magical.

29
00:01:40.160 --> 00:01:45.767
Okay, so inside of Resolve,
&gt;&gt; Brian Holt: We're

30
00:01:45.767 --> 00:01:47.380
gonna do something here called alias.

31
00:01:49.590 --> 00:01:53.621
&gt;&gt; Brian Holt: And what we're gonna do is
we're going to, any time that we call for

32
00:01:53.621 --> 00:01:57.539
React, we're gonna call for
a library called preact-compat.

33
00:01:59.340 --> 00:02:03.639
Same thing with react-dom,
anytime that it calls for react-dom,

34
00:02:03.639 --> 00:02:05.946
I'm gonna give it preact-compat.

35
00:02:08.987 --> 00:02:12.737
&gt;&gt; Brian Holt: What this is doing is that
anywhere I say import React from React,

36
00:02:12.737 --> 00:02:15.610
it's actually secretly
going to give it Preact.

37
00:02:17.220 --> 00:02:21.482
And preact compat has a couple of more
things built into it to make it totally

38
00:02:21.482 --> 00:02:22.642
React compatible.

39
00:02:22.642 --> 00:02:26.481
So this is actually gonna be about eight
kilobytes cuz it has that five kilobytes

40
00:02:26.481 --> 00:02:28.845
of compatibility stuff
that we're gonna need.

41
00:02:31.072 --> 00:02:32.568
&gt;&gt; Brian Holt: We might be
able to do it without compat,

42
00:02:32.568 --> 00:02:36.440
we'll try here in just a second, but
let's try with compat for just a moment.

43
00:02:36.440 --> 00:02:39.949
And same thing with react-dom,
every time that we ask for react-dom,

44
00:02:39.949 --> 00:02:43.763
it's gonna give it this preact library,
which is able to do all of this stuff.

45
00:02:46.507 --> 00:02:47.088
&gt;&gt; Brian Holt: Okay, and

46
00:02:47.088 --> 00:02:50.780
then last thing is some of it
needs to be run through Babel.

47
00:02:50.780 --> 00:02:53.331
So inside of the Babel library,
we're gonna have to give it an include.

48
00:02:57.561 --> 00:03:02.146
&gt;&gt; Brian Holt: So include,
&gt;&gt; Brian Holt: This stuff.

49
00:03:04.955 --> 00:03:09.975
&gt;&gt; Brian Holt: And
we're gonna do path.resolve js.

50
00:03:13.013 --> 00:03:18.679
&gt;&gt; Brian Holt: But the other thing
we're gonna have to run through

51
00:03:18.679 --> 00:03:23.720
is node_modules/preact.compat/src.

52
00:03:23.720 --> 00:03:28.487
Typically, you don't wanna run your
node_modules through Babel, but for

53
00:03:28.487 --> 00:03:30.770
whatever reason, Preact needs it.

54
00:03:30.770 --> 00:03:32.174
So, that's why,

55
00:03:40.699 --> 00:03:41.265
&gt;&gt; Brian Holt: Sorry, and

56
00:03:41.265 --> 00:03:44.270
this doesn't go inside of eslint,
this goes inside of Bable.

57
00:03:51.330 --> 00:03:56.740
Okay, so let's go and run our build again.

58
00:03:58.880 --> 00:04:04.430
So keep in mind,
it was 76 kilobytes before, right?

59
00:04:04.430 --> 00:04:06.122
So now, we're gonna do yarn build.

60
00:04:06.122 --> 00:04:08.808
Let's see what happens.

61
00:04:19.541 --> 00:04:21.431
&gt;&gt; Brian Holt: Sorry, we were 226, right?

62
00:04:21.431 --> 00:04:25.090
226, the un-gzipped version.

63
00:04:25.090 --> 00:04:26.460
Now we're down to 131.

64
00:04:26.460 --> 00:04:30.883
The routes should be about the same, they
shouldn't change at all because Preact is

65
00:04:30.883 --> 00:04:32.890
being included with the main bundle.

66
00:04:34.920 --> 00:04:38.730
We broke server side rendering,
well, actually we didn't.

67
00:04:38.730 --> 00:04:41.410
So our server side rendering
is gonna do React,

68
00:04:41.410 --> 00:04:44.470
and our client side is gonna do Preact.

69
00:04:44.470 --> 00:04:47.240
Kinda weird, you wouldn't typically do
that but I'm not gonna fix it right now.

70
00:04:47.240 --> 00:04:47.740
So yarn start.

71
00:04:52.529 --> 00:04:54.149
&gt;&gt; Brian Holt: We'll see
if this actually works.

72
00:04:57.430 --> 00:05:00.500
So we went from 76, right?

73
00:05:00.500 --> 00:05:03.895
Which was the g zip size down to 39.

74
00:05:03.895 --> 00:05:09.665
So we're able to save about 30
kilobytes just by switching to Preact,

75
00:05:09.665 --> 00:05:11.000
and guess what?

76
00:05:11.000 --> 00:05:12.190
Everything still works.

77
00:05:13.580 --> 00:05:15.850
Still pretty zippy, right?

78
00:05:15.850 --> 00:05:17.330
No real problems.

79
00:05:17.330 --> 00:05:20.090
For this application, we absolutely
should be using Preact, right?

80
00:05:22.440 --> 00:05:25.667
There's another library called
Inferno that achieves the same thing.

81
00:05:25.667 --> 00:05:30.320
It's a little bit bigger, but it has
some different performance strategies.

82
00:05:30.320 --> 00:05:33.180
So the answer of which one should
you use Preact or Inferno,

83
00:05:33.180 --> 00:05:35.629
I would say try both and
do the one that feels faster.

84
00:05:37.850 --> 00:05:38.850
They're both amazing.

85
00:05:38.850 --> 00:05:42.027
In fact, Facebook actually hired
the guy that does Inferno, and

86
00:05:42.027 --> 00:05:44.175
now he's working on performance on React.

87
00:05:44.175 --> 00:05:46.536
So that guy's amazing, yeah.

88
00:05:46.536 --> 00:05:49.466
&gt;&gt; Speaker 2: If Axios was
used in two separate routes,

89
00:05:49.466 --> 00:05:52.229
what would be the inclusion strategy,

90
00:05:52.229 --> 00:05:57.520
would you include it in the main bundle,
or both the routes that included?

91
00:05:58.580 --> 00:06:01.590
&gt;&gt; Brian Holt: The answer to that
question is you're never going to choose.

92
00:06:01.590 --> 00:06:06.420
You can kind of structure your code in
such a way, but it's actually web pack,

93
00:06:06.420 --> 00:06:08.860
web pack that's gonna have the final say.

94
00:06:10.660 --> 00:06:13.830
Now the question might be,
which one is it going to be included in.

95
00:06:13.830 --> 00:06:15.934
I'm not actually sure, and
I think we can kinda test real quick.

96
00:06:15.934 --> 00:06:20.959
So if I go into,
let's say landing real quick,

97
00:06:20.959 --> 00:06:24.235
and I say import axios up here.

98
00:06:27.030 --> 00:06:30.824
&gt;&gt; Brian Holt: I don't even have to
use it, but it should still be, or

99
00:06:30.824 --> 00:06:33.973
maybe I'll just do consol.log axios here.

100
00:06:36.529 --> 00:06:39.520
&gt;&gt; Brian Holt: So now,
it's required in landing as well, right?

101
00:06:41.170 --> 00:06:48.313
So if I go in here and say,
&gt;&gt; Brian Holt: Yeah,

102
00:06:48.313 --> 00:06:50.841
I'm having a bunch of promise stuff,
but that's fine.

103
00:06:53.316 --> 00:06:54.833
&gt;&gt; Brian Holt: All right,
I need to do build again.

104
00:06:58.560 --> 00:06:59.298
&gt;&gt; Brian Holt: Yarn build.

105
00:07:07.025 --> 00:07:09.310
&gt;&gt; Brian Holt: See what it comes out with?

106
00:07:09.310 --> 00:07:14.439
So my guess is it might,
I don't know what it did here.

107
00:07:20.266 --> 00:07:23.283
&gt;&gt; Brian Holt: All right, so.

108
00:07:23.283 --> 00:07:28.596
I think I know what happened here,
so Yarn start.

109
00:07:39.758 --> 00:07:40.398
&gt;&gt; Brian Holt: Network.

110
00:07:40.398 --> 00:07:44.125
All right, so I put it on landing now.

111
00:07:47.725 --> 00:07:51.635
Yeah, now I get an 11 megabyte library,
or 11 kilobyte library there.

112
00:07:53.040 --> 00:07:53.688
So that's that one.

113
00:07:53.688 --> 00:07:59.090
So that's 1.bundle.js, right, okay.

114
00:07:59.090 --> 00:08:07.410
Now, if I go to here, and I need it here,
&gt;&gt; Brian Holt: How big was that one?

115
00:08:09.740 --> 00:08:11.042
Zero was also 11 kilobytes.

116
00:08:15.913 --> 00:08:18.040
&gt;&gt; Brian Holt: Interesting.

117
00:08:18.040 --> 00:08:20.925
Okay, yeah, so
it just included axios in both bundles.

118
00:08:20.925 --> 00:08:24.144
And so now, it still leaves
the second bundle alone, so

119
00:08:24.144 --> 00:08:26.348
that's the answer to that question.

