WEBVTT

1
00:00:00.340 --> 00:00:04.660
&gt;&gt; Brian: So for us, we're gonna do
something with componentDidMount,

2
00:00:04.660 --> 00:00:09.880
except we're gonna do this on,
not on search, so get rid of that.

3
00:00:11.090 --> 00:00:14.373
We're gonna do it on details.

4
00:00:18.451 --> 00:00:22.744
&gt;&gt; Brian: So the first thing that we're
gonna have to do here as unfortunately,

5
00:00:22.744 --> 00:00:25.710
this is a function component, right?

6
00:00:25.710 --> 00:00:27.701
That's just a function
that returns mark up.

7
00:00:27.701 --> 00:00:31.560
We're gonna have to convert this to an ES6
class which is something that you'll find

8
00:00:31.560 --> 00:00:34.040
yourself kind of going back and
forth with sometimes.

9
00:00:35.410 --> 00:00:39.326
But that's normal and healthy.

10
00:00:39.326 --> 00:00:46.540
So I'm gonna say class
details extends Component.

11
00:00:47.950 --> 00:00:49.410
And bring in Component up here.

12
00:00:54.871 --> 00:00:55.661
&gt;&gt; Brian: Okay.

13
00:01:00.482 --> 00:01:03.699
&gt;&gt; Brian: Then we're gonna turn this
into our render method right here.

14
00:01:09.282 --> 00:01:10.611
&gt;&gt; Brian: Then down here,

15
00:01:20.237 --> 00:01:22.829
&gt;&gt; Brian: And
then we need to turn the props up here.

16
00:01:22.829 --> 00:01:28.119
In fact, let me just get rid of that,
and say props.

17
00:01:28.119 --> 00:01:30.082
Show is going to be a show.

18
00:01:44.493 --> 00:01:48.378
&gt;&gt; Brian: And everywhere that we say
props.show which I think is that just one

19
00:01:48.378 --> 00:01:49.370
place, right?

20
00:01:49.370 --> 00:01:52.227
We're just gonna say this.props.show,

21
00:01:52.227 --> 00:01:57.412
because now it's gonna be on the context
and not being passed in from the props.

22
00:02:03.282 --> 00:02:08.293
&gt;&gt; Brian: So you're gonna notice up
here that class is complaining is like,

23
00:02:08.293 --> 00:02:11.692
hey, this should be a stateless component,

24
00:02:11.692 --> 00:02:17.073
that's what the Airbnb config does for
you, but it's normal, okay?

25
00:02:19.239 --> 00:02:23.484
&gt;&gt; Brian: So what we're gonna do is we're
gonna have this kind of request something

26
00:02:23.484 --> 00:02:24.583
from our fake API.

27
00:02:24.583 --> 00:02:29.880
This used to use the Open Movie Database
which unfortunately went closed.

28
00:02:29.880 --> 00:02:34.260
So it's no longer so open,
[LAUGH] understandably so.

29
00:02:34.260 --> 00:02:36.890
So I mocked out a fake API for you.

30
00:02:37.910 --> 00:02:42.783
So if you go over to your terminal
really quick, open a new window.

31
00:02:48.661 --> 00:02:52.737
&gt;&gt; Brian: I'm gonna go in to
tolks/fem/complete mess, so

32
00:02:52.737 --> 00:02:55.784
I'm not gonna close by depth server.

33
00:02:55.784 --> 00:02:57.000
I'm gonna leave that open.

34
00:02:58.000 --> 00:03:03.324
But this one I'm gonna run yarn API,
which I already included for you.

35
00:03:03.324 --> 00:03:06.100
And you're gonna get something
that looks like this.

36
00:03:06.100 --> 00:03:08.330
Starting server import 3000, and

37
00:03:08.330 --> 00:03:11.690
what this is going to do is it's basically
going to make a fake API for you.

38
00:03:11.690 --> 00:03:16.480
That's gonna give you back ratings for
your TV shows, it's random, right,

39
00:03:16.480 --> 00:03:18.743
I did not rate these myself, right.

40
00:03:18.743 --> 00:03:20.909
It's just randomly generated
every single time.

41
00:03:28.535 --> 00:03:29.035
&gt;&gt; Brian: Cool?

42
00:03:35.190 --> 00:03:37.470
So now, that this is an ES6 component,

43
00:03:37.470 --> 00:03:43.150
let's go ahead and, yeah,
start requesting data.

44
00:03:45.832 --> 00:03:48.500
So by virtue of the fact that we

45
00:03:48.500 --> 00:03:53.330
only make the API request after
the item has amounted to the dom.

46
00:03:53.330 --> 00:03:56.790
We have this entrance state that
we're going to be loading, right?

47
00:03:56.790 --> 00:03:59.920
Because it's going to load
the first time without that rating.

48
00:03:59.920 --> 00:04:03.740
So that means that we need to load with
the loading state and then eventually,

49
00:04:03.740 --> 00:04:06.194
render something else,
that makes sense, right?

50
00:04:06.194 --> 00:04:10.770
This is good, this is why you don't make
API request in component will mount,

51
00:04:10.770 --> 00:04:11.940
because you don't want to wait for

52
00:04:11.940 --> 00:04:15.194
your API request to finish
before your render something.

53
00:04:15.194 --> 00:04:18.430
You wanna render first, and
then request something, and

54
00:04:18.430 --> 00:04:20.830
then render again once the data is back.

55
00:04:20.830 --> 00:04:23.670
That's why you do all these
in component in mount.

56
00:04:23.670 --> 00:04:31.994
So let's create a new class in
a new page called Spinner.jsx.

57
00:04:31.994 --> 00:04:36.410
And this will be a reusable component
that we can use anytime we're loading.

58
00:04:38.000 --> 00:04:42.622
So let's opt into flow,
we're going to import React from react.

59
00:04:45.075 --> 00:04:51.185
&gt;&gt; Brian: And
we're going to import styled,

60
00:04:51.185 --> 00:04:59.350
and { keyframes } from styled-components.

61
00:04:59.350 --> 00:05:03.590
So I'm gonna show you another fun
capability with styled-components.

62
00:05:03.590 --> 00:05:05.370
We can still do keyframe
animations with them.

63
00:05:06.900 --> 00:05:12.522
So we're gonna do is we're gonna
make a spin keyframe animation.

64
00:05:12.522 --> 00:05:18.411
That's gonna be equal to keyframes
which is another tags template literal.

65
00:05:18.411 --> 00:05:24.540
And I'm gonna go from { transform,

66
00:05:26.780 --> 00:05:31.036
&gt;&gt; Brian: Rotate 0 degrees,

67
00:05:36.444 --> 00:05:43.180
&gt;&gt; Brian: To transform rotate 360 degrees.

68
00:05:45.600 --> 00:05:47.581
Actually, I'm pretty sure now
that I've written this out.

69
00:05:47.581 --> 00:05:49.320
I'm pretty sure you just need to, right?

70
00:05:49.320 --> 00:05:51.120
And then it infers the from?

71
00:05:51.120 --> 00:05:54.165
Whatever the case, we're just gonna leave
it, cuz that's what it is in my notes.

72
00:05:56.490 --> 00:06:02.613
&gt;&gt; Brian: Okay, then we're gonna
do const Image = styled.img.

73
00:06:06.154 --> 00:06:10.570
&gt;&gt; Brian: And we're gonna say, animation.

74
00:06:10.570 --> 00:06:13.205
And then we're gonna put in spin.

75
00:06:15.786 --> 00:06:22.681
&gt;&gt; Brian: 4 seconds infinite linear,

76
00:06:22.681 --> 00:06:28.202
and background image.

77
00:06:28.202 --> 00:06:29.113
Url

78
00:06:29.113 --> 00:06:38.520
(/public/image/loading.png).

79
00:06:39.743 --> 00:06:45.181
And then const Spinner equals an anonymous

80
00:06:45.181 --> 00:06:49.115
function that returns Image.

81
00:06:54.289 --> 00:06:55.825
&gt;&gt; Brian: I guess you
don't need that style.

82
00:06:55.825 --> 00:06:57.457
You don't need that background image.

83
00:06:57.457 --> 00:06:59.238
Okay, get rid of that.

84
00:07:03.697 --> 00:07:10.180
&gt;&gt; Brian: /public/image/loading.png.

85
00:07:11.640 --> 00:07:15.861
And alt = loading indicator,

86
00:07:15.861 --> 00:07:20.576
and then export default Spinner.

87
00:07:29.237 --> 00:07:32.000
&gt;&gt; Brian: Okay, so
we created a new key frame up here.

88
00:07:32.000 --> 00:07:35.734
And what's going to be stored in this key
frame is actually going to be the name,

89
00:07:35.734 --> 00:07:37.536
the generated name of that keyframe.

90
00:07:37.536 --> 00:07:41.907
And then we're gonna be outputting
that here in the animation for

91
00:07:41.907 --> 00:07:44.140
the CSS in the image tag, right.

92
00:07:47.310 --> 00:07:51.400
So now, we have this dumb components,
this presentational component that we can

93
00:07:51.400 --> 00:07:53.790
just render anywhere that we want
a nice little spinning pinwheel.

94
00:07:55.230 --> 00:07:55.950
Really nice for loading.

95
00:07:57.900 --> 00:08:00.478
Now, we have this spinner component
that we can use anywhere that we're

96
00:08:00.478 --> 00:08:01.202
loading anything.

97
00:08:01.202 --> 00:08:03.730
So we'll actually end of using
it in a couple of places.

98
00:08:03.730 --> 00:08:07.020
Hence, why we made its own component, but

99
00:08:07.020 --> 00:08:11.060
this is kind of the gist of how you key
frame animations with styled components,

100
00:08:11.060 --> 00:08:15.130
which I think is pretty
slick in my opinion, okay.

101
00:08:15.130 --> 00:08:17.452
So now,
we're going to use this inside of details.

102
00:08:20.193 --> 00:08:25.825
&gt;&gt; Brian: So we're going to import Spinner

103
00:08:25.825 --> 00:08:30.455
from ./Spinner, okay.

104
00:08:34.615 --> 00:08:37.331
&gt;&gt; Brian: And the other thing we're
gonna import up here at the top is

105
00:08:37.331 --> 00:08:38.512
a library called axios.

106
00:08:38.512 --> 00:08:44.510
Import axios from axios,
this is just an ajax client,

107
00:08:44.510 --> 00:08:48.190
I'm not it doesn't bother me
if you don't like this one or

108
00:08:48.190 --> 00:08:50.690
want to use a different
sort of ajax client.

109
00:08:50.690 --> 00:08:54.621
Or if you just wanna write using
the fetch API that all works for me.

110
00:08:54.621 --> 00:08:57.359
I'm just gonna use axios,
because it's really easy and

111
00:08:57.359 --> 00:08:59.367
it's one that I've used for a long time.

112
00:08:59.367 --> 00:09:01.952
It's super reliable,
it's also very easy to test with,

113
00:09:01.952 --> 00:09:04.609
which I will show you later how
to test these ajax requests.

114
00:09:06.520 --> 00:09:10.499
So suffice to say, that's where
we're gonna use axios for now.

115
00:09:13.283 --> 00:09:16.195
&gt;&gt; Brian: Okay, down here in details.

116
00:09:20.579 --> 00:09:24.290
&gt;&gt; Brian: Had a prop type inside of show,
yeah.

117
00:09:24.290 --> 00:09:26.910
Okay, so
go back to your types.js real quick.

118
00:09:26.910 --> 00:09:28.700
And I already have it, so
you don't need to do that.

119
00:09:30.040 --> 00:09:33.640
No problem,
we're gonna go to details, cool.

120
00:09:35.480 --> 00:09:38.370
And then we're gonna have some
state up here at the top.

121
00:09:38.370 --> 00:09:42.835
So state =,
&gt;&gt; Brian: apiData,

122
00:09:42.835 --> 00:09:44.300
is that what it's stored in?

123
00:09:44.300 --> 00:09:45.571
Yep, apiData.

124
00:09:48.077 --> 00:09:52.248
&gt;&gt; Brian: And its initial state
is going to be an imdbRating.

125
00:09:58.040 --> 00:09:58.861
&gt;&gt; Brian: Right?

126
00:10:00.995 --> 00:10:04.081
&gt;&gt; Brian: So we're gonna request all of
this information back from the API and

127
00:10:04.081 --> 00:10:07.164
one of the request, or one of
the answers that's going to get back to

128
00:10:07.164 --> 00:10:09.350
us is this rating that
we're going to display.

129
00:10:11.910 --> 00:10:16.494
&gt;&gt; Brian: Okay, and then we're
going to make a componentDidMount,

130
00:10:16.494 --> 00:10:20.904
I think it goes between these two,
componentDidMount.

131
00:10:20.904 --> 00:10:25.448
And what we're gonna do is
we're gonna do axios.get,

132
00:10:29.746 --> 00:10:35.867
&gt;&gt; Brian: http://localhost:3000/$

133
00:10:35.867 --> 00:10:41.985
this.props.show.imdbID, okay,

134
00:10:41.985 --> 00:10:48.839
this is going to get us
the data from the API,

135
00:10:48.839 --> 00:10:54.398
it's going give us back a promise so

136
00:10:54.398 --> 00:10:58.869
we're going to say .then.

137
00:11:01.663 --> 00:11:04.839
&gt;&gt; Brian: And we're going to get
a response back from the API, so

138
00:11:04.839 --> 00:11:06.783
the response is going to look like

139
00:11:11.775 --> 00:11:20.117
&gt;&gt; Brian: data: { rating: string }.

140
00:11:40.405 --> 00:11:41.555
&gt;&gt; Brian: So, this is just typing for

141
00:11:41.555 --> 00:11:44.210
the data that we know we're gonna
be getting back from the API.

142
00:11:49.150 --> 00:11:54.480
And coming here, then we're gonna say,

143
00:11:54.480 --> 00:11:57.375
this.setState, and

144
00:11:57.375 --> 00:12:03.326
that's gonna be apiData: response.data.

145
00:12:11.785 --> 00:12:14.697
&gt;&gt; Brian: And I call this imdb, so
let's just call this rating up here.

146
00:12:21.619 --> 00:12:23.870
&gt;&gt; Brian: Okay, so just to recap here.

147
00:12:32.457 --> 00:12:35.538
&gt;&gt; Brian: So the first thing it's gonna
do is it's gonna do a .get on that

148
00:12:35.538 --> 00:12:38.570
local host 3000,
providing your API server is running.

149
00:12:38.570 --> 00:12:40.415
So make sure your API server is running.

150
00:12:42.485 --> 00:12:45.138
&gt;&gt; Brian: And it's going to go out and
get from the imdbID,

151
00:12:45.138 --> 00:12:49.542
based on the imdbID, then it's going to
give you back this response object which

152
00:12:49.542 --> 00:12:53.638
is gonna give you back data which
is something that axios does.

153
00:12:53.638 --> 00:12:57.146
Then it's gonna do rating and
that's gonna be a string and

154
00:12:57.146 --> 00:12:59.580
we're going to use that to set state, so

155
00:12:59.580 --> 00:13:03.821
that API data is gonna be replaced
by whatever comes back from the API.

156
00:13:03.821 --> 00:13:07.461
&gt;&gt; Speaker 2: There's just a comment in
chat about why would you use axios versus

157
00:13:07.461 --> 00:13:11.947
fetch, and the fact is that you don't have
to called.json and all of that stuff,

158
00:13:11.947 --> 00:13:14.870
it just sends all of
the data as you'd expect.

159
00:13:14.870 --> 00:13:21.366
And then also error handling, you don't
have to check if its response code is 200.

160
00:13:21.366 --> 00:13:24.491
You just do a .catch and grab any errors.

161
00:13:24.491 --> 00:13:27.788
&gt;&gt; Brian: It's a little bit more baked
than just, it does a lot more for

162
00:13:27.788 --> 00:13:29.690
you than fetch does.

163
00:13:29.690 --> 00:13:31.080
In particular for this workshop,

164
00:13:31.080 --> 00:13:35.480
the reason why I chose it is
that axios is very easy to test.

165
00:13:35.480 --> 00:13:37.618
And so, we're gonna be using
that capability later.

166
00:13:37.618 --> 00:13:40.380
Whereas with fetch, you have to do
a little bit more mocking on your part.

167
00:13:41.600 --> 00:13:46.346
So, that's why I chose axios and again,
I've been using axios for years,

168
00:13:46.346 --> 00:13:47.321
at this point.

169
00:13:51.695 --> 00:13:52.484
&gt;&gt; Brian: Cool.

170
00:13:57.455 --> 00:14:03.076
&gt;&gt; Brian: So now,
we have that coming back from the API.

171
00:14:03.076 --> 00:14:09.289
So what we're gonna do
here is underneath here,

172
00:14:09.289 --> 00:14:14.446
I'm gonna say, let ratingComponent.

173
00:14:14.446 --> 00:14:21.660
And then we're gonna say if
(this.state.apiData.rating).

174
00:14:21.660 --> 00:14:26.286
So if we have gotten
this back from the APIi,

175
00:14:26.286 --> 00:14:33.539
then ratingComponent is going to be
equal to an h3 with that rating,

176
00:14:33.539 --> 00:14:39.545
so it's gonna be
{this.state.apiData.rating},

177
00:14:39.545 --> 00:14:45.698
else ratingComponent is going
to be equal to our Spinner.

178
00:14:49.538 --> 00:14:51.590
&gt;&gt; Brian: So again, coming back to,

179
00:14:51.590 --> 00:14:56.248
you wanna think about your
components in snapshots, right?

180
00:14:56.248 --> 00:15:01.330
So given the snapshot that
the API did has come back.

181
00:15:01.330 --> 00:15:03.230
It's gonna be equal to this h3 right here.

182
00:15:03.230 --> 00:15:06.310
Given the snapshot that has
not come back from the API.

183
00:15:06.310 --> 00:15:08.821
It's gonna be this loading state, right?

184
00:15:12.831 --> 00:15:16.151
&gt;&gt; Brian: Okay, and then what we're gonna
do is we're going to put that between year

185
00:15:16.151 --> 00:15:16.740
and poster.

186
00:15:18.780 --> 00:15:23.455
So right here and we're gonna

187
00:15:23.455 --> 00:15:28.320
say ratingComponent, cool?

188
00:15:31.040 --> 00:15:38.533
So if we come back here,
let me go to one of our details page.

189
00:15:38.533 --> 00:15:41.635
Notice, we get this nice little spinner
right there and it eventually resolves and

190
00:15:41.635 --> 00:15:42.530
gives us back a rating.

191
00:15:45.570 --> 00:15:46.910
So again, what that looks like.

192
00:15:51.198 --> 00:15:53.153
&gt;&gt; Brian: I have it introduced
in artificial delay,

193
00:15:53.153 --> 00:15:55.080
cuz it was coming back too fast.

194
00:15:55.080 --> 00:15:58.117
So it's gonna come back between
like zero and five seconds, so

195
00:15:58.117 --> 00:15:59.445
that's why it seems slow.

196
00:16:01.621 --> 00:16:03.108
&gt;&gt; Brian: If you look that code

197
00:16:03.108 --> 00:16:07.345
ratings API,
&gt;&gt; Brian: See,

198
00:16:07.345 --> 00:16:12.032
it's just generating a random
timeout there for five seconds.

199
00:16:12.032 --> 00:16:15.573
So that's why it seems slow,
it's because it's intentionally slow.

200
00:16:19.829 --> 00:16:20.770
&gt;&gt; Brian: Any questions?

201
00:16:20.770 --> 00:16:21.370
Yeah.

202
00:16:21.370 --> 00:16:23.520
&gt;&gt; Speaker 3: Yeah,
just a general question about components.

203
00:16:23.520 --> 00:16:26.560
So in that if else,
I just wanna make sure I understand.

204
00:16:26.560 --> 00:16:31.610
So we could capitalize the rating
component, and then call it

205
00:16:31.610 --> 00:16:36.650
as in the or as-
&gt;&gt; Brian: So if you wanted to do that,

206
00:16:36.650 --> 00:16:40.790
what you'd have to do is,
RatingComponent like this, right?

207
00:16:40.790 --> 00:16:42.140
Then you would to make it a function.

208
00:16:44.632 --> 00:16:45.701
&gt;&gt; Speaker 3: Okay.

209
00:16:45.701 --> 00:16:49.870
&gt;&gt; Brian: And then here, you would say
rating component like that, right?

210
00:16:49.870 --> 00:16:53.498
Same thing for the one up there,
that's a bad idea, don't do that.

211
00:16:53.498 --> 00:16:58.314
[LAUGH] The reason why is we'd be creating
a component, you'd be creating components,

212
00:16:58.314 --> 00:17:02.039
you'd be creating functions rather
on every render which is slow.

213
00:17:02.039 --> 00:17:05.459
Right, that's why we don't do dot buying
before inside of the render body,

214
00:17:05.459 --> 00:17:08.616
you don't wanna be generating and
destroying things on every render,

215
00:17:08.616 --> 00:17:11.942
cuz that's a lot of garbage collection
that you don't want to go through.

216
00:17:11.942 --> 00:17:13.600
Does it make sense?

217
00:17:13.600 --> 00:17:15.127
Cool, that's a good question.

218
00:17:22.999 --> 00:17:23.991
&gt;&gt; Brian: Other questions?

219
00:17:28.620 --> 00:17:33.560
&gt;&gt; Brian: All right, so I don't know,
I think this is pretty amazing.

220
00:17:35.630 --> 00:17:41.186
It just makes doing things like,
requesting stuff from APIs and

221
00:17:41.186 --> 00:17:42.590
asynchronous data.

222
00:17:42.590 --> 00:17:44.293
Like thinking of things
in terms of snapshots,

223
00:17:44.293 --> 00:17:46.880
it's just really makes sense for
me, right.

224
00:17:46.880 --> 00:17:48.920
Given this data,
it looks like this, right?

225
00:17:48.920 --> 00:17:51.430
Before it gets stuff from
the API it looks like this,

226
00:17:51.430 --> 00:17:53.670
after it gets stuff from
the API it looks like this.

227
00:17:53.670 --> 00:17:57.740
There's no imperative like grab this
thing and change this into HTML and

228
00:17:57.740 --> 00:18:00.010
then make sure later that it has changed.

229
00:18:00.010 --> 00:18:03.140
I don't know, it's crazy, having
components just keep track of their state

230
00:18:03.140 --> 00:18:06.380
and then just referencing the state
makes a lot of sense to me, personally.

