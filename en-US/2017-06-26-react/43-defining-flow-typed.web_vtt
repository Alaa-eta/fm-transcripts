WEBVTT

1
00:00:00.400 --> 00:00:02.690
&gt;&gt; Brian Holt: So
now we have showCard being typed.

2
00:00:03.740 --> 00:00:06.593
So let's go do client app real quick.

3
00:00:06.593 --> 00:00:10.503
At the top do @flow.

4
00:00:10.503 --> 00:00:14.546
The first thing it's gonna say is, I don't
know what module is like many of you did.

5
00:00:14.546 --> 00:00:18.850
[LAUGH] And that's because it
has no definition for that.

6
00:00:18.850 --> 00:00:21.709
So I'm gonna go show you how to
create your own definitions.

7
00:00:25.769 --> 00:00:27.950
&gt;&gt; Brian Holt: So
inside of the flow type directory,

8
00:00:27.950 --> 00:00:30.345
I create a new file called types dot.js.

9
00:00:34.863 --> 00:00:39.725
&gt;&gt; Brian Holt: This is gonna be a place
where you create types that the rest

10
00:00:39.725 --> 00:00:42.420
of your project can use.

11
00:00:42.420 --> 00:00:45.230
So if you wanted to use module in multiple
places, this is where you would do it.

12
00:00:47.250 --> 00:00:52.670
So we're gonna do @flow up here and
there's a couple ways of doing this.

13
00:00:52.670 --> 00:00:56.374
But we're just gonna say for

14
00:00:56.374 --> 00:01:00.699
now, declare var module, hot.

15
00:01:03.230 --> 00:01:09.042
And it's gonna be accept path, string,

16
00:01:09.042 --> 00:01:14.190
and callback which is going to return

17
00:01:14.190 --> 00:01:18.850
void and it itself returns void.

18
00:01:22.379 --> 00:01:25.220
&gt;&gt; Brian Holt: So what we did
here is we declared a new type.

19
00:01:25.220 --> 00:01:28.450
So this is basically acknowledging
this is going to be a global variable.

20
00:01:28.450 --> 00:01:30.180
This is how you interact with it, right?

21
00:01:31.320 --> 00:01:36.010
So it’s going to be an object,
it’s gonna have a method called, or

22
00:01:36.010 --> 00:01:38.370
it’s gonna have an object called hot, and

23
00:01:38.370 --> 00:01:41.310
the only method that we acknowledge
on it is called accept.

24
00:01:41.310 --> 00:01:45.920
And it's going to take a path which
is a string, and it's gonna take

25
00:01:45.920 --> 00:01:50.050
a function that returns void which means
it's not going to return anything.

26
00:01:51.120 --> 00:01:56.300
And then accept,
the function itself, returns void.

27
00:01:59.315 --> 00:02:00.435
&gt;&gt; Brian Holt: Any questions about that?

28
00:02:06.320 --> 00:02:10.241
&gt;&gt; Brian Holt: So now, we can use module
.hot.accept anywhere in our code, and

29
00:02:10.241 --> 00:02:13.610
flow is gonna know about the types
that go in and out of it.

30
00:02:15.400 --> 00:02:16.540
There's more to module.

31
00:02:16.540 --> 00:02:19.490
I don't remember what's in it, but if you
needed to use more things you would just

32
00:02:19.490 --> 00:02:20.900
come in and
annotate this a little bit more.

33
00:02:23.580 --> 00:02:27.235
So now if we go back to clientapp.jsx,

34
00:02:27.235 --> 00:02:32.587
hopefully,
&gt;&gt; Brian Holt: We'll

35
00:02:32.587 --> 00:02:34.390
see if flow has figured it out.

36
00:02:38.293 --> 00:02:39.450
&gt;&gt; Brian Holt: Yeah, it has.

37
00:02:44.175 --> 00:02:46.080
&gt;&gt; Brian Holt: Is that a lint error?

38
00:02:46.080 --> 00:02:48.070
Sometimes it's tough to
tell the difference.

39
00:02:49.440 --> 00:02:50.290
No, it's cool with it.

40
00:02:54.559 --> 00:02:57.120
&gt;&gt; Brian Holt: Yep, okay, it's fine.

41
00:02:57.120 --> 00:03:00.130
Again, sometimes flow type can be
a little bit slow to update with sublime.

42
00:03:03.150 --> 00:03:05.120
Any questions about type definitions?

43
00:03:06.590 --> 00:03:10.831
A lot of times I just put all the types in
one file cuz I usually don't have enough

44
00:03:10.831 --> 00:03:13.786
types to warrant making
a separate file for each type,

45
00:03:13.786 --> 00:03:16.047
but that kinda falls to your discretion.

46
00:03:16.047 --> 00:03:21.609
I usually only end up typing five

47
00:03:21.609 --> 00:03:27.863
to ten objects, and that's fine.

48
00:03:27.863 --> 00:03:29.469
&gt;&gt; Brian Holt: Okay, let's go to landing.

49
00:03:33.325 --> 00:03:39.430
&gt;&gt; Brian Holt: And
we're gonna do @flow, and guess what?

50
00:03:39.430 --> 00:03:40.230
No changes.

51
00:03:40.230 --> 00:03:43.380
It just hopped into the type checker and
it's already good to go.

52
00:03:44.620 --> 00:03:49.031
So landing's all checked and good to go.

53
00:03:49.031 --> 00:03:51.320
&gt;&gt; Brian Holt: And
what else do we need to do?

54
00:03:51.320 --> 00:03:52.030
Js here.

55
00:03:55.993 --> 00:03:57.170
&gt;&gt; Brian Holt: We did search.

56
00:03:57.170 --> 00:03:58.200
We did landing.

57
00:03:58.200 --> 00:03:59.320
Client app, app.

58
00:03:59.320 --> 00:04:01.470
App needs to be typed as well.

59
00:04:01.470 --> 00:04:07.031
So we're gonna do /flow up here and
that should be good as well.

60
00:04:12.787 --> 00:04:17.571
&gt;&gt; Brian Holt: So something that's gonna
be really cool that flow just kinda

61
00:04:17.571 --> 00:04:22.641
gets you out of the box,
&gt;&gt; Brian Holt: If I start saying something

62
00:04:22.641 --> 00:04:26.810
like, hey I'm gonna pass
in somethingNotReal

63
00:04:34.769 --> 00:04:37.550
&gt;&gt; Brian Holt: Is it this way to do?

64
00:04:37.550 --> 00:04:38.110
Yarn flow.

65
00:04:38.110 --> 00:04:41.660
Nope, not that, the other way around.

66
00:04:41.660 --> 00:04:50.669
So you can pass in things
&gt;&gt; Brian Holt: But yeah,

67
00:04:50.669 --> 00:04:56.652
here in props I could say props.thing and
it's gonna give me something like,

68
00:04:56.652 --> 00:05:02.380
hey, you don't have any props for this,
so I'm not gonna let you do this.

69
00:05:02.380 --> 00:05:07.350
So it's gonna be constantly checking
your React, your props, and your state.

70
00:05:07.350 --> 00:05:09.830
Like a good way of also visualizing this,

71
00:05:11.510 --> 00:05:13.870
something that would not
otherwise be caught.

72
00:05:13.870 --> 00:05:15.330
So if I go to search.jsx.

73
00:05:15.330 --> 00:05:19.260
I have searchTerm right here,
but if I try and

74
00:05:19.260 --> 00:05:25.585
say this.state.searchTerm.

75
00:05:28.734 --> 00:05:31.078
&gt;&gt; Brian Holt: What's something
that's not on the stream,

76
00:05:31.078 --> 00:05:33.489
well let's say this was five for
just a second.

77
00:05:33.489 --> 00:05:35.856
Say it was a number and try and

78
00:05:35.856 --> 00:05:40.735
say .toUpperCase
&gt;&gt; Brian Holt: It's gonna say,

79
00:05:40.735 --> 00:05:43.521
hey you said you're calling toUpperCase,

80
00:05:43.521 --> 00:05:48.320
that's a string thing not a number thing,
so that's gonna fail.

81
00:05:48.320 --> 00:05:50.170
And so
your flow typing's gonna start failing.

82
00:05:50.170 --> 00:05:53.620
The other thing is notice right
here where it says this.setState,

83
00:05:53.620 --> 00:05:55.660
it's trying to set that
state to be a string.

84
00:05:55.660 --> 00:05:59.804
It's gonna say you're calling setstate
with a string here, this is a number.

85
00:05:59.804 --> 00:06:03.220
You're gonna mess things up
if you give this a string.

86
00:06:04.730 --> 00:06:05.980
How does it know that?

87
00:06:05.980 --> 00:06:09.900
Well by doing state like this,
it's gonna type your state

88
00:06:09.900 --> 00:06:15.590
implicitly based on the initial strings or
the initial things that are given there.

89
00:06:15.590 --> 00:06:18.120
So I didn't tell it that
searchTerm was a number,

90
00:06:18.120 --> 00:06:20.760
it just knows that which is pretty cool.

91
00:06:23.080 --> 00:06:24.880
So now I change this back to a string and

92
00:06:24.880 --> 00:06:26.980
everything's fine because all
of that works with strings.

93
00:06:26.980 --> 00:06:30.083
Does it make sense?

94
00:06:30.083 --> 00:06:37.331
So this is gonna catch issues
that you wouldn't otherwise see.

95
00:06:37.331 --> 00:06:40.713
&gt;&gt; Brian Holt: So again, this is why I
say like, it is work to get flow and

96
00:06:40.713 --> 00:06:45.240
TypeScript up and working, but
I guarantee you it's gonna save you bucks.

97
00:06:46.250 --> 00:06:48.539
This just eliminates
an entire class of bucks.

98
00:06:50.040 --> 00:06:56.627
Even if I said,
this.state.searchTerm.toUppercase,

99
00:06:56.627 --> 00:07:00.530
and I did a lowercase like that.

100
00:07:00.530 --> 00:07:02.070
This would totally fly, right?

101
00:07:02.070 --> 00:07:04.817
In the sense of,
this is gonna make a pass lint,

102
00:07:04.817 --> 00:07:08.510
this is gonna make a pass of
a bunch of different things.

103
00:07:08.510 --> 00:07:11.718
But it's gonna get caught a lot
sooner by flow types, it's like, hey,

104
00:07:11.718 --> 00:07:13.040
this isn't a real function.

105
00:07:13.040 --> 00:07:18.380
So this kinda fat finger or
not remembering the C here is capitalized,

106
00:07:18.380 --> 00:07:21.280
all that class of problems get's
eliminated by using a type checker.

107
00:07:22.960 --> 00:07:24.540
So it's pretty awesome.

108
00:07:25.760 --> 00:07:26.260
I'm a fan.

109
00:07:29.683 --> 00:07:30.750
&gt;&gt; Brian Holt: Yeah?

110
00:07:30.750 --> 00:07:32.950
&gt;&gt; Audience 1: Have you
used it in production?

111
00:07:32.950 --> 00:07:34.156
&gt;&gt; Brian Holt: Yeah, Netflix uses flow.

112
00:07:34.156 --> 00:07:40.430
I would say, and they use type script as
well, it depends on which team you're on.

113
00:07:40.430 --> 00:07:45.740
But I know Facebook has over
50% coverage on their flow for

114
00:07:45.740 --> 00:07:47.589
their entire code base which is crazy.

115
00:07:50.365 --> 00:07:53.090
&gt;&gt; Brian Holt: I would say Netflix's
code coverage was lower than that.

116
00:07:54.690 --> 00:07:58.567
Where we found great success is that when
we would export components to other teams,

117
00:07:58.567 --> 00:08:01.039
we would just ship along
with them some flow typings.

118
00:08:01.039 --> 00:08:03.260
And so when they were using and
consuming those,

119
00:08:03.260 --> 00:08:07.240
they were going to be assured that
this is how it's supposed to work.

120
00:08:07.240 --> 00:08:07.870
Yeah?

121
00:08:07.870 --> 00:08:12.352
&gt;&gt; Audience 1: Greg's asking if
all the code from flowTypes.js

122
00:08:12.352 --> 00:08:14.385
should be checked in.

123
00:08:14.385 --> 00:08:16.317
&gt;&gt; Brian Holt: Yes, yep, it should be.

124
00:08:21.675 --> 00:08:24.346
&gt;&gt; Brian Holt: I think that's
the recommendation off the repo.

125
00:08:24.346 --> 00:08:26.720
But I mean, you can use flow
type to install it as well so

126
00:08:26.720 --> 00:08:27.930
you can probably ignore it as well.

127
00:08:32.453 --> 00:08:34.358
&gt;&gt; Audience 1: And the NPM folder too?

128
00:08:34.358 --> 00:08:39.030
&gt;&gt; Brian Holt: I think so,
I think that's what they recommend cuz

129
00:08:39.030 --> 00:08:44.500
as those files get updated,
even if your code is

130
00:08:44.500 --> 00:08:49.642
basing itself on broken types, or
not broken types just maybe outdate types,

131
00:08:49.642 --> 00:08:54.240
you wanna be explicit that you
want to opt into those upgrades.

132
00:08:54.240 --> 00:08:58.092
It's not like MPM where you're assured
that if you pull in this version you're

133
00:08:58.092 --> 00:09:00.230
getting this version 100% of the time.

134
00:09:00.230 --> 00:09:04.320
It's not so robust cuz it really is
just a repository full of types.

135
00:09:07.017 --> 00:09:09.010
&gt;&gt; Brian Holt: So I believe
the recommendation from the flow team

136
00:09:09.010 --> 00:09:11.340
is to check in your types, and
then update them yourself.

