WEBVTT

1
00:00:00.330 --> 00:00:03.490
&gt;&gt; Brian Holt: What I want you to do, is
the first thing that we're gonna have to

2
00:00:03.490 --> 00:00:05.750
do is we're gonna have to create
a component called an a synch route.

3
00:00:07.220 --> 00:00:11.040
So create a new component inside of js.

4
00:00:12.120 --> 00:00:13.040
And don't get me wrong,

5
00:00:13.040 --> 00:00:16.920
other people have written libraries
that will do this for you.

6
00:00:16.920 --> 00:00:19.800
But I wanted to show you that
there's nothing scary here,

7
00:00:19.800 --> 00:00:20.980
you can do this all yourself.

8
00:00:22.040 --> 00:00:25.480
So create a component
called asyncroute.jsx

9
00:00:25.480 --> 00:00:26.800
inside of your js directory.

10
00:00:26.800 --> 00:00:30.060
Make it a flow component.

11
00:00:32.270 --> 00:00:33.728
Import react from react.

12
00:00:39.858 --> 00:00:41.360
&gt;&gt; Brian Holt: And
also you're gonna need component.

13
00:00:45.850 --> 00:00:49.194
And we're going to import Spinner
as well because we're going

14
00:00:49.194 --> 00:00:51.285
to want a nice little loading spinner.

15
00:00:51.285 --> 00:00:56.408
From ./spinner.

16
00:00:56.408 --> 00:01:02.707
Then we're going to have class
AsyncRoute extends component.

17
00:01:05.343 --> 00:01:08.998
&gt;&gt; Brian Holt: And then at the bottom
you're gonna have to export default

18
00:01:08.998 --> 00:01:09.898
AsyncRoute.

19
00:01:12.169 --> 00:01:12.873
&gt;&gt; Brian Holt: Okay, so

20
00:01:12.873 --> 00:01:17.812
this is the first higher order
component that we're gonna write.

21
00:01:17.812 --> 00:01:22.431
So AsyncRoute itself I guess can render
it's own mark up cuz sometimes it will

22
00:01:22.431 --> 00:01:26.779
render spinner for us but
it's actually capturing a behavior, right?

23
00:01:26.779 --> 00:01:30.191
What it's going to is is when it
rendered it's going to go out and

24
00:01:30.191 --> 00:01:32.216
fetch the component that you asked for

25
00:01:32.216 --> 00:01:36.348
and then only after has it that its
fetched it that's going to render itself.

26
00:01:36.348 --> 00:01:38.372
Does that make sense?

27
00:01:38.372 --> 00:01:45.510
Cool, so it's going to take two things in,
two props.

28
00:01:45.510 --> 00:01:48.780
It's going to take the props that you
want to pass to the component and

29
00:01:48.780 --> 00:01:52.790
then the second thing that it's going
to take is a loading promise, right?

30
00:01:54.760 --> 00:01:56.620
So let's take a look at
what that looks like.

31
00:01:56.620 --> 00:02:02.540
And it's also going to have a state
of whether or not it's loaded.

32
00:02:02.540 --> 00:02:04.680
By default it's not going to be loaded,
right?

33
00:02:07.040 --> 00:02:10.310
Then we're going to have props in here.

34
00:02:11.510 --> 00:02:13.600
Which is going to take
in two different props.

35
00:02:13.600 --> 00:02:16.500
One's going to be mixed.

36
00:02:16.500 --> 00:02:19.960
So, we don't know or
care what are in the props, right?

37
00:02:19.960 --> 00:02:21.710
We're just going to take
the props that they give us and

38
00:02:21.710 --> 00:02:22.830
pass it down to the component.

39
00:02:22.830 --> 00:02:24.180
So props is going to be mixed.

40
00:02:24.180 --> 00:02:26.426
That's what we're kind of asserting there.

41
00:02:26.426 --> 00:02:31.343
And then loadingPromise,

42
00:02:35.075 --> 00:02:38.380
&gt;&gt; Brian Holt: Is going to
be of type promise, right?

43
00:02:40.400 --> 00:02:41.180
But with promises,

44
00:02:41.180 --> 00:02:44.060
you actually have to give it what
the promise is going to return, right?

45
00:02:44.060 --> 00:02:46.358
Do you remember how we did
parameters with types?

46
00:02:48.829 --> 00:02:54.076
&gt;&gt; Brian Holt: So it's going to give us
back an object and the default parameter

47
00:02:54.076 --> 00:02:59.240
inside of this object is going
to be a react component, right?

48
00:02:59.240 --> 00:03:04.272
So it's going to be a class
of react component.

49
00:03:04.272 --> 00:03:06.691
React.component.

50
00:03:08.900 --> 00:03:13.940
And then let's not get too far into
the weeds about how React is typed.

51
00:03:13.940 --> 00:03:18.140
But React has three different props
that you pass to React components.

52
00:03:18.140 --> 00:03:21.420
We're not gonna validate what those are
because we don't know what kind of React

53
00:03:21.420 --> 00:03:22.410
components it's gonna be.

54
00:03:22.410 --> 00:03:24.729
So you're just gonna say *,*,*.

55
00:03:26.140 --> 00:03:31.000
I believe this is default props, props,
and state are the parameters there.

56
00:03:32.350 --> 00:03:34.110
I usually don't care.

57
00:03:34.110 --> 00:03:36.120
Suffice to say to just
believe me that this is okay.

58
00:03:37.230 --> 00:03:38.101
Cool, cool.

59
00:03:45.202 --> 00:03:46.809
&gt;&gt; Brian Holt: Oops,
that needs to be on the other side.

60
00:03:51.290 --> 00:03:53.280
&gt;&gt; Brian Holt: No, I think that's it.

61
00:03:53.280 --> 00:03:55.320
&gt;&gt; Audience 1: Do you wanna [INAUDIBLE]?

62
00:03:55.320 --> 00:03:56.550
&gt;&gt; Brian Holt: Yeah, I think I need that.

63
00:03:57.550 --> 00:03:58.050
There we go.

64
00:04:00.550 --> 00:04:04.140
So I realized,
this is kind of a lot right here so

65
00:04:04.140 --> 00:04:07.010
let's just talk about it one more time.

66
00:04:07.010 --> 00:04:08.330
This is a promise, right.

67
00:04:08.330 --> 00:04:10.210
A loadingPromise is a promise.

68
00:04:10.210 --> 00:04:15.780
What that promise returns when
it resolves is an object, right.

69
00:04:15.780 --> 00:04:19.560
Inside of that object, this is what is
gonna come back from webpack when it loads

70
00:04:19.560 --> 00:04:21.300
your code asynchronously.

71
00:04:21.300 --> 00:04:25.710
It's gonna be an object with
a default property on it, right?

72
00:04:25.710 --> 00:04:29.700
And that default property is going to be
a class, like this sort of class, right?

73
00:04:30.770 --> 00:04:35.180
And the type of class that it is,
is a react component, right?

74
00:04:35.180 --> 00:04:38.590
And react components can be typed in
various ways that we're going to ignore

75
00:04:38.590 --> 00:04:42.960
for now, that's what the stars mean, it
means I don't care what they are, right?

76
00:04:42.960 --> 00:04:44.990
I don't care what type of
React component it is,

77
00:04:44.990 --> 00:04:47.772
I just know that it's going to be
something that React can render.

78
00:04:49.604 --> 00:04:51.228
&gt;&gt; Brian Holt: Good, cool?

79
00:04:51.228 --> 00:04:52.107
All right.

80
00:04:56.327 --> 00:04:58.723
&gt;&gt; Brian Holt: So,
something that we could do,

81
00:04:58.723 --> 00:05:04.150
we could store the component here
in state, this is a bad idea.

82
00:05:04.150 --> 00:05:07.850
The reason why this is a bad idea is, if
you remember, React, when it's doing it's

83
00:05:07.850 --> 00:05:11.490
diffing algorithm, it's gonna be checking
everything inside of your state.

84
00:05:11.490 --> 00:05:15.320
A react component has a lot of stuff on
it and we don't actually want react to be

85
00:05:15.320 --> 00:05:19.150
going through that every single
time it does a re-render.

86
00:05:19.150 --> 00:05:21.830
So a good way to kind of side
step that is just to say,

87
00:05:23.170 --> 00:05:26.700
I'm gonna put component
on the class itself.

88
00:05:26.700 --> 00:05:30.590
If the component lives on the class itself
or anything lives on the class itself.

89
00:05:30.590 --> 00:05:32.030
React doesn't check that.

90
00:05:32.030 --> 00:05:36.040
So it's stiffing algorithm is not gonna
put its tendrils in there, right?

91
00:05:36.040 --> 00:05:37.180
Which we don't want it to.

92
00:05:37.180 --> 00:05:40.250
So that's why we're going to put it on
the class and not necessarily in state.

93
00:05:40.250 --> 00:05:41.420
Does that make sense?

94
00:05:42.450 --> 00:05:46.447
Only keep things in state that
have to do with re-renders, right?

95
00:05:46.447 --> 00:05:51.415
If I change state and load it from true to
false, I need to re-render right there.

96
00:05:51.415 --> 00:05:55.043
Component is never going to
force a re-render, right?

97
00:05:55.043 --> 00:05:58.120
We're going to load the component once,
and then not do anything more with it.

98
00:05:58.120 --> 00:06:04.050
So it's good to put that on
just the class itself, okay?

99
00:06:04.050 --> 00:06:12.010
Now, between these two,
I need to create a componentDidMount,

100
00:06:12.010 --> 00:06:16.660
mount it to the DOM, we wanna go and
start requesting, or sorry we

101
00:06:16.660 --> 00:06:21.040
actually wanna be acting upon this promise
that we're gonna get from props, right?

102
00:06:22.400 --> 00:06:28.595
So what we're gonna say right here
is this.props.loadingPromise.

103
00:06:31.698 --> 00:06:34.700
&gt;&gt; Brian Holt: And we're gonna say .then.

104
00:06:34.700 --> 00:06:39.178
It's gonna take in a module that
web pack is going to give us.

105
00:06:43.511 --> 00:06:46.398
&gt;&gt; Brian Holt: And
then we're gonna say this.component,

106
00:06:49.973 --> 00:06:52.771
&gt;&gt; Brian Holt: = module.default.

107
00:06:55.270 --> 00:06:59.679
Then at that point we're going to

108
00:06:59.679 --> 00:07:04.563
say this.setstate loaded is true.

109
00:07:09.430 --> 00:07:11.935
&gt;&gt; Brian Holt: Okay, so
it's going to be passed as promised.

110
00:07:11.935 --> 00:07:17.314
When that promise resolves, it's going
to get that module from web pack, right?

111
00:07:17.314 --> 00:07:20.270
This can happen immediately, right?

112
00:07:20.270 --> 00:07:24.520
If I go from details to search and

113
00:07:24.520 --> 00:07:27.490
then back to details,
details is going to be in Webpacks cash.

114
00:07:27.490 --> 00:07:29.680
It's just going to immediately
resolve that promise for me.

115
00:07:30.780 --> 00:07:32.840
But this will still work
in either scenario.

116
00:07:34.640 --> 00:07:38.550
So this .component is going to be
equal to module .default, right?

117
00:07:38.550 --> 00:07:41.670
We know that that's going to come back
because we created that type right here.

118
00:07:41.670 --> 00:07:44.760
So that's why that plays nicely with flow.

119
00:07:44.760 --> 00:07:50.430
And then once that's been loaded,
we're gonna set loaded to true, okay?

120
00:07:52.310 --> 00:07:55.028
Last thing we need to do here
is create the render function.

121
00:07:59.608 --> 00:08:05.530
&gt;&gt; Brian Holt: And it's just going
to be if this .state.loaded.

122
00:08:05.530 --> 00:08:11.462
So if I'm loaded then I want you
to return this .component and

123
00:08:11.462 --> 00:08:16.267
then I want to just pass
whatever props into that.

124
00:08:16.267 --> 00:08:19.047
This.props.props.

125
00:08:22.687 --> 00:08:24.660
&gt;&gt; Brian Holt: I know this looks weird,
right?

126
00:08:24.660 --> 00:08:29.599
But we have a props called props,
right, so that's what you end up with.

127
00:08:31.655 --> 00:08:36.675
&gt;&gt; Brian Holt: Okay,
if I don't have a state being loaded yet,

128
00:08:36.675 --> 00:08:40.603
what I'm going to return is Spinner.

129
00:08:42.403 --> 00:08:45.480
&gt;&gt; Brian Holt: I'm gonna return
some sort of loading UI, right?

130
00:08:45.480 --> 00:08:47.945
In this case we're just gonna
put a big spinner on the page.

131
00:08:52.838 --> 00:08:53.570
&gt;&gt; Brian Holt: And that's it.

132
00:08:56.057 --> 00:08:57.334
&gt;&gt; Brian Holt: Any questions about this?

133
00:08:59.887 --> 00:09:03.142
&gt;&gt; Brian Holt: So now we have this
AsyncRoute component that we can use

134
00:09:03.142 --> 00:09:04.627
inside of our router, so

135
00:09:04.627 --> 00:09:09.750
that it's only going to load components
when they're only, when they're needed.

