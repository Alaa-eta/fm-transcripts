WEBVTT

1
00:00:00.080 --> 00:00:02.940
&gt;&gt; Brian Holt: Hopefully, we had
a really good experience learning React.

2
00:00:02.940 --> 00:00:05.200
What we wrote was totally complete.

3
00:00:05.200 --> 00:00:07.900
I'm happy with that architecture and
I think you can scale that to,

4
00:00:07.900 --> 00:00:09.170
well, let me rephrase that.

5
00:00:09.170 --> 00:00:12.330
I have personally scaled that
architecture to large applications.

6
00:00:14.880 --> 00:00:19.380
Now we're going to introduce you to
another concept which is Redux, right?

7
00:00:19.380 --> 00:00:21.790
Redux is not married to React at all.

8
00:00:21.790 --> 00:00:23.390
They're two totally separate libraries.

9
00:00:23.390 --> 00:00:27.450
It was birthed for
sure in the React community, hence,

10
00:00:27.450 --> 00:00:30.090
why it actually lives
in the React-js repo.

11
00:00:30.090 --> 00:00:36.350
But it is totally acceptable to use Redux
with Angular, with Ember, or by itself.

12
00:00:38.250 --> 00:00:44.480
Redux by itself, is not a particularly
verbose framework for storing data.

13
00:00:46.300 --> 00:00:50.080
There's actually a gist out there you
can write Redux in 80 lines of code,

14
00:00:50.080 --> 00:00:50.910
like bare minimum.

15
00:00:50.910 --> 00:00:55.400
It's not like code call for
anything like that.

16
00:00:55.400 --> 00:00:58.760
There's not a lot to Redux.

17
00:00:58.760 --> 00:01:02.070
That being said, it's hard, right?

18
00:01:02.070 --> 00:01:05.890
And I just wanna re-emphasize,
throughout this entire course,

19
00:01:05.890 --> 00:01:09.440
if any of this feels hard, or
unapproachable, or anything like that.

20
00:01:10.510 --> 00:01:11.490
It's cuz it is hard.

21
00:01:11.490 --> 00:01:12.970
We're learning some hard stuff here.

22
00:01:14.250 --> 00:01:15.340
All of this stuff is hard.

23
00:01:15.340 --> 00:01:18.510
So, I permiss you to feel
like this is hard, right?

24
00:01:18.510 --> 00:01:22.068
Sometimes it's good just to have
acknowledged that we're doing hard stuff

25
00:01:22.068 --> 00:01:23.020
together, right?

26
00:01:24.210 --> 00:01:31.130
That being said,
we're about to do harder stuff together.

27
00:01:31.130 --> 00:01:36.720
Integrating reaction Redux is going to
make our architecture more complicated.

28
00:01:36.720 --> 00:01:41.577
And you'll see here, I want you to
make your own judgment calls here.

29
00:01:41.577 --> 00:01:44.104
But it's going to make it
overly complicated to the point

30
00:01:44.104 --> 00:01:48.500
that what we're going to do is actually
not worth it for this size of application.

31
00:01:48.500 --> 00:01:52.750
But again, that's my opinion, and
I want you to make your own decision.

32
00:01:52.750 --> 00:01:57.860
But I don't integrate Redux until
further along in the project life cycle.

33
00:01:57.860 --> 00:02:02.260
I wait for Redux to become
necessary before I integrate it,

34
00:02:02.260 --> 00:02:05.963
which is what I'm gonna suggest to you,
as well.

35
00:02:07.839 --> 00:02:14.890
&gt;&gt; Brian Holt: A Redux was invented by
Dan Abramov, a really smart and nice guy.

36
00:02:14.890 --> 00:02:18.870
He based it on Facebook's Flux
architecture, and

37
00:02:18.870 --> 00:02:21.750
also a bit on Elm's architecture, as well.

38
00:02:21.750 --> 00:02:24.630
So those kind of ideas
combined in his mind

39
00:02:24.630 --> 00:02:27.620
cuz he wanted to write a data
store that was hot reloadable.

40
00:02:27.620 --> 00:02:31.285
What we were just looking at,
and he came up with Redux.

41
00:02:31.285 --> 00:02:33.740
Redux is really similar to Flux.

42
00:02:33.740 --> 00:02:35.990
A lot of you have probably
heard of Flux before,

43
00:02:35.990 --> 00:02:41.660
that came out at the same time
as React from Facebook as well.

44
00:02:43.490 --> 00:02:47.770
And Flux is a really interesting idea,
that you have data stores and

45
00:02:47.770 --> 00:02:51.760
you dispatch actions into the data
stores which then modify themselves, and

46
00:02:51.760 --> 00:02:58.280
then update whatever view layer,
in this case React, is subscribed to it.

47
00:02:59.780 --> 00:03:03.870
The difference between Flux and Redux is
with Flux, you have many stores, right?

48
00:03:05.370 --> 00:03:10.650
They're kinda like single concern stores.

49
00:03:10.650 --> 00:03:14.526
So, for example, you'd have maybe a user
store, then you'd have a messages store,

50
00:03:14.526 --> 00:03:18.084
and then you'd have all these different
kind of stores that like worry about one

51
00:03:18.084 --> 00:03:19.010
particular thing.

52
00:03:20.201 --> 00:03:25.516
&gt;&gt; Brian Holt: [COUGH] I attended a talk
from a Facebook engineer that told me on

53
00:03:25.516 --> 00:03:31.860
their ads product, at its height,
it had over 100 stores on the page.

54
00:03:31.860 --> 00:03:35.390
Now, as you may imagine,
that's a nightmare, right?

55
00:03:35.390 --> 00:03:38.590
Trying to figure out what
data goes into what store is,

56
00:03:38.590 --> 00:03:41.070
at least at that scale, unscalable.

57
00:03:42.070 --> 00:03:44.000
It became more complicated
than it was worth.

58
00:03:45.170 --> 00:03:49.300
And so, and particularly, let's say we had

59
00:03:49.300 --> 00:03:53.800
an animation that were animating
a component across an entire page, right?

60
00:03:55.280 --> 00:03:59.310
That was almost impossible to do with Flux
because you would have all these different

61
00:03:59.310 --> 00:04:02.990
stores that were asynchronously
dispatching actions to each other, and

62
00:04:02.990 --> 00:04:05.535
trying to coordinate that
change across multiple stores.

63
00:04:05.535 --> 00:04:07.420
It's pretty much impossible.

64
00:04:09.140 --> 00:04:12.500
So Dan came up with this idea like, well,

65
00:04:12.500 --> 00:04:16.345
we have this one application in react,
right?

66
00:04:16.345 --> 00:04:20.670
And this react application
is a tree of things, right?

67
00:04:20.670 --> 00:04:24.070
Well, why can't we have a data mimic
the way that our views are stored, right?

68
00:04:24.070 --> 00:04:27.110
So why don't we have one tree of data?

69
00:04:27.110 --> 00:04:31.938
And that's how Redux was born instead
of having one or instead of having many

70
00:04:31.938 --> 00:04:36.327
tiny stores let's have one big store but
the big store is just a tree.

71
00:04:36.327 --> 00:04:39.753
And then each part of our application
can just subscribe to one part of

72
00:04:39.753 --> 00:04:41.550
the tree, right?

73
00:04:41.550 --> 00:04:45.308
That's the basic gist,
&gt;&gt; Brian Holt: So, yeah,

74
00:04:45.308 --> 00:04:49.481
you're gonna have one
Redux store on the page.

75
00:04:49.481 --> 00:04:53.202
The top level function in any store,

76
00:04:53.202 --> 00:04:57.780
in Redux is called a Reducer or
rootReducer.

77
00:04:57.780 --> 00:05:02.831
You're gonna hear the term
Reducer over and over again.

78
00:05:02.831 --> 00:05:06.474
And Reducer is just a function
that takes in state and an action,

79
00:05:06.474 --> 00:05:09.300
and gives you back a new state, right?

80
00:05:09.300 --> 00:05:13.410
So given this store and this particular
state that it's in right now and

81
00:05:13.410 --> 00:05:16.370
this action,
this is the state that you get back out.

82
00:05:17.520 --> 00:05:20.790
This is really awesome because
everything is reproducible, right?

83
00:05:20.790 --> 00:05:24.090
If given the state and this action,
you get this new state, right?

84
00:05:24.090 --> 00:05:27.199
So it makes everything extremely
testable at every single level.

85
00:05:27.199 --> 00:05:30.530
And we're actually gonna do quite
a bit of testing with Redux.

86
00:05:30.530 --> 00:05:34.380
One of the big strengths of Redux is it
makes your state management very testable.

87
00:05:37.093 --> 00:05:41.801
&gt;&gt; Brian Holt: So,
&gt;&gt; Brian Holt: And

88
00:05:41.801 --> 00:05:46.161
the way it addresses those kind of large
changes where it changes multiple things

89
00:05:46.161 --> 00:05:50.198
like that animation example that I
previously gave is you have access to all

90
00:05:50.198 --> 00:05:52.010
of the state all at once, right?

91
00:05:52.010 --> 00:05:55.860
You can modify multiple things at once, so
if you have those massive changes that you

92
00:05:55.860 --> 00:05:58.520
need to make, go right ahead,
you're welcome to do so.

93
00:05:59.780 --> 00:06:02.880
So this is kinda high level of
what Redux is gonna do for you.

94
00:06:05.180 --> 00:06:08.220
State management, right,
it's a state management framework.

95
00:06:09.270 --> 00:06:13.060
So we're gonna be taking
things out of React, right?

96
00:06:13.060 --> 00:06:18.069
Right now, React is managing all the state
views, it's state this.state.whatever,

97
00:06:18.069 --> 00:06:22.220
and this.setState, we're going
to take that data out of React,

98
00:06:22.220 --> 00:06:24.470
and we're gonna stick it into Redux,
right?

99
00:06:25.560 --> 00:06:30.121
So, we're kind of divorcing
our data from React.

100
00:06:30.121 --> 00:06:31.760
Now, I'm gonna assert to you,

101
00:06:31.760 --> 00:06:35.480
I think react does a really
good job of managing state.

102
00:06:35.480 --> 00:06:38.240
However, you might get to
a point at some point,

103
00:06:38.240 --> 00:06:42.290
where you have tons of components
all worried about the same state.

104
00:06:42.290 --> 00:06:45.930
And that's the point where you say,
maybe I should use Redux now, right?

105
00:06:45.930 --> 00:06:49.010
Cuz imagine for a moment, let's say
we had ten different routes, right?

106
00:06:50.320 --> 00:06:53.170
Each of those routes was very complicated,
had lots of components.

107
00:06:53.170 --> 00:06:56.570
And they were all interested in about
the shows that we were requesting from

108
00:06:56.570 --> 00:06:57.160
the API.

109
00:06:58.400 --> 00:07:03.520
Our two options here is that we can
either put all that data up into App.jsx,

110
00:07:03.520 --> 00:07:06.800
and pass that down into every single
route, that's very burdensome.

111
00:07:07.960 --> 00:07:12.184
Or we could have some sort of centralized
stay container like Redux that will

112
00:07:12.184 --> 00:07:13.901
take care of all of that for us.

113
00:07:13.901 --> 00:07:16.570
Does that make sense?

114
00:07:16.570 --> 00:07:17.480
&gt;&gt; Audience 1: When you say burdensome,

115
00:07:17.480 --> 00:07:22.730
you just mean from a development
perspective, not from performance or?

116
00:07:22.730 --> 00:07:26.267
&gt;&gt; Brian Holt: Yeah, development,
from a maintainability and

117
00:07:26.267 --> 00:07:28.211
things like that, right?

118
00:07:28.211 --> 00:07:30.952
Cuz what you're gonna have is you're
gonna have these shows to the top level.

119
00:07:30.952 --> 00:07:33.600
And doing an after pass shows
in every single components.

120
00:07:33.600 --> 00:07:36.430
So now,
every single component inside of your

121
00:07:36.430 --> 00:07:39.290
application cares about these shows,
right?

122
00:07:39.290 --> 00:07:43.700
This becomes a real problem if I have top
level app and bottom level component down

123
00:07:43.700 --> 00:07:45.920
here, and there's like ten
components here in the middle.

124
00:07:45.920 --> 00:07:48.920
There's gonna have to be a bunch
of components passing state from

125
00:07:48.920 --> 00:07:50.140
parent to child, parent to child,

126
00:07:50.140 --> 00:07:53.370
parent to child, so
it eventually lands at the bottom, right?

127
00:07:53.370 --> 00:07:56.950
Otherwise, they wouldn't have to have
cared about that shells component, right?

128
00:07:56.950 --> 00:08:01.100
But it's just kind of tying your data
into your application structure.

129
00:08:01.100 --> 00:08:03.530
We call this data tunneling, right?

130
00:08:03.530 --> 00:08:06.650
This alleviates the data
tunneling problem.

131
00:08:06.650 --> 00:08:09.831
So with React,
we had a very tight loop, right?

132
00:08:09.831 --> 00:08:15.990
This dot sets date, well,
let's say I type into the input.

133
00:08:15.990 --> 00:08:19.430
That kicks off an event that goes into
our event handler that calls setState.

134
00:08:19.430 --> 00:08:22.620
The setState updates the state and
it kicks off a re-render, right?

135
00:08:22.620 --> 00:08:23.689
Pretty tight circle.

136
00:08:23.689 --> 00:08:28.057
What we're gonna do with Redux is we're
going to make that circle a little less

137
00:08:28.057 --> 00:08:29.060
tight, right?

138
00:08:29.060 --> 00:08:30.600
We're gonna expand that circle.

139
00:08:32.280 --> 00:08:35.680
So what's gonna happen is we're
going to kick off an event.

140
00:08:35.680 --> 00:08:40.245
The event is gonna call the handler, the
handler is going to dispatch an action to

141
00:08:40.245 --> 00:08:44.829
Redux via an action creator, which is then
going to get called into the Reducer.

142
00:08:44.829 --> 00:08:47.120
The Reducer is then going
to modify its state.

143
00:08:47.120 --> 00:08:50.453
Once the state's been modified,
it's going to notify React,

144
00:08:50.453 --> 00:08:54.217
which is a subscriber, which is then
going to kick off a re-render, and

145
00:08:54.217 --> 00:08:57.090
then you have an updated
state at that point.

146
00:08:57.090 --> 00:08:59.950
So we've added three or
four more steps in there.

147
00:08:59.950 --> 00:09:03.005
So if that sounds more complicated,
it is so

148
00:09:03.005 --> 00:09:07.792
[LAUGH] tough, I guess,
&gt;&gt; Brian Holt: So

149
00:09:07.792 --> 00:09:09.980
let's go ahead and
get started with that then.

150
00:09:11.370 --> 00:09:13.930
First thing I want you to do,
is I want you to create a new file

151
00:09:15.800 --> 00:09:19.770
called reducers.js,

152
00:09:19.770 --> 00:09:25.270
lower case r and not jsx, just js.

153
00:09:26.380 --> 00:09:29.510
We're not gonna have any
React living in here.

154
00:09:29.510 --> 00:09:33.330
That's why we're not gonna have any,
there's no x on the end,

155
00:09:33.330 --> 00:09:35.920
and it's not a component,
so it's not a capital r.

156
00:09:36.930 --> 00:09:39.500
That's what those conventions mean.

