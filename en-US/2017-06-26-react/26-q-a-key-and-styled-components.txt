[00:00:00]
>> Speaker 1: And there's a few questions going back around the use of the key, guess there's some confusion around if you don't use the index, how does that.
>> Speaker 1: The index of an array versus an ID. I know you kind of covered it.
>> Brian Holt: Sure, no I can kind of like diagram it out.

[00:00:22]
So if I have,
>> Brian Holt: ID: 0, name: 'Brian'. Let's do one more. If I have one, two, and three. And we have Mark. And we have Tanner. And we have John.
>> Brian Holt: So say I'm rendering these out to a map, and I have names.map, and it's object, and index.

[00:01:19]

>> Brian Holt: So and then that returns to a h3 with key equals index, and objects.name, okay. So picture for a moment this is names, right. Names equals, ops. Don't do that.
>> Brian Holt: So right now I'm sorting based on ID, right? That's what the array is sorted by. Let's say, I allow the user to sort by name eventually.

[00:01:58]
So if I have it sort by name. Then really the only other thing that happens is John gets to go up here. So now the IDs are out of order. So I guess right now this is going to be, it's going to be an output to Brian, Marc, Tanner and Jon, so by idea it looks like that, right.

[00:02:26]
So this is going to be the first element. The second element. The third element. The fourth element. If then I sort by name, it's going to be Brian, Jon, Marc, Tanner, right. So that's what it's gonna look like.
>> Brian Holt: So if my key is index, right. It's going to comparing the previous zero at the element to the next zero element, so this one's not gonna change, so it's gonna leave Brian alone.

[00:02:57]
But Mark and Jon are both the first index, right? So it's going to assume that those things stayed the same. Because it's gonna say index one is equal to index one, right? And it's not true, right? They change, right? So the index is not an accurate indicator of what has changed and what's not.

[00:03:21]
So the key here is that it needs to be tied to the object, right. The index is not tied to the object because the object can move anywhere throughout the array depending on how we sort it, right. But if we're tying it to the ID, the ID travels with that particular object, right.

[00:03:36]
So if Brian's here, or if Jon here, or if Jon here, right. That his ID is always going to be the same, right. So that when we react compare those against each other, it's gonna say, this object move over here. I'm gonna take this entire dhum tree and move it over here, right?

[00:03:53]
So that's how I was able to carry this throughout.
>> Speaker 1: Is there any reason to use key within the component?
>> Brian Holt: You actually can't. So react is actually going to hide key from you. So in this particular case with show card, if we went and looked at the props, key is not passed through.

[00:04:13]
Key is just for react. And that's the only special property.
>> Brian Holt: So no, please don't.
>> Speaker 1: Some questions with the style components.
>> Brian Holt: Sure.
>> Speaker 1: And I'm not sure if you answered these but how does it work for output devices, and responsive design, like media queries?
>> Brian Holt: So you can do all sorts of fancy stuff within the, so like I could say,

[00:04:56]

>> Brian Holt: Like this stuff that works within like lessons as, this all works within style components as well. So @media like myBreakPoint.
>> Brian Holt: All that stuff works, so stuff that you would typically expect within Sass and LESS for the most part, just kinda work within style components. And you can use the & selector as well which is really nice.

[00:05:32]

>> Speaker 1: What if multiple components use the same CSS with slight variations? Is the CSS repeated several times?
>> Brian Holt: That's kind of up to you. Sometimes it is a good idea to repeat it. There is a way to share that CSS. I want to say it's like, there's a style.extend.

[00:05:55]
You'd have to look at the documentation. But suffice to say there is a way to mix in more CSS. So if you have a standard button that you want to use. One you can just make another button in the file, and export it, and then extend it inside of the file.

[00:06:09]
There's a couple ways to solve that issue that styled components takes care of. I don't remember off the top of my head or I'd show you.
>> Speaker 1: Have you or do you recommend using style components in production?
>> Brian Holt: The answer to the question is this, it depends on what you are doing.

[00:06:26]
If you are in a highly performative sensitive area, the extra milliseconds makes a difference. It's something that you want to consider.
>> Speaker 1: So you're saying that the JavaScript has a [INAUDIBLE].
>> Brian Holt: It's got a [INAUDIBLE]. It's got to be shifted. So with CSS, right. You typically ship all the CSS in the head, right?

[00:06:45]
And then you parse the body, and then you parse the JS, right?
>> Brian Holt: If you're not gonna do server-side rendering you have to wait for the body to be loaded. Then you have to wait for the the JS to be parsed. Then you have to wait for the CSS to be put onto the page before a style starts showing up.

[00:07:04]
So you have a big change for flashes of unstyled content. And there's all sorts of problematic things. There's also a runtime penalty for styles components, right? It's not free, right. There's a stouts component library working in the background.
>> Speaker 1: But as we said webpack will eventually be able to pre-compile this stuff.

[00:07:24]

>> Brian Holt: Hopefully. Hopefully, eventually, right.
>> Speaker 1: It's better than the stout sheet I mean ideally. Especially if this is the way of the future kinda thing.
>> Brian Holt: For sure. And with server side rendering, which I'll show you prior on third day. It will pre-render out that style tag for you right because it's gonna service hide render all that stuff for you and so that style's components will be or the style tag will be sent down with all the CSS.

[00:07:50]
So it will get an order set up for free, so it's still pretty fast. Max, the guy that wrote it, he has a couple of big websites in production that are using it, so.
>> Speaker 1: Can the style components be used to target semantic elements, instead of the div.

[00:08:10]

>> Brian Holt: Yeah, sure. I mean this could be the article, right? Or a section.
>> Speaker 1: If each page had an H1 style, would you repeat the in lining in every page?
>> Brian Holt: No, no it's smart enough to pull that out into a single class.
>> Speaker 1: Are the class name generating always random characters?

[00:08:34]

>> Brian Holt: The answer to that question is that it is a hash, I'm pretty sure. So given these set of CSS properties, this hash is to this class name, and that's how they generate this class name. That was my understanding, anyway.
>> Speaker 1: Which has precedence, the class on the styled component, or the components define styles.

[00:08:56]

>> Brian Holt: It's just a normal CSS cascade. Whatever that amounts to.
>> Speaker 1: If any questions I missed please post them in chat. I'm trying to get them all but there's a lot of them here.
>> Brian Holt: So I mean, I guess the sum of my story here with styles components, it's worth exploring.

[00:09:20]
It's worth for you trying to understand what's going on. They're still pretty nascent, we're still kind of messing around with these ideas. And some people are less thrilled than others about it. I totally accept that opinion if you're not into it, but I think it's innovation worth exploring.

[00:09:35]

>> Speaker 1: And people are saying, please push, please push.
>> Brian Holt: Okay, yeah, I can do that really quick.
>> Speaker 3: So one of the ways that we've used CSS within the react context is, like you show you have the same CSS file from the same components, and then you pull it.

[00:09:53]
Is that reasonable? Still good?
>> Brian Holt: Yeah, I would say that one's, I don't think anyone's questioning the safety doing that, like that's totally a production ready strategy. I'm just really hesitant to say yes, go for it and styles components right now, as much as I think the library is amazing.

[00:10:15]
I say judge for yourself. That's what I want to say about styles components. There's trade offs to be made there, and there are reasons too, right. I think this is a big productivity win to just have it all there in one place for you. So you need to balance developer experience versus runtime complexity.

