[00:00:00]
>> Brian Holt: So I just reverted all my code back to using the dev server but one thing I wanted to go capture in my package.json is the ability to run that server. So I'm gonna call this start.
>> Brian Holt: And then I'm gonna say NOD_ENV = server node server.js. So now if I say yarn start, it'll start my production server, right.

[00:00:36]

>> Brian Holt: So again, I can just come in here and say yarn start. And it should be good to go.
>> Brian Holt: Hm. So, yeah, you just have to make sure to not include hot module refresh or it's gonna have a bad time.
>> Brian Holt: So I'm gonna change this back from watch to dev, so I can go back to the development server.

[00:01:04]
So we're gonna talk about another thing here called code splitting, or chunking, as it used to be called.
>> Brian Holt: There's a kind of a weird problem with, in particular doing server side rendering, hot module replacement and code splitting all at once. It's a pick two scenario. That the three cannot co-exist all together given the state of how webpack works.

[00:01:41]
And the real problem is, we're gonna configure our routes to be asynchronous, right? So that when I go from landing to search, it's actually going to pull in the JavaScript for search and then when I go from search to details, it will pull in the JavaScript just for details.

[00:01:56]
The reason why it's nice is that means, when I load landing for the first time, it's only going to load the code for landing. And it's not gonna load anything for search, and it's not going to load anything for details, right? In other words, we get to cut down on our bundle size, and we get to load only the JavaScript that's necessary for that particular page.

[00:02:18]
Which is gonna be, again, another performance win for us. This is, again, something that you're gonna wanna do in production. Maybe not in development because there's no real reason that you need to be doing that in development.

