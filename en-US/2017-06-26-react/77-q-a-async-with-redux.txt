[00:00:00]
>> Brian Holt: So, we concluded making all of our asynchronous Redux work. And now we have this really cool ability to kinda navigate around our site. And make API request cache them and then not re-request them which I think is pretty compelling. So again, you just see that that, it just pops up right away, which I think is great.

[00:00:23]

>> Brian Holt: So this is just kind of the most simple way of doing asynchronous actions with Redux. Again, you can get into libraries like redux-promise, is another one that I find very intuitive to use. That you, instead of dispatching functions, you dispatch promises, right? Same thing with redux-observable. You dispatch an observable with RXJS or something like that.

[00:00:50]
And then saga is this kinda like the heavy lifter. It's really cool but I would assert that it's much more complicated. And more difficult to kinda get your mind around. So if you're familiar, ES6 had another feature called generators, which are really cool. They're really powerful, but they can be a bit unwielding and kinda difficult to understand what's going on sometimes.

[00:01:15]
With sagas you can dispatch generators and take care of things and kind of complex orchestrations using various generators. So it's cool but make sure you want to undertake that complexity if you're gonna use them. But suffice to say, thunks usually handle most of your use cases, that's why I tend to stick with them.

[00:01:37]

>> Brian Holt: So does anyone have any questions about redux in general?
>> Audience 1: I'm just curious, the persistent data that you get between pages, can you do that with React still? Or is that Redux specific?
>> Brian Holt: The answer is you can absolutely do it with React, but you're gonna have to have basically something on the side holding onto that data, right?

[00:02:03]
If you unmount data, right? It's going to, or if you unmount a React component it's going to lose all that state. So it can't live in that state. However, if it's living up at the app level, right? App is still technically being rendered, so if you push that up into app, right?

[00:02:18]
It's going to persist across different views, right, it's still live right, it's still being rendered. So that's how you would achieve that.
>> Audience 1: Cool.
>> Brian Holt: Cool. Good question. Other questions?
>> Audience 2: Is the search still working? Cuz I did a colon and the search didn't seem to be working.

[00:02:40]

>> Brian Holt: I think so.
>> Brian Holt: What'd you do? I'm just kidding. [LAUGH]
>> Brian Holt: Any other questions?
>> Brian Holt: The good news here is we are done with application code, everything that I'm gonna show you from here on out is just more tools. [LAUGH] More techniques, right? Tests, all that kind of stuff.

[00:03:16]
But now you pretty much have a full, I would deem a full grasp on how to write React. And how to write at least the basic levels of Redux, not getting into the crazy stuff like that. There are still more facets of it that we haven't really explored.

[00:03:33]
But suffice to say that I've shown you, I would say 90% of use cases on both React and Redux. So I would say, armed with the knowledge that I have shown you over the past two and a half days, you can write large scale React applications. And I think that's pretty awesome that React is small enough and intuitive enough, or at least I deem intuitive enough, that you really can learn it in two and a half days.

