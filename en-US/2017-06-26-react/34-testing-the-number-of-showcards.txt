[00:00:00]
>> Brian: So, let's go ahead and add two more tests here. The first I'm going to say is hey, giving it a particular type of search. We want to make sure that we're rendering a correct amount of cards, right? So, going back to my app here. If I type, what do I

[00:00:19]

>> Brian: If I type,
>> Brian: If I type like orange, right. It should only render one. Once in a while it'll render two. Black, yep. If I type black it should render black mirror and orange is the new black. Does that makes sense? So I want to test that functionality to make sure that that search is happening the way that I anticipated.

[00:00:37]
So, let's go in here. The first thing we're gonna do is we're gonna import show card as well. So, import ShowCard from dash dash ShowCard. And we're also going to import preload from dot dot slash dot dot slash data.json
>> Brian: Okay.under that we're gonna say test Search should render correct amount of shows based on search term').

[00:01:21]

>> Brian: Something like that.
>> Brian: Sorry, that's the third test screen, right? Getting a little ahead of myself. The first one, I just want to make sure is that given no search term that it's going to render everything. So, we'll put that third test aside for a second. I'm gonna say Search should render correct amount of shows.

[00:01:54]

>> Brian: So, just in case if you're not familiar with testing in JavaScript or in general, this is the string that you're gonna be shown if the test fails. So, you want something descriptive enough that you can read that line and say, I know what failed. That's the goal here.

[00:02:14]

>> Brian: So, I'm gonna say const component equals shallow search. And here I want to say, expect preload dot shows dot length to equal, [SOUND] Component dot find ShowCard dot length.
>> Speaker 2: You said that what should be shown if it fails?
>> Brian: Right.
>> Speaker 2: So for the first test, so we're trying this correctly, is what it shows when it fails?

[00:03:05]

>> Brian: Right. So it's going to say, this is the test that failed. And it's going to highlight in red. So, search does not render correctly. That's kind of the negate. I see what you're getting at that, you'd say something like search did not render correctly, right? Like an error type message?

[00:03:21]
That's not typically the paradigm that you're writing with, typically write with a paradigm like this is what this is testing, right? This is testing the search renders correctly, right? And then it shows in the red that this did not happen. Right? That's kind of the implicit way of doing.

[00:03:36]
It's up to you, right? If that works better for you, then do that, right? Okay. Yeah, Mark?
>> Speaker 3: Is there a describe record to group the test by type?
>> Brian: There is, yeah. I can totally wrap these both describe. In fact, I'll show it to you if you're interested.

[00:03:53]
Describe search, right. So this will be a search test suite. And then I would wrap all of these test statements in that. And then typically inside of describe you would call this, It. It and test are the same thing. And here I would write, instead of saying Search,I would say renders correctly.

[00:04:23]
So it's like, instead of saying like test that this happens, it says it renders correctly, it should render correct amount of shows and it should render, right? That's the way that you would do that. Totally up to you, totally valid, I would do that if I had multiple things I was testing in one suite.

[00:04:41]
But in this particular case. I've search that's tied to just the search component, and so it makes sense to put them all on top level thing. I know with Moca they kind of advise against using [INAUDIBLE] function
>> Speaker 2: Using their testing because context. Is that not true of just or.

[00:05:03]

>> Brian: Their docs use it, so.
>> Speaker 2: Okay.
>> [LAUGH]
>> Brian: That's good enough for me.
>> Speaker 2: You can sorta get away with it in [INAUDIBLE], too. I was just curious.
>> Brian: I haven't heard anything that affects. But, this is less useful for stack traces, so, if I have an error here, I'm gonna get an anonymous function, not like a named function, so you have to make a trade off.

[00:05:28]
I don't want those line 17 test to run right now cuz it's not actually doing anything so you can just put xtest. And, it's just not going to run it. So, for example, if this test was flaky and I didn't want it to run right now while I'm testing other things, just put xtest in front of it and it will stop running it.

[00:05:45]
And then when you're ready for it to run, just take the x off.
>> Speaker 2: Is that the same with the It?
>> Brian: Yeah, X, X It and also xdescribe works for entire suites, as well. So let's go to head and run our test again.
>> Brian: So you can see here it says one skipped that's the one that we skipped at the bottom and too fast,right?

[00:06:09]
So let's go make it fail. It's always a good idea to make sure that your tests fail when we expect them fail too. So I'm going to go to search.jsx. And I'm going to put game back in here. So now, I'm going to expect it to render a show card for every item, but it's not going to do it, its only going to render Game of Thrones, right?

[00:06:29]
So if I run this test again,
>> Brian: You can see here, I failed my snapshot, that's fine. I expected that.
>> Brian: So in this particular case, I expected the value to equal one and received 15. I have these backwards, don't I? Okay, hold on. I do this all the time.

[00:06:56]

>> Brian: So what I have in expect should be in to equal. I'm pretty sure this literally on the last to make you this course too.
>> Brian: Yep, yep, yep, yep. So what goes inside of the expect is what you're testing, and what goes inside of to equal, what the answer should be.

[00:07:22]

>> Brian: It is minorly semantic but you get more useful failures. So now if I run this again,
>> Brian: I expected to get 15 but I actually only got one, right? The reason by that it only rendered Game of thrones and I expected it to render all 15 shows that I have possible.

[00:07:41]
Does that make sense?
>> Speaker 4: Do the focuses work also like the de-describe and the like how in Jasmine?
>> Brian: Yeah, you can use all of those.
>> Brian: Cool, so I'm gonna go back to search.jsx, I'm gonna drop this. Say that.
>> Speaker 2: Sorry, I can understand why you get confuse about that because it expect actually value to equal expected value.

[00:08:11]

>> Brian: Yeah, totally right. No matter, I'm gonna keep passing it up forever. There are probably still test that are still inverted. So, it's their problem now.

