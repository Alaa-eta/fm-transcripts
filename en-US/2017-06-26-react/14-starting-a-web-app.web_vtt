WEBVTT

1
00:00:00.380 --> 00:00:05.520
&gt;&gt; Brian Holt: So if you go back
to your index.html real quick,

2
00:00:05.520 --> 00:00:11.220
we are going to include
a link here in the header

3
00:00:12.780 --> 00:00:19.050
to public slash style.css.

4
00:00:19.050 --> 00:00:21.910
I wrote the CSS for you,
this is definitely not a CSS workshop.

5
00:00:22.910 --> 00:00:25.510
I don't purport this to
be particularly good CSS.

6
00:00:27.100 --> 00:00:28.530
It's very structural base.

7
00:00:28.530 --> 00:00:32.130
So if you follow the same
structure to your HTML elements,

8
00:00:32.130 --> 00:00:34.460
you should get all the styling for free.

9
00:00:34.460 --> 00:00:37.370
We will talk about styled
components a little bit later,

10
00:00:38.380 --> 00:00:40.020
which will be pretty fun.

11
00:00:40.020 --> 00:00:43.110
We're not going to do everything in styled
components just because it would be a lot

12
00:00:43.110 --> 00:00:46.620
of time writing CSS,
which is not where I wanna focus.

13
00:00:46.620 --> 00:00:48.830
I wanna focus on
the JavaScript part of this.

14
00:00:48.830 --> 00:00:50.731
So I will show you how
you style components but

15
00:00:50.731 --> 00:00:53.290
then we'll just go back to using
the CSS that I wrote for you.

16
00:00:53.290 --> 00:00:55.937
So suffice it to say, if you mimic my
markup you should get all the style for

17
00:00:55.937 --> 00:01:02.999
free.
&gt;&gt; Brian Holt: Cool.

18
00:01:04.738 --> 00:01:06.250
&gt;&gt; Brian Holt: So that sounds good.

19
00:01:06.250 --> 00:01:12.485
Let's go back to, we are going to

20
00:01:12.485 --> 00:01:17.870
go back to clientapp.jsx.

21
00:01:17.870 --> 00:01:22.594
So you can pretty much just delete all of
this stuff, which is what I'm going to

22
00:01:22.594 --> 00:01:27.707
do.
&gt;&gt; Brian Holt: And

23
00:01:27.707 --> 00:01:28.460
we're going to pretty much start over.

24
00:01:30.420 --> 00:01:33.900
So the first thing we're going to do,
is we're going to create Const App,

25
00:01:34.930 --> 00:01:37.160
which is going to be the overarching
component for our app.

26
00:01:38.880 --> 00:01:42.170
And I'm going to make
it an arrow function.

27
00:01:42.170 --> 00:01:46.050
So for those of you that have not
seen an arrow function before,

28
00:01:46.050 --> 00:01:51.484
relatively similar to,
&gt;&gt; Brian Holt: Normal function,

29
00:01:51.484 --> 00:01:54.090
it's just a little bit shorter to write.

30
00:01:54.090 --> 00:01:57.230
There's some other things that have to do
with context of how arrow functions work,

31
00:01:57.230 --> 00:01:59.930
but we'll get into those as we kind of

32
00:01:59.930 --> 00:02:02.280
run onto where it'll be
different from normal functions.

33
00:02:02.280 --> 00:02:06.406
Suffice it to say, for all intents and
purposes for what we're doing here,

34
00:02:06.406 --> 00:02:11.419
this is a normal function.
&gt;&gt; Brian Holt: Okay,

35
00:02:11.419 --> 00:02:17.670
and what we're gonna do
here is return some markup.

36
00:02:17.670 --> 00:02:22.128
So we're gonna do div.
&gt;&gt; Brian Holt: So

37
00:02:22.128 --> 00:02:27.830
typically you would put class here
if you wanted to give a class type.

38
00:02:28.900 --> 00:02:31.620
However, as you may remember,

39
00:02:31.620 --> 00:02:34.790
we are writing JavaScript, so we have
to abide by the rules of JavaScript.

40
00:02:34.790 --> 00:02:38.030
The word class is a reserved word, right?

41
00:02:39.140 --> 00:02:45.640
Because you can have like class Foo,
and so this class word is reserved.

42
00:02:45.640 --> 00:02:48.830
You can't use that keyword directly.

43
00:02:49.960 --> 00:02:52.170
So instead, we're going to use class name.

44
00:02:52.170 --> 00:02:56.702
This is really one of the very few
gotchas with JSX and React in general,

45
00:02:56.702 --> 00:02:59.800
cuz you have to call it
className instead of class.

46
00:02:59.800 --> 00:03:01.590
There's a couple other like for.

47
00:03:01.590 --> 00:03:04.700
As you might imagine, for is valid HTML5.

48
00:03:04.700 --> 00:03:06.550
But there's for loops, right?

49
00:03:07.700 --> 00:03:10.030
So I don't use for that terrible much,

50
00:03:10.030 --> 00:03:14.630
so it's really just class.
&gt;&gt; Brian Holt: Now to justify

51
00:03:14.630 --> 00:03:17.496
this decision,
like I was telling your earlier,

52
00:03:17.496 --> 00:03:21.430
the way this works is this is actually
interacting with the DOM API.

53
00:03:21.430 --> 00:03:25.970
And the name for
manipulating classes on an HTML element

54
00:03:25.970 --> 00:03:29.290
via the DOM API is class name, right?

55
00:03:29.290 --> 00:03:33.180
If I come in here and say, console.

56
00:03:35.070 --> 00:03:39.360
So if I just say, so x = $0.

57
00:03:39.360 --> 00:03:42.099
Okay, so
I have the span right here, right?

58
00:03:43.580 --> 00:03:46.796
So if I say, x.className, right?

59
00:03:46.796 --> 00:03:48.880
That's how I actually get a className.

60
00:03:49.970 --> 00:03:53.550
So, it is a valid choice, right?

61
00:03:53.550 --> 00:03:55.240
The reason why I bring
this up is I defend it so

62
00:03:55.240 --> 00:03:57.320
much is because I've had to defend it so
much.

63
00:03:57.320 --> 00:04:03.097
So, just wanted you to know that
that's a valid choice on their part.

64
00:04:03.097 --> 00:04:10.195
Okay, so className= app.
&gt;&gt; Brian Holt: And

65
00:04:10.195 --> 00:04:13.259
then here we're gonna say, div className=

66
00:04:13.259 --> 00:04:19.891
landing.
&gt;&gt; Brian Holt: And what we're gonna

67
00:04:19.891 --> 00:04:23.270
do here is we're gonna put an h1, you can
name your video service whatever you want.

68
00:04:23.270 --> 00:04:24.270
I called mine svideo.

69
00:04:24.270 --> 00:04:30.662
We're gonna out an input, type= text,

70
00:04:30.662 --> 00:04:37.899
placeholder=search.
&gt;&gt; Brian Holt: And

71
00:04:37.899 --> 00:04:44.354
then we'll put an a tag.
&gt;&gt; Brian Holt: For

72
00:04:44.354 --> 00:04:48.584
now it's not gonna go anywhere, so

73
00:04:48.584 --> 00:04:52.674
we'll just put a, or Browse All.

74
00:05:03.709 --> 00:05:05.134
&gt;&gt; Brian Holt: It's mad at me for

75
00:05:05.134 --> 00:05:10.370
my anchor tag, but we will fix that
later or can we just not put it?

76
00:05:11.990 --> 00:05:16.894
Okay, just don't put it.
&gt;&gt; Brian Holt: We'll make it go

77
00:05:16.894 --> 00:05:18.193
somewhere later.

78
00:05:18.193 --> 00:05:23.526
Okay, and then down on the bottom

79
00:05:23.526 --> 00:05:27.717
we're going to render app

80
00:05:27.717 --> 00:05:33.053
to document.getElementById,

81
00:05:33.053 --> 00:05:38.384
app.
&gt;&gt; Brian Holt: Okay, so we save that.

82
00:05:38.384 --> 00:05:40.290
Now we do have a lint error up here.

83
00:05:41.780 --> 00:05:42.649
That's because

84
00:05:44.130 --> 00:05:47.990
these arrow functions have something
called an implicit return, right?

85
00:05:49.082 --> 00:05:51.990
For those of you coming from Ruby,
or CoffeeScript,

86
00:05:51.990 --> 00:05:56.750
you're probably used to seeing implicit
returns that no matter what the last line

87
00:05:56.750 --> 00:05:59.270
is returned automatically, right?

88
00:06:00.280 --> 00:06:05.334
Well, with arrow functions, if it's a one
liner, it's also an implicit return, okay?

89
00:06:07.310 --> 00:06:13.010
So, what the Airbnb eslint rules require,
is that if you have a function,

90
00:06:13.010 --> 00:06:18.154
that just immediately returns,
it must use the implicit return, okay?

91
00:06:19.420 --> 00:06:21.215
So, what we can do,

92
00:06:21.215 --> 00:06:26.747
instead of saying curly brace.
&gt;&gt; Brian Holt: Let

93
00:06:26.747 --> 00:06:28.320
me show you what I mean, right?

94
00:06:28.320 --> 00:06:34.775
So, if I have const add equals

95
00:06:34.775 --> 00:06:39.680
return a and b, a + b,

96
00:06:39.680 --> 00:06:45.483
right?
&gt;&gt; Brian Holt: It's gonna be mad at me

97
00:06:45.483 --> 00:06:51.397
because I could have written it this way.
&gt;&gt; Brian Holt: const

98
00:06:51.397 --> 00:06:56.536
add2 = (a,b),

99
00:06:56.536 --> 00:07:02.229
a + b.
&gt;&gt; Brian Holt: So

100
00:07:02.229 --> 00:07:03.259
that's the way it wants me to write it.

101
00:07:04.680 --> 00:07:07.824
If you do not put the curly braces there,

102
00:07:07.824 --> 00:07:13.376
whatever expression you put there
is going to be implicitly returned,

103
00:07:13.376 --> 00:07:16.812
so these two lines are equivalent, right?

104
00:07:16.812 --> 00:07:18.160
Does that makes sense?

105
00:07:20.590 --> 00:07:28.520
Okay, so here I'm just returning
immediately this React's component.

106
00:07:28.520 --> 00:07:33.870
So if I just get rid of this and
bring this parenthese up there and

107
00:07:33.870 --> 00:07:39.473
then delete that.
&gt;&gt; Brian Holt: So

108
00:07:39.473 --> 00:07:42.860
get rid of that, that's the same thing.

109
00:07:42.860 --> 00:07:46.671
So the key here is,
this is a parenthesis and

110
00:07:46.671 --> 00:07:54.770
not a curly brace.
&gt;&gt; Brian Holt: How do we feel about that?

111
00:07:54.770 --> 00:07:56.020
It's a little weird, right?

112
00:07:56.020 --> 00:08:03.872
But I don't know, I kind of like it.
&gt;&gt; Brian Holt: The thing is,

113
00:08:03.872 --> 00:08:06.749
if I ever need anything other
than just returning immediately,

114
00:08:06.749 --> 00:08:09.320
I have to switch that back to
using curly braces, right?

115
00:08:10.420 --> 00:08:12.060
Cuz I can't put anything up here.

116
00:08:13.840 --> 00:08:18.702
Like, I don't know.
&gt;&gt; Brian Holt: This is no

117
00:08:18.702 --> 00:08:19.320
longer valid, right?

118
00:08:19.320 --> 00:08:23.050
Because I've, see,
it has to be just an immediate return.

119
00:08:24.380 --> 00:08:29.350
So I have linked in my notes here,
there's a blog that I reference

120
00:08:29.350 --> 00:08:33.880
constantly in here, written by Dr.
Axel Rauschmayer.

121
00:08:33.880 --> 00:08:38.440
I'm probably saying that incorrectly,
but he has a blog called 2ality.

122
00:08:38.440 --> 00:08:42.190
And it's just amazing for
explaining JavaScript grammar.

123
00:08:42.190 --> 00:08:48.060
It's both succinct and in-depth, and
I think it pretty easy to understand.

124
00:08:48.060 --> 00:08:52.115
So I have a 2ality post linked here
that if you need to understand it and

125
00:08:52.115 --> 00:08:57.330
need more depth, it's all there.
&gt;&gt; Brian Holt: Okay,

126
00:08:57.330 --> 00:09:01.955
so if I go back here and
I start doing yarn watch.

127
00:09:10.298 --> 00:09:11.448
&gt;&gt; Brian Holt: Okay, so now,

128
00:09:11.448 --> 00:09:15.525
I should be able to come back
over here and go back to my,

129
00:09:25.143 --> 00:09:26.991
&gt;&gt; Brian Holt: So I am getting some,

130
00:09:26.991 --> 00:09:29.770
there should be a background.

131
00:09:29.770 --> 00:09:35.621
That's weird.
&gt;&gt; Speaker 2: It's

132
00:09:35.621 --> 00:09:38.760
just three dot jpeg not found.
&gt;&gt; Brian Holt: Yeah, so

133
00:09:40.020 --> 00:09:44.680
the problem here is that,
in just a second, yeah.

134
00:09:46.110 --> 00:09:48.000
We'll fix it in just a second.

135
00:09:48.000 --> 00:09:49.830
We're gonna be running a dev
server here really quick and

136
00:09:49.830 --> 00:09:52.890
all the paths are based on
absolutes versus relatives.

137
00:09:53.910 --> 00:09:55.376
So we'll need to fix that.

138
00:09:55.376 --> 00:10:00.590
But suffice it to say, we're getting
a nice looking UI here with an input,

139
00:10:00.590 --> 00:10:05.935
and a title, and all that kind of stuff.
&gt;&gt; Brian Holt: So

140
00:10:05.935 --> 00:10:12.276
that's all good.
&gt;&gt; Brian Holt: So

141
00:10:12.276 --> 00:10:19.617
something that would be really nice is.
&gt;&gt; Brian Holt: Here in our console,

142
00:10:19.617 --> 00:10:22.794
rather than just have it
have to come back here and

143
00:10:22.794 --> 00:10:26.990
run lint, I guess we're
running it within our editor.

144
00:10:26.990 --> 00:10:30.200
But I wanted to show you actually how to
have webpack run your linting as well.

145
00:10:31.570 --> 00:10:36.680
So go into your webpack config, and
we're going to add another rule.

146
00:10:37.810 --> 00:10:43.668
Do it before the babel-loader.
&gt;&gt; Brian Holt: And

147
00:10:43.668 --> 00:10:47.631
what we're going to do is
we're going to do enforce,

148
00:10:47.631 --> 00:10:51.792
pre.
&gt;&gt; Brian Holt: Test,

149
00:11:00.913 --> 00:11:02.023
&gt;&gt; Brian Holt: I guess the test is gonna

150
00:11:02.023 --> 00:11:03.360
be the same as this, right?

151
00:11:11.329 --> 00:11:17.164
&gt;&gt; Brian Holt: loader, eslint-loader, and

152
00:11:17.164 --> 00:11:22.355
exclude, node_modules.

153
00:11:26.657 --> 00:11:27.337
&gt;&gt; Brian Holt: My notes are a little

154
00:11:27.337 --> 00:11:33.810
incorrect here.
&gt;&gt; Brian Holt: So, let's talk about this.

155
00:11:33.810 --> 00:11:34.910
Running it on the same files, right?

156
00:11:34.910 --> 00:11:36.470
So, it's the same test function.

157
00:11:36.470 --> 00:11:37.260
That makes sense.

158
00:11:38.290 --> 00:11:40.570
Loader, we're using the eslint-loader.

159
00:11:40.570 --> 00:11:41.600
Hopefully, that makes sense too.

160
00:11:41.600 --> 00:11:42.840
It's just going to be running eslint and

161
00:11:42.840 --> 00:11:44.650
all the files that are going
through your build pipeline.

162
00:11:46.760 --> 00:11:49.130
The nice thing is it'll only be
running on files that have changed,

163
00:11:49.130 --> 00:11:51.410
as opposed to being run on
every file every single time.

164
00:11:52.800 --> 00:11:57.410
Exclude, we don't care if our
node_modules pass our linting, right?

165
00:11:57.410 --> 00:11:59.114
That's someone else's problem,
not mine, so

166
00:11:59.114 --> 00:12:01.470
that's how we're excluding
everything out of node_modules.

167
00:12:01.470 --> 00:12:03.800
But then there's this
funny thing called pre.

168
00:12:05.790 --> 00:12:09.320
What this is doing is it's ensuring
that it's running before babel, right?

169
00:12:09.320 --> 00:12:14.820
We do not care if our post
compilation code passes lint,

170
00:12:14.820 --> 00:12:17.260
we care if it passes it before, right?

171
00:12:17.260 --> 00:12:20.640
So it has to be pre, does that make sense?

172
00:12:21.770 --> 00:12:23.510
There's also a post, as well.

173
00:12:23.510 --> 00:12:26.640
I don't know what you would do with post,
maybe like, minify and things like that.

174
00:12:26.640 --> 00:12:27.360
I don't know.

175
00:12:29.280 --> 00:12:33.370
So, now, we're going to have
to go restart our watch.

176
00:12:33.370 --> 00:12:37.890
Anytime you mess with a webpack config,
you're going to have to restart watch,

177
00:12:37.890 --> 00:12:44.591
just so you know.
&gt;&gt; Brian Holt: Okay,

178
00:12:44.591 --> 00:12:49.958
now if come back here to client.app and
const x = 5,

179
00:12:49.958 --> 00:12:56.814
make our lint fail.
&gt;&gt; Brian Holt: Now notice in my command

180
00:12:56.814 --> 00:13:00.880
line, it's automatically outputting
these errors to my console, right?

181
00:13:02.370 --> 00:13:04.089
So it says, x was assigned but
never used and

182
00:13:04.089 --> 00:13:09.122
then you also meet that empty space there
&gt;&gt; Brian Holt: So

183
00:13:09.122 --> 00:13:14.220
this is useful as well because we don't
have to constantly be running our lint.

184
00:13:14.220 --> 00:13:17.160
Now if it's built into your editor,
that's nice too.

185
00:13:17.160 --> 00:13:18.885
But not everyone's gonna
build it into their editor,

186
00:13:18.885 --> 00:13:19.770
especially if you're in a team.

187
00:13:19.770 --> 00:13:22.350
So this is really good to
enforce these lint rules and

188
00:13:22.350 --> 00:13:25.420
have a short feedback on linting rules.

189
00:13:25.420 --> 00:13:27.910
So definitely,
definitely we'll suggest that.

