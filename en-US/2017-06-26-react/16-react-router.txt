[00:00:00]
>> Brian Holt: Let's talk about router. So something like Ember, something like Angular, these libraries slash frameworks ship with routers built into them. So you can build robust single page applications, right? Particularly Ember is really oriented to getting you to building a single page application. Don't get me wrong you can build things with Ember without it, it's just a big part of the library.

[00:00:29]
React has no opinion on the matter. In other words, React does not include a router with it so if you want to build a single page application it's up to you what tools you want to use. For example, you can use something like Director, which is totally agnostic to frameworks underneath it.

[00:00:44]
You can use any framework with Director. However, there is one in particular router that's built specifically with React in mind. And you may have guessed, it's called React router. Some very clever naming scheme that we have here. React Router is a really awesome piece of technology. Particularly the latest version, which is version 4.

[00:01:09]
Really well thought out and pretty easy to work with. It feels pretty intuitive to working with React in general. People's complaint about it, and actually the reason why I've come back here now three times, is that the API thrashes a lot, it has thrashed a lot. I mean, they've had two pretty huge rewrites where people have had to almost rewrite all of their routing code to deal with their huge rewrites.

[00:01:38]
From v3 to v4 in particular there was a really large rewrite. Understandably so, a lot of people are really frustrated that they build their apps on top of these libraries, and then they just totally lose all support underneath them. So, that's the word of caution I want to give you, is that this library has thrashed majorly twice.

[00:01:56]
But then again, rails thrash majorly once, as well, and we all survived. As far as I know, no one died. There are alternatives. There are other great libraries out there. There is one called, I believe it's React on Route, which is written by the same guy that wrote Express, and CoA, and half the other things that you use.

[00:02:20]
And Stylus and Mocha, and all of those. And that one's pretty great. It's much more stripped down and bare. React router does a lot of really cool and interesting things for you.
>> Brian Holt: So that's one we're gonna use today, cuz I would say that one has the greatest mind share.

[00:02:36]
But I just wanted to let you know that there are alternatives out there that are also valid choices. Okay, so we're going to use. First thing we're going to do, is we're going to split some of this code out into it's own component. So I want you to create a new file.

[00:02:53]
Call it landing.jsx. And, what I want you to make live in Landing is pretty much all this code in the middle. So I'm gonna cut that out. Go to Landing and say import React from react. const Landing =
>> Brian Holt: This is one of my favorite parts about Prettier in general.

[00:03:28]
I'm just gonna paste that grossness in there, right? I would never let this live as is, right? But guess what? Prettier is just gonna fix it for me. So I don't have to worry about formatting it correctly. And then down at the bottom. I'm just going to say export default Landing, right?

[00:03:47]
And I just save it. Low and behold, everything is fixed. I just love that. Like, it just brings joy to my soul. How much time have you spent formatting things, right? Just let the computer do it.
>> Brian Holt: Makes programming by Stack Overflow so much easier.
>> Brian Holt: You laugh.

[00:04:11]
It's all of your jobs.
>> Speaker 2: [LAUGH]
>> Brian Holt: [LAUGH] Okay, so that's what Landing looks like. Let's go back over to clientapp, what we're going to do here import react from react, we're going to import render from react-don, and then we're going to import hashrouter, and route. From react-router-dom.

[00:04:47]
Much like react, react router works in multiple places, so there's a react router-native I believe. And there's, you know potential for other ones, and there's also just kind of agnostic ones like the memory router. For now, we're going to use hashrouter and then I will show you later how to work with browser router, okay.

[00:05:09]
Then underneath that we're going to say import landing from ./landing. So the top level item inside of App is going to be HashRouter and then inside of that were gonna have one Route which is going to be exact path='/' component={landing}.
>> Brian Holt: So there's a bit going on here so let's unpack what's going on.

[00:06:01]
Let's start with the route. I think that's the easiest thing to reason about. This is one route of our application. It's saying that the path to get there is slash right? So it's the home page. And the exact means it must exactly match that path. So if I did not have exact in there and I had /foo or whatever, right?

[00:06:26]
Slash would still match that, right? Let me rephrase that. That's not what I wanted to say. What I meant to say was that if I went to /foo in the browser, right? This would still match /foo right? Because it work with, I forgot the name of the path to something or other, I can't remember the name of the path matching library is.

[00:06:57]
But just like if this was /foo, and I went to /foo/bar, this would also match it. So if the left side of it, matches the route, it's gonna match on it. So that's why you need to do exact, if that's what you're anticipating. You're saying only match this, it has to match exactly that, or it doesn't match at all.

[00:07:20]

>> Brian Holt: Okay? So that's the route. Then let's talk about HashRouter. Cuz HashRouter is kind of introduces us to an interesting concept. The component is like render this out if this path is matched here right. So what it's going to do is inside of this div right here, it will render out whatever is in landing.

[00:07:44]
Does that make sense?
>> Brian Holt: So basically you're saying, hey route if this path is matched, render landing. If path is not matched, don't render anything. That's how Router works.

