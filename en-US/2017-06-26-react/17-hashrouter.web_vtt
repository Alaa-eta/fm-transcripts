WEBVTT

1
00:00:00.670 --> 00:00:03.400
&gt;&gt; Brian: Okay, so
now let's talk about HashRouter.

2
00:00:03.400 --> 00:00:06.260
HashRouter is what we're gonna
call a higher order component.

3
00:00:07.350 --> 00:00:10.800
In that it doesn't actually render
anything itself out, right?

4
00:00:10.800 --> 00:00:14.610
You don't expect your router to
render markup itself, right?

5
00:00:14.610 --> 00:00:19.220
What it does, is it does routing and
then you tell it what markup to render.

6
00:00:21.170 --> 00:00:23.990
So it's higher order in the sense
that it introduces behavior, right?

7
00:00:23.990 --> 00:00:25.750
It's taking care of routing for you, but

8
00:00:25.750 --> 00:00:27.730
it's not actually rendering
any sort of markup out of it.

9
00:00:27.730 --> 00:00:30.274
That's what we call
a higher order component.

10
00:00:30.274 --> 00:00:33.370
Now, we're gonna use this one and
we're gonna use more of but

11
00:00:33.370 --> 00:00:35.987
there's nothing to stop us
ourselves from writing.

12
00:00:35.987 --> 00:00:36.820
In fact, later on,

13
00:00:36.820 --> 00:00:39.760
we'll actually be writing a couple
high order components ourselves.

14
00:00:39.760 --> 00:00:42.620
So, this is actually kind
of an advanced use case for

15
00:00:42.620 --> 00:00:46.671
react.
&gt;&gt; Brian: But

16
00:00:46.671 --> 00:00:48.230
I think it's one worth knowing.

17
00:00:48.230 --> 00:00:50.290
It's one of the more powerful
parts about using react.

18
00:00:50.290 --> 00:00:54.759
Any questions about high order components?
&gt;&gt; Brian: So

19
00:00:54.759 --> 00:00:58.690
they encapsulate behavior but they do not
necessarily encapsulate style of mark up.

20
00:01:02.420 --> 00:01:06.780
So, right now we have a really lame
router system because we match exactly,

21
00:01:06.780 --> 00:01:07.430
we have one route.

22
00:01:08.440 --> 00:01:10.200
But let's go ahead and
make sure that it works anyway.

23
00:01:12.360 --> 00:01:18.490
So, make sure your,
did I put dev in there?

24
00:01:18.490 --> 00:01:19.020
I did not.

25
00:01:19.020 --> 00:01:24.450
So Let's go ahead and
go back to our webpack.json.

26
00:01:24.450 --> 00:01:27.220
We're gonna put another thing in here.

27
00:01:27.220 --> 00:01:33.600
And it's just going to be dev, which is

28
00:01:33.600 --> 00:01:43.520
going to be webpack-dev-server

29
00:01:43.520 --> 00:01:44.410
Just how it is in there.

30
00:01:44.410 --> 00:01:47.010
We don't have to pass in anything because
it is already gonna read that from the web

31
00:01:47.010 --> 00:01:47.770
pack config.

32
00:01:54.600 --> 00:01:59.770
Okay and now if we go run your
dev It'll run our server for

33
00:01:59.770 --> 00:02:02.770
us.
&gt;&gt; Speaker 2: So, that's equivalent to

34
00:02:02.770 --> 00:02:09.350
like mpm start, right?
&gt;&gt; Brian: I mean, yes, sorta.

35
00:02:09.350 --> 00:02:12.420
So, mpm start would typically be like,
just.

36
00:02:14.080 --> 00:02:17.830
The answer to your question is,
it can be whatever you want it to be.

37
00:02:17.830 --> 00:02:22.731
Mpm start To me, semantically means how
you would start your production server,

38
00:02:22.731 --> 00:02:26.994
whereas npm run dev is how I would
run my own developer environment, but

39
00:02:26.994 --> 00:02:29.216
I guess that's just a choice I made.

40
00:02:29.216 --> 00:02:33.484
I don't even know if that's necessarily
the best practices, but did I sufficiently

41
00:02:33.484 --> 00:02:35.655
vaguely answer your question?
&gt;&gt; Speaker 2: Yeah.

42
00:02:35.655 --> 00:02:36.322
&gt;&gt; Brian: Okay, cool.

43
00:02:41.520 --> 00:02:42.232
&gt;&gt; Brian: Okay, so

44
00:02:42.232 --> 00:02:45.882
I want you to take note of
one thing really quick.

45
00:02:45.882 --> 00:02:50.319
Notice this weird hash that's now
suddenly showing up in our URL.

46
00:02:50.319 --> 00:02:53.004
How many of you have seen that before,
right?

47
00:02:53.004 --> 00:02:57.330
Really common way of being lazy about
doing single page applications.

48
00:02:57.330 --> 00:03:02.250
The reason why is that your server doesn't
have to care about any of the routes.

49
00:03:02.250 --> 00:03:05.040
Basically, what you say to your server is,

50
00:03:05.040 --> 00:03:09.980
"Go to this page if you see any url
that looks remotely like this," and

51
00:03:09.980 --> 00:03:14.480
then the client side code is going to
take care of all the routing for you.

52
00:03:14.480 --> 00:03:16.850
So it's super lazy and don't do it, right?

53
00:03:16.850 --> 00:03:19.609
Like, take the time to actually go and
set up your server correctly.

54
00:03:20.680 --> 00:03:24.880
But what is actually
doing that is HashRouter.

55
00:03:26.810 --> 00:03:31.240
So we're gonna migrate momentarily here to
browser router, but I'm gonna show you,

56
00:03:31.240 --> 00:03:39.296
we're gonna build one more route first.
&gt;&gt; Brian: So, make a new file.

57
00:03:39.296 --> 00:03:42.010
Call it search.jsx, and

58
00:03:42.010 --> 00:03:47.100
we're just going to make like
the most bare bone things possible.

59
00:03:47.100 --> 00:03:52.583
So, import react from react.
&gt;&gt; Speaker 3: Sorry,

60
00:03:52.583 --> 00:03:54.360
can you go back to the client app?

61
00:04:07.340 --> 00:04:13.832
&gt;&gt; Speaker 3: Can you go back to landing?
&gt;&gt; Brian: I'll

62
00:04:13.832 --> 00:04:15.810
push a branch here in just a second, too.
&gt;&gt; Speaker 3: Okay.

63
00:04:15.810 --> 00:04:20.831
All right, it looks right.
&gt;&gt; Brian: So in search what I want you to

64
00:04:20.831 --> 00:04:28.170
do really quick is just make
the most bare bones thing possible

65
00:04:40.568 --> 00:04:43.289
&gt;&gt; Brian: I'm highly paid for

66
00:04:43.289 --> 00:04:46.815
my abilities to find UIs.

67
00:04:48.315 --> 00:04:57.483
Export default search.
&gt;&gt; Brian: Okay, so just something dumb,

68
00:04:57.483 --> 00:05:01.540
because we just want to test real
quick that we can route correctly.

69
00:05:04.730 --> 00:05:11.604
Go back to ClientApp.jsx
&gt;&gt; Brian: And

70
00:05:11.604 --> 00:05:17.388
import Search from ./Search.
&gt;&gt; Brian: I'm

71
00:05:17.388 --> 00:05:22.545
going to create another Route,
&gt;&gt; Brian: And

72
00:05:22.545 --> 00:05:28.496
this is not going to be exact,
doesn't need to be /search.

73
00:05:28.496 --> 00:05:34.306
So, any time we go to /search,

74
00:05:34.306 --> 00:05:39.688
the component is going to be,

75
00:05:39.688 --> 00:05:44.209
as you may have guessed,

76
00:05:44.209 --> 00:05:48.548
search.
&gt;&gt; Brian: So,

77
00:05:48.548 --> 00:05:53.962
now we have two routes.
&gt;&gt; Brian: If we refresh so,

78
00:05:53.962 --> 00:05:58.931
landing still works and
now i'm just gonna URL hack up here,

79
00:05:58.931 --> 00:06:02.829
and type in search at the end of that,
refresh,

80
00:06:02.829 --> 00:06:07.720
sorry hit enter on that,
you should see your second route.

81
00:06:09.380 --> 00:06:11.560
And now we can go back and forth.
&gt;&gt; Speaker 3: Can

82
00:06:11.560 --> 00:06:14.090
you go back to search?
&gt;&gt; Brian: Yeah,

83
00:06:14.090 --> 00:06:16.240
I was just as barebones as possible.
&gt;&gt; Speaker 3: wow.

84
00:06:33.671 --> 00:06:34.891
&gt;&gt; Brian: So this is using a library

85
00:06:34.891 --> 00:06:36.465
called history underneath it.

86
00:06:36.465 --> 00:06:39.895
And what's really nice about history
is it's directly interacting with

87
00:06:39.895 --> 00:06:41.425
DOM's history API.

88
00:06:42.435 --> 00:06:48.270
Which means if you're just building With
react rather you get all like the back

89
00:06:48.270 --> 00:06:52.400
button forward button, opening links
with command clicks and a lot of stuff.

90
00:06:52.400 --> 00:06:55.730
And that all just works for
free which is really good.

91
00:06:55.730 --> 00:07:01.280
So again if I like hit 4 around here
you can see I get forward, backwards

92
00:07:01.280 --> 00:07:07.365
all that stuff just works automatically.
&gt;&gt; Speaker 3: Again

93
00:07:07.365 --> 00:07:12.682
the router is not defined.
&gt;&gt; Brian: In

94
00:07:12.682 --> 00:07:18.484
client app,
&gt;&gt; Brian: I

95
00:07:18.484 --> 00:07:24.765
would imagine that's problematic.
&gt;&gt; Brian: In landing,

96
00:07:24.765 --> 00:07:28.924
it'd be better if we didn't necessarily
have this browse all button,

97
00:07:28.924 --> 00:07:31.714
it actually took us to the search page,
right?

98
00:07:31.714 --> 00:07:36.308
So luckily, if we go to landing,

99
00:07:36.308 --> 00:07:41.888
what we can do there Is
we can import a link

100
00:07:41.888 --> 00:07:47.307
component from react-router-dom,

101
00:07:47.307 --> 00:07:52.887
and we can just replace this Browse All,

102
00:07:52.887 --> 00:08:00.295
replace that link with a link and
that goes to /search

103
00:08:07.960 --> 00:08:09.740
&gt;&gt; Brian: And what link is going to do,

104
00:08:09.740 --> 00:08:14.787
all it's gonna do is it's gonna generate
an anchor tag, an a tag with the correct

105
00:08:14.787 --> 00:08:20.181
URL to go to.
&gt;&gt; Brian: So

106
00:08:20.181 --> 00:08:22.720
if we refresh,
notice that the UI hasn't changed.

107
00:08:22.720 --> 00:08:23.921
It looks exactly like it did,

108
00:08:23.921 --> 00:08:26.670
because it just went from being
an anchor tag to being an anchor tag.

109
00:08:26.670 --> 00:08:31.500
However, if I click on it,
it will take me to search.

110
00:08:35.771 --> 00:08:39.170
&gt;&gt; Brian: And again.

111
00:08:39.170 --> 00:08:41.989
Because it's an anchor tag
I can command click and

112
00:08:41.989 --> 00:08:45.086
notice that it opens the new tab and
it works just fine.

113
00:08:45.086 --> 00:08:48.709
So as long as you, you know,
don't mess up the browser,

114
00:08:48.709 --> 00:08:53.388
don't use you know event click listeners
that do window dot location that

115
00:08:53.388 --> 00:08:55.594
forward you on to somewhere else.

116
00:08:55.594 --> 00:08:58.212
As long as you don't do any of that
shenanigans you just get all of

117
00:08:58.212 --> 00:09:00.020
the browser functionality built for free.

118
00:09:00.020 --> 00:09:03.418
And your site is a ton more accessible,
so all good things.

