WEBVTT

1
00:00:00.470 --> 00:00:02.915
&gt;&gt; Brian Holt: This is a good time
to talk about my opinion on testing.

2
00:00:02.915 --> 00:00:07.740
[LAUGH] Everything I'm about to tell you
is purely like the doctrine of Brian Holt

3
00:00:07.740 --> 00:00:11.300
and not necessarily the doctrine
of the community, so

4
00:00:11.300 --> 00:00:16.470
take that with a whole bag of salt,
just be careful with what I tell you here.

5
00:00:16.470 --> 00:00:18.150
Cuz I'll even say that
it's not necessarily

6
00:00:18.150 --> 00:00:20.160
shared by the community at large.

7
00:00:20.160 --> 00:00:22.730
I don't do a ton of testing on
my React components, right.

8
00:00:22.730 --> 00:00:25.550
And the reason being is that every
company that I have worked at,

9
00:00:25.550 --> 00:00:27.690
the UI was constantly in a state of flux.

10
00:00:27.690 --> 00:00:29.960
We were constantly bringing
in new components and

11
00:00:29.960 --> 00:00:34.030
taking out other components and just kind
of like doing stuff like that willy nilly

12
00:00:34.030 --> 00:00:36.430
just because our interfaces
were always changing.

13
00:00:36.430 --> 00:00:38.650
We were always trying new things,
we were doing AV testing.

14
00:00:38.650 --> 00:00:42.676
We were doing all sorts of these things
that made it so, it's really tough to nail

15
00:00:42.676 --> 00:00:45.802
down, this is UI and
it's gonna stay that way for a long time.

16
00:00:45.802 --> 00:00:47.620
Writing good test cases takes a while.

17
00:00:47.620 --> 00:00:52.890
It takes a decent amount of effort
to get a decent test case out.

18
00:00:52.890 --> 00:00:58.360
So with these react components,
these presentational parts of react,

19
00:00:58.360 --> 00:01:02.350
we kind of chose for the most part to not
test them unless they were consistently

20
00:01:02.350 --> 00:01:08.200
breaking, or they were extremely
important, or something like that.

21
00:01:08.200 --> 00:01:11.540
Now, what we would test is we would
test the business logic behind it, and

22
00:01:11.540 --> 00:01:13.760
we would write tons of tests for that.

23
00:01:13.760 --> 00:01:18.430
So, maybe we're not testing the component
that shows the payment information, but

24
00:01:18.430 --> 00:01:22.560
we would test the module behind it,
that had all the business logic.

25
00:01:22.560 --> 00:01:23.730
We would test the hell out of that.

26
00:01:26.200 --> 00:01:28.804
So, that's kind of up to you.

27
00:01:28.804 --> 00:01:31.080
But we found,
when we were writing these tests,

28
00:01:31.080 --> 00:01:35.000
these presentational tests,
that we would write these tests and

29
00:01:35.000 --> 00:01:37.830
then they would be used for
a month and they would go away.

30
00:01:37.830 --> 00:01:42.040
When I write a test, I want it to live for
a long time and be useful for a long time.

31
00:01:42.040 --> 00:01:47.000
So this is purely according
to your particular use case.

32
00:01:47.000 --> 00:01:52.370
Like if you're writing bank code and
banks don't change their UI a whole lot,

33
00:01:52.370 --> 00:01:54.900
makes a ton of sense to test everything.

34
00:01:54.900 --> 00:02:00.340
But if you're doing a ton of AB testing,
you might want to be careful about what

35
00:02:00.340 --> 00:02:06.297
you choose to test, so up to you.
&gt;&gt; Brian Holt: Never run any tests,

36
00:02:06.297 --> 00:02:08.066
that's what I'm trying to say.
&gt;&gt; Audience 1: [LAUGH]

37
00:02:08.066 --> 00:02:09.286
&gt;&gt; Brian Holt: I'm just kidding,

38
00:02:09.286 --> 00:02:16.090
[LAUGH] just kidding, well, sort of.
&gt;&gt; Audience 1: Maybe it makes sense,

39
00:02:16.090 --> 00:02:20.285
I'll throw it out there, that can dots,
actually, can't see dots as a course

40
00:02:20.285 --> 00:02:25.420
that goes into this stuff
in quite a bit more

41
00:02:25.420 --> 00:02:31.320
detail if you're interested in the
different paths you can take with testing,

42
00:02:31.320 --> 00:02:33.370
especially with snapshots.
&gt;&gt; Brian Holt: Yeah,

43
00:02:33.370 --> 00:02:34.900
I know, it's pretty awesome.

44
00:02:34.900 --> 00:02:37.955
I've watched pieces of it.

45
00:02:37.955 --> 00:02:43.315
Yeah.
&gt;&gt; Audience 2: Can I ask you a question

46
00:02:43.315 --> 00:02:47.772
about what find(ShowCard) returns,

47
00:02:47.772 --> 00:02:52.000
it's an array of what?
&gt;&gt; Brian Holt: It's gonna return an array

48
00:02:52.000 --> 00:02:54.510
of, well, let's see,
I can show you from the snapshot.

49
00:02:54.510 --> 00:02:59.729
Its gonna be array these,
its like they're like stubs,

50
00:02:59.729 --> 00:03:05.955
pretty much.
&gt;&gt; Audience 3: So

51
00:03:05.955 --> 00:03:10.738
if we wanted to invalidate that
it's the correct shows were

52
00:03:10.738 --> 00:03:14.277
being returned,
we could Dot into those and

53
00:03:14.277 --> 00:03:18.930
compare titles or something.
&gt;&gt; Brian Holt: The answer is I believe so.

54
00:03:18.930 --> 00:03:23.994
I've never tried, so.
&gt;&gt; Brian Holt: That

55
00:03:23.994 --> 00:03:27.606
would make sense.
&gt;&gt; Brian Holt: Yeah,

56
00:03:27.606 --> 00:03:30.770
I think it's an enzyme component.

57
00:03:30.770 --> 00:03:33.660
And there is some introspection you
can do that, say, this is the stub.

58
00:03:33.660 --> 00:03:35.700
This is the props being passed in.

59
00:03:35.700 --> 00:03:41.470
I think you can validate those props.
&gt;&gt; Brian Holt: Cool,

60
00:03:41.470 --> 00:03:43.880
any questions on testing?

61
00:03:43.880 --> 00:03:46.710
We will come back and
we'll do more testing later and

62
00:03:46.710 --> 00:03:51.010
we're gonna break our test several
times before the end of the course.

63
00:03:51.010 --> 00:03:52.410
So that's fun.

