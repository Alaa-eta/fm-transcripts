[00:00:00]
>> Brian: It's kind of verbose to have to repeat writing createElement over and over and over again. There's a couple ways to do this. So first of all, a bunch of people that write React don't even know what createElements is. The reason being is that they never have to write it, cuz we're gonna get to writing JSX, in maybe like an hour.

[00:00:24]

>> Brian: Yeah, so they don't every have to write createElement, JSX transpiles to createElement calls. But I do know some crazy people who have chosen not to write JSX, and it is possible to write huge apps without using any JSX. So I'm gonna show you just a couple tricks of how to do that a little bit easier.

[00:00:42]
So you can say const ce = React.createElement,
>> Brian: And then now I can replace all these createElements, I'm just gonna do find, React.createElement, replace that with ce. And we'll just say replace all, and we've got to do that again, createElement.
>> Brian: And it gets a little bit easier to, or it's a little less dense, right?

[00:01:16]
You don't need all those React.createElements every single time. There's also a package called createFactory that helps as well. And there's also react-dom helpers, which I'm not going to show you how to do today, because it's kind of the old way of doing it. And once we get to JSX, that's not helpful anyway.

[00:01:37]
But you can do things like div and h1, right, so you can actually call them by the name of the function. Then you get rid of this, oops.
>> Brian: What happened there? Right, and it looks something like that, right? Again, getting less and less dense, but you have to get some helper libraries to do that, and we're not gonna do that today.

[00:02:03]

>> Brian: Okay.
>> Brian: So now that we've done that, let's go ahead and talk about props and attributes. So, so far not super useful, right? Cuz we're just rendering out My second component a bunch of times, not entirely exciting. So let's go make this a little bit more interesting.

[00:02:25]
We can actually pass properties from MyFirstComponent into MyTitle. So let's try doing that real quick.
>> Brian: So we're gonna pass, call it the title.
>> Brian: And we're gonna put some of our favorite tv shows in here. So let's put Game of Thrones, that's a good one, Stranger Things.

[00:02:57]

>> Brian: What's a good TV show?
>> Speaker 2: Rick and Morty.
>> Brian: Rick and Morty, that's a good one.
>> Brian: And Silicon Valley.
>> Brian: Cool.
>> Brian: So now inside of MyTitle, the first thing that's going to be passed into it is a thing called props. And props is just going to be whatever you passed in right here.

[00:03:28]
So instead of saying My component right here, I can see props.title.
>> Brian: So now if we save this,
>> Brian: And come back over here, notice that now we have multiple different kinds of titles, which is pretty cool.
>> Brian: So we're getting more reuseable right, more flexible. We can pass different properties into components and kind of mold them.

[00:04:00]
Right now we're just changing the text, but we can do all sorts of things, right? Sometimes I could be like, show this particular theme for this widget, or I don't know. If a user's logged in, show this, if a user's logged out, show that.
>> Speaker 2: Just to clarify, props is just like a syntax that most people use, or do people call the-

[00:04:25]

>> Brian: Would you call this anything other than props? Never, you would never call it anything other than props. I've never seen it called anything other than props. So it is convention, you could call it something else, don't.
>> Speaker 2: But don't.
>> [LAUGH]
>> Brian: So let's take this even a step further, and we want to change the color of whatever's being passed in here.

[00:04:49]

>> Brian: So we're gonna pass something else into all of these.
>> Brian: So one of my favorite interview questions to ask people is always, what's your favorite CSS named color? I have a couple of new ones. So there is YellowGreen, which is my favorite. My second favorite is GreenYellow.

[00:05:16]
And LimeGreen, and then just Lime, which are also different colors.
>> Brian: So actually still my favorite is peru. [LAUGH] You really just can't beat peru, which is a color.
>> Speaker 2: I know PapayaWhip's pretty cool.
>> Brian: PapayaWhip is pretty good, what else? I don't know, medium aquamarine, that's a really good one.

[00:05:52]

>> Brian: So what we're going to do here is we're going to pass that color to be the color of the h1, right? So instead of being null here, we're gonna pass it an object. And we're gonna give it a style attribute. It's not a typical style string that you'd put into the,

[00:06:11]

>> Brian: Onto the actual DOM, right? It's actually gonna be an object, which is a little bit easier to work with. So we're gonna do color, and that's gonna be props.color.
>> Brian: Right, and as long as this is called the same thing, it could be anything, right? So if I change this to be, I don't know, the Canadian way or British way, or both.

[00:06:43]

>> Brian: But anyway, so now if we save that and come back over here, you'll notice that we have various shades of green and peru. If you did not know, that is the color of peru.
>> Brian: Okay, any questions so far?
>> Speaker 2: So for the style, you could pass a string, but that's just cumbersome, that's why we wanna do that?

[00:07:11]

>> Brian: I don't think it actually works.
>> Speaker 2: Okay.
>> Brian: So really what's happening underneath the hood is, this is actually interacting with the JavaScript API for DOM elements. And this is the way you actually interact with the style API, with just the DOM API
>> Brian: Cool.
>> Speaker 2: Another question.

[00:07:39]

>> Brian: Yeah.
>> Speaker 2: Do any authors ever avoid using props and instead pass individual arguments to the constructor for a little bit better self documenting components, or? Cuz MyTitle could accept a color and a title as arguments, and that would be a little bit more obvious than just property bag coming in.

[00:08:04]

>> Brian: The answer to that question is no, you do have to do it this way. Because React is actually hooking into those and it'll known when to re-render based on what you passed into it. Now you can get around that, which I'll show you later today, with Flow.

[00:08:19]
Cuz then Flow will start warning you. So typing your React components actually helps a ton. There's also something called prop types, which again, we will also talk about those. And Flow is gonna be a static type checker, so it's gonna tell you that at compile time. Whereas prop types is gonna tell you at run time, it's like hey, this was missing.

[00:08:38]
So it is a problem, but there's tooling to get around it. That's a good question.
>> Speaker 2: Terry is asking, what about attributes?
>> Brian: Like what kind of attributes?
>> Speaker 2: I think it's the same thing, props and attributes are synonymous.
>> Brian: Yeah and in this particular case for React, we call them props, but they are attributes as well.

[00:09:01]

>> Speaker 2: Yeah, attributes in HTML.
>> Brian: Yeah, yeah.
>> Brian: So this is really it for React at it's most basic level, right? Just passing props down to the components. We're going to get here to state momentarily.
>> Speaker 2: One other question.
>> Brian: Yeah, sure.
>> Speaker 2: Just for a little bit further clarification on that second argument, which is null, those are HTML attributes?

[00:09:32]

>> Brian: So for this particular one, right, for the h1s and the divs, this is actually going to be the attributes that are gonna be put onto the DOM, right? But for something like MyTitle, this isn't actually something that gets rendered directly to the DOM, there's not a MyTitle tag, right?

[00:09:47]
So this is what's passed into the component here as props.
>> Speaker 2: Okay, so is id, MyFirstComponent, is id recognized as a special property that gets tagged on to HTML or?
>> Brian: React naively passes that just to the DOM right?
>> Brian: So for example, if this was React Native, it would be a totally different set of attributes, right?

[00:10:16]
Does that make sense? Cool, so again, if you have something like Flow, Flow will check that for you to make sure it's like, hey, you tried to pass idd, and that's not a thing. So that's a failure, right? But we're not using anything like that yet. So don't mess it up, that's the big key here just to not mess up anything.

[00:10:40]
Good question, other questions?
>> Brian: Yeah.
>> Speaker 2: Just about the color, the name of colors.
>> Brian: Mm-hm.
>> Speaker 2: Is that just the coming from, where is that coming from?
>> Brian: These particular colors?
>> Speaker 2: Yeah.
>> Brian: These are all-
>> Speaker 2: Native colors?
>> Brian: Native colors, right?
>> Speaker 2: Okay.
>> Brian: So I could totally call this.

[00:11:02]

>> Speaker 2: Yeah, okay.
>> Brian: Right, and that would totally work.
>> Brian: Cool.
>> Brian: So this is it for writing React without JSX. [COUGH] We're gonna start getting a little bit more complicated. And so we're gonna start adopting some tooling to kinda help us along here.

