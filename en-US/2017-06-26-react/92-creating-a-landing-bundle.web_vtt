WEBVTT

1
00:00:00.360 --> 00:00:03.880
&gt;&gt; Brian Holt: So let's go actually
use the dynamic import now, so

2
00:00:03.880 --> 00:00:09.300
go to app.jsx and
we are going to just do landing first,

3
00:00:09.300 --> 00:00:12.080
right, and
then we'll work through the other ones.

4
00:00:12.080 --> 00:00:17.482
So we're going to import AsyncRoute from

5
00:00:17.482 --> 00:00:23.260
./AsyncRoute, and
then I want you to delete Landing.

6
00:00:24.290 --> 00:00:28.444
So delete Landing here, the reason why
that's important is as soon as we delete

7
00:00:28.444 --> 00:00:32.477
our Landing, it's not going to include
that anymore in the initial bundle.

8
00:00:36.549 --> 00:00:39.954
&gt;&gt; Brian Holt: Okay, and
what we're going to do here,

9
00:00:39.954 --> 00:00:43.070
we'll make sure I get this correct.

10
00:00:46.905 --> 00:00:49.635
&gt;&gt; Brian Holt: Let's just put this on
multiple lines cuz this is gonna make it

11
00:00:49.635 --> 00:00:50.640
easier for me to read.

12
00:00:54.502 --> 00:00:58.331
&gt;&gt; Brian Holt: No, it's fine, okay,
path=/ okay, and then component,

13
00:00:58.331 --> 00:01:02.776
we're not gonna load Landing cuz
that's no longer available upfront.

14
00:01:02.776 --> 00:01:06.240
What we're gonna do is we're going
to make this another function,

15
00:01:06.240 --> 00:01:10.070
another arrow function, right,
it's gonna take in props and

16
00:01:10.070 --> 00:01:15.280
then it's going to render AsyncRoute.

17
00:01:15.280 --> 00:01:19.965
Props are going to be equal to whatever
props are passed in, so props = props.

18
00:01:19.965 --> 00:01:25.279
And then the last thing is going to be

19
00:01:25.279 --> 00:01:31.487
loadingPromise= import./Landing.

20
00:01:45.595 --> 00:01:46.515
&gt;&gt; Brian Holt: What I mess up here?

21
00:01:46.515 --> 00:01:50.495
All right, so that's fine,
it needs to be that, right.

22
00:01:56.360 --> 00:01:56.916
&gt;&gt; Brian Holt: I always mess this up.

23
00:02:09.667 --> 00:02:12.121
&gt;&gt; Brian Holt: Okay, so,
it's still a route, right,

24
00:02:12.121 --> 00:02:15.837
with three act router, but
the component's going to render,

25
00:02:15.837 --> 00:02:19.355
it's going to render this
AsyncRoute component, right.

26
00:02:19.355 --> 00:02:25.039
So AsyncRoute, the first time it renders
is going to be the loading spinner,

27
00:02:25.039 --> 00:02:28.720
right, but
we're also passing it this promise.

28
00:02:30.640 --> 00:02:35.655
This promise is coming from import,
import is going to go out

29
00:02:35.655 --> 00:02:41.680
to our server, and say,
I don't have this, please get this to me.

30
00:02:44.900 --> 00:02:47.060
Our server is going to hand them
another bundle of JavaScript,

31
00:02:47.060 --> 00:02:49.870
and then once that JavaScript is loaded,
parsed,

32
00:02:49.870 --> 00:02:52.580
and ready to go, it's going to
resolve that promise with that module.

33
00:02:55.030 --> 00:02:58.660
Now you might be asking,
where's the code split actually happening?

34
00:02:58.660 --> 00:03:01.550
Where do I tell it split the code here,
right?

35
00:03:01.550 --> 00:03:06.180
The answer is, it's just smart enough
to say you called import there,

36
00:03:06.180 --> 00:03:09.140
I can cut off this entire
part of the dependency graph.

37
00:03:09.140 --> 00:03:13.002
So anything that landing is depending on,
which is not much at the moment, but

38
00:03:13.002 --> 00:03:20.010
anything that is coming along with Landing
will be asynchronously loaded here.

39
00:03:22.896 --> 00:03:25.968
&gt;&gt; Brian Holt: So let's take a look
at what that actually looks like, so

40
00:03:25.968 --> 00:03:29.424
first of all if you go back to,
I think I put this in a bad state, so

41
00:03:29.424 --> 00:03:31.159
let's try running this again.

42
00:03:35.282 --> 00:03:36.828
&gt;&gt; Brian Holt: You changed
your .babelrc files,

43
00:03:36.828 --> 00:03:40.550
any time you change .babelrc you're gonna
have to start and stop your server again.

44
00:03:46.822 --> 00:03:51.100
&gt;&gt; Brian Holt: It still doesn't like that,
unexpected token there.

45
00:03:54.173 --> 00:03:56.578
&gt;&gt; Brian Holt: All right so,
this gets a little dense for me so

46
00:03:56.578 --> 00:04:00.850
I'm just gonna put this on to multiple
lines, figure out where I'm going wrong.

47
00:04:12.831 --> 00:04:17.394
&gt;&gt; Brian Holt: All right so
I have Route, exact, path, component,

48
00:04:17.394 --> 00:04:22.670
this is props that returns
AsyncRoute props loadingPromise.

49
00:04:27.748 --> 00:04:29.811
&gt;&gt; Brian Holt: And loadingPromise.

50
00:04:33.084 --> 00:04:37.059
&gt;&gt; Brian Holt: That looks
like it should work,

51
00:04:37.059 --> 00:04:41.778
right, did I mess something else up?

52
00:04:52.494 --> 00:04:55.640
&gt;&gt; Brian Holt: I might of not
saved my babel file, I didn't, ha!

53
00:04:55.640 --> 00:04:59.260
There it is, gotta save your .babblerc or
it doesn't work.

54
00:05:12.219 --> 00:05:13.330
&gt;&gt; Brian Holt: Hopefully
it works this time.

55
00:05:18.252 --> 00:05:23.434
&gt;&gt; Brian Holt: Okay, so now what I want
you to come up and check out is we

56
00:05:23.434 --> 00:05:28.530
got 0.bundle.js and
we have bundle.js, right.

57
00:05:28.530 --> 00:05:32.887
Now granted, this is 5.58 megabytes,
this is 10 kilobytes, not a whole lot of

58
00:05:32.887 --> 00:05:37.080
savings, right, but imagine if you have
large dependency graphs on each route.

59
00:05:37.080 --> 00:05:42.055
Like one of them is bringing in moment.js,
right, moment's a fairly large library, so

60
00:05:42.055 --> 00:05:44.810
you only wanna load moment
when it's necessary.

61
00:05:47.322 --> 00:05:49.030
&gt;&gt; Brian Holt: So
if we refresh this again,

62
00:05:55.593 --> 00:05:56.619
&gt;&gt; Brian Holt: What I want you to look

63
00:05:56.619 --> 00:06:01.410
at if we open network,
&gt;&gt; Brian Holt: We're gonna refresh.

64
00:06:01.410 --> 00:06:05.960
Notice how it loads bundle and
0.bundle.js cuz this is

65
00:06:07.300 --> 00:06:10.900
the landing route, so
it's gonna have to load both of those.

66
00:06:10.900 --> 00:06:12.930
But again, go to Browse All but

67
00:06:12.930 --> 00:06:16.670
now refresh again hard,
I'm just gonna look at JS for the moment.

68
00:06:16.670 --> 00:06:19.550
Notice that only bundle.js
is being loaded,

69
00:06:19.550 --> 00:06:24.120
then as soon as I go to Home it's
gonna load another bundle, right.

70
00:06:24.120 --> 00:06:26.040
So this is what code splitting
is gonna buy for you,

71
00:06:26.040 --> 00:06:30.740
it's gonna buy you the ability
to have this code split out so

72
00:06:30.740 --> 00:06:33.550
that you can have smaller
initial bundle sizes.

73
00:06:33.550 --> 00:06:36.770
Again, this is something you're gonna
have to carefully consider, whether or

74
00:06:36.770 --> 00:06:38.290
not it's going to be useful for you.

75
00:06:38.290 --> 00:06:40.060
This is not useful, right, landing is so

76
00:06:40.060 --> 00:06:44.510
small that the ability to like split
this out, it's not super interesting.

77
00:06:44.510 --> 00:06:47.380
It would be better if we just
included it the first time

78
00:06:47.380 --> 00:06:48.980
instead of having to split this out.

79
00:06:48.980 --> 00:06:53.680
But, if in a normal application, when each
route is going to be fairly sizeable,

80
00:06:53.680 --> 00:06:56.985
you're gonna be saving maybe 100
kilobytes and that's a big deal.

81
00:07:00.533 --> 00:07:03.543
&gt;&gt; Brian Holt: Also keep in mind that
these file sizes look really large but

82
00:07:03.543 --> 00:07:06.109
where it's un-menofied, it's un-gzipped.

83
00:07:06.109 --> 00:07:10.415
All like of this stuff is not production
ready at this moment in time.

