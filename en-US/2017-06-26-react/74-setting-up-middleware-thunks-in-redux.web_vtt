WEBVTT

1
00:00:00.630 --> 00:00:07.778
&gt;&gt; Brian Holt: So what I want you to do
is I want you to go into your store.js.

2
00:00:07.778 --> 00:00:10.760
So I guess I didn't talk
about what compose is here.

3
00:00:10.760 --> 00:00:16.070
This is augmenting the abilities of
Redux by handing it a middleware.

4
00:00:16.070 --> 00:00:19.680
This middleware just intercepts all of the
actions, and feeds it in the Dev tools.

5
00:00:19.680 --> 00:00:23.284
That's all this is Bit of code is doing,
right?

6
00:00:23.284 --> 00:00:24.750
We're gonna hand it another middleware,

7
00:00:24.750 --> 00:00:26.890
which is going to make Redux
able to deal with thunks.

8
00:00:28.780 --> 00:00:34.881
So what I want you to do up here is import

9
00:00:34.881 --> 00:00:40.095
thunk from 'redux-thunk'.

10
00:00:40.095 --> 00:00:42.000
And then down here,

11
00:00:43.200 --> 00:00:47.660
you're gonna say inside of the composed
function, applyMiddleware.

12
00:00:47.660 --> 00:00:53.164
So I guess I have to go and
port that as well, applyMiddleware(thunk).

13
00:00:55.469 --> 00:00:57.796
&gt;&gt; Brian Holt: And up here, we're gonna
also have to get applyMiddleware.

14
00:01:05.643 --> 00:01:06.278
&gt;&gt; Brian Holt: Yep.

15
00:01:10.042 --> 00:01:12.512
&gt;&gt; Brian Holt: So just,
you have to go to applyMiddleware.

16
00:01:12.512 --> 00:01:14.477
You have to import thunk.

17
00:01:14.477 --> 00:01:16.516
And then you have to apply
the middleware in compose.

18
00:01:24.088 --> 00:01:25.030
&gt;&gt; Brian Holt: Okay?

19
00:01:25.030 --> 00:01:28.510
Now, we're gonna have to
create two different things,

20
00:01:28.510 --> 00:01:30.600
two different action creators.

21
00:01:30.600 --> 00:01:32.950
We're gonna have to create an action
creator that actually goes out and

22
00:01:32.950 --> 00:01:34.250
makes the request, right?

23
00:01:34.250 --> 00:01:35.880
The thunk part.

24
00:01:35.880 --> 00:01:39.080
Then we have to have another type of
action that actually takes the result

25
00:01:39.080 --> 00:01:42.500
of that and
feeds it into Redux as an action, right?

26
00:01:42.500 --> 00:01:44.390
So we need the Thunk and
the actual action,

27
00:01:44.390 --> 00:01:48.020
that's gonna get dispatched, and
I'll show you what that means.

28
00:01:48.020 --> 00:01:52.138
So first thing, let's go to action.js and

29
00:01:52.138 --> 00:01:56.701
we're gonna create a new
type of constant here,

30
00:01:56.701 --> 00:02:00.056
which is gonna be ADD_API_DATA.

31
00:02:00.056 --> 00:02:05.151
That's gonna be ADD_API_DATA,
&gt;&gt; Brian Holt: And

32
00:02:05.151 --> 00:02:07.410
we'll finally get rid of
that stupid eslint error.

33
00:02:10.798 --> 00:02:11.340
&gt;&gt; Brian Holt: Okay.

34
00:02:11.340 --> 00:02:17.730
And now I want you to go into types, and
we're gonna make another type of type.

35
00:02:20.670 --> 00:02:27.387
So action type will either be able to
be SET_SEARCH_TERM, or add API data.

36
00:02:36.307 --> 00:02:41.814
&gt;&gt; Brian Holt: Okay, close.

37
00:02:41.814 --> 00:02:45.884
And then here, down where we're
exporting the action down here,

38
00:02:45.884 --> 00:02:48.581
we're gonna make another type of action T.

39
00:02:53.244 --> 00:02:55.940
&gt;&gt; Brian Holt: So
what are we gonna get back from the API?

40
00:02:57.050 --> 00:02:59.630
Well, in fact,
let's go actually go run it.

41
00:02:59.630 --> 00:03:02.759
I still have it running but, if you
need refresher, it's just the yarn api.

42
00:03:05.421 --> 00:03:10.681
&gt;&gt; Brian Holt: And
then if I go to localhost.3000/ some valid

43
00:03:10.681 --> 00:03:16.404
id,
&gt;&gt; Brian Holt: So

44
00:03:16.404 --> 00:03:18.470
this is from Master of None.

45
00:03:18.470 --> 00:03:20.959
What does this look like?

46
00:03:20.959 --> 00:03:22.210
Well, it looks like a show, right?

47
00:03:22.210 --> 00:03:22.809
It's the same show,

48
00:03:22.809 --> 00:03:26.080
it's actually literally the show object,
because that's where I'm reading it from.

49
00:03:26.080 --> 00:03:31.179
So the action type is
gonna be ADD_API_DATA.

50
00:03:31.179 --> 00:03:32.480
What is the payload type gonna be?

51
00:03:34.550 --> 00:03:36.690
Show, right,
that's what the payload's gonna be.

52
00:03:38.470 --> 00:03:44.318
So this is gonna be ADD_API_DATA,

53
00:03:44.318 --> 00:03:48.070
space Show, right,
because the payload type is gonna be Show.

54
00:03:48.070 --> 00:03:49.926
That makes sense?

55
00:03:49.926 --> 00:03:55.015
Now, we're gonna have to do one thing
appeared to show because if you

56
00:03:55.015 --> 00:04:00.572
look over here, it's getting one more
thing which is the rating, right?

57
00:04:00.572 --> 00:04:02.537
So we're just gonna add
that in to our show type.

58
00:04:07.186 --> 00:04:08.590
&gt;&gt; Brian Holt: And
that's gonna be a string.

59
00:04:09.940 --> 00:04:12.755
You don't want it to be a number
in this particular case,

60
00:04:12.755 --> 00:04:14.582
because we want it to be like 9.0.

61
00:04:14.582 --> 00:04:17.173
And if you make it a number,
it's gonna drop to 0.0, right?

62
00:04:17.173 --> 00:04:18.977
So you want the ratings
to always have that, so

63
00:04:18.977 --> 00:04:20.470
we're just gonna keep it as a string.

64
00:04:24.289 --> 00:04:25.758
&gt;&gt; Brian Holt: Let's see,
make sure I get that right.

65
00:04:33.149 --> 00:04:36.425
&gt;&gt; Brian Holt: Okay, and
actually this is gonna be a maybe

66
00:04:36.425 --> 00:04:40.442
type,
&gt;&gt; Brian Holt: Because we're not always

67
00:04:40.442 --> 00:04:44.387
going to get the rating back, that's
only gonna be from back from the API.

68
00:04:44.387 --> 00:04:48.385
And when we preload it on the site, it is
not gonna come back with rating data, so

69
00:04:48.385 --> 00:04:50.847
we're gonna make that
rating data a maybe type.

70
00:04:57.714 --> 00:04:58.890
&gt;&gt; Brian Holt: Okay?

71
00:04:58.890 --> 00:05:00.736
Now, let's go back to Reducers.

72
00:05:04.680 --> 00:05:09.590
&gt;&gt; Brian Holt: Okay,
we're going to import, ADD_API_DATA.

73
00:05:09.590 --> 00:05:11.670
So again, just to be clear,

74
00:05:11.670 --> 00:05:15.450
right now everything that we're doing is
just the synchronous normal action types.

75
00:05:15.450 --> 00:05:17.083
We haven't done anything asynchronous yet.

76
00:05:18.965 --> 00:05:21.333
&gt;&gt; Brian Holt: So
we have const searchTerm here, and

77
00:05:21.333 --> 00:05:24.522
then what we're gonna have
here is const apiData.

78
00:05:27.817 --> 00:05:31.230
&gt;&gt; Brian Holt: The default state of
this is going to be an empty object, and

79
00:05:31.230 --> 00:05:34.110
the action is going to be,
of course, an action.

80
00:05:39.910 --> 00:05:42.810
So, how are we gonna store this apiData?

81
00:05:44.180 --> 00:05:49.070
I found a useful way to do this is to
start with as a key value store, right?

82
00:05:49.070 --> 00:05:51.250
Because every time we go to the API,

83
00:05:51.250 --> 00:05:53.760
we want to store in a way that
we can easily retrieve it.

84
00:05:53.760 --> 00:05:59.570
So we're going to restore it with
an object where the IMDb ID is actually

85
00:05:59.570 --> 00:06:04.110
going to be the key, and the value of that
is going to be the show object, right?

86
00:06:05.320 --> 00:06:08.675
So that way, in the future, if I
navigate to Orange is the New Black, and

87
00:06:08.675 --> 00:06:12.195
then I back out of it and then I go back
to Orange is the New Black, I can just get

88
00:06:12.195 --> 00:06:15.880
the data out of Redux, and it will have
to request it again from the API, right?

89
00:06:15.880 --> 00:06:16.623
Does that make sense?

90
00:06:21.088 --> 00:06:24.427
&gt;&gt; Brian Holt: Maybe not, no, okay,
okay, [LAUGH] I saw some head shakes, so

91
00:06:24.427 --> 00:06:26.771
we'll go with yes, it makes sense, okay.

92
00:06:28.900 --> 00:06:34.224
&gt;&gt; Brian Holt: So the first thing you're
gonna do is just like in searchTerm,

93
00:06:34.224 --> 00:06:39.453
I'm gonna say if (action.type
===ADD_API_DATA).

94
00:06:40.991 --> 00:06:44.015
&gt;&gt; Brian Holt: So another thing that we're
kind of doing here behind the scenes,

95
00:06:44.015 --> 00:06:47.255
which you may not have noticed,
is this another type refinement here,

96
00:06:47.255 --> 00:06:48.720
which I think is pretty clever.

97
00:06:50.480 --> 00:06:55.670
So as soon as I establish that
Action.Type === ADD_API_DATA,

98
00:06:55.670 --> 00:06:58.210
what do I know about the payload?

99
00:06:58.210 --> 00:07:01.970
I know for
a fact the payload is going to be a show.

100
00:07:01.970 --> 00:07:06.070
So I can start saying like
Action.Payload.Rating,

101
00:07:06.070 --> 00:07:07.780
and my typecheck is like cool.

102
00:07:07.780 --> 00:07:08.700
I know that's gonna be there,

103
00:07:08.700 --> 00:07:12.120
because you checked to see if
the type was an ADD_API_DATA.

104
00:07:12.120 --> 00:07:15.040
It is cool,
I know exactly what payload is.

105
00:07:15.040 --> 00:07:21.364
By the same token, I can say return
action.payload.toUpperCase here, right?

106
00:07:21.364 --> 00:07:24.380
This is not gonna fail because
this knows like, that's a string.

107
00:07:24.380 --> 00:07:31.360
I know that's a string, whereas,
if I try and say like map, right?

108
00:07:31.360 --> 00:07:34.644
I don't think that's
a function on strings.

109
00:07:34.644 --> 00:07:37.300
It's gonna say hey,
add some payloads of string and

110
00:07:37.300 --> 00:07:41.730
it doesn't have a map feature on it,
so that's cool.

111
00:07:41.730 --> 00:07:43.450
That's how we're able to do that.

112
00:07:43.450 --> 00:07:46.809
This is a type refinement right here,
kinda happening behind the scenes.

113
00:07:51.506 --> 00:07:52.510
&gt;&gt; Brian Holt: I think it's cool.

114
00:07:52.510 --> 00:07:54.000
You can disagree with me.

115
00:07:54.000 --> 00:07:58.041
You're just wrong, that's all,
[LAUGH] just kidding.

116
00:07:58.041 --> 00:08:02.682
Okay, so what we're gonna do
here is we're going to return,

117
00:08:02.682 --> 00:08:06.542
if it is in fact ADD_API_DATA
is the action type.

118
00:08:06.542 --> 00:08:10.955
We're gonna do object.assign,

119
00:08:10.955 --> 00:08:15.675
empty object, new object, right?

120
00:08:15.675 --> 00:08:18.723
state, so we're gonna keep
everything that we had before,

121
00:08:18.723 --> 00:08:20.830
then we're going to return a new object.

122
00:08:23.420 --> 00:08:27.190
So what we want is we want this,
the key here to be

123
00:08:27.190 --> 00:08:31.210
whatever the IMDb ID of
the new thing that we got.

124
00:08:31.210 --> 00:08:36.327
So the way we're gonna do
that is we're gonna say,

125
00:08:36.327 --> 00:08:39.320
action.payload.imdbID.

126
00:08:39.320 --> 00:08:44.107
These square brackets around it mean I
want this to actually be what it is,

127
00:08:44.107 --> 00:08:46.746
right, so action.payload.imdbID.

128
00:08:46.746 --> 00:08:50.040
It's gonna take that string and
make that the key, okay?

129
00:08:50.040 --> 00:08:54.502
Then I'm gonna say :action.payload.

130
00:08:59.097 --> 00:09:03.360
&gt;&gt; Brian Holt: This would have been
similar, like if you wanted to do

131
00:09:03.360 --> 00:09:08.308
it a different way,
constkey = action.payload.imdbID.

132
00:09:08.308 --> 00:09:14.085
And then you could have said
const obj = new object,

133
00:09:14.085 --> 00:09:20.405
you could have said obj key
= action.payload, right?

134
00:09:20.405 --> 00:09:22.940
And now object would be
what you would put here.

135
00:09:24.700 --> 00:09:28.494
This is just the new ES6 way of
doing dynamic keys, right, and

136
00:09:28.494 --> 00:09:34.380
dynamic,
&gt;&gt; Brian Holt: Yeah, key names.

137
00:09:34.380 --> 00:09:35.649
That make sense?

138
00:09:35.649 --> 00:09:36.810
Okay, cool.

139
00:09:45.920 --> 00:09:52.030
&gt;&gt; Brian Holt: Okay, and then if it's not
an ADD_API_DATA action, what do we do?

140
00:09:53.040 --> 00:09:54.765
Just return whatever was there.

141
00:09:59.570 --> 00:10:00.458
&gt;&gt; Brian Holt: Okay?

142
00:10:00.458 --> 00:10:03.040
Then down here, the name of our key and

143
00:10:03.040 --> 00:10:06.370
our state is going to be called apiData,
right?

144
00:10:06.370 --> 00:10:11.259
So we can just do ,apiData.

145
00:10:16.193 --> 00:10:17.730
&gt;&gt; Brian Holt: Cool?

146
00:10:17.730 --> 00:10:19.025
So that's the Reducer.

147
00:10:19.025 --> 00:10:22.861
Now, we are set up to be
storing these API data results.

