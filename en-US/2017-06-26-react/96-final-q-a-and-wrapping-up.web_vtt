WEBVTT

1
00:00:00.340 --> 00:00:02.671
&gt;&gt; Brian Holt: So B3 says 31.

2
00:00:02.671 --> 00:00:03.886
That is the last one.

3
00:00:03.886 --> 00:00:06.216
So 30 is using the react.

4
00:00:06.216 --> 00:00:08.128
31 is using preact.

5
00:00:08.128 --> 00:00:10.380
You're welcome to go check those out.

6
00:00:10.380 --> 00:00:15.710
If you're feeling so inclined, go ahead
and add inferno and substitute inferno in.

7
00:00:15.710 --> 00:00:16.490
That's what I was gonna try.

8
00:00:16.490 --> 00:00:19.760
I was gonna try real quick,
if I could just switch out

9
00:00:19.760 --> 00:00:22.300
I haven't tried this recently,
so it might or might not work.

10
00:00:23.530 --> 00:00:26.120
Let's try just doing Preact.

11
00:00:26.120 --> 00:00:30.930
Preact doesn't have all of the API, so
I don't know what React Router is using,

12
00:00:30.930 --> 00:00:35.387
I don't know what the React Redux stuff,
all those bindings are using, so

13
00:00:35.387 --> 00:00:36.683
this might not work.

14
00:00:36.683 --> 00:00:40.218
Let's try yarn build.

15
00:00:45.040 --> 00:00:46.804
&gt;&gt; Brian Holt: It will probably build,

16
00:00:46.804 --> 00:00:49.913
it might not be super
happy about it though.

17
00:00:53.031 --> 00:00:53.798
&gt;&gt; Brian Holt: Yeah, no see,

18
00:00:53.798 --> 00:00:55.910
we're stuck in loading hell.

19
00:00:55.910 --> 00:00:56.990
So, it doesn't work.

20
00:00:56.990 --> 00:00:58.550
So for now we have to use compat.

21
00:00:59.980 --> 00:01:03.402
The way you would eventually fix that,
compat is a crutch,

22
00:01:03.402 --> 00:01:07.576
it's a good way to get to using preact and
then what you wanna do is you want

23
00:01:07.576 --> 00:01:11.149
to go strip out the function
calls that preact doesn't have.

24
00:01:11.149 --> 00:01:14.450
And then eventually, you can go from
the 8 kilobyte library to the 3 kilobyte

25
00:01:14.450 --> 00:01:19.634
library, which is even better.
&gt;&gt; Speaker 2: Greg's asking

26
00:01:19.634 --> 00:01:24.944
if you have used any JavaScript
end-to-end testing libraries.

27
00:01:24.944 --> 00:01:25.910
&gt;&gt; Brian Holt: Yes there is,

28
00:01:25.910 --> 00:01:29.878
I hope you can see the sadness in my eyes,
is yes, I have.

29
00:01:29.878 --> 00:01:33.167
[LAUGH] It's important, right?

30
00:01:33.167 --> 00:01:35.024
Something like Selenium, Selenium tests.

31
00:01:35.024 --> 00:01:37.330
You can kind of verify
that things are working.

32
00:01:38.760 --> 00:01:41.840
It's important to have the happy path,
right?

33
00:01:41.840 --> 00:01:43.500
Like login and sign up, and

34
00:01:43.500 --> 00:01:47.930
all these different processes that
are key, that are just so flaky, right?

35
00:01:47.930 --> 00:01:52.180
Like how many times have I messed
around with flaky cilennium tests,

36
00:01:52.180 --> 00:01:54.360
the answer is way too much.

37
00:01:54.360 --> 00:01:58.080
So it's important to have,
there's nothing like protractor.

38
00:01:58.080 --> 00:01:59.938
Protractor is really cool for angular.

39
00:01:59.938 --> 00:02:01.871
React doesn't have anything like that,

40
00:02:01.871 --> 00:02:03.183
unfortunately.
&gt;&gt; Speaker 2: Well,

41
00:02:03.183 --> 00:02:07.352
actually [INAUDIBLE] testing job is for
fabrications course.

42
00:02:07.352 --> 00:02:13.402
It's not out yet, but it will be out on
[INAUDIBLE] Masters slash courses soon,

43
00:02:13.402 --> 00:02:15.430
you can watch the replay.

44
00:02:15.430 --> 00:02:20.101
But he uses the cypress.io testing and-
&gt;&gt; Brian Holt: I don't

45
00:02:20.101 --> 00:02:21.032
know anything about that.
&gt;&gt; Speaker 2: And

46
00:02:21.032 --> 00:02:24.943
it's pretty new, but
he shows how awesome it is.

47
00:02:24.943 --> 00:02:29.221
And Cory loves it and stuff, and
it's way better than Selenium.

48
00:02:29.221 --> 00:02:34.079
So definitely, when that course drops, if
you're interested in end-to-end testing,

49
00:02:34.079 --> 00:02:35.919
there's a whole section on that.

50
00:02:35.919 --> 00:02:38.436
And it should be out
in probably two weeks.

51
00:02:38.436 --> 00:02:39.489
&gt;&gt; Brian Holt: I don't think I've ever

52
00:02:39.489 --> 00:02:41.649
heard anyone say that they
love end to end testing.

53
00:02:41.649 --> 00:02:45.461
So that is a strong endorsement and

54
00:02:45.461 --> 00:02:48.240
Kent is a smart guy.
&gt;&gt; Speaker 2: He also gets

55
00:02:48.240 --> 00:02:50.370
excited about weird
things like Webpack and

56
00:02:50.370 --> 00:02:52.640
unit testing.
&gt;&gt; Brian Holt: I love Webpack,

57
00:02:52.640 --> 00:02:54.920
I get that one, but unit testing.
&gt;&gt; Speaker 2: All right,

58
00:02:54.920 --> 00:02:57.730
I always thought Webpack it's like
the best you can do is just spit out

59
00:02:57.730 --> 00:03:00.980
a couple of files, right?
&gt;&gt; Brian Holt: It is but I have a great

60
00:03:00.980 --> 00:03:04.570
amount of fun just messing around,
trying to get my bundle even smaller.

61
00:03:04.570 --> 00:03:07.020
It's like a game to me.
&gt;&gt; Speaker 2: I can see that.

62
00:03:08.480 --> 00:03:11.310
Have you used roll up at all?
&gt;&gt; Brian Holt: Roll up is also a really

63
00:03:11.310 --> 00:03:14.620
cool packager.

64
00:03:16.540 --> 00:03:20.550
It really pushed webpack hard, and
that's why webpack 2 is as cool as it is.

65
00:03:20.550 --> 00:03:22.700
Cuz Rollup came in and says screw you.

66
00:03:22.700 --> 00:03:23.850
I'm gonna do treeshaking, right?

67
00:03:23.850 --> 00:03:25.356
That was kinda their thing.

68
00:03:25.356 --> 00:03:31.560
And actually what, so
the way treeshaking works with webpack 2,

69
00:03:31.560 --> 00:03:34.530
is that it doesn't actually
remove the code itself.

70
00:03:34.530 --> 00:03:38.460
It basically outputs the code in
such a way that it's unreachable.

71
00:03:38.460 --> 00:03:42.170
And then uglify 2 right which
is the new version of uglify.

72
00:03:42.170 --> 00:03:44.870
I guess uglify 3 is about to come out.

73
00:03:44.870 --> 00:03:47.380
Uglify 2 is smart enough to say
this code is never reachable and

74
00:03:47.380 --> 00:03:48.780
just pulls that stuff out.

75
00:03:50.380 --> 00:03:53.370
So that's what roll up
was really great for,

76
00:03:54.920 --> 00:03:57.270
roll up is still really great and
important.

77
00:03:57.270 --> 00:03:58.700
It's great for libraries right?

78
00:03:58.700 --> 00:04:01.110
So you wanna build your
libraries like react.

79
00:04:01.110 --> 00:04:02.340
React is built with roll up.

80
00:04:03.550 --> 00:04:07.390
And it outputs it in such a way
that it's consumable by webpack.

81
00:04:07.390 --> 00:04:10.847
And it's much better that way, so
I typically recommend webpack for

82
00:04:10.847 --> 00:04:13.599
your applications and
use roll up for your libraries.

83
00:04:19.453 --> 00:04:21.310
&gt;&gt; Brian Holt: That's a good question.

84
00:04:21.310 --> 00:04:22.860
Roll up is really cool.

85
00:04:22.860 --> 00:04:26.760
It's a little bit more difficult
to wrangle in my opinion,

86
00:04:26.760 --> 00:04:31.590
but I think that might be just cuz I have
Stockholm Syndrome from wrangling so

87
00:04:31.590 --> 00:04:32.720
much with WebEx.

88
00:04:35.020 --> 00:04:39.902
Any other questions?
&gt;&gt; Speaker 2: How do you feel about SaaS

89
00:04:39.902 --> 00:04:43.491
versus dialog components, and
how would you use it in this application?

90
00:04:48.565 --> 00:04:50.352
&gt;&gt; Brian Holt: SaaS is too powerful,

91
00:04:50.352 --> 00:04:51.710
in my opinion.

92
00:04:51.710 --> 00:04:55.380
I don't need a Turing complete
scripting language on top of my CSS,

93
00:04:55.380 --> 00:04:56.700
personal opinion.

94
00:04:56.700 --> 00:04:58.600
I think SaaS script is too much.

95
00:04:58.600 --> 00:05:02.930
To the points that I remember at Reddit
we had this like little bit of SAS script

96
00:05:02.930 --> 00:05:04.630
that generated a bunch
of classes that we used.

97
00:05:04.630 --> 00:05:09.550
And it just ballooned our css files for
no good reason.

98
00:05:09.550 --> 00:05:13.110
Now, you rightfully can point out,
that's your fault.

99
00:05:13.110 --> 00:05:14.470
It is my fault, right?

100
00:05:14.470 --> 00:05:17.230
But it gives me tools for
things that I don't need to do, right?

101
00:05:18.400 --> 00:05:21.790
So I appreciate some of the things,

102
00:05:21.790 --> 00:05:25.220
nesting can be nice and
selectors can be nice.

103
00:05:26.280 --> 00:05:28.420
But if I have like five layers deep and

104
00:05:28.420 --> 00:05:32.050
I am using mixins it is too much
indirection for me for CSS.

105
00:05:33.200 --> 00:05:39.060
I like using post CSS and
including things like auto prefixer and

106
00:05:39.060 --> 00:05:43.320
maybe a couple extra plugins for
like nesting and like That's it.

107
00:05:43.320 --> 00:05:46.790
The least powerful styling
rules that I can have and

108
00:05:46.790 --> 00:05:49.050
then I like to import it as CSS modules.

109
00:05:49.050 --> 00:05:52.600
So that's my go to of
how to deal with CSS.

110
00:05:55.140 --> 00:05:56.380
Styles components is really cool.

111
00:05:56.380 --> 00:06:00.960
As you can see, we messed up our
navigating without JavaScript because it

112
00:06:00.960 --> 00:06:05.620
does have a runtime associated with it and
that also kinda sucks, right?

113
00:06:05.620 --> 00:06:09.822
So I might be a little more on the Glamour
train right now, but I know Macs and

114
00:06:09.822 --> 00:06:14.027
I know they're working on getting up to
the same speed that Glamour is and so

115
00:06:14.027 --> 00:06:14.922
it's coming.

116
00:06:14.922 --> 00:06:19.140
It's definitely coming so.
&gt;&gt; Speaker 2: And where in your configure

117
00:06:19.140 --> 00:06:23.520
or whatever you had SAS or post?
&gt;&gt; Brian Holt: There's a couple of

118
00:06:23.520 --> 00:06:26.240
places to do it, but
it would be here inside of your module.

119
00:06:26.240 --> 00:06:30.173
You would do something like,
I'm making this up so

120
00:06:30.173 --> 00:06:33.103
don't validate it, but it would be.

121
00:06:33.103 --> 00:06:41.030
You would have a test that would
say basically this right here.

122
00:06:44.710 --> 00:06:48.608
Then instead of being this,
it would be like .css right,

123
00:06:48.608 --> 00:06:53.140
then you would say loader,
like sass loader,

124
00:06:53.140 --> 00:06:55.700
I think is what it is,
I'm assuming that's what it's called.

125
00:06:57.980 --> 00:07:01.080
And then you would have to have one
as well on here called style loader.

126
00:07:01.080 --> 00:07:03.020
I can't remember which one comes first.

127
00:07:03.020 --> 00:07:05.800
It's important which one it is, but
let's just assume it comes second.

128
00:07:08.130 --> 00:07:11.170
So what this is going to do is it's
going to be able to read your SASS and

129
00:07:11.170 --> 00:07:13.820
it's also going to be able
to inject into your app.

130
00:07:13.820 --> 00:07:18.345
And then I can go into my action creators,
or like spinner right?

131
00:07:18.345 --> 00:07:22.494
And then I can say import spinner or

132
00:07:22.494 --> 00:07:27.369
it would just be import spinner.SASS.

133
00:07:28.500 --> 00:07:34.110
This equally applies to stylus or less,
just so you know, or to just plain css.

134
00:07:35.220 --> 00:07:40.000
And I've come back to webpac config, and
then I'd have to have a plug in in here

135
00:07:40.000 --> 00:07:43.800
for style extraction.

136
00:07:43.800 --> 00:07:44.670
It's like webpack.
&gt;&gt; Speaker 2: Yeah,

137
00:07:44.670 --> 00:07:49.010
I think if you'd just Google sas webpack.
&gt;&gt; Brian Holt: Yeah,

138
00:07:49.010 --> 00:07:51.590
you have to have something that'll
pull out the sass file and

139
00:07:51.590 --> 00:07:55.540
then it's gonna output it in a separate
CSS so you can load it separately.

140
00:07:55.540 --> 00:07:57.845
But that's the general
gist of how to do it.

141
00:08:00.341 --> 00:08:01.281
&gt;&gt; Brian Holt: Actually I show you in

142
00:08:01.281 --> 00:08:04.268
version two, so if you're super
interested it's in version two.

143
00:08:06.356 --> 00:08:07.859
&gt;&gt; Speaker 2: Well thus concludes version

144
00:08:07.859 --> 00:08:09.780
three of React.
&gt;&gt; Brian Holt: Yeah, thank you so

145
00:08:09.780 --> 00:08:10.460
much for coming.

146
00:08:10.460 --> 00:08:13.190
I'm It's a real pleasure to
talk to you all about one

147
00:08:13.190 --> 00:08:14.500
of the things I'm pretty passionate about.

148
00:08:14.500 --> 00:08:15.950
I think React's a really great library and

149
00:08:15.950 --> 00:08:20.710
i just think this is a really good way
to build large, scalable architecture.

150
00:08:20.710 --> 00:08:23.850
I hope you can at least take pieces and

151
00:08:23.850 --> 00:08:26.530
parts of this out and
bring it into your workflow.

152
00:08:26.530 --> 00:08:28.250
It's okay if there's parts
that you don't like.

153
00:08:28.250 --> 00:08:30.660
Don't include those parts but
it's a puzzle, right?

154
00:08:30.660 --> 00:08:32.005
You get to put together your own puzzle.

155
00:08:32.005 --> 00:08:36.042
So cool, yeah, thanks.

156
00:08:36.042 --> 00:08:41.631
&gt;&gt; [APPLAUSE]

157
00:08:41.631 --> 00:08:43.743
&gt;&gt; Speaker 2: The last thing I want to ask

158
00:08:43.743 --> 00:08:49.024
is do you have any recommendations for
further reading further,

159
00:08:49.024 --> 00:08:53.728
people to follow,
things to look at in the React community

160
00:08:53.728 --> 00:08:57.790
that you're particularly excited about?
&gt;&gt; Brian Holt: I get a lot of

161
00:08:57.790 --> 00:09:02.820
my information from twitter
which is a great source of news.

162
00:09:02.820 --> 00:09:07.440
That's a joke,
it can be daunting at times.

163
00:09:07.440 --> 00:09:11.110
So the React Core team are all
super nice approachable people.

164
00:09:11.110 --> 00:09:14.363
So that's definitely one thing I would

165
00:09:14.363 --> 00:09:18.512
suggest is at Soprano I
think that's Ben Alpert.

166
00:09:18.512 --> 00:09:20.600
[COUGH] They're all super interesting.

167
00:09:20.600 --> 00:09:24.370
I think the graph QL relay story is
really interesting to follow as well.

168
00:09:24.370 --> 00:09:29.630
That's a nice puzzle piece
to fit with React, and

169
00:09:29.630 --> 00:09:32.730
Lee Byron and the team that runs that,
they're all really great.

170
00:09:32.730 --> 00:09:36.351
I think Jason Miller and
Dominic [INAUDIBLE], who do Preact and

171
00:09:36.351 --> 00:09:41.600
Inferno respectively Are both amazing,
interesting people to follow.

172
00:09:41.600 --> 00:09:44.750
The CSS and
JS story is really heating up and

173
00:09:44.750 --> 00:09:48.395
I think we're gonna see a lot of
innovation over the next year about that.

174
00:09:48.395 --> 00:09:52.880
So watch Glamour, watch Glamorous,
watch styled components,

175
00:09:52.880 --> 00:09:57.570
Aphrodite is not going away any time soon,
and CSS modules in general.

176
00:09:57.570 --> 00:09:59.810
I think that story's going to
continue to evolve and get better and

177
00:09:59.810 --> 00:10:00.530
more interesting.

178
00:10:03.750 --> 00:10:09.399
The web pack team is always pushing
the envelope as well as the battle team.

179
00:10:09.399 --> 00:10:11.890
They are definitely two
projects that need help.

180
00:10:11.890 --> 00:10:16.151
So if you can either contribute or
give money to I think that's worthy to do,

181
00:10:16.151 --> 00:10:16.690
as well.

182
00:10:16.690 --> 00:10:25.225
Same with the pre-active projects.
&gt;&gt; Brian Holt: The React

183
00:10:25.225 --> 00:10:26.231
doc's really good.

184
00:10:26.231 --> 00:10:27.891
I think that's a good place to look at

185
00:10:27.891 --> 00:10:33.183
well.
&gt;&gt; Brian Holt: Yeah,

186
00:10:33.183 --> 00:10:36.190
that's what I got off the top of my head.
&gt;&gt; Speaker 2: Perfect,

187
00:10:37.640 --> 00:10:38.700
all right, thank you.

188
00:10:38.700 --> 00:10:43.390
Well, until next time.
&gt;&gt; Brian Holt: Yeah, until version four.

