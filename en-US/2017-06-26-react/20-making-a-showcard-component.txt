[00:00:00]
>> Brian Holt: We're gonna make this a little more complicated display a little bit more. So, what we're gonna do now, is we're gonna make a div className="show-card'.
>> Speaker 2: I have a follow up to his question.
>> Brian Holt: Sure.
>> Speaker 2: So remember early on when you showed us the style with the two curly braces, right?

[00:00:26]
And then you said well a lot of people get uncomfortable with that so let's pull that out into its own variable and then substitute the style variable. Would that be an option here, or not because we are returning the h? We're projecting with the math function to the H3, so does that have to happen inside our parentheses?

[00:00:51]

>> Brian Holt: So, you could totally do, let's just say I do it up here. You would do it inside the function body but you could totally do const preload shows.map show <hs>(show.title) shows
>> Brian Holt: Right, so now shows is an array of components. And I could totally right here to say shows.

[00:01:30]
It work just fine.
>> Speaker 2: Okay.
>> Brian Holt: Does that answer your question?
>> Speaker 2: Yeah, I guess I'm making the assumption that in JSX files only within component.
>> Brian Holt: Like within the returns?
>> Speaker 2: Last definitions the html syntax makes sense, but it looks like anywhere in the file.
>> Brian Holt: Totally, yup.

[00:01:48]

>> Speaker 2: Awesome.
>> Brian Holt: And we'll do this later, once we're doing conditionals, right? You can technically put conditionals inside the return blocks of jsx. It gets real hairy real quick. So I like to pull them above. Store them in variables and then show them or hide them, depending on whether or not they're in the variable or not.

[00:02:06]
So, yeah, that's astute. That's a good way of doing things for sure. What I just showed you here is a horrible way of doing it, right? Because these shows have been predetermined, so if anything inside of preload.shows changed, it would not change. But,
>> Brian Holt: Yeah, we won't worry about that for now.

[00:02:24]
Okay, so.
>> Brian Holt: Okay, so, we're just gonna put some,
>> Brian Holt: Some components in here.
>> Brian Holt: I'm gonna put an ALT tag on our image cuz we're good citizens of the internet, and we make our things accessible. (Show.title) show poster. So take note of that as a backtick, which is the same key as the tilde.

[00:03:03]
This is an ES6 template literal. You are welcome, I have again linked to the tuality post on template literals if you're not familiar with them. But suffice to say, rather than doing, like if this was a string and I had to do concatenation, oops.
>> Brian Holt: That's what it would like, right?

[00:03:33]
Like we've all seen that syntax before so with temporal literals you can just do this. And then anything between curly braces with a dollar sign in front of it which is like the same kind of bashy way of doing it. Gets outputted as an expression and then anything not inside of it is literally the string.

[00:03:52]
Does that make sense? So for we have here House of Cards. This will be House of Cards Show Poster.
>> Brian Holt: Okay, and then we're gonna do a source for the image again using our template literal strings. I'm gonna do /public/IMG/posters/$show.poster. I've included a bunch of posters in your repo, which is where that's coming from.

[00:04:27]
Okay, we're gonna do a div.
>> Brian Holt: Then we're gonna do an h3.
>> Brian Holt: And show.title. We're gonna do an h4, with show.year,
>> Brian Holt: Now for display purposes, I want it to be parentheses around, so it will say like, parenthese 1996 to 2005 end parenthese, so I want parenthese literally to be output to the dom.

[00:05:01]
So I'm going to surround teis with parentheses. But I just want you to know that it's literally parenthesis right, okay.
>> Brian Holt: And then down here we have a p which is going to be the show.description.
>> Brian Holt: Okay, so now we should be able to save that. If we come back over here you should be seeing more stuff.

[00:05:36]
Which with broken style. You should be seeing broken style, right? The reason why is we're gonna go do the styles components in just a second, probably after the break.
>> Brian Holt: But yeah, you should be seeing something like this, right?
>> Brian Holt: Okay, any questions, yes?
>> Speaker 3: I'm not sure when the ideal time to talk about this would be.

[00:06:05]
But for, at least I'm using Atom for doing autocomplete inside of JSX, HTML completion inside of JSX. I noticed there's some happening for you. Do you have some kind of plugin installed?
>> Brian Holt: That does auto completion?
>> Speaker 3: Yeah, cuz right now I'm having to close everything by hand.

[00:06:22]

>> Speaker 3: Which is minorly inconvenient.
>> Brian Holt: So when I do that and it just closes the tag?
>> Speaker 3: Exactly.
>> Brian Holt: That is a sublime thing which is Alt+Cmd+Period.
>> Speaker 3: You're just doing that every time.
>> Brian Holt: Yeah.
>> Speaker 3: All right, cool.
>> Brian Holt: There's probably a better way to do it, it's just that I'm so used to doing it.

[00:06:43]
You can also use Emmet, right? Which is what I was talking about earlier. I don't have it enabled in mine so I'm not tempted to use it because I hate explaining how to set it up.
>> Brian Holt: But that's also possible to use, as well. And the idea behind Emmet is you can do like, this is an HTML.

[00:07:00]
But I can do like, h1 important thing.coolthing and I just hit tab and it just completes into a full element. You can also get this working with JSX it just takes some finagling and it works very different for each thing so I don't talk about it.
>> Speaker 3: Might ask you afterwards.

[00:07:26]

>> Brian Holt: What's that?
>> Speaker 3: I might ask you later about that.
>> Brian Holt: Yeah, the problem with it is it wants to complete to class and not class name.
>> Brian Holt: And you also can be fixed as well. But there's a great stack overflow question, asked by yours truly, on how to fix it, and someone answered me.

[00:07:43]
So that's how I fixed it. Okay, so back to your beans question which is we're in search.
>> Brian Holt: We kinda have two things going on here, right? We have the search component, which is like the search page, right? It's like the layout for the search page. And then we have these like inner show cards, right?

[00:08:07]
So there is kinda like two competing ideas here on the page. And so, this is where you kind of have to start wondering to yourself, this feels like something I should split out into another component, right? Cuz I two ideas going on, so that's exactly what we're gonna do, gonna create a new component call it showcard.jsx.

[00:08:26]
We're going to import React from React.
>> Brian Holt: And you're gonna say, const ShowCard = props as a parameter We're gonna go here to search.jsx. We're going to cut that out, come back here to show card, paste that in. Again, we're gonna let Prettier take care of all the details.

[00:08:59]
And I'm gonna say export default show card. And then save. And everything will magically rework itself. You are gonna have all sorts of lint errors cuz we're not doing prop types yet. And the other thing to show it's not defined yet. So props is going to be whatever the parent passes down into ShowCard, right.

[00:09:28]
So in a moment we are going to make the parent pass down props.ShowCard but in the meantime anywhere that you reference show, just go in front of it, I'm gonna do it with multiple cursors.
>> Brian Holt: And say props.whatever.
>> Brian Holt: So now all these are saying, where's my prop type?

[00:09:57]
Which I think we'll talk about soon here. Yep, very soon we'll be talking about that. Okay so for now ignore the lint errors. Go back to search. After this I'll push a branch, during the break. Okay, now inside of search we're going to import showCard from ./ShowCard.
>> Brian Holt: And then here where we were,

[00:10:38]

>> Brian Holt: What we're going to do is we're going to return show card where show={show}.
>> Brian Holt: Okay there we go.
>> Brian Holt: This got a lot cleaner to look at right? And if you go look everything should work, or look the same as it did before. But now we have two components, we have a show card, and we have a search route page.

[00:11:29]
So something that is super advantageous about this approach as well is that imagine later we are building another page that we want to display like one show card at a time. Well now we have this reusable component as long as we feed it in a show. It doesn't care where it lives.

[00:11:44]
It can display out that information in a useful fashion. So now we get there reusable components, that we can put multiple places on our site. So this kind of brings me to talking about how the render method works and kind of the way you need to be thinking about this render method, right?

[00:12:06]
So here, this method here, given a set of props, this is how this component's gonna look, right? It's deterministic, it's pure. It's, indepident, right? If I call this function a billion times with the same parameters, the same show, on the billion and first time I run this call, what's it gonna look like?

[00:12:27]
Exactly the same, nothing changes. So this is very, very, very important about React components is that if you call them a bunch of different times with the same parameters, it's always going to look the same. So for example, it's a terrible idea for me to come in here and say,

[00:12:48]

>> Brian Holt: Math.random here, right?
>> Brian Holt: That's gonna change every single time. So now if I refresh
>> Brian Holt: Now, what's bad about this,
>> Brian Holt: Or maybe even worse.
>> Brian Holt: Yeah, no, we'll talk about that later. Anyway, in any case, this is now a nondeterministic, right? So if I call it and I, I can, and I force it to rerender again, which I'll show you how to do later, how to force it to rerender.

[00:13:27]
We have no idea what the component's gonna end up looking like. This became non-testable, this became basically not a useful component anymore because it's not deterministic. So given the same properties the component should always look the same. So like an example that someone might ask me is well what happens if I'm dealing with dates right, dates are always changing right.

[00:13:49]
Well what you do you pass in a date to that component and given that date it's always going to look the same right. So your not reading the date from the interior of the render method you should be reading it from the props.
>> Brian Holt: Cool, any questions?
>> Brian Holt: It's also super important that these components are going to get run a lot, right?

[00:14:14]
Every time React senses a difference like if there's an event in your computer or sorry if there's an event in the DOM if the state changes if the prop changes, React runs a rerender to figure out what's changed. And then it only updates the things that have changed in the DOM.

[00:14:30]
That's called the virtual DOM. Notice we're already hours into this course and I haven't mentioned the virtual DOM. It doesn't matter, right, it's a implementation detail. It's not important to what actually what React is. But anyway what I wanna say is that, your render method is going to be run a lot, right.

[00:14:48]
So make sure that code path is very performant. Everything else can be slower. But that render path needs to be fast cuz it gets called a lot. Especially on large apps.

