WEBVTT

1
00:00:00.130 --> 00:00:03.210
&gt;&gt; Brian Holt: This next one is
a topic near and dear to my heart.

2
00:00:03.210 --> 00:00:06.130
I really really enjoy this part,
some people really don't.

3
00:00:06.130 --> 00:00:09.240
I debated a lot whether or not I was
going to add flow to this course.

4
00:00:09.240 --> 00:00:11.046
Should I add or should I not add it?

5
00:00:11.046 --> 00:00:15.745
Inevitably, I knew for a fact that someone
was gonna say, what about typescript?

6
00:00:15.745 --> 00:00:17.801
Because always someone says
what about typescript?

7
00:00:17.801 --> 00:00:20.890
So that was one part of it.

8
00:00:20.890 --> 00:00:24.840
Another part of it is it does, it makes
development go a little bit slower,

9
00:00:24.840 --> 00:00:27.020
makes it a little bit more difficult,
right?

10
00:00:27.020 --> 00:00:28.630
But let me defend why I added Flow.

11
00:00:28.630 --> 00:00:30.980
First of all, I already showed
you how to use React, right?

12
00:00:30.980 --> 00:00:35.760
Like I showed you every piece of React
that you need to know about without Flow.

13
00:00:35.760 --> 00:00:38.982
That's why we did the first half
of the course with no Flow at all.

14
00:00:38.982 --> 00:00:41.092
And that so we added it part way in.

15
00:00:41.092 --> 00:00:44.550
What I wanna to show you how
migrate a code base to Flow and

16
00:00:44.550 --> 00:00:49.450
secondly I wanted you to be able to
build React with no Flow whatsoever.

17
00:00:49.450 --> 00:00:52.020
Secondly, what I'm showing
you how to write here

18
00:00:52.020 --> 00:00:54.700
is the best scalable architecture for

19
00:00:54.700 --> 00:00:57.857
React that I know how to write
&gt;&gt; Brian Holt: If I was gonna start

20
00:00:57.857 --> 00:01:01.931
a project today, no questions asked
I would definitely include Flow and

21
00:01:01.931 --> 00:01:04.970
it would definitely make
it a better code base.

22
00:01:04.970 --> 00:01:09.280
Like down the road I would be much
happier having written that Flow

23
00:01:09.280 --> 00:01:12.350
code base than if I had not included it.

24
00:01:12.350 --> 00:01:14.570
So this is definitely going to
help you a lot in that respect.

25
00:01:14.570 --> 00:01:17.690
If you're gonna start a new project with
this it's gonna make your code better.

26
00:01:17.690 --> 00:01:21.120
And more maintainable and
it's going to last longer for sure.

27
00:01:22.560 --> 00:01:26.330
Lastly, even if you choose not to
go forward with Flow or Typescript,

28
00:01:26.330 --> 00:01:30.480
you're gonna see a lot of stuff like
when you're reading documentation and

29
00:01:30.480 --> 00:01:33.830
going on Stack Overflow,
that just include all these things, right?

30
00:01:33.830 --> 00:01:36.310
So now you're gonna know how to
read these things whether or

31
00:01:36.310 --> 00:01:38.169
not you're actually going
to actually use them.

32
00:01:39.470 --> 00:01:43.086
Nonetheless, everything that I've shown
you how, all you have to go back and do is

33
00:01:43.086 --> 00:01:46.824
delete the tithe annotations and it's just
gonna work as plain java script, right?

34
00:01:46.824 --> 00:01:49.842
So hashtag not sorry [LAUGH].

35
00:01:49.842 --> 00:01:54.300
So that's my defensive Flow.

36
00:01:56.010 --> 00:01:57.960
Again, you're totally
welcome to not use it, but

37
00:01:57.960 --> 00:02:00.430
I think it's Important that
you learn how to use it.

38
00:02:00.430 --> 00:02:03.460
And lastly, there's version one and
version two of this course out there

39
00:02:03.460 --> 00:02:07.260
online already that you can watch
that do not have Flow in it at all.

40
00:02:07.260 --> 00:02:09.710
They're pure just JavaScript.

41
00:02:09.710 --> 00:02:12.990
So all those things are up to you.

42
00:02:12.990 --> 00:02:16.920
The kind of reactor that
we're writing now is fine.

43
00:02:16.920 --> 00:02:19.660
You can totally write huge scalable apps.

44
00:02:19.660 --> 00:02:22.910
In fact I would say
the way that we wrote and

45
00:02:22.910 --> 00:02:26.240
React at Netflix is pretty similar to the
way that we have been writing it so far.

46
00:02:27.300 --> 00:02:31.550
So in another words the tool that
I'm about to introduce to you is not

47
00:02:31.550 --> 00:02:35.490
necessary to write large apps but React.

48
00:02:35.490 --> 00:02:39.970
I prefer it you'll find many
people do prefer it but

49
00:02:39.970 --> 00:02:42.620
it's not necessary, you don't have to.

50
00:02:42.620 --> 00:02:44.170
So we're gonna be doing types now.

51
00:02:44.170 --> 00:02:46.410
We're gonna be talking about Flow and

52
00:02:47.760 --> 00:02:50.250
TypeScript is an amazing
piece of technology.

53
00:02:50.250 --> 00:02:53.170
I'm just choosing Flow because
it's the one that I know, right?

54
00:02:54.270 --> 00:02:57.810
But TypeScript is equally awesome,
does equally cool things for you.

55
00:03:00.420 --> 00:03:03.340
So yeah, I'm a huge fan of
either piece of technology.

56
00:03:05.410 --> 00:03:07.250
So what is Flow?

57
00:03:07.250 --> 00:03:09.176
Well, JavaScript is a dynamic language,
right?

58
00:03:09.176 --> 00:03:14.290
So it's really fast because you don't
have to be constantly typing everything,

59
00:03:14.290 --> 00:03:18.870
typing in the sense of like adding types
annotations to whatever you're writing.

60
00:03:18.870 --> 00:03:21.750
However, If you do write types,

61
00:03:21.750 --> 00:03:25.510
you can be more assured that you're
gonna not have runtime errors, right?

62
00:03:25.510 --> 00:03:28.950
Because you can have a static type check
to go through and say, hey you're passing

63
00:03:28.950 --> 00:03:32.370
a string from here, to here, to here,
and then you're trying to call something

64
00:03:32.370 --> 00:03:36.980
that's not on the string prototype here,
that's gonna cause a runtime error, right?

65
00:03:36.980 --> 00:03:40.230
So it's gonna force you
to think through and

66
00:03:40.230 --> 00:03:45.150
change your code in such a way
that you're depending on types and

67
00:03:45.150 --> 00:03:48.960
by doing that and having that assurance
you're going to have less errors.

68
00:03:50.250 --> 00:03:51.860
So the thing that I promise
you is that you're going

69
00:03:51.860 --> 00:03:54.500
to spend more time writing your code
cuz you have to think through it.

70
00:03:54.500 --> 00:03:58.600
But you're going to end up writing
better code that has less errors.

71
00:03:58.600 --> 00:04:02.280
And that's something I feel pretty
comfortable in asserting and promising.

72
00:04:03.350 --> 00:04:06.940
So that's what we're
gonna start with today.

73
00:04:06.940 --> 00:04:10.320
I do not feel offended at all if you
continue following this course and

74
00:04:10.320 --> 00:04:13.936
do not write the types part of it,
that's totally okay as well.

75
00:04:16.505 --> 00:04:19.740
&gt;&gt; Brian Holt: So
let's talk about how this is gonna work.

76
00:04:21.210 --> 00:04:25.770
So let's talk about what types are first
of all, cuz it's not a given that if

77
00:04:25.770 --> 00:04:28.070
you're writing JavaScript that
you're familiar with types at all.

78
00:04:28.070 --> 00:04:30.030
And that's okay,
you can write JavaScript and

79
00:04:30.030 --> 00:04:33.020
be more or less not caring
what the types are underneath.

80
00:04:34.280 --> 00:04:38.910
So right here, when I have this
is an empty string, right?

81
00:04:38.910 --> 00:04:41.090
Or if I put things in here,
now it's not an empty string.

82
00:04:42.220 --> 00:04:43.140
But that's what we call it.

83
00:04:43.140 --> 00:04:46.220
It's called a string in
terms of JavaScript, right?

84
00:04:49.837 --> 00:04:52.600
&gt;&gt; Brian Holt: It's just the type of
thing that you're dealing with, right?

85
00:04:52.600 --> 00:04:53.659
That's why they're called types.

86
00:04:55.740 --> 00:04:59.880
&gt;&gt; Brian Holt: If I come in here and
have like version and it's like five,

87
00:04:59.880 --> 00:05:03.020
this right here is called a number, right?

88
00:05:04.470 --> 00:05:09.728
As this is called-
&gt;&gt; Brian Holt: Is done false,

89
00:05:09.728 --> 00:05:12.570
this is a called a Boolean, right?

90
00:05:12.570 --> 00:05:14.550
We also have objects.

91
00:05:14.550 --> 00:05:15.500
We have arrays.

92
00:05:16.500 --> 00:05:19.800
And then we have a bunch of other
things that we, as web developers,

93
00:05:19.800 --> 00:05:21.510
have made up like events, right?

94
00:05:21.510 --> 00:05:22.560
And DOM nodes.

95
00:05:22.560 --> 00:05:25.230
Like these are all things
that are typed for us.

