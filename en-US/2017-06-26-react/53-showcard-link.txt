[00:00:00]
>> Speaker 1: Should we add a link on the show card to go to the detail page?
>> Brian: Yeah. How did I miss that? Okay, let's do that real quick. Show card. I totally forgot this. We are supposed to bring in a link here. Import, yeah cuz you want to be able to get to the show card or the details page from the search page.

[00:00:25]

>> Brian: From 'react-router-dom'.
>> Brian: So import { Link } from 'react-router-dom'.
>> Brian: And let's see here.
>> Brian: Make sure I get this right. Yep, yep, yep, yep, yep.
>> Brian: That's how I missed it.
>> Brian: So what we're gonna do here, is we're going to wrap the wrapper in a Link to.

[00:01:04]

>> Brian: And this is gonna be a template tag /details/.
>> Brian: Props.imdbID.
>> Brian: Yeah, how did I miss that? Okay.
>> Speaker 1: Need to close those carets.
>> Brian: Yep.
>> Brian: Now it's gonna complain about this imdbID not being there. Something that we can refactor this to be. So rather than this being props: and then listing out every single thing possible, we can just say this is a show, cuz we defined that show type already.

[00:01:55]
And save that.
>> Brian: Cool, and now we have this all being wrapped in a Link. So if we go back over here. Go back.
>> Brian: Wow, that doesn't look like it's supposed to. It's abstract.
>> Brian: That's okay, sorry. Not quite.
>> Brian: We're gonna actually change Link to be Wrapper.

[00:02:43]

>> Brian: And remove Link here.
>> Brian: I've misread my notes. So we're gonna have Wrapper which is eventually gonna be the link tag. So rather than having this being Wrapper = styled.div, what we can actually do is we can have styled component's wrap Link.
>> Brian: This is gonna yell at us because.

[00:03:14]

>> Brian: Yeah, we'll talk about that in a second. But you will be getting a flow type error momentarily here. So now if we save that.
>> Brian: Getting closer.
>> Brian: Okay, now we have to add just two more lines of CSS here. I'm gonna say color: black; to keep that color for that link text.

[00:03:38]
And there also gonna have text-decoration: none. And then save that, come back over here and now everything looks how its suppose to begin. And also, now you can click on things and go to their detailed pages.
>> Brian: And looks like the breaking bad one got pulled down.
>> Brian: But you can go on it and you can click into each one of them.

[00:04:06]
Okay, any questions about that?
>> Speaker 3: Can you scroll down to the.
>> Brian: I just took the Link out of it.
>> Brian: And then I put wrapper 2, right? Because that's the property that's gonna be passed down into Link.
>> Brian: I'll talk about the flow error here in just a second.

[00:04:33]

>> Brian: Any other questions about that?
>> Brian: Cool.
>> Brian: So I just perpetually have issues with styles, components and flow. So there's a couple of ways you can solve this.
>> Brian: One of them is you can just say Link: any. I think that would work.
>> Brian: So this is a good way of doing it.

[00:05:22]
This is just like, when the library is typing, so not exactly how they should be, I'm totally fine just throwing it out here and say you know what, don't check this part. I know this is fine, I know react-router-dom is giving me something that's valid react, so cool, just call that in any.

[00:05:40]
This is called a casting. So typically you don't have to worry about typecasting in JavaScript. It's all coerced for you. But this particular case,we're just gonna say, this Link isn't anything. I don't think you can actually identify this as a react component. I think it's still gonna yell about that.

[00:05:59]
It's gonna say, I don't know what that is. And then.
>> Brian: Yeah, itâ€™s not gonna like that, so maybe just don't.
>> Brian: Nope, so we're just gonna stick with any.
>> Brian: Someday they'll fix this and you can come back and not typecast it. But again this is just saying, for this particular instance, assume Link is an any type which is then going to say cool, then I'm not going to check this particular typing right here.

[00:06:35]
The other one you can do which I showed you earlier is just FlowFixMe, and it's just going to ignore the next line. Either one of those is fine. I'm gonna still with the any for now, but you're welcome to do it either way.
>> Speaker 1: How do you maintain navigation state throughout the app?

[00:06:58]

>> Brian: The best answer to that question I think, where possible you wanna stick it in the URL, so you have deep links to hold the different states of your app. So one thing that we're not doing here that you definitely could do, is when you're typing black right here, you could have installed that in the URL state so that someone could copy that link and share with their friend, or they could bookmark it all that kind of stuff.

[00:07:21]
It's all very possible to do with React router, I do not remember how to do it at the top of my head, but it's.
>> Brian: You would just interact with the history object and say, push this state onto the app or replace this state, depending on if you wanted to add a new entry for every [COUGH] B-L-A, and then B-L-A-C, and then B-L-A-C-K.

[00:07:43]
You've probably want to do what's called replace state there, so that we're just be replacing the state every single time.
>> Brian: So yeah, navigation should typically live in the URL, which means you're be interacting with router to do that. If you don't wanna do that, then you just need to find a common ancestor.

[00:08:02]
Our common ancestor would be app and keeping it in there. Yeah we don't have any real navigation state beside the search term so.
>> Speaker 1: But this person was saying what order do lifecycle methods execute, when you have nested components?
>> Brian: Like what happens first, the children or the parents components.

[00:08:26]

>> Brian: The real answer to that question is that you don't have to care. [LAUGH] You can think of each component more or less as an island, cuz they shouldn't really be interacting with each other in terms of their lifecycle methods. That's kind of a dodgy answer, and it's also something that's changing because right now we're on an architecture of react called Stack, the Stack Architecture.

[00:08:53]
This is as a 15.5 in previous. With React 16 we're moving to something called the Fiber Architecture, which is going to change totally the way that it's a complete rewrite of react. However it's totally API compatible. So there shouldn't be any break it from 15.5 to 16. They should just migrate the architecture and nothing changes.

[00:09:13]
And with that, they're gonna do all sorts of different ways of when and how components are rendering. And so this is kind of a way of me saying that it doesn't really matter, and I also don't know because it doesn't matter.

