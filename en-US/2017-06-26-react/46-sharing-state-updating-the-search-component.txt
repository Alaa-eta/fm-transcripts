[00:00:00]
>> Brian Holt: And so now all of our flow errors are resolved. So now we have kind of an inconsistency with our app. We have search, which is reading from preload and we have app that's reading from preload. It would be better since app is the parent of search that if we could just pass that date from the app into search.

[00:00:21]
So we don't have kind of two places reading from the same data. We'd rather have this one parent component reading that search data. And then passing that into both search and into details. In this particular case when you're just loading a JSON file, it's probably not a big deal.

[00:00:37]
However, like I mentioned, this was coming back from the API. You don't want to request it in two places. You want to have it be requested once and then passed into two different spaces. So, that's the reason why I'm going to show you this particular part. So, what I'm going to do here, is change search into a component like this as well.

[00:00:59]

>> Brian Holt: And this is gonna be props, and we're just gonna pass shows in here, as well. And we're just gonna pass all of preload.shows,
>> Brian Holt: As well as the props.
>> Brian Holt: Now notice we don't have to type these props cuz we're not actually really reading from them, right?

[00:01:25]
It's we're just taking an object and passing stuff in. And with flow you don't have to go back and say, this is what these types are. The types inference is gonna be enough here. You can if you want to.
>> Brian Holt: But there's no good reason to.
>> Brian Holt: So now, we have to go back to search and make it read from data or not read from preload anymore.

[00:01:51]
So what we're gonna do is we're gonna remove preload from this.
>> Brian Holt: And rather than doing preload.shows, instead of doing that we're gonna say, this.props.shows, right? Yeah.
>> Brian Holt: Okay? Now we have prop types errors, because we have to type our props.
>> Brian Holt: Okay, so let's go up to the top here.

[00:02:30]
And underneath state, we're gonna add props.
>> Brian Holt: So you might be noticing that state here is different than props here. That's because this is in particular for typing, and this one here is actually a real variable that exists on search, right?
>> Brian Holt: Okay, so what we're gonna do here is we're gonna have shows which is going to be an array, right?

[00:03:04]
Cuz it's gonna be an array of shows. And what we're gonna do here, it's gonna be an array of stuff, right? If it was an array of strings, it would look like that. So basically this is a parameter that you can pass into an array to say, this is gonna be an array of strings.

[00:03:23]
Or an array of mixed, it can be an array of stuff. It can be an array of any, I don't care what's in here, it can be an array of anything.
>> Brian Holt: Any's a cheating way by the way. Any just says, don't prop check this at all, which is not actually what you wanna do, right?

[00:03:41]
So if at all possible, don't ever use any. You wanna use other things, right? If you are tempted to use any, it's probably better to use mixed, right? Cuz mixed is saying, this could be anything but it's going to then try and continue doing type inference. If you say this is an any, it's like all bets are off, I don't care about this anymore, right?

[00:04:04]
So be careful about that.
>> Speaker 2: If you choose mixed and then end up only putting in strings, is it gonna yell at you?
>> Brian Holt: It's not gonna yell at you, I mean it's not a good idea, right? But it's not gonna yell at you, however, what is a blessing slash a curse with mixed, so let's say I was down here.

[00:04:23]
And I've tried to reference something in this.shows, or this.props.shows, props.shows[0], right? It's gonna say, I don't know anything about this. So the next thing you're gonna have to do with this is say, if typeof, this [INAUDIBLE] cuz you're gonna have to what's called do a type refinement, right?

[00:04:45]
You're gonna have to validate to the type checkers, hey, I went through this process enough and I'm positive this is a string try, so then I can call methods that are on strings, right? And if you try do that before hand, it's gonna say I don't know what this is.

[00:05:00]
Whereas if it's any, it's gonna say, I don't care, do whatever you want, right? So, any is a crutch, so don't use any if at all possible.
>> Brian Holt: Another things is, if you're doing imports on something that's not type checked. So if I create another file that's not prop checked, and I import it, it's going to import as an any type.

[00:05:26]
And it just makes it easier to work with, right? So files that are not opted into type checking are exported as any types. Okay, so that was kind of a side note on that. So we're going to give it a particular shape of object to look for. It's going to be a title, which is a string.

[00:05:47]
It's going to be a description, which is a string. It's going to be a year, which is a string. It's going to be an imdbID, which is a string.
>> Brian Holt: It's gonna be a trailer, which is a string.
>> Brian Holt: And it's gonna be a poster, which is a string.

[00:06:10]

>> Brian Holt: I think I got all of them, okay.
>> Brian Holt: So, now I know I have this array of this particular type of thing, right? Now I can be guaranteed that I can read anything off of it.
>> Brian Holt: Now, we have this particular object here. One, this is kind of ugly the way it exists right now, right?

[00:06:37]
And the other thing is that we're going to be using these shows all over our site, right? So it would be really nice if we could just declare this as its own type, right? So we can say type Show, equals all of this business.
>> Brian Holt: And we can pass that in right here so we have an array of Show, right?

[00:07:02]
Now we can even take this one step further. This is going to restrict this show to this particular file. We wanna be able to use shows all over our project cuz we're gonna be reading out of details as well. So you could do something like export a type from this file or something like that, but we're going to take this one step further.

[00:07:18]
And we're going to save this, and we're gonna go to our types file and just put it in here.
>> Brian Holt: And I think the way that we're gonna want to do this is just say export type Show. And now this is going to be available throughout our entire website.

[00:07:38]
So, because it exists here, we can go back over here to search.jsx. We don't have to import it since it's in our flow type directory, that's automatically just going to be filtered into our page.
>> Brian Holt: I believe.
>> Brian Holt: So if we come in here and say yarn flow I think we should still be good.

[00:08:06]
No, it doesn't like show.
>> Brian Holt: Yeah, it's gonna yell at us for all of our tests.
>> Brian Holt: Yep, that's true, we did that.
>> Brian Holt: So, I mean, this is a good thing, though, right? Because now we're telling it that, hey, we have this prop type shows, right? And it's going to say, hey, you're rendering this over here and you're not giving it shows, flow is kind of saying, you broke all of your tests.

[00:08:48]
Do you know that you just broke all of your tests? Now what you can do is you can make this what's called a maybe type. We're kind of getting off into the weeds too, but I like showing you how to do this. If I put a question mark here, maybe I'll have some shows, right?

[00:09:07]

>> Brian Holt: So this is now a lint error, but that's what this question mark means, is like this is now an optional thing. Now what the AirBnB default rules, or the AirBnB ES Lint rules, it says that you have to have a default prop type if you don't have, or this is option.

[00:09:27]
So what you would have to then do is say defaultProps = shows, just make it an empty array.
>> Brian Holt: AirBnB is super particular on what order they want things in.
>> Brian Holt: Anyway that's how that should work. Is you should be able to give it a default property type and it should be okay with a maybe type.

[00:10:21]
We're gonna require shows every single time, so it's not particularly important.
>> Brian Holt: Yeah, because,
>> Brian Holt: Yeah, that's fine. So in any case, we don't need defaultProps right now. So this is not important because this is not a maybe type.
>> Brian Holt: So, now we're good to go. We have this array of shows, so now we're very safe to refer to, for example, here where I say, show.title and show.description.

[00:10:55]
All that stuff is guaranteed to be there, because I typed that to be a show type, right? And now it's available to us throughout our entire application.
>> Brian Holt: So we have this.props.shows, that's all good to go. Let's go back to, let's see, make sure everything works still. So we're going to go back to 8080, browse all.

[00:11:25]
Everything is still working which is good. And now all of this is coming from app.jsx, is being fed into search that way. Any questions about that so far?
>> Brian Holt: So let's go ahead and cut our brunch for anyone that's clawed behind there.
>> Brian Holt: Again, if you're in Flow typing right now, all of your tests are going to fail.

[00:11:55]
If you want to, you can come into your spec and just pass them in
>> Brian Holt: shows=preload.shows.
>> Brian Holt: And right there.
>> Brian Holt: And that's all we had to do to fix our tests. So yarn flow, we're missing some prop type validations. We will get there momentarily.

