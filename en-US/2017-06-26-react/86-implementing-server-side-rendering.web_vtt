WEBVTT

1
00:00:00.230 --> 00:00:04.342
&gt;&gt; Brian Holt: The next thing I'm
gonna need you to do is open .babelrc.

2
00:00:07.764 --> 00:00:10.472
&gt;&gt; Brian Holt: If you remember,
we're using import everywhere,

3
00:00:10.472 --> 00:00:12.740
the ES6 module system in Node.

4
00:00:12.740 --> 00:00:15.730
We're gonna have to translate that so
Node knows how to understand it.

5
00:00:15.730 --> 00:00:17.944
Because Node still does not know
how to do ES6 modules, right.

6
00:00:19.550 --> 00:00:23.881
So we're gonna have to give it another env
here, and it's actually gonna be exactly

7
00:00:23.881 --> 00:00:26.880
the same as test,
that's not always going to be the case.

8
00:00:26.880 --> 00:00:30.615
That's probably often going to be
the case, but we're gonna make another one

9
00:00:30.615 --> 00:00:36.402
called server,
&gt;&gt; Brian Holt: And

10
00:00:36.402 --> 00:00:37.980
it's gonna have plugins.

11
00:00:41.153 --> 00:00:46.478
&gt;&gt; Brian Holt: And it's gonna have the
same transform-es2015-modules-commonjs.

12
00:00:49.345 --> 00:00:54.156
&gt;&gt; Brian Holt: Again, you could make this
the same env, they're different concerns,

13
00:00:54.156 --> 00:00:54.708
right?

14
00:00:54.708 --> 00:01:00.515
What goes in the test does not necessarily
gonna be what goes into the server.

15
00:01:00.515 --> 00:01:05.101
So I recommend against doing that despite
the fact that it'd be impossible.

16
00:01:05.101 --> 00:01:10.651
Okay, so
from here I want you to create a new file,

17
00:01:10.651 --> 00:01:14.624
it's gonna be called server.js.

18
00:01:14.624 --> 00:01:18.445
It's going to be outside of the js
directory cuz everything in the js

19
00:01:18.445 --> 00:01:20.062
directory is our react app.

20
00:01:20.062 --> 00:01:23.380
This is going to be in the top level,
this is going to be our node server.

21
00:01:26.700 --> 00:01:29.323
And, this is just gonna be
a lot of code all at once,

22
00:01:29.323 --> 00:01:31.470
because you need all of it for it to work.

23
00:01:31.470 --> 00:01:33.080
So, just bear with me.

24
00:01:34.590 --> 00:01:36.544
First thing I'm gonna do,
is I'm gonna say,

25
00:01:36.544 --> 00:01:39.162
I'm gonna use some console
logging in here and that's okay.

26
00:01:42.679 --> 00:01:44.963
&gt;&gt; Brian Holt: So no-console: 0.

27
00:01:44.963 --> 00:01:48.610
This is turning off the no console
warning for this particular file.

28
00:01:49.930 --> 00:01:55.499
First thing we're gonna do up here
is require('babel-register').

29
00:01:55.499 --> 00:01:57.718
There's a couple of ways you can do this.

30
00:01:57.718 --> 00:01:59.487
I'm using babel-register,

31
00:01:59.487 --> 00:02:03.850
which means everything in this file
itself will not be transpiled.

32
00:02:03.850 --> 00:02:08.356
So I can't use JSX or anything
that node doesn't understand here.

33
00:02:08.356 --> 00:02:11.890
But everything that it requires
will be run through Babel.

34
00:02:11.890 --> 00:02:14.780
So when I require my app, it can use JSX,

35
00:02:14.780 --> 00:02:19.070
it can use future ES stuff,
all that's fine.

36
00:02:19.070 --> 00:02:20.630
That's what Babel register does for you.

37
00:02:20.630 --> 00:02:23.890
It's kinda hooking into that require and
running it all through Babel.

38
00:02:23.890 --> 00:02:27.827
There's another thing called babel-node
that will actually compile the file that's

39
00:02:27.827 --> 00:02:28.685
being run as well.

40
00:02:28.685 --> 00:02:30.490
And you're welcome to use that.

41
00:02:30.490 --> 00:02:32.120
It's kind of up to you.

42
00:02:35.100 --> 00:02:37.650
So, let's just require
a bunch of stuff now.

43
00:02:39.180 --> 00:02:43.323
So, const express = require('express').

44
00:02:49.782 --> 00:02:53.657
&gt;&gt; Brian Holt: const
React = require('react').

45
00:02:53.657 --> 00:02:57.669
const ReactDOMServer =

46
00:02:57.669 --> 00:03:04.357
require('react-dom/server').

47
00:03:06.947 --> 00:03:10.350
&gt;&gt; Brian Holt: const ReactRouter =

48
00:03:10.350 --> 00:03:16.970
require('react-router-dom').

49
00:03:16.970 --> 00:03:21.028
const _ = require('_').

50
00:03:23.469 --> 00:03:28.489
&gt;&gt; Brian Holt: const fs = require('fs').

51
00:03:28.489 --> 00:03:31.667
And const App =

52
00:03:31.667 --> 00:03:38.519
require('./js/App').

53
00:03:38.519 --> 00:03:43.638
And something you're gonna have to do here
if you recall we're using ES6 modules,

54
00:03:43.638 --> 00:03:48.640
so when that gets translated to
being a required common js module.

55
00:03:48.640 --> 00:03:50.388
Remember, we export default, right?

56
00:03:50.388 --> 00:03:54.512
So you're gonna have to say .default,
that's just what you have to do there.

57
00:03:56.833 --> 00:04:00.682
&gt;&gt; Brian Holt: Cuz this is going to return
to you an object with one key in it,

58
00:04:00.682 --> 00:04:03.173
the one key in it is going to be default,

59
00:04:03.173 --> 00:04:07.040
sometimes you have to pull
the default part off of it, okay?

60
00:04:08.210 --> 00:04:12.838
From here, we're gonna pull out const

61
00:04:12.838 --> 00:04:18.595
StaticRouter = ReactRouter.StaticRouter.

62
00:04:23.679 --> 00:04:27.011
&gt;&gt; Brian Holt: This StaticRouter is going
to be what we're going to use to replace

63
00:04:27.011 --> 00:04:27.970
browser router.

64
00:04:27.970 --> 00:04:29.359
This works in node.

65
00:04:32.370 --> 00:04:34.720
Okay, const port.

66
00:04:34.720 --> 00:04:36.520
You can put this on
whatever port suits you.

67
00:04:36.520 --> 00:04:37.663
I'm gonna put it on 8080.

68
00:04:42.179 --> 00:04:46.578
&gt;&gt; Brian Holt: const baseTemplate,
this is gonna be our indexer HTML file.

69
00:04:46.578 --> 00:04:56.295
Is going to be equal to
fs.readFileSync('./index.html').

70
00:05:01.495 --> 00:05:06.910
&gt;&gt; Brian Holt: So, just so you're aware,
this is definitely not a node course but

71
00:05:06.910 --> 00:05:11.857
readFileSync is going to read
this file from the file system.

72
00:05:11.857 --> 00:05:14.510
And it's going to pause until
it is finished reading.

73
00:05:14.510 --> 00:05:19.242
This is typically a horrible idea,
however on startup it's okay, right?

74
00:05:19.242 --> 00:05:21.300
Cuz this is going to be read once.

75
00:05:21.300 --> 00:05:23.360
If you're doing readFileSync
in every request,

76
00:05:23.360 --> 00:05:25.270
you're gonna have a bad time, for sure.

77
00:05:25.270 --> 00:05:26.798
So, just be aware.

78
00:05:26.798 --> 00:05:29.820
Typically, you would do here is readFile,
right?

79
00:05:29.820 --> 00:05:33.300
And then you'd provided a call back
like once it was finish reading it.

80
00:05:35.120 --> 00:05:37.895
But here, we can do syncs and
this is gonna be done once on start up and

81
00:05:37.895 --> 00:05:38.892
that's totally fine.

82
00:05:44.257 --> 00:05:51.250
&gt;&gt; Brian Holt: const template
= _.template(baseTemplate).

83
00:05:51.250 --> 00:05:55.080
What template is going
to be now is a function.

84
00:05:55.080 --> 00:05:56.940
That when we invoke it, we pass in body.

85
00:05:56.940 --> 00:06:02.330
And we're going to get back our mark
up inside of the indexer html file.

86
00:06:02.330 --> 00:06:03.260
So this is a function.

87
00:06:07.190 --> 00:06:10.040
Okay, that should be enough
kind of setup for ourselves.

88
00:06:10.040 --> 00:06:17.740
And now we're gonna say
const Server = express().

89
00:06:17.740 --> 00:06:23.810
Again you can do this with
any different node server.

90
00:06:23.810 --> 00:06:28.090
We could use arrstify,
we could use happy, we could use culla.

91
00:06:28.090 --> 00:06:31.888
I'm just using express because it's very
simple and it suits our needs for today.

92
00:06:34.729 --> 00:06:39.624
&gt;&gt; Brian Holt: And
the first thing we're gonna do here

93
00:06:39.624 --> 00:06:44.371
is say server.use('/public',

94
00:06:44.371 --> 00:06:49.873
express.static('./public')).

95
00:06:49.873 --> 00:06:54.326
This is saying statically serve everything
that's in the public directory.

96
00:06:54.326 --> 00:06:58.020
So that's like all our CSS, that'll be
our bundle.js, that'll be all that stuff.

97
00:06:58.020 --> 00:06:58.520
All the images.

98
00:07:00.916 --> 00:07:03.087
&gt;&gt; Brian Holt: It'll also put
all the correct mime types and

99
00:07:03.087 --> 00:07:06.816
all that kinda stuff for us, cuz that's
really annoying to write yourself.

100
00:07:08.919 --> 00:07:15.010
&gt;&gt; Brian Holt: Okay, and then after that
we're gonna say server.use((req,res)).

101
00:07:15.010 --> 00:07:20.220
This is where we're going to be doing our
templating and all that kind of stuff.

102
00:07:23.070 --> 00:07:24.117
So I'll pull this up so
that you could see it.

103
00:07:26.914 --> 00:07:31.461
&gt;&gt; Brian Holt: So, the first thing
that we're gonna wanna do is create

104
00:07:31.461 --> 00:07:33.022
a context object.

105
00:07:33.022 --> 00:07:35.169
This is something that's gonna
be passed to react router.

106
00:07:37.974 --> 00:07:46.145
&gt;&gt; Brian Holt: I'm gonna say const
body = ReactDOMServer.renderToString.

107
00:07:49.027 --> 00:07:50.937
&gt;&gt; Brian Holt: See now how we
use React's DOM.render and

108
00:07:50.937 --> 00:07:53.120
then we tell it where to
put it in the DOM, right?

109
00:07:53.120 --> 00:07:55.889
This is replacing that instead
of rendering out to a DOM or

110
00:07:55.889 --> 00:07:56.992
something like that.

111
00:07:56.992 --> 00:08:03.310
It's just gonna give you back
a string of the HTML, okay.

112
00:08:03.310 --> 00:08:09.210
Then here, remember that we're not in
JSX land, so we can't use JSX here.

113
00:08:09.210 --> 00:08:13.250
So we're going to fall back to that first
set of skills that I taught you the very

114
00:08:13.250 --> 00:08:19.200
first thing of using React.createElement.

115
00:08:19.200 --> 00:08:20.630
So this should all look familiar to you.

116
00:08:20.630 --> 00:08:22.037
So React.createElement.

117
00:08:26.487 --> 00:08:28.828
&gt;&gt; Brian Holt: And the first most
outermost layer is going to be

118
00:08:28.828 --> 00:08:29.830
the static router.

119
00:08:31.990 --> 00:08:35.474
And we're going to pass to
the static router the location,

120
00:08:35.474 --> 00:08:40.862
which is gonna be req.url, right, that's
what the user requested from the website.

121
00:08:40.862 --> 00:08:45.523
And we're going to pass
to it the context object.

122
00:08:45.523 --> 00:08:51.351
But if you remember context:context,
we can shorten that down to just context.

123
00:08:51.351 --> 00:08:53.915
So that's what that is context:context.

124
00:08:55.460 --> 00:09:03.547
And then inside of that we're gonna
have ReactcreateElement('App').

125
00:09:03.547 --> 00:09:06.650
And we don't need to give anything to app,
that's just fine, right?

126
00:09:06.650 --> 00:09:10.080
So that's gonna be a static router on
the outside and app on the inside and

127
00:09:10.080 --> 00:09:13.700
that's all that's gonna be, okay?

128
00:09:13.700 --> 00:09:17.098
So now we're gonna get the string
which is gonna be here on body, right?

129
00:09:21.016 --> 00:09:24.512
&gt;&gt; Brian Holt: So the reason why
we're passing this context object to

130
00:09:24.512 --> 00:09:29.770
React router sometimes you're
going to get redirected, right?

131
00:09:29.770 --> 00:09:32.900
Our app will never redirect because
we never wrote any redirects, right?

132
00:09:32.900 --> 00:09:35.787
But if that happens, I wanted to show
you how that you would handle that.

133
00:09:39.638 --> 00:09:44.938
&gt;&gt; Brian Holt: So,
you're gonna say: if (context.url).

134
00:09:44.938 --> 00:09:49.508
So this is gonna say React router is going
to modify this context object that you

135
00:09:49.508 --> 00:09:50.740
passing to it.

136
00:09:50.740 --> 00:09:54.388
If there's a redirect in here,
you can say res.redirect.

137
00:09:57.563 --> 00:10:00.814
&gt;&gt; Brian Holt: And you can put the status
on here if you want to like 301 or 302,

138
00:10:00.814 --> 00:10:02.450
depending on what you're doing.

139
00:10:04.710 --> 00:10:07.289
I'm just gonna leave it off for
now, context.url.

140
00:10:07.289 --> 00:10:09.380
I think it defaults to 301
if I remember correctly.

141
00:10:12.200 --> 00:10:13.780
So that's how you do that.

142
00:10:13.780 --> 00:10:17.962
If there is a redirect, this will send
them off to wherever they need to go.

143
00:10:17.962 --> 00:10:25.320
Otherwise res.write, template(body: body).

144
00:10:25.320 --> 00:10:29.763
Then again ,we can just put body.

145
00:10:29.763 --> 00:10:31.873
And then you're gonna say res.end().

146
00:10:40.265 --> 00:10:45.830
&gt;&gt; Brian Holt: So this is service
side rendering with React Router.

147
00:10:45.830 --> 00:10:50.090
What's amazing about this is we don't have
to duplicate our logic anymore, right.

148
00:10:50.090 --> 00:10:53.010
We get to write one set of route
definitions in the client,

149
00:10:53.010 --> 00:10:55.990
and it's automatically sent to node,
as well.

150
00:10:55.990 --> 00:10:57.718
So you have one source of truth.

151
00:11:01.565 --> 00:11:07.143
&gt;&gt; Brian Holt: Okay,
down here at the bottom, we're gonna say,

152
00:11:07.143 --> 00:11:13.636
console.log('listening on
${port}') to let it,

153
00:11:13.636 --> 00:11:19.370
we can see into the console
that we're up and going.

154
00:11:19.370 --> 00:11:23.140
And then we're gonna say
server.listen(port).

155
00:11:26.055 --> 00:11:30.196
&gt;&gt; Brian Holt: If you want to,
you can say up here console.log.

156
00:11:30.196 --> 00:11:34.997
Something I like to do is req.url so
I can see requests coming in and

157
00:11:34.997 --> 00:11:36.725
where they're going.

158
00:11:39.102 --> 00:11:39.736
&gt;&gt; Brian Holt: And typically,

159
00:11:39.736 --> 00:11:42.361
you would have some sort of server
logging framework, like Morgan or

160
00:11:42.361 --> 00:11:43.230
something like that.

161
00:11:45.849 --> 00:11:48.720
&gt;&gt; Brian Holt: There's plenty of great
nodes stuff on, for the masters.

162
00:11:48.720 --> 00:11:51.340
So, if that's interesting to you,
go down that path.

