WEBVTT

1
00:00:00.350 --> 00:00:02.780
&gt;&gt; Brian: I'm gonna show you how
to build for production now.

2
00:00:02.780 --> 00:00:03.750
Because everything we've done so

3
00:00:03.750 --> 00:00:06.596
far has been, most of it's been
about developer experience.

4
00:00:06.596 --> 00:00:10.280
And I wanna actually show you how to get
down and actually serve it for production.

5
00:00:11.820 --> 00:00:14.410
So the first thing is we're gonna do is
we're gonna come into our webpack config.

6
00:00:15.790 --> 00:00:20.730
So as you can see right now,
our bundle is like 5 god damn megabytes,

7
00:00:20.730 --> 00:00:24.820
which is just purely unacceptable, right,
it's to the point of ridiculousness.

8
00:00:24.820 --> 00:00:27.590
But it's development,
so it doesn't matter.

9
00:00:27.590 --> 00:00:29.290
Cuz I mean I'm just
pulling from local host,

10
00:00:29.290 --> 00:00:35.019
I'm literally just pulling from myself.
&gt;&gt; Brian: Let's go ahead and

11
00:00:35.019 --> 00:00:37.269
make this a little bit nicer to deal with.

12
00:00:39.320 --> 00:00:45.330
So what I'm gonna do here is I'm gonna
say const config equals this, and

13
00:00:45.330 --> 00:00:51.430
then x module.exports = config and then
I'm gonna do some manipulation down here.

14
00:00:52.880 --> 00:00:57.590
So what I'm gonna do is I'll leave this
just for development as this and then.

15
00:00:57.590 --> 00:01:00.236
If production, so I'm gonna say,

16
00:01:00.236 --> 00:01:05.446
if(process.env.NODE_ENV ===
'production') then we're

17
00:01:05.446 --> 00:01:10.490
gonna make some differences to how
we're gonna build for webpack.

18
00:01:10.490 --> 00:01:17.200
The first thing that we're gonna
do is we're going to get rid of,

19
00:01:17.200 --> 00:01:21.355
our entry is just gonna be this, right.

20
00:01:21.355 --> 00:01:26.063
Then you're gonna say config.entry = blah,

21
00:01:26.063 --> 00:01:31.592
right, cuz we don't know
the hot module reload stuff,

22
00:01:31.592 --> 00:01:34.663
we can just leave all that out.

23
00:01:34.663 --> 00:01:40.103
We're gonna say dev tool equals false,

24
00:01:40.103 --> 00:01:43.947
config.devtool = false.

25
00:01:43.947 --> 00:01:49.358
That's just gonna say
give me no source maps,

26
00:01:49.358 --> 00:01:54.112
which is what you want.
&gt;&gt; Brian: DevServer doesn't really

27
00:01:54.112 --> 00:01:57.534
matter because we're not gonna be
running the devServer in production, so

28
00:01:57.534 --> 00:01:59.410
you can leave that there.

29
00:01:59.410 --> 00:02:02.240
Resolve is fine, stats is fine,
plugins is just gonna be an empty array.

30
00:02:02.240 --> 00:02:08.730
I don't think that's actually necessary,
but it's good just to be explicit.

31
00:02:10.210 --> 00:02:14.024
The reason why I don't think this is
necessary is because webpack is smart

32
00:02:14.024 --> 00:02:17.836
enough to say, hey, we don't need
a hot module reload in production,

33
00:02:17.836 --> 00:02:20.686
I'm just not gonna include these,
but that's fine.

34
00:02:20.686 --> 00:02:23.590
And then you can leave the rules,
that's fine as well.

35
00:02:24.900 --> 00:02:30.870
Let's go to our server, real quick, and
we're gonna bring in another module.

36
00:02:30.870 --> 00:02:34.794
We're gonna say const
compression = require

37
00:02:34.794 --> 00:02:39.761
('compression')
&gt;&gt; Brian: Typically

38
00:02:39.761 --> 00:02:43.872
you're not gonna do gzip on your
node server, that's not typically,

39
00:02:43.872 --> 00:02:48.395
like you'll be doing it further out,
like something like the engineX level or

40
00:02:48.395 --> 00:02:53.220
the Apache level or whatever you're using
for that, your reverse proxy, right?

41
00:02:54.830 --> 00:02:57.480
We're not gonna be using one today,
so I wanted to show what the gzip

42
00:02:57.480 --> 00:03:00.410
values looked like, so we're gonna
do it here at the express level.

43
00:03:01.480 --> 00:03:02.820
Just so you can see what that looks like.

44
00:03:05.580 --> 00:03:08.450
So we're gonna say
server.use(compression()),

45
00:03:08.450 --> 00:03:11.980
and this is gonna do all of our
gzipping and that fun stuff for

46
00:03:11.980 --> 00:03:14.686
us.
&gt;&gt; Brian: Okay,

47
00:03:14.686 --> 00:03:19.510
now what I want you to do is I want
you to come, you can stop your server.

48
00:03:19.510 --> 00:03:23.952
Now I want you to say yarn build -- -p.

49
00:03:23.952 --> 00:03:28.927
So that -p is letting webpack know
I'm building for production now,

50
00:03:28.927 --> 00:03:33.410
so give it everything you can to
make this as small as possible.

51
00:03:44.036 --> 00:03:48.773
&gt;&gt; Brian: It's gonna take

52
00:03:48.773 --> 00:03:54.617
a second.
&gt;&gt; Brian: That's still really big,

53
00:03:54.617 --> 00:03:55.558
why is that so big?

54
00:03:55.558 --> 00:04:01.760
It should be a lot smaller bundle.js.

55
00:04:01.760 --> 00:04:07.320
We're still getting source maps is usually
the thing that's super unruly about this.

56
00:04:09.290 --> 00:04:17.435
Yes, see this is all no maybe not.
&gt;&gt; Brian: Well,

57
00:04:17.435 --> 00:04:21.140
that is definitely hot
module reload stuff.

58
00:04:28.240 --> 00:04:30.677
&gt;&gt; Brian: What it the,

59
00:04:30.677 --> 00:04:35.790
let's figure this out.

60
00:04:35.790 --> 00:04:39.330
So obviously it's not running with
the production node and stuff,

61
00:04:39.330 --> 00:04:44.190
cuz we're not picking up those changes.
&gt;&gt; Brian: So, open webpack again.

62
00:04:53.840 --> 00:04:56.409
&gt;&gt; Brian: And let's just,

63
00:04:56.409 --> 00:04:59.694
what is going on here?

64
00:04:59.694 --> 00:05:08.373
Okay, console.log(process.env).

65
00:05:12.220 --> 00:05:14.199
&gt;&gt; Brian: And let's just kind of start

66
00:05:14.199 --> 00:05:20.850
that and see what happens.
&gt;&gt; Brian: And

67
00:05:20.850 --> 00:05:25.106
what I'm interested in is the NODE_ENV.

68
00:05:25.106 --> 00:05:26.588
There's a lot of stuff in my process.env.

69
00:05:26.588 --> 00:05:32.902
Let's do that process,

70
00:05:32.902 --> 00:05:36.840
.NODE_ENV.

71
00:05:36.840 --> 00:05:39.140
And define, okay that's a problem.

72
00:05:39.140 --> 00:05:44.805
So, let's go ahead and go back and say,

73
00:05:44.805 --> 00:05:52.660
NODE_ENV equals production
yarn build -- -p.

74
00:05:52.660 --> 00:05:53.860
Let's try that.

75
00:05:53.860 --> 00:05:55.300
Now we see production.

76
00:05:55.300 --> 00:05:57.290
So now hopefully we'll get
much smaller bundle sizes.

77
00:06:08.153 --> 00:06:10.170
&gt;&gt; Brian: It should take a second.

78
00:06:10.170 --> 00:06:15.540
Got a bunch of stuff here, we're
seeing no hot module reload stuff, so

79
00:06:15.540 --> 00:06:17.620
266, better, right?

80
00:06:17.620 --> 00:06:22.036
36 here, 37 and 38 here, but
keep in mind here, this is minified,

81
00:06:22.036 --> 00:06:25.190
this is uglified,
this is not gzipped yet, right?

82
00:06:25.190 --> 00:06:28.392
So we actually need to go to
our browser to figure out what

83
00:06:28.392 --> 00:06:31.060
this is gonna look like,
when it's gzipped.

84
00:06:32.120 --> 00:06:38.370
So, if I refresh again, I need my server
running, so I'm gonna say yarn start.

85
00:06:42.700 --> 00:06:48.620
And I refresh again,
why did that get bigger?

86
00:06:48.620 --> 00:06:56.437
That's bizarre.
No, that's right cuz it was 220 gzipped.

87
00:06:56.437 --> 00:07:00.874
Sorry it was 220 minified and
now it's 76 gzipped.

88
00:07:00.874 --> 00:07:05.637
So we got down to 76 kilobytes and
then 11 for the first bundle,

89
00:07:05.637 --> 00:07:11.270
browse here 12 for that one, and 12 for
that one, so much better, right?

90
00:07:12.400 --> 00:07:17.660
So the thing to keep in mind
with React is it's about 45.

91
00:07:17.660 --> 00:07:25.170
45 kilobytes gzipped and minified, and
that's the production build, right?

92
00:07:25.170 --> 00:07:28.420
They give you a separate build for debug
that has more useful error messaging and

93
00:07:28.420 --> 00:07:28.950
things like that.

94
00:07:30.840 --> 00:07:35.020
So, out of the door,
we already lost 45, so

95
00:07:35.020 --> 00:07:40.020
our entire app that we built
took about 35 kilobytes.

96
00:07:40.020 --> 00:07:44.980
With everything else, that includes Redux,
Redux Forms, called, those things.

97
00:07:44.980 --> 00:07:48.960
Theyâ€™re pretty small libraries, so really
the only heavy lifter here is React and

98
00:07:48.960 --> 00:07:51.580
probably the second biggest one
is going to be axios I think.

99
00:07:53.110 --> 00:07:59.320
So, the one kind of crappy
thing about moving to Redux,

100
00:07:59.320 --> 00:08:04.450
is previously only details
cared about axios,

101
00:08:04.450 --> 00:08:11.936
and actually we could be
clever about this, yeah, yeah.

102
00:08:13.430 --> 00:08:15.060
We've got a little bit of time,
let's try it.

103
00:08:15.060 --> 00:08:20.407
Okay, so what I'm gonna do here is I'm
gonna create a new file, and say this is,

104
00:08:20.407 --> 00:08:26.540
like when we go into JS, and we're
gonna say that this is asyncactions.js,

105
00:08:26.540 --> 00:08:32.479
and I'm going to go in and
go to my action creators.

106
00:08:34.060 --> 00:08:37.300
actionCreators, and

107
00:08:37.300 --> 00:08:42.950
I'm gonna pull out,
&gt;&gt; Brian: getAPIDetails.

108
00:08:44.360 --> 00:08:49.240
And I'm gonna move this into its own file,
cuz right now,

109
00:08:49.240 --> 00:08:51.180
webpack can't separate files, right?

110
00:08:51.180 --> 00:08:53.800
It can't separate files from each other,
and this is getting

111
00:08:53.800 --> 00:08:58.478
the set search term and add API data
are needed in other places in the site,

112
00:08:58.478 --> 00:09:03.460
but this is only needed for details.

113
00:09:03.460 --> 00:09:07.530
So if we go to async action I just
created, I'm gonna paste that and

114
00:09:07.530 --> 00:09:14.180
I'm also gonna import axios from axios and

115
00:09:14.180 --> 00:09:19.174
I'm going to import { addAPIData } from

116
00:09:19.174 --> 00:09:23.930
'./actionCreators';.

117
00:09:26.910 --> 00:09:28.528
&gt;&gt; Brian: I'm gonna go back to

118
00:09:28.528 --> 00:09:33.760
actionCreators and
I'm going to remove axios here, okay?

119
00:09:33.760 --> 00:09:35.430
So now these are in separate files.

120
00:09:35.430 --> 00:09:38.370
So now I can only include this file in
details which just means I'm going to

121
00:09:38.370 --> 00:09:40.170
inflate the size of my details bundle but

122
00:09:40.170 --> 00:09:43.050
I'm going to deflate
the size of my main bundle.

123
00:09:43.050 --> 00:09:46.470
A big goal here is you wanna
deflate your main bundle cuz that

124
00:09:46.470 --> 00:09:48.290
one's gonna get loaded on every route.

125
00:09:48.290 --> 00:09:53.170
So on landing and on search, we want
that bundle to be as small as possible.

126
00:09:54.430 --> 00:10:00.080
So, now we need to go into details.jsx,

127
00:10:00.080 --> 00:10:03.760
and we're gonna get API
details from ASyncActions.

128
00:10:06.820 --> 00:10:09.319
We also broke our test, but,
no one cares about tests.

129
00:10:12.140 --> 00:10:13.530
That's what I call, yeah, AsyncAction.

130
00:10:13.530 --> 00:10:19.721
So, let's clear this out, and
we're going to run our build again.

131
00:10:19.721 --> 00:10:22.904
And hopefully, what we should see is
we should see the bunt size of details,

132
00:10:22.904 --> 00:10:24.710
one will go up, and
the other ones go down.

133
00:10:28.955 --> 00:10:34.000
&gt;&gt; Brian: Fingers crossed.

134
00:10:34.000 --> 00:10:35.190
Otherwise this is gonna be really dumb.

135
00:10:36.960 --> 00:10:39.580
Okay, I broke stuff,
whatever, that's fine.

136
00:10:42.000 --> 00:10:43.290
Yeah, I should have flow.

137
00:10:44.340 --> 00:10:49.660
But, what

138
00:10:49.660 --> 00:10:53.745
you can see here now is we had
the size of this bundle right here

139
00:10:53.745 --> 00:10:58.400
stayed really high and now these
ones are tiny, tiny, tiny bundles,

140
00:10:58.400 --> 00:11:02.447
right?
&gt;&gt; Brian: So

141
00:11:02.447 --> 00:11:04.503
now if we can do yarn start again,

142
00:11:04.503 --> 00:11:09.210
let's see what these actually translate
to when we start building our app.

143
00:11:11.000 --> 00:11:12.150
So if I refresh here and

144
00:11:12.150 --> 00:11:18.025
look at my network,
&gt;&gt; Brian: These are bytes,

145
00:11:18.025 --> 00:11:19.880
no that's actually reading from cache.

146
00:11:19.880 --> 00:11:23.380
But this is 1.7 kilobytes now right,
before it was 11.

147
00:11:23.380 --> 00:11:28.110
Now if we go into details, it's 12 right,
still, so it's a little bit bigger.

148
00:11:28.110 --> 00:11:30.080
So, I'm not making a ton
of difference here,

149
00:11:30.080 --> 00:11:33.220
the difference between 1 kilobyte and
12 is not huge,

150
00:11:33.220 --> 00:11:36.900
but what I'm trying to demonstrate to you
is the principle of is if I can make that

151
00:11:36.900 --> 00:11:41.250
dependency graph kinda lean in a
particular routes that only need it there.

152
00:11:41.250 --> 00:11:47.213
So now axios is only included on details,
right, and if I only load landings, so

153
00:11:47.213 --> 00:11:52.410
if I only load landing, I'm not
getting axios, which is super cool.

154
00:11:53.670 --> 00:11:57.384
So I'm trying to demonstrate to you this
mental model of thinking on how to manage

155
00:11:57.384 --> 00:11:58.541
your dependency graph.

156
00:11:58.541 --> 00:12:05.010
Let's go ahead and
put this in package.json of how to build.

157
00:12:05.010 --> 00:12:09.931
So we have build, and I'm gonna put
this to be -p whenever I say build,

158
00:12:09.931 --> 00:12:12.490
and then I'm gonna say build:dev.

159
00:12:12.490 --> 00:12:15.740
If you ever want to build for dev and
not necessarily do, like watch or

160
00:12:15.740 --> 00:12:19.250
anything like that,
it's always good to have that ability.

161
00:12:19.250 --> 00:12:22.280
We're gonna have webpack -d
which is how you build for dev.

162
00:12:23.650 --> 00:12:27.545
And just to make this explicit,

163
00:12:27.545 --> 00:12:32.741
I'm gonna say NODE_ENV=production and

164
00:12:32.741 --> 00:12:36.212
NODE_ENV=development.

165
00:12:43.430 --> 00:12:44.166
&gt;&gt; Brian: Okay, so

166
00:12:44.166 --> 00:12:52.828
let's push a branch real quick.
&gt;&gt; Brian: Before I push a branch,

167
00:12:52.828 --> 00:12:56.355
let's go ahead and
actually fix our lint error,

168
00:12:56.355 --> 00:12:59.290
since I'm not gonna modify this again.

169
00:12:59.290 --> 00:13:01.930
So I'm gonna export default actually here.

170
00:13:03.290 --> 00:13:05.710
That's gonna make this stop doing that.

171
00:13:05.710 --> 00:13:07.560
Why are you upset?

172
00:13:07.560 --> 00:13:09.710
And we need this to be a flow file.

173
00:13:13.190 --> 00:13:22.300
Okay, then we're going to go modify
&gt;&gt; Brian: Details.

174
00:13:22.300 --> 00:13:25.460
So this is just gonna be getAPIDetails cuz

175
00:13:25.460 --> 00:13:29.430
now it's the default
export from aSyncActions.

176
00:13:29.430 --> 00:13:31.000
And we also broke our tests, so

177
00:13:31.000 --> 00:13:33.840
let's go fix the tests real quick
which is gonna be action creators.

178
00:13:35.730 --> 00:13:41.923
actionCreators.spec, right?

179
00:13:41.923 --> 00:13:44.924
Up here,
we're gonna get this from aSyncActions.

180
00:13:44.924 --> 00:13:53.996
So import blah from '../asyncActions'.
&gt;&gt; Brian: And

181
00:13:53.996 --> 00:13:56.034
now everything should be fixed.

182
00:14:01.170 --> 00:14:04.155
&gt;&gt; Brian: Actions.

183
00:14:04.155 --> 00:14:05.560
Okay.

184
00:14:05.560 --> 00:14:10.580
So, let me push a branch, this will be 30.

