[00:00:00]
>> Brian: I'm gonna show you how to build for production now. Because everything we've done so far has been, most of it's been about developer experience. And I wanna actually show you how to get down and actually serve it for production. So the first thing is we're gonna do is we're gonna come into our webpack config.

[00:00:15]
So as you can see right now, our bundle is like 5 god damn megabytes, which is just purely unacceptable, right, it's to the point of ridiculousness. But it's development, so it doesn't matter. Cuz I mean I'm just pulling from local host, I'm literally just pulling from myself.
>> Brian: Let's go ahead and make this a little bit nicer to deal with.

[00:00:39]
So what I'm gonna do here is I'm gonna say const config equals this, and then x module.exports = config and then I'm gonna do some manipulation down here. So what I'm gonna do is I'll leave this just for development as this and then. If production, so I'm gonna say, if(process.env.NODE_ENV === 'production') then we're gonna make some differences to how we're gonna build for webpack.

[00:01:10]
The first thing that we're gonna do is we're going to get rid of, our entry is just gonna be this, right. Then you're gonna say config.entry = blah, right, cuz we don't know the hot module reload stuff, we can just leave all that out. We're gonna say dev tool equals false, config.devtool = false.

[00:01:43]
That's just gonna say give me no source maps, which is what you want.
>> Brian: DevServer doesn't really matter because we're not gonna be running the devServer in production, so you can leave that there. Resolve is fine, stats is fine, plugins is just gonna be an empty array. I don't think that's actually necessary, but it's good just to be explicit.

[00:02:10]
The reason why I don't think this is necessary is because webpack is smart enough to say, hey, we don't need a hot module reload in production, I'm just not gonna include these, but that's fine. And then you can leave the rules, that's fine as well. Let's go to our server, real quick, and we're gonna bring in another module.

[00:02:30]
We're gonna say const compression = require ('compression')
>> Brian: Typically you're not gonna do gzip on your node server, that's not typically, like you'll be doing it further out, like something like the engineX level or the Apache level or whatever you're using for that, your reverse proxy, right? We're not gonna be using one today, so I wanted to show what the gzip values looked like, so we're gonna do it here at the express level.

[00:03:01]
Just so you can see what that looks like. So we're gonna say server.use(compression()), and this is gonna do all of our gzipping and that fun stuff for us.
>> Brian: Okay, now what I want you to do is I want you to come, you can stop your server. Now I want you to say yarn build -- -p.

[00:03:23]
So that -p is letting webpack know I'm building for production now, so give it everything you can to make this as small as possible.
>> Brian: It's gonna take a second.
>> Brian: That's still really big, why is that so big? It should be a lot smaller bundle.js. We're still getting source maps is usually the thing that's super unruly about this.

[00:04:09]
Yes, see this is all no maybe not.
>> Brian: Well, that is definitely hot module reload stuff.
>> Brian: What it the, let's figure this out. So obviously it's not running with the production node and stuff, cuz we're not picking up those changes.
>> Brian: So, open webpack again.
>> Brian: And let's just, what is going on here?

[00:04:59]
Okay, console.log(process.env).
>> Brian: And let's just kind of start that and see what happens.
>> Brian: And what I'm interested in is the NODE_ENV. There's a lot of stuff in my process.env. Let's do that process, .NODE_ENV. And define, okay that's a problem. So, let's go ahead and go back and say, NODE_ENV equals production yarn build -- -p.

[00:05:52]
Let's try that. Now we see production. So now hopefully we'll get much smaller bundle sizes.
>> Brian: It should take a second. Got a bunch of stuff here, we're seeing no hot module reload stuff, so 266, better, right? 36 here, 37 and 38 here, but keep in mind here, this is minified, this is uglified, this is not gzipped yet, right?

[00:06:25]
So we actually need to go to our browser to figure out what this is gonna look like, when it's gzipped. So, if I refresh again, I need my server running, so I'm gonna say yarn start. And I refresh again, why did that get bigger? That's bizarre. No, that's right cuz it was 220 gzipped.

[00:06:56]
Sorry it was 220 minified and now it's 76 gzipped. So we got down to 76 kilobytes and then 11 for the first bundle, browse here 12 for that one, and 12 for that one, so much better, right? So the thing to keep in mind with React is it's about 45.

[00:07:17]
45 kilobytes gzipped and minified, and that's the production build, right? They give you a separate build for debug that has more useful error messaging and things like that. So, out of the door, we already lost 45, so our entire app that we built took about 35 kilobytes. With everything else, that includes Redux, Redux Forms, called, those things.

[00:07:44]
Theyâ€™re pretty small libraries, so really the only heavy lifter here is React and probably the second biggest one is going to be axios I think. So, the one kind of crappy thing about moving to Redux, is previously only details cared about axios, and actually we could be clever about this, yeah, yeah.

[00:08:13]
We've got a little bit of time, let's try it. Okay, so what I'm gonna do here is I'm gonna create a new file, and say this is, like when we go into JS, and we're gonna say that this is asyncactions.js, and I'm going to go in and go to my action creators.

[00:08:34]
actionCreators, and I'm gonna pull out,
>> Brian: getAPIDetails. And I'm gonna move this into its own file, cuz right now, webpack can't separate files, right? It can't separate files from each other, and this is getting the set search term and add API data are needed in other places in the site, but this is only needed for details.

[00:09:03]
So if we go to async action I just created, I'm gonna paste that and I'm also gonna import axios from axios and I'm going to import { addAPIData } from './actionCreators';.
>> Brian: I'm gonna go back to actionCreators and I'm going to remove axios here, okay? So now these are in separate files.

[00:09:35]
So now I can only include this file in details which just means I'm going to inflate the size of my details bundle but I'm going to deflate the size of my main bundle. A big goal here is you wanna deflate your main bundle cuz that one's gonna get loaded on every route.

[00:09:48]
So on landing and on search, we want that bundle to be as small as possible. So, now we need to go into details.jsx, and we're gonna get API details from ASyncActions. We also broke our test, but, no one cares about tests. That's what I call, yeah, AsyncAction. So, let's clear this out, and we're going to run our build again.

[00:10:19]
And hopefully, what we should see is we should see the bunt size of details, one will go up, and the other ones go down.
>> Brian: Fingers crossed. Otherwise this is gonna be really dumb. Okay, I broke stuff, whatever, that's fine. Yeah, I should have flow. But, what you can see here now is we had the size of this bundle right here stayed really high and now these ones are tiny, tiny, tiny bundles, right?

[00:11:02]

>> Brian: So now if we can do yarn start again, let's see what these actually translate to when we start building our app. So if I refresh here and look at my network,
>> Brian: These are bytes, no that's actually reading from cache. But this is 1.7 kilobytes now right, before it was 11.

[00:11:23]
Now if we go into details, it's 12 right, still, so it's a little bit bigger. So, I'm not making a ton of difference here, the difference between 1 kilobyte and 12 is not huge, but what I'm trying to demonstrate to you is the principle of is if I can make that dependency graph kinda lean in a particular routes that only need it there.

[00:11:41]
So now axios is only included on details, right, and if I only load landings, so if I only load landing, I'm not getting axios, which is super cool. So I'm trying to demonstrate to you this mental model of thinking on how to manage your dependency graph. Let's go ahead and put this in package.json of how to build.

[00:12:05]
So we have build, and I'm gonna put this to be -p whenever I say build, and then I'm gonna say build:dev. If you ever want to build for dev and not necessarily do, like watch or anything like that, it's always good to have that ability. We're gonna have webpack -d which is how you build for dev.

[00:12:23]
And just to make this explicit, I'm gonna say NODE_ENV=production and NODE_ENV=development.
>> Brian: Okay, so let's push a branch real quick.
>> Brian: Before I push a branch, let's go ahead and actually fix our lint error, since I'm not gonna modify this again. So I'm gonna export default actually here.

[00:13:03]
That's gonna make this stop doing that. Why are you upset? And we need this to be a flow file. Okay, then we're going to go modify
>> Brian: Details. So this is just gonna be getAPIDetails cuz now it's the default export from aSyncActions. And we also broke our tests, so let's go fix the tests real quick which is gonna be action creators.

[00:13:35]
actionCreators.spec, right? Up here, we're gonna get this from aSyncActions. So import blah from '../asyncActions'.
>> Brian: And now everything should be fixed.
>> Brian: Actions. Okay. So, let me push a branch, this will be 30.

