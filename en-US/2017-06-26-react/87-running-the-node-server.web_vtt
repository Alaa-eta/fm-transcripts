WEBVTT

1
00:00:00.140 --> 00:00:00.960
&gt;&gt; Brian Holt: What I want you to do here,

2
00:00:00.960 --> 00:00:03.370
you are going to leave
your API server running.

3
00:00:03.370 --> 00:00:05.350
And for
now I am going to shut off web pack.

4
00:00:05.350 --> 00:00:09.000
And I am going to change
that to be yarn watch.

5
00:00:09.000 --> 00:00:12.280
Because we still need to
compile our web pack code, but

6
00:00:12.280 --> 00:00:15.789
we are not going to be reading
from the dev server anymore.

7
00:00:15.789 --> 00:00:18.534
We are going to be requesting
it from our API server.

8
00:00:18.534 --> 00:00:22.229
Not our API server, but
our Express server that we just wrote.

9
00:00:23.680 --> 00:00:28.642
&gt;&gt; Brian Holt: And
now we're going to do a NODE_ENV

10
00:00:28.642 --> 00:00:33.131
equals server node server.js.

11
00:00:36.005 --> 00:00:38.790
&gt;&gt; Brian Holt: So
now it says listening on 8080.

12
00:00:38.790 --> 00:00:43.270
So if I come on to here And
refresh 8080 on here.

13
00:00:43.270 --> 00:00:49.290
Notice we're still getting our website,
and every thing's kind of fine.

14
00:00:49.290 --> 00:00:52.760
I don't think we're going
to get any console errors.

15
00:00:57.140 --> 00:00:58.610
We screwed up hot reload.

16
00:00:58.610 --> 00:01:01.290
I'll show you how to fix
hot reload with this.

17
00:01:01.290 --> 00:01:03.390
But that's why I was saying "hey,
I'm trying to find hot reload".

18
00:01:03.390 --> 00:01:06.420
That's because we're not talking
to the dev server anymore,

19
00:01:06.420 --> 00:01:11.900
we're talking to the node server
that we wrote, right, but

20
00:01:11.900 --> 00:01:17.050
now what's more interesting about this,
this is what it was before, totally empty.

21
00:01:17.050 --> 00:01:21.130
If I refresh, look at how much
stuff now is coming down, right?

22
00:01:21.130 --> 00:01:24.310
This is a fully rendered experience.

23
00:01:26.682 --> 00:01:27.960
&gt;&gt; Brian Holt: Which is pretty cool,
right?

24
00:01:29.810 --> 00:01:32.940
Now, something I want to show you that's
perhaps even more impressive about

25
00:01:32.940 --> 00:01:34.400
this, oops.

26
00:01:35.670 --> 00:01:41.170
So I'm going to come in here, and
I'm going to click right there.

27
00:01:43.070 --> 00:01:45.960
I forgot how to do this
with Chrome dev tools.

28
00:01:48.100 --> 00:01:49.130
Settings.

29
00:01:51.270 --> 00:01:53.810
I am going to disable JavaScript.

30
00:01:56.170 --> 00:01:57.710
Wherever disable JavaScript is.

31
00:01:57.710 --> 00:01:59.370
&gt;&gt; Speaker 2: You passed it.

32
00:01:59.370 --> 00:01:59.870
It was on the right.

33
00:02:02.920 --> 00:02:04.050
&gt;&gt; Brian Holt: Disable Javascripts, right?

34
00:02:05.560 --> 00:02:10.080
So now, as long as the DevTools are open,
JavaScript is going to be disabled, so

35
00:02:10.080 --> 00:02:17.460
now if I refresh the page,
you know what's going on here?

36
00:02:17.460 --> 00:02:20.360
It's Styles components doesn't
work without JavaScript.

37
00:02:21.720 --> 00:02:22.370
That's a problem.

38
00:02:23.600 --> 00:02:28.120
So that's something you accept when
you take on styles components, but

39
00:02:28.120 --> 00:02:30.660
notice that everything is
still being rendered out okay.

40
00:02:30.660 --> 00:02:34.690
I can actually click onto Game of Thrones,
and it will take me into the page.

41
00:02:34.690 --> 00:02:36.910
I can go back.

42
00:02:36.910 --> 00:02:38.390
I can click s-video.

43
00:02:38.390 --> 00:02:41.590
So I'm actually able to,
besides the styled components stuff,

44
00:02:41.590 --> 00:02:46.238
I'm able to still navigate my site,
right, because what's happening If you

45
00:02:46.238 --> 00:02:49.510
look at my server here,
it's just routing to each one of these,

46
00:02:49.510 --> 00:02:53.610
it's making a full server request, right,
the server side rendering that code and

47
00:02:53.610 --> 00:02:56.040
then just sending it back down to you,
right?

48
00:02:56.040 --> 00:02:59.570
So we made our page work
without JavaScript.

49
00:03:00.590 --> 00:03:03.470
Really any more that's not really
much of a problem almost every client

50
00:03:03.470 --> 00:03:06.980
that's going to be accessing your page
is going to have JavaScript enabled.

51
00:03:06.980 --> 00:03:09.590
But let's say you have a JavaScript error,
right?

52
00:03:09.590 --> 00:03:12.660
You're still going to be able to work,
right?

53
00:03:12.660 --> 00:03:17.170
It's kind of this progressive enhancement
idea that's typically a pretty good idea.

54
00:03:17.170 --> 00:03:18.220
I would say, right?

55
00:03:21.120 --> 00:03:24.020
So, I think that's really cool.

56
00:03:24.020 --> 00:03:25.000
That's because it is really cool.

57
00:03:27.490 --> 00:03:31.200
If you aren't using styled components that
would be a little bit more impressive,

58
00:03:31.200 --> 00:03:33.190
but I digress.

59
00:03:34.910 --> 00:03:36.260
Any questions about server side rendering?

60
00:03:39.870 --> 00:03:45.396
&gt;&gt; Speaker 3: The idea is just the first
page at the client loads pre-rendered and

61
00:03:45.396 --> 00:03:50.670
once React takes over, it goes back to
its old single page application behavior?

62
00:03:50.670 --> 00:03:52.030
&gt;&gt; Brian Holt: Exactly.

63
00:03:52.030 --> 00:03:53.195
So what this is going to buy for

64
00:03:53.195 --> 00:03:55.640
you: one, it's going to buy
you a lot with Google, right?

65
00:03:55.640 --> 00:03:59.340
Because you're going to send that markup
faster, which Google is then going to rank

66
00:03:59.340 --> 00:04:04.500
higher, and it's going to be more
controllable, in the sense that, yes,

67
00:04:04.500 --> 00:04:09.420
the Google caller does run Java script,
but it's imperfect, for sure.

68
00:04:09.420 --> 00:04:13.300
If you send a predetermined markup you get
to control what Google's crawling over.

69
00:04:14.380 --> 00:04:17.230
So it's a SEO win, for sure.

70
00:04:17.230 --> 00:04:20.210
It's a big win for
perceived web performance.

71
00:04:20.210 --> 00:04:25.420
If you're on a 2G connection in the middle
of nowhere or just maybe you're stuck

72
00:04:25.420 --> 00:04:29.980
on crappy wi-fi or something like that,
this is going to load a whole lot faster.

73
00:04:29.980 --> 00:04:34.020
And there is just tons and tons and
tons of data out there that says,

74
00:04:34.020 --> 00:04:37.680
if you load faster use this rule
to give you more money, right?

75
00:04:37.680 --> 00:04:39.230
In some capacity.

76
00:04:39.230 --> 00:04:42.250
But that's more page clicks
to get more ad revenue or

77
00:04:42.250 --> 00:04:46.350
your funnel is faster on your
e-commerce website, all of that, right?

78
00:04:46.350 --> 00:04:47.800
So this is a win.

79
00:04:47.800 --> 00:04:50.122
If you can server side render,
I recommend it.

80
00:04:53.418 --> 00:04:55.120
&gt;&gt; Brian Holt: Other questions?

81
00:04:55.120 --> 00:04:58.553
&gt;&gt; Speaker 4: And this is to get you
ready to put your side on to production?

82
00:04:58.553 --> 00:04:59.209
&gt;&gt; Brian Holt: Mm-hmm.

83
00:04:59.209 --> 00:05:02.880
So you typically you going to
do a server side rendering,

84
00:05:02.880 --> 00:05:05.710
I would say that it doesn't
always have to be just for

85
00:05:05.710 --> 00:05:10.770
production, but yeah,
you would want to be doing in production.

86
00:05:10.770 --> 00:05:13.350
What I would do in this particular case,
my god, look at that.

87
00:05:15.330 --> 00:05:19.520
That is the hot module
reload just losing its mind.

88
00:05:20.940 --> 00:05:24.980
I would do like the web pack depth
server for like local development,

89
00:05:24.980 --> 00:05:26.980
because that's a really nice
developer experience and

90
00:05:26.980 --> 00:05:28.730
you don't care if it's server
side rendering or not.

91
00:05:28.730 --> 00:05:31.794
And then when I send it off to production
I'll let server side rendering happen just

92
00:05:31.794 --> 00:05:32.419
to production.

93
00:05:37.356 --> 00:05:42.890
&gt;&gt; Speaker 5: And you said hopefully when
you click on the button, React is loaded.

94
00:05:42.890 --> 00:05:47.050
What happens if React hasn't reloaded yet?

95
00:05:47.050 --> 00:05:50.890
&gt;&gt; Brian Holt: So what I just showed you
here out site works without JavaScript,

96
00:05:50.890 --> 00:05:54.070
right, because it's actually a real
link it's an a tag that goes to that so

97
00:05:54.070 --> 00:05:57.230
it's going to hit your server again
make a full request and come back.

98
00:05:57.230 --> 00:05:59.280
So in that particular case,
everything is going to work.

99
00:06:00.310 --> 00:06:04.870
However, If, like it's something
that pops up a modal, or

100
00:06:04.870 --> 00:06:08.060
something like that,
it's just not going to work, right?

101
00:06:08.060 --> 00:06:09.550
Nothing's going to happen.

102
00:06:09.550 --> 00:06:10.990
However.

103
00:06:10.990 --> 00:06:16.700
&gt;&gt; Speaker 5: What about
our dispatch events?

104
00:06:18.060 --> 00:06:22.470
&gt;&gt; Brian Holt: Yeah, so, what will happen
then, if I'm able to type in there

105
00:06:22.470 --> 00:06:26.220
before React and Redux have bootstrapped,
it's going to blow it away, right?

106
00:06:26.220 --> 00:06:30.861
Because it's gonna bootstrap and say,
my state is actually empty string.

107
00:06:30.861 --> 00:06:34.580
However, that's usually not a problem.

108
00:06:34.580 --> 00:06:38.350
We're talking like, you're going
to load that first payload and

109
00:06:38.350 --> 00:06:41.900
within a hundred milliseconds,
you're going to get the JS.

110
00:06:41.900 --> 00:06:44.805
And once the JS is down, that parsing and

111
00:06:44.805 --> 00:06:49.880
bootstrapping is going to be five
to fifty milliseconds a most?

112
00:06:49.880 --> 00:06:52.810
Users don't make decisions that fast,
right?

113
00:06:52.810 --> 00:06:56.190
You would have to be prepared
with your fast-twitch muscles,

114
00:06:56.190 --> 00:06:58.230
okay now click it, right?

115
00:06:58.230 --> 00:06:59.490
Even on a slow connection, right?

116
00:07:01.400 --> 00:07:03.360
In other words, it's not something
I find myself concerned a lot

117
00:07:05.180 --> 00:07:07.490
with mean definitely instrument, right?

118
00:07:07.490 --> 00:07:09.282
If that is something you're worried about

119
00:07:09.282 --> 00:07:12.504
but,
&gt;&gt; Brian Holt: it has yet

120
00:07:12.504 --> 00:07:13.676
to be a problem for me.

121
00:07:15.350 --> 00:07:19.223
&gt;&gt; Speaker 5: It is good to keep in mind,
especially on a site like this,

122
00:07:19.223 --> 00:07:24.473
where downloading the JavaScript will
content with all the posters, right?

123
00:07:24.473 --> 00:07:25.227
&gt;&gt; Brian Holt: Mm-hm.

124
00:07:25.227 --> 00:07:26.940
&gt;&gt; Speaker 5: If you have large images or
something, and

125
00:07:26.940 --> 00:07:29.035
you can only develop so
many of those in parallel.

126
00:07:29.035 --> 00:07:29.907
Yeah.

127
00:07:29.907 --> 00:07:32.965
&gt;&gt; Brian Holt: Most definitely.

128
00:07:32.965 --> 00:07:37.300
I mean this is loading large posters,
because I'm super lazy and

129
00:07:37.300 --> 00:07:39.610
I didn't want to downscale them.

130
00:07:39.610 --> 00:07:42.410
But you definitely should
worry about things like that,

131
00:07:42.410 --> 00:07:45.590
like compressing your images,
making sure that the right,

132
00:07:45.590 --> 00:07:49.172
like you have thumbnails for the right
pages and full size for the other ones.

133
00:07:49.172 --> 00:07:50.396
For sure.

134
00:07:55.385 --> 00:07:56.283
&gt;&gt; Brian Holt: Yeah, Mark?

135
00:07:58.487 --> 00:08:00.412
&gt;&gt; Mark: If you make API calls to Node,

136
00:08:00.412 --> 00:08:03.340
how do you make mix in
server side rendering?

137
00:08:05.780 --> 00:08:10.410
&gt;&gt; Brian Holt: So this is, you're getting
into the questions about hydration and

138
00:08:10.410 --> 00:08:11.510
things like that.

139
00:08:11.510 --> 00:08:16.079
So, for example, if I click on here,
ideally when I was service side rendering,

140
00:08:16.079 --> 00:08:18.345
I would not come down and make a request.

141
00:08:18.345 --> 00:08:19.037
Did I shut this down?

142
00:08:19.037 --> 00:08:22.334
I did.

143
00:08:22.334 --> 00:08:28.560
NODE_ENV equals,
I guess I have it on here, don't I.

144
00:08:31.390 --> 00:08:32.850
Ideally, I would come to here.

145
00:08:33.940 --> 00:08:35.740
And, I wouldn't be making this request,
right?

146
00:08:35.740 --> 00:08:38.690
I would already have it loaded, because
I loaded it from the server, right?

147
00:08:39.900 --> 00:08:42.900
This is a really touchy situation
to get this correct, right?

148
00:08:42.900 --> 00:08:46.006
So, a big key about
service side rendering,

149
00:08:46.006 --> 00:08:51.235
which I actually should address, is if
you come in here, and if you zoom in,

150
00:08:51.235 --> 00:08:56.450
we're going to look for this thing
right here, data-react-checksum.

151
00:08:56.450 --> 00:08:59.710
So this is basically your app gets
run through this hashing algorithm.

152
00:08:59.710 --> 00:09:00.814
They generate a hash.

153
00:09:00.814 --> 00:09:04.473
Then when you get down to the client,
it's going to render for the first time,

154
00:09:04.473 --> 00:09:07.799
run the hashing algorithm again and
make sure that those hashes match,

155
00:09:07.799 --> 00:09:11.588
so that you're generating the same markup
on the server as you are on the client.

156
00:09:11.588 --> 00:09:14.564
If those mismatch, in fact,
I'll show you how you can,

157
00:09:14.564 --> 00:09:16.860
we'll just make it mismatch really quick.

158
00:09:18.930 --> 00:09:24.010
If I put, I don't know like here,
I'm just going to put a H one

159
00:09:24.010 --> 00:09:29.600
that's going to render out math.random.

160
00:09:29.600 --> 00:09:31.250
So this will be different on the client,
right,

161
00:09:31.250 --> 00:09:34.318
because everything you're on math.random
it's going to give you a different output.

162
00:09:34.318 --> 00:09:38.776
So it will be different on the client
than it is on the server, so

163
00:09:38.776 --> 00:09:43.757
if I load this again, it's going to say,
what the hell are you doing?

164
00:09:49.680 --> 00:09:53.932
&gt;&gt; Brian Holt: So, right there is what I'm
talking about, it says, hey, React tried

165
00:09:53.932 --> 00:09:58.940
to reuse the mark up that you sent down
there, but like hey, you messed up, right?

166
00:09:58.940 --> 00:10:01.910
What I got on the client is different
than what I got on the server.

167
00:10:01.910 --> 00:10:03.810
I'm going to blow everything away.

168
00:10:03.810 --> 00:10:06.680
So all those performance benefits
are actually now worse, right,

169
00:10:06.680 --> 00:10:09.950
because you had to pay all the extra cost
to get the server side rendering done.

170
00:10:09.950 --> 00:10:14.790
It's going to say, you messed up, I'm just
going to blow it away and then restart.

171
00:10:16.070 --> 00:10:19.040
So that's something you definitely
have to be careful about.

172
00:10:19.040 --> 00:10:22.920
So getting to the hydration side
of things, getting it to have

173
00:10:24.810 --> 00:10:28.610
the ability to have API requests before
they're made, it's tough, right?

174
00:10:28.610 --> 00:10:31.640
Because when you first create your app,
you're doing it with

175
00:10:31.640 --> 00:10:34.860
the thought in mind that it's
going to request it from the API.

176
00:10:34.860 --> 00:10:36.810
So with redox, it's actually not too bad.

177
00:10:36.810 --> 00:10:39.630
You just have to make sure that you're
providing the same initial states.

178
00:10:39.630 --> 00:10:42.100
You have to have the kind of
the variable initial state

179
00:10:42.100 --> 00:10:45.620
based on the context available or not.

180
00:10:45.620 --> 00:10:48.350
But the problem with that is you
have to make sure the context is

181
00:10:48.350 --> 00:10:51.370
both available on the server and
on the client.

182
00:10:51.370 --> 00:10:54.540
Plus it can still do it if you
navigate to that page without that

183
00:10:56.410 --> 00:10:58.280
being hydrated, right?

184
00:10:58.280 --> 00:11:02.310
So what I'm trying to paint a picture of
yours it's a bit of a complicated mess to

185
00:11:02.310 --> 00:11:05.030
kind of preempts those API requests and

186
00:11:05.030 --> 00:11:09.300
you have to have kind of where answers of
like is this worth it to me to try and do.

187
00:11:09.300 --> 00:11:10.640
It's possible for sure.

188
00:11:12.270 --> 00:11:14.144
But it's tough.

189
00:11:14.144 --> 00:11:18.796
And we're actually going to deal this
problem even more in depth here in just

190
00:11:18.796 --> 00:11:24.038
a second, because we are going to do code
split, which like compounds this problem.

191
00:11:24.038 --> 00:11:24.800
Other questions?

192
00:11:28.789 --> 00:11:30.027
&gt;&gt; Brian Holt: Stop that.

