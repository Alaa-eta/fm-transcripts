[00:00:00]
>> Brian Holt: So definitely something that we would wanna do, as we wanna make search read from as well, right? Cuz now we have search term in Redux and we also have search as state of search, right? So let's go to search.jsx. And let's go break all of our tests again, which is exactly what we're gonna do.

[00:00:21]
So, we're gonna import. Connect from react-redux.
>> Brian Holt: Okay, so we are actually going to use a context here. So we're gonna see how to use context. Okay. So we have Search, which,
>> Brian Holt: Okay, that's what we're doing wrong here. Yep.
>> Brian Holt: So, sideline this for a second. We actually need to go back to Landing for just a second and finish doing this.

[00:00:59]
Cuz the problem is we have no way of actually getting to the search page with our search term, right? So what we wanna do here is we're gonna be import React, import that, and then we're gonna import link which we did. We're going to import object.
>> Brian Holt: from 'prop-types' which I'll show you why in just a second.

[00:01:28]
And we have setSearchTerm, that's all good. We're gonna turn Landing into a class now because we're gonna have to have methods. So class, let's just do it this way. class Landing extends Component.
>> Brian Holt: You have to import that up here as well.
>> Brian Holt: Okay, it's gonna have a render method,

[00:02:03]

>> Brian Holt: Which is just going to,
>> Brian Holt: Return that.
>> Brian Holt: Okay, and then it needs to have these props.
>> Brian Holt: Which we're going to have up here. So props are that.
>> Brian Holt: Again, I just love to sing the praises of prettier. This is super ugly formatted, right?
>> Brian Holt: But the nice thing about it is as soon as I save, prettier just rescues me and fixes all of my indentations and things like that.

[00:02:45]
I really like that.
>> Brian Holt: So now, we have to refer to props as this.props, so this.props there.
>> Brian Holt: And why did you do that?
>> Brian Holt: There we go.
>> Brian Holt: It'd be nice if those were on multiple lines.
>> Brian Holt: Cool.
>> Brian Holt: So, now we've refactored to be an ES6 class.

[00:03:29]
Now what we want to do is, any time the user hits enter in landing, we want to route them to the search page, right? So, the way we're gonna have to do that is we're gonna have to listen for enter keys, right? And as soon as they hit enter, we're going to change the location from the landing page to the search page, right?

[00:03:53]
So the way you do that is you have to get access to what's called the history object and so you're gonna say static contextTypes = history: object.
>> Brian Holt: One is just a good idea to declare that this component has a dependency on this context item. But the other thing is, unless you declare to react as like, hey, I'm gonna be looking for this context item.

[00:04:31]
React actively hides context from you. The reason why is, it does not want you to use it, unless you explicitly mean to. So it's going to force you to say, no, React, I actually do want history. Otherwise, if I say this.context.history, despite the fact that it's actually technically there, it's not gonna let me access it.

[00:04:50]
So you actually have to opt into that.
>> Brian Holt: Okay. So the way we're going to make this work. And I find this to be a useful way of handling events, in particular with keyboards, is you can actually just have a form above it and then say onSubmit, this.goToSearch.

[00:05:25]

>> Brian Holt: I will say, this is not the only way to do it. This is just one way I've found nice to do it.
>> Brian Holt: Okay? And now we just need to write this goToSearch function.
>> Brian Holt: So goToSearch. goToSearch. We're gonna make it an arrow function. Because it's going to refer to something on context.

[00:05:56]
So it's gonna be equal to event: Synthetic. SyntheticEvent. Like that.
>> Brian Holt: And then the first thing we're gonna say is event.preventDefault. I'm sure many of you have done that before. This is going to prevent the form from submitting, and then we're gonna say this.
>> Brian Holt: I didn't even use that.

[00:06:39]

>> Brian Holt: Well, yeah, okay. We actually don't even need the contextTypes here. I forgot that react router changed the way that they do context types. So, go ahead and delete that and delete the object from prop-types.
>> Brian Holt: And instead you're gonna say this.props.history. So the way that used to work with react router like the three and before is that you had to opt in and use context types access history.

[00:07:13]
Now it's actually injected to every route. Because Landing is a route. It has access to history. So we're gonna say this.props.history.push
>> Brian Holt: /search.
>> Brian Holt: Okay. This is gonna say hey, I don't know what history is. This is what flow is gonna say. Luckily we can type that pretty well.

[00:07:47]
So come up here and say import type,
>> Brian Holt: RouterHistory, yep, RouterHistory from react-router-dom. And then we can say history is a RouterHistory type.
>> Brian Holt: That fixes everything. Yeah.
>> Speaker 2: There's a few different things. Could you use a redirect component?
>> Brian Holt: Totally could. So there's an imperative way and a declarative way of doing it, so react router has a redirect component that if a redirect component ever gets rendered, then it redirects somewhere else.

[00:08:41]
I'm a little uneasy with that paradigm cuz you do something like if redirect or then redirect this way. Yeah, I prefer to just use history directly but that's up to you.
>> Speaker 2: Is using Redux eliminate the need to use local react component state since each component can subscribe to the particular portion of the Redux state?

[00:09:12]

>> Brian Holt: That is up to you. I'm gonna say that the way I choose to write react when I have Redux, is I kinda separate two different kinds of state. I have application state, and I have view state, right? View state is something that's particular to the presentation. It's gonna be, is this in focus or where am I scrolling?

[00:09:34]
Those sorts of things that have to do with how I'm presenting my particular component. I still have that live in react state. And then application state is things that came back from the API, and those sorts of things that could be used across the application. It's kinda up to you how you divvy that up.

[00:09:53]
I would say that the dividing between application and view state is a pretty common way to do it, but totally up to you.
>> Speaker 2: Yeah, some people are saying that a global app state versus the local component, use set state for the local component state.
>> Brian Holt: Yep.
>> Speaker 2: Versus, yeah, the global app state.

[00:10:14]

>> Brian Holt: Totally.
>> Speaker 2: Can't you use history directly from the router?
>> Brian Holt: I mean, this works this way. I think this is a good way of doing it. There's other ways of accessing history but I think this is good.

