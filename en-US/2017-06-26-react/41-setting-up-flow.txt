[00:00:00]
>> Brian Holt: Let's go ahead and just kinda jump in so that we can start seeing how is this gonna help us. First thing I'm gonna do here is I wanna say, yarn flow. So we don't have a flow in our scripts but flow is actually being included already. In fact, if you go to ./node_ modules/.bin, there's a flow in there, which I had forgotten about this trick until just right now.

[00:00:25]
You can actually just say, yarn flow, and it's gonna go find that in your node_modules and run it for you. So we're gonna do yarn flow -- --init. So we're going to start our project as a flow project.
>> Brian Holt: So it didn't like that.
>> Brian Holt: Is it just,

[00:01:10]

>> Brian Holt: Is it just init? Okay, I don't think you need the dashes.
>> Brian Holt: There we go. Okay, so yarn flow, -- init.
>> Brian Holt: Okay, now if you look in your directory, it created this file here called .flowconfig. But this is kinda, a lot of the times you don't need anything other than just having a flow config, even if it's totally empty.

[00:01:37]
It's just that you're acknowledging at that point, this is now a flow project. Now the reason why I learned Flow in the first place and like Flow, it is very easy to introduce flow slowly into our mature code base, right? Cuz Flow is opt in, so we have to go in and opt in every file.

[00:01:55]
So you just kind of slowly start going and opting in files and eventually your entire project become typed, right? I think TypeScript can do something similar to that. I just, again, I don't have the experience to speak to that. But I know for a fact that, that was a strength for Flow, in my opinion, okay?

[00:02:22]

>> Brian Holt: Something else we're gonna do now is, I want you to add a file or add a global called yarn global add flow-typed, you can also do npm install -- global. I just need you to get this CLI called flow-typed. What this is going to, yeah, go ahead.

[00:02:41]

>> Speaker 2: What was the previous command for flow init?
>> Brian Holt: yarn flow-- init.
>> Brian Holt: So add the flow-typed.
>> Brian Holt: So now you should have a CLI thing called flow-typed. What this is going to do is this is going to go out to their repo and bring in types that your project is currently using.

[00:03:08]
So, for example, we're using, React's a bad example. Let's say,
>> Brian Holt: Well, something like enzyme, for example. Enzyme has a specific API, and someone went through and actually wrote the types for enzyme. So if you try and call enzyme dot method that does not exist. And you try and call that, it's going to say.

[00:03:39]
Hey, you're trying to call a method there that doesn't exist, right? So that's what flow-type is gonna do, it's gonna go out and grab those type definitions for you and bring them into your project in an automated fashion, which is my favorite way of doing it. So we're gonna say flow-typed install,

[00:03:59]

>> Brian Holt: And it's just gonna go out and grab all of the types for the things that you've installed. There's gonna a bunch of red output. This is just saying, hey, you have babel-core and I don't know what that is. And that's okay. But if you scroll up above all that, you're gonna see it brought in express, redux, flow, lodash, jest, enzyme, react-router-dom, axios, prop-types, react-addons-perf, and react-redux.

[00:04:22]
So we got all those typings for free, which is okay by me.
>> Brian Holt: Okay, also, just so you know, you can look here inside of your flow-typed directory that I just added for you. And you can actually go look at these type definitions which is super useful. So, for example, like I don't know how Jest is working.

[00:04:46]
So I can click into this, and I can actually go through all of these types. In fact, if you're on a plane and don't have access to the documentation, it's a pretty good way of looking at it, right? You can see that Jest actually does a ton of stuff.

[00:05:04]
So, this is pretty recent and to me this is a huge addition to Flow, so I'm very grateful to the community for doing that.
>> Brian Holt: Okay, any questions so far?
>> Brian Holt: So right now if we go and see yarn flow, I think it's just gonna not really do a whole lot.

[00:05:30]

>> Brian Holt: Because we don't have any files that are being opted in for it to be, look at this doing some stuff. So, God bless styled-components. I love them. But for whatever reason, they have interior errors for Flow. And so you have to go in and tell it specifically, do not type-check inside of the styled-components directory.

[00:05:54]
That was super weird. So let's go ahead and do that. Do I have that in here?
>> Brian Holt: Yeah, I do. So go into your flow config file that it generated for you, and the very first thing that you're gonna wanna do is ignore styled-components.
>> Brian Holt: So you're gonna say project root,

[00:06:21]

>> Brian Holt: /node_modules,
>> Brian Holt: /styled_components,
>> Brian Holt: /star. So it's just saying anything coming out of styled-components, I do not care. You don't wanna ignore all of node modules because you actually do care about the types that are coming out of it, right? The outputted types. And you want Flow to be able to follow those where it can.

[00:06:49]
So you wanna, for the most part, leave node_modules in your type checking just for whatever reason as of today it doesn't work.
>> Brian Holt: Something to note, that the Flow already understands React out of the box. It doesn't need any flow typings for that. The reason being is that Flow was written for the React team at Facebook, so they just kind of built it in.

[00:07:21]
So you get all that stuff just for free. Okay, so now if we try and do this again, and say yarn flow.
>> Brian Holt: It's gonna go do that again, and no error as far as it knows. But nothing is actually being opted into being checked. But it's good to know that we're starting from no errors upfront.

[00:07:45]

>> Brian Holt: Flow is written in OCaml.
>> Brian Holt: So it's relying on that particular typing system, so basically as far as I understand, it's converting your JavaScript types into an analogous OCaml type. Doing all this type checking with the really robust OCaml typing system and then spitting out those errors back to JavaScript for you.

[00:08:08]
But that's why it's really fast, right? If we were trying to write the typing system in JavaScript, one that seems like ill advised idea, that will go a lot sore. So that's when you see the Flow is still initializing those stuff, it's actually running a background process in OCaml.

[00:08:22]
It's feeding stuff into it and waiting for it to come back out.
>> Brian Holt: And the same thing if you look in your processes and you see some random OCaml process called flow, that's what it is.

