[00:00:00]
>> Brian Holt: We're gonna be doing testing today. Something I wanted to remind you of is that you can pull down the branch at any time. Right now we're on v3-10. So just to momentarily again show you how to get the latest branch if you need to do that with git.

[00:00:15]
So make sure that you have cloned the repo. So in this case, I have, you can see with git remote -vv. You can see that I'm pulling from btholt/complete-intro-to-react, you can do get fetch origin, and then the name of the branch, so in this case would be f3-10, which is what we have.

[00:00:35]
Turn that, it's gonna tell me I already have it.
>> Brian Holt: Okay, and then you say git checkout v3-10. And that will actually switch you into the branch which I'm already on v3-10, so its like you're done, don't do that. But you will actually switch to the end of the branch, I promise.

[00:00:54]

>> Brian Holt: So, cool. Hopefully we're all now on the same page. So what we're gonna be doing now is doing some testing with React. React is actually not too bad to test. Providing you're not using a bunch of crazy libraries cuz crazy libraries get pretty tough to test. Right now we're not doing anything to nuts so it's not to bad.

[00:01:16]
We're gonna be doing Jest testing today. I've personally really enjoyed Jest it's my testing framework of choice. But there are some very perfectly valid reasons to chose mocha, or java,, or any of those other ones. So feel free to switch to your favorite one. Just in particular is well suited to test react because it has something called Snapshot testing, which we're gonna take a bunch of advantage of today.

[00:01:45]
So something I did wanna message, or tell you is that if you wanna learn about specifically MoCA testing with React, you can watch version one of this course. You don't have to watch the whole course, you can watch just the section on the testing. And that's available to you as well.

[00:02:01]
Okay, so what I want you to do now is in your js directory inside of it I want you to create a new directory called __tests__.
>> Brian Holt: This is just a convention for creating tests, specific to I think Airbnb actually enforces it this way, that you have to kinda structure it this way.

[00:02:28]

>> Brian Holt: So, whatever, I just roll with it. I've seen lots of people do it this way, so we'll do it too, okay? And now, inside of this test directory, I want you to create a new file, and call it Search.spec.jsx. You can call it search.spec or search.test, I don't care which one you call it.

[00:02:52]
Both of those will automatically get picked up by Jest. I just do spec, and I think the reason why I do that is cuz I've always done it that way. But if .test sounds better to you then by all means go for it. So search.spec.jsx and what we're gonna do inside of here is we're going to import React from React.

[00:03:16]
I guess it kind of bears mentioning that.
>> Brian Holt: There's lots of testing strategies. I'm just gonna show you, probably, the most simple testing strategy. Like how to structure your test, what to call your test. What I like to do is if I have a search component I like to have another file called search.spec.jsx, right?

[00:03:37]
So there's a one to one mapping. Right so again, optimizing for deletability. If I delete search.jsx, I know I can delete its tests along with it, right? It's an easy way of being able to tell whatâ€™s tied to what. Okay, import renderer from react-test-renderer and import Search from ../Search, okay?

[00:04:07]
So react-test-renderer it's gonna allow us to do some testing. We're gonna be able to render out the search component and test it, right? Without actually having a DOM underneath. Which is gonna be pretty cool. Okay, so one thing to know about jest is underneath the hood, it's actually just Jasmin, right?

[00:04:34]
So if you've ever done Jasmin testing before, it's the same syntax. I've been told by the Facebook team that they reserve the right to change that so, it just be aware of that. So some of you have seen and actually in the last couple of courses I did this way you can do like describe, and then inside of it you do like it should do this test, I decided a simplify this just to test.

[00:04:59]
So again there are several ways that I can describe functions and have it assertions inside of it. I'm just going to have a bunch of test functions. So this is all preference, this is all correct, right? I'm just going with the simplest one to teach, really. That's what I'm optimizing for.

[00:05:17]
Okay, and test is just a global function that Jess is going to inject into this function. So it's going to be globally available so you don't have to import it from anywhere. Okay, so ("Search renders correctly").
>> Brian Holt: Okay and then that's gonna be a callback function here. And what we're going to do is we're going to say const component = renderer.create (Search).

[00:05:59]
let tree, or actually, const tree = component.toJSON. And then expect (tree) toMatchSnapshot.
>> Brian Holt: So let's save that. If you're gonna have your linter yelling at you right now because it's like, I don't know what test is and I don't know what expect is. I'm pretty sure you're just making it up.

[00:06:38]
That's what ESLint is telling you right now. So, let's go prove to ESLint, that we're not making it up. Go to your ESLint.JSON. And inside of here, we're gonna add one more env.
>> Brian Holt: And it's gonna be "jest". This is telling ESLint, hey, ignore all the global things that jest injects.

[00:07:05]
The kinda trade off here is that if you put inspect inside your, like your normal code where it won't be available, it's gonna not flag that. So, it's a trade off, but it not really bitten me in the butt yet, so I feel pretty good about doing this still.

[00:07:20]
But just so you know, that's the trade-off that right now I'm making for you. Okay, go back to your spec.jsx. And sometimes my linter is a little bit slow to catch up, sometimes if I just copy and paste it'll figure it shit out. Tthere is goes, okay.

