[00:00:00]
>> Brian Holt: So now I want you to create a new file, and save it and it's going to go not in the js directory, it's gonna go in the base directory for our project.
>> Brian Holt: And it's going to be called .babblerc
>> Brian Holt: Okay, this is how we are going to configure babble which is actually gonna do the transformations on our code.

[00:00:29]

>> Brian Holt: So there is a couple of things we are gonna be doing here. We are gonna be using what are called presets.
>> Brian Holt: Gonna be using two of them. The first one is pretty easy, it's called react. This is actually what's going to do all of our JSX translation.

[00:00:49]
So we're gonna write JSX and that's gonna get transformed to JS Also little known fact about this preset but it also includes the flow of transformations. So when we go to do flow, we don't have to do anything else. It's already included with react.
>> Brian Holt: Okay, so that's the first one.

[00:01:09]
And so to talk about presets, the way the Babel works,Babel is a transpiler, or compiler, right? You're gonna take one set of source and you're gonna transform it into something else, right? Each kind of transformation is called a plugin, right? So for example, arrow functions, right? Everyone loves arrow functions, right?

[00:01:30]
Yeah, I thought so. [LAUGH]
Arrow functions is one kind of plug-in, right? So you have a plug-in that takes arrow functions and it transforms it into functions. So that individual transformation is called a plug-in. It would be burdensome to include every single plug-in that we want, right? If you try to include every transformation for ES6 to ES5 that's something like, I can't even estimate.

[00:02:00]
I'm guessing it's over 50 plugins though. So including each of those plugins is really annoying and not something we necessarily wanna do. So they had the foresight to create things that are called presets, and a preset is a group of plugins. That's really all it is. So react, I believe, is three plugins.

[00:02:22]
It's the jsx one, it's another one for, so one of them is so that Babel can understand JSX. One of them is so that it can transform JSX and then the third one is flow. So I think that's all that's in the react one. A lot of times, you'll see people do things like here it says, like ES2015, which is totally valid.

[00:02:44]
You can put that and that would transform everything from ES6 or ES2015, those are synonymous terms to ES5, right? The problem with this is that we are getting to the point where the browser is going to understand a lot of ES6, right? So, at no point we should be transferring ES6 to ES5.

[00:03:05]
So, it's kinda moving targeted browsers to better and better, also. That we're introducing more and more features, right? Because there's ES2016, 2017, 2018. Yeah, 2018 just standardized. So, like, there's all these new features coming all the time. So, as you may imagine, trying to keep this up to date is impossible, right, because it's always moving.

[00:03:27]
It's, unless you're always on that repo every single day, which I'm not, I don't know if you are, but I'm definitely not. It's kinda a pain. So the current maintainer of Babel, Henry Zoo or left pad as he's known as on Twitter, came up with this idea for something called env, e-n-v.

[00:03:52]
I love env. This is one of my favorite features of Babel. This is basically the like auto prefixer, but for JavaScript. So specifically, what we're gonna do here is we're gonna put this in an array. And we're gonna make this an object.
>> Brian Holt: And let's put that in the same line.

[00:04:22]

>> Brian Holt: Going to say, targets.
>> Brian Holt: Going to say browsers. And what we're gonna set, tell it to target the last 2 versions.
>> Brian Holt: So what this is going to do is it's a moving target. Basically, you are telling it as the browsers keep improving, keep moving that target forward.

[00:04:51]
So this is gonna support, I don't know, what are we on for Chrome right now? Not Mac. About Chrome.
>> Brian Holt: So, we're on version 58 right now for Chrome, right? So it's gonna target 58 and 57, right? And then, when 59 is released, it's going to target 59 and 58, right?

[00:05:09]
And it's going to keep moving that forward. Same for Firefox, Edge, Safari, and all those. And the way it does it, it does, there's another package called compat table, and it's just constantly reading from compat table. So there's a bunch of things you can do with this. You can say, something like chrome like 56 or something like that.

[00:05:32]
I don't remember the exact syntax, but it is similar to that. Or you can pin it at a version as well. So really, really cool I definitely suggest that if you're doing something like transpiring ES2015 or something like that. That you migrate to env this is going to be better for you it's going to make your bundles smaller and it's going to make you go faster for sure.

[00:05:54]
It's basically code that updates itself which that's like my favorite thing, a code that I don't have to write. Okay, any questions about env? You can also target things like node, right? You can it node versions to target, because sometimes you need babel for node, in fact we will later today.

[00:06:13]
You can tell it to target things like IoT, different IoT versions of JavaScript. Various different cool stuff. Okay, the next thing, something that I personally do. I leave it to your discussion whether or not you want to do it. I'm gonna say loose calling true, set this in JSON so you can see this better.

[00:06:41]
So a lot of these different ES6 features and ES6 and beyond. In order to be spec compliant, that is to cover every single use case, the code goes from really small to very large just by handling all of the etch cases. Most of the time when you're writing these features, you're not having complex interaction of classes versus Generators, right?

[00:07:06]
You don't run into these crazy edge cases if they do have to provide for. So that's what loose mode is saying. It's saying hey, I'm not doing super crazy stuff with the edge cases. Go ahead and include the smaller bit of code rather than the huge bit of code.

[00:07:20]
Now, as you might imagine, this is a double-edged sword for sure, right? Sometimes you actually might be running into those Etch cases, and so if you are, when env moves you to a later version of JavaScript. Where it's moving you from the transpiled version to the native version and you're running into that etch case, you can have the interaction not be the same, right?

[00:07:41]
There's potential for breakage here. This has not bitten me in the ass yet. So, so far so good. So again, do so at your own discretion. For example, this workshop today will be totally fine if you put false. Your bundle's just going to be a little bit bigger because you're going to be including more.

[00:08:06]

>> Brian Holt: Lastly, we're gonna say modules and we're gonna say false here.
>> Brian Holt: And there's a very specific reason that we're doing this. We're telling battle to not transpile the modules. So typically, what would happen here is battle migrate this import React from react, it would transpire to const react = require ('react').

[00:08:38]
This used to be requires for things like webpack one to work, but we're using webpack two, and webback two is ES6 enable. So this is basically telling Babel to say, Babel don't touch the modules, webpack is gonns worry about it. That's what this particular thing here means. Because babel is going to run on the JavaScript code before webpack starts putting it together, right?

[00:09:09]
So you're just telling Babels, skip the modules, let webpack worry about it. Any questions about that?
>> Brian Holt: The reason why we're doing this, is so that we can do that live code inclusion stuff. Because if it gets transposed to the dynamic stuff webpack is gonna say everything's required, right?

[00:09:27]
I don't know what's required, so I'm just gonna include everything. Whereas, if you leave it as ES6 modules that can do that static analysis and say, hey, this code is impossible to run, I'm gonna leave it out. So by doing this, we're enabling live code inclusion or tree shaking.

[00:09:44]
Cool? Okay,
>> Brian Holt: That's it. [LAUGH] That's our Babel set up for now.
>> Brian Holt: But I wanna to take the time to explain to you so you understand everything that's going into this, right? So it's not black magic. I mean, Babel kinda black magic still.

