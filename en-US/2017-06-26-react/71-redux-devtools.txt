[00:00:00]
>> Brian Holt: Coming back here, our application hopefully still works. What I wanna show you now are the Redux depth tools, which are pretty cool. So, unlike the react ones where it just kind of works as soon as you install the extension. With the Redux ones, you actually have to hook into the library, so you have to actually write your own debug code.

[00:00:18]
And it's not too bad.
>> Brian Holt: So go to store.js, and in addition to createStore, I want you to import compose.
>> Brian Holt: So const store is gonna be createStore with reducer, and then you're gonna do after that compose. And what we're gonna do is we're gonna say, if type of window is object.

[00:00:52]
This is basically saying if I'm in the browser, so this will still run in node so we can still do server side rendering and that's fine.
>> Brian Holt: And,
>> Brian Holt: typeof window.devToolsExtension is not equal to undefined.
>> Brian Holt: By the way, I just totally grabbed these from the Redux websites.

[00:01:30]
So I did not write this.
>> Brian Holt: So if both of those things are true, then what we're gonna do is we're going to enable the dev tool extension here.
>> Brian Holt: Else we're just gonna give it a function that does nothing, which is f => f.
>> Brian Holt: This is called an identity function in case you were wondering.

[00:02:11]

>> Brian Holt: So again, I just grabbed this from the dev tools website.
>> Brian Holt: Basically it's saying if I'm in the browser and if I can find the Redux DevTools extension, then use that. Otherwise, do nothing.
>> Brian Holt: Okay?
>> Brian Holt: Now, Google Redux DevTools and if you're on Chrome it's this one and you just, mine's already added to Chrome so I don't need to do anything but if you need to, it's right there.

[00:02:55]
And the Firefox ones are here.
>> Brian Holt: Those are the only two that are actually browser extensions. The nice thing about the Redux dev tools is because they're written in React, you can actually render it inside of the browser. So, say you're on I don't know, so you're doing React native stuff.

[00:03:20]
You can actually include the dev tools inside of React native which is pretty cool.
>> Brian Holt: Okay, so now that I do that, you can see up here. It's kinda hard to see but there's a little icon up there that is lit up. It will not be lit up on other pages.

[00:03:37]
It's only going to be lit up on pages that it's actually been engaged. If I click it, I'm gonna get these dev tools out. And I can see that it's already done an init action here, right? So let's see.
>> Brian Holt: So I can come in here and I can write black and that dispatched five actions, right, cuz every single time that the user types, it dispatches an action to Redux.

[00:04:07]
So if I got over my dev tools again. You're gonna see all of those actions, right? One for each letter that I typed. Now let's get into why Redux DevTools are really, really impressive to me. I can actually travel backwards in time. So I'm gonna say, you know what?

[00:04:23]
Disable that one.
>> Brian Holt: Let's see.
>> Brian Holt: I'm probably in the wrong one. Nope, that's not the one I wanted.
>> Brian Holt: Let's actually do it this way. You can actually open it here as well.
>> Brian Holt: So this is the inspector, okay and that's what I wanted, I wanted the log monitor.

[00:05:02]

>> Brian Holt: And here, I can start actually, so if you're looking up here in the top, I'm disabling these action piece by piece. And I can go backwards and forwards in time, right?
>> Brian Holt: And I can reset everything, and we can go back to the initial state.
>> Brian Holt: And let's see it.

[00:05:26]
There's also the Inspector. So the inspector's cool and then the chart is also pretty cool cuz you can see those as they come in as well. And you can inspect the state tree of your app, ours isn't particularly interesting because we have just the one piece of staping modified, but let's go back to log monitor.

[00:05:56]

>> Brian Holt: There we go.
>> Brian Holt: Nope that's not what I'm looking for either.
>> Brian Holt: So anyway, you can pop it out and do different things. You can also inspect like, what the actions looked like. So in this particular one, you can see this is what the action looks like.

[00:06:21]
This is what the state ended up being afterwards. You can actually go disable. Like what would happen if this particular one in the middle was never dispatched. And the answer to that question is nothing, right? Because each action is sending the full search term every single time, so it's completely overwriting.

[00:06:37]
But right now this middle one's not actually happening. So this is called time travel debugging. And because of the way that Redux is written, it lends itself very well to this. Now what's really cool about this is you can actually dump the state of your Redux and send that off to your developer.

[00:06:55]
And say like, here is a perfect repro case for this particular bug that can download your Redux state and see how you got into this state. And then they can go backwards and forwards in time to kind of understand how this is happening, right? You can actually automate that process, yeah.

[00:07:10]

>> Audience 1: Could you do this on production? So if you have a customer that's running into an issue, they could send you a log and you could pull it in and go through it step by step.
>> Brian Holt: Absolutely.
>> Audience 1: Yeah?
>> Brian Holt: Yeah, totally.
>> Audience 1: Sweet.
>> Brian Holt: You can just have them dump their Redux state and then send it off to you.

[00:07:24]
And like I was saying here, you could automate that process. So like the user crashed the app, lets dump Redux and send it back to development. So this affords some really really cool things.
>> Brian Holt: I find this pretty entertaining, you can actually have a timeline here that you can go backwards and forwards in time with.

[00:07:46]

>> Brian Holt: In fact, you can even press play, it'll actually just automatically show you step by step what's happening.
>> Brian Holt: I find this very entertaining personally.

