WEBVTT

1
00:00:00.590 --> 00:00:02.940
&gt;&gt; Brian Holt: Let's go ahead and
just kinda jump in so

2
00:00:02.940 --> 00:00:05.900
that we can start seeing
how is this gonna help us.

3
00:00:05.900 --> 00:00:08.640
First thing I'm gonna do here
is I wanna say, yarn flow.

4
00:00:10.310 --> 00:00:14.580
So we don't have a flow in our scripts but
flow is actually being included already.

5
00:00:16.190 --> 00:00:21.628
In fact, if you go to ./node_
modules/.bin, there's a flow in there,

6
00:00:21.628 --> 00:00:25.910
which I had forgotten about this
trick until just right now.

7
00:00:25.910 --> 00:00:27.807
You can actually just say, yarn flow, and

8
00:00:27.807 --> 00:00:30.721
it's gonna go find that in your
node_modules and run it for you.

9
00:00:30.721 --> 00:00:36.321
So we're gonna do yarn flow -- --init.

10
00:00:36.321 --> 00:00:40.720
So we're going to start our
project as a flow project.

11
00:00:46.921 --> 00:00:48.960
&gt;&gt; Brian Holt: So it didn't like that.

12
00:00:57.520 --> 00:00:58.222
&gt;&gt; Brian Holt: Is it just,

13
00:01:10.754 --> 00:01:11.782
&gt;&gt; Brian Holt: Is it just init?

14
00:01:11.782 --> 00:01:13.301
Okay, I don't think you need the dashes.

15
00:01:15.982 --> 00:01:19.223
&gt;&gt; Brian Holt: There we go.
Okay, so yarn flow, -- init.

16
00:01:21.101 --> 00:01:24.536
&gt;&gt; Brian Holt: Okay,
now if you look in your directory,

17
00:01:24.536 --> 00:01:28.608
it created this file
here called .flowconfig.

18
00:01:28.608 --> 00:01:33.210
But this is kinda,
a lot of the times you don't need

19
00:01:33.210 --> 00:01:37.560
anything other than just having a flow
config, even if it's totally empty.

20
00:01:37.560 --> 00:01:41.010
It's just that you're acknowledging at
that point, this is now a flow project.

21
00:01:42.550 --> 00:01:46.770
Now the reason why I learned Flow
in the first place and like Flow,

22
00:01:46.770 --> 00:01:52.460
it is very easy to introduce flow slowly
into our mature code base, right?

23
00:01:52.460 --> 00:01:55.540
Cuz Flow is opt in, so
we have to go in and opt in every file.

24
00:01:55.540 --> 00:01:59.765
So you just kind of slowly start going and
opting in files and

25
00:01:59.765 --> 00:02:03.750
eventually your entire
project become typed, right?

26
00:02:05.730 --> 00:02:10.160
I think TypeScript can do
something similar to that.

27
00:02:10.160 --> 00:02:12.400
I just, again, I don't have
the experience to speak to that.

28
00:02:12.400 --> 00:02:18.256
But I know for a fact that, that was
a strength for Flow, in my opinion, okay?

29
00:02:22.094 --> 00:02:27.318
&gt;&gt; Brian Holt: Something else we're gonna
do now is, I want you to add a file or

30
00:02:27.318 --> 00:02:31.460
add a global called yarn
global add flow-typed,

31
00:02:31.460 --> 00:02:34.880
you can also do npm install -- global.

32
00:02:34.880 --> 00:02:39.640
I just need you to get this
CLI called flow-typed.

33
00:02:39.640 --> 00:02:41.031
What this is going to, yeah, go ahead.

34
00:02:41.031 --> 00:02:44.311
&gt;&gt; Speaker 2: What was the previous
command for flow init?

35
00:02:44.311 --> 00:02:48.833
&gt;&gt; Brian Holt: yarn flow-- init.

36
00:02:52.334 --> 00:02:53.693
&gt;&gt; Brian Holt: So add the flow-typed.

37
00:02:57.492 --> 00:03:02.350
&gt;&gt; Brian Holt: So now you should
have a CLI thing called flow-typed.

38
00:03:02.350 --> 00:03:05.520
What this is going to do is this is
going to go out to their repo and

39
00:03:05.520 --> 00:03:08.720
bring in types that your
project is currently using.

40
00:03:08.720 --> 00:03:13.702
So, for example, we're using,
React's a bad example.

41
00:03:13.702 --> 00:03:14.462
Let's say,

42
00:03:24.915 --> 00:03:27.690
&gt;&gt; Brian Holt: Well,
something like enzyme, for example.

43
00:03:27.690 --> 00:03:31.570
Enzyme has a specific API,
and someone went through and

44
00:03:31.570 --> 00:03:33.550
actually wrote the types for enzyme.

45
00:03:33.550 --> 00:03:37.840
So if you try and call enzyme
dot method that does not exist.

46
00:03:37.840 --> 00:03:39.450
And you try and call that,
it's going to say.

47
00:03:39.450 --> 00:03:41.730
Hey, you're trying to call a method
there that doesn't exist, right?

48
00:03:43.200 --> 00:03:45.940
So that's what flow-type is gonna do,
it's gonna go out and

49
00:03:45.940 --> 00:03:48.450
grab those type definitions for
you and bring them into your project

50
00:03:49.690 --> 00:03:52.490
in an automated fashion,
which is my favorite way of doing it.

51
00:03:52.490 --> 00:03:59.856
So we're gonna say flow-typed install,
&gt;&gt; Brian Holt: And it's just

52
00:03:59.856 --> 00:04:03.081
gonna go out and grab all of the types for
the things that you've installed.

53
00:04:03.081 --> 00:04:04.580
There's gonna a bunch of red output.

54
00:04:04.580 --> 00:04:08.640
This is just saying, hey, you have
babel-core and I don't know what that is.

55
00:04:08.640 --> 00:04:09.140
And that's okay.

56
00:04:10.530 --> 00:04:13.720
But if you scroll up above all that,
you're gonna see it brought in express,

57
00:04:13.720 --> 00:04:18.318
redux, flow, lodash, jest,
enzyme, react-router-dom,

58
00:04:18.318 --> 00:04:22.840
axios, prop-types,
react-addons-perf, and react-redux.

59
00:04:22.840 --> 00:04:26.342
So we got all those typings for
free, which is okay by me.

60
00:04:29.502 --> 00:04:32.573
&gt;&gt; Brian Holt: Okay, also,
just so you know, you can look

61
00:04:32.573 --> 00:04:37.410
here inside of your flow-typed
directory that I just added for you.

62
00:04:37.410 --> 00:04:41.820
And you can actually go look at these
type definitions which is super useful.

63
00:04:42.870 --> 00:04:46.710
So, for example,
like I don't know how Jest is working.

64
00:04:46.710 --> 00:04:51.570
So I can click into this, and I can
actually go through all of these types.

65
00:04:54.054 --> 00:04:57.790
In fact, if you're on a plane and
don't have access to the documentation,

66
00:04:57.790 --> 00:05:01.100
it's a pretty good way of looking at it,
right?

67
00:05:01.100 --> 00:05:02.860
You can see that Jest
actually does a ton of stuff.

68
00:05:04.620 --> 00:05:08.982
So, this is pretty recent and
to me this is a huge addition to Flow, so

69
00:05:08.982 --> 00:05:12.309
I'm very grateful to the community for
doing that.

70
00:05:15.870 --> 00:05:18.691
&gt;&gt; Brian Holt: Okay, any questions so far?

71
00:05:21.951 --> 00:05:24.109
&gt;&gt; Brian Holt: So
right now if we go and see yarn flow,

72
00:05:24.109 --> 00:05:26.951
I think it's just gonna
not really do a whole lot.

73
00:05:30.891 --> 00:05:33.950
&gt;&gt; Brian Holt: Because we don't have
any files that are being opted in for

74
00:05:33.950 --> 00:05:37.266
it to be, look at this doing some stuff.

75
00:05:37.266 --> 00:05:42.220
So, God bless styled-components.

76
00:05:42.220 --> 00:05:43.450
I love them.

77
00:05:43.450 --> 00:05:46.850
But for whatever reason,
they have interior errors for Flow.

78
00:05:46.850 --> 00:05:49.560
And so you have to go in and
tell it specifically,

79
00:05:49.560 --> 00:05:54.061
do not type-check inside of
the styled-components directory.

80
00:05:54.061 --> 00:05:55.530
That was super weird.

81
00:05:55.530 --> 00:05:57.310
So let's go ahead and do that.

82
00:05:57.310 --> 00:05:57.810
Do I have that in here?

83
00:06:01.284 --> 00:06:02.110
&gt;&gt; Brian Holt: Yeah, I do.

84
00:06:03.290 --> 00:06:07.070
So go into your flow config file
that it generated for you, and

85
00:06:07.070 --> 00:06:12.026
the very first thing that you're gonna
wanna do is ignore styled-components.

86
00:06:14.906 --> 00:06:17.655
&gt;&gt; Brian Holt: So you're gonna say project

87
00:06:17.655 --> 00:06:22.624
root,
&gt;&gt; Brian Holt: /node_modules,

88
00:06:27.564 --> 00:06:29.884
&gt;&gt; Brian Holt: /styled_components,

89
00:06:32.824 --> 00:06:34.064
&gt;&gt; Brian Holt: /star.

90
00:06:34.064 --> 00:06:38.800
So it's just saying anything coming out
of styled-components, I do not care.

91
00:06:38.800 --> 00:06:42.060
You don't wanna ignore all of node modules
because you actually do care about

92
00:06:42.060 --> 00:06:44.050
the types that are coming out of it,
right?

93
00:06:44.050 --> 00:06:45.263
The outputted types.

94
00:06:45.263 --> 00:06:49.240
And you want Flow to be able
to follow those where it can.

95
00:06:49.240 --> 00:06:54.546
So you wanna, for the most part,
leave node_modules in your

96
00:06:54.546 --> 00:07:00.481
type checking just for whatever
reason as of today it doesn't work.

97
00:07:08.920 --> 00:07:10.060
&gt;&gt; Brian Holt: Something to note,

98
00:07:10.060 --> 00:07:13.220
that the Flow already understands
React out of the box.

99
00:07:13.220 --> 00:07:16.270
It doesn't need any flow typings for that.

100
00:07:16.270 --> 00:07:20.130
The reason being is that Flow was written
for the React team at Facebook, so

101
00:07:20.130 --> 00:07:21.250
they just kind of built it in.

102
00:07:21.250 --> 00:07:23.460
So you get all that stuff just for free.

103
00:07:25.530 --> 00:07:27.977
Okay, so now if we try and
do this again, and say yarn flow.

104
00:07:31.997 --> 00:07:35.490
&gt;&gt; Brian Holt: It's gonna go do that
again, and no error as far as it knows.

105
00:07:35.490 --> 00:07:38.760
But nothing is actually being
opted into being checked.

106
00:07:38.760 --> 00:07:41.805
But it's good to know that we're
starting from no errors upfront.

107
00:07:45.667 --> 00:07:47.487
&gt;&gt; Brian Holt: Flow is written in OCaml.

108
00:07:50.266 --> 00:07:53.680
&gt;&gt; Brian Holt: So it's relying on
that particular typing system,

109
00:07:53.680 --> 00:07:56.085
so basically as far as I understand,

110
00:07:56.085 --> 00:08:00.760
it's converting your JavaScript
types into an analogous OCaml type.

111
00:08:00.760 --> 00:08:04.421
Doing all this type checking with
the really robust OCaml typing system and

112
00:08:04.421 --> 00:08:07.340
then spitting out those errors
back to JavaScript for you.

113
00:08:08.370 --> 00:08:09.940
But that's why it's really fast, right?

114
00:08:09.940 --> 00:08:13.121
If we were trying to write
the typing system in JavaScript,

115
00:08:13.121 --> 00:08:16.940
one that seems like ill advised idea,
that will go a lot sore.

116
00:08:16.940 --> 00:08:20.040
So that's when you see the Flow is
still initializing those stuff,

117
00:08:20.040 --> 00:08:22.200
it's actually running
a background process in OCaml.

118
00:08:22.200 --> 00:08:24.133
It's feeding stuff into it and
waiting for it to come back out.

119
00:08:27.431 --> 00:08:30.024
&gt;&gt; Brian Holt: And the same thing
if you look in your processes and

120
00:08:30.024 --> 00:08:33.560
you see some random OCaml process
called flow, that's what it is.

