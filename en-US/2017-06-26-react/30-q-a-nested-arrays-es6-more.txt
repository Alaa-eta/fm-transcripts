[00:00:00]
>> Brian Holt: V3-10 is pushed for those that need it.
>> Speaker 2: So now that the search component can filter based on a search term, how do we use the route on the client app component? And pass a search term to a search component so that as we navigate to the landing page to the search results page we get.

[00:00:31]

>> Brian Holt: Yes cuz we had that little search box on the landing page?
>> Speaker 2: Yeah.
>> Brian Holt: The answer to that question is there are several ways you can do that. You could have probably the app keep track of the landing or the search term. And then it would pass that both into the landing page and the search page, right?

[00:00:55]
So if we go back here to app.jsx
>> Brian Holt: Climbedapp.jsx. We would make this a useful component and then it would pass the search term both into landing and into search right? And then it would keep track of it so in other words you find a common ancestor. The ancestor keeps track of it and then passes into both the children.

[00:01:20]
That is how I would do it without using redux. The real answer to your question is how are we going to do it, with Redux. That segways into a thought I wanted to say before we left. We are going to build this entire application besides that, with React and no Redux.

[00:01:43]
React solves almost all of your problem and reducts is a really big hammer that only sometimes do you need. And I'm going to say as much as rarely need, right. Do not start building your applications with Redux out of the box cuz it adds a lot of complexity to your app.

[00:02:00]
And React solves most of it by itself, right? What I showed you here scales to large applications. To the point at Netflix we still were not using Redux in most of our applications.
>> Speaker 3: Yeah, I guess related to data fetching without Redux.
>> Brian Holt: How do you do that?

[00:02:22]
So data fetching without Redux. There is a specific section on this, we will go over it, but the answer is, is inside of your React components.
>> Brian Holt: So React can take care of everything that redux can, 100 percent for sure, no problem. Well, I guess problem right. Eventually you're gonna run into a problem which is where Redox comes in, right.

[00:02:48]

>> Speaker 4: I feel like Redux was so new and cool and everybody wants to reach for the cool, new, complex thing, versus looking at, what is it solving. Why do I need it? First, it's just like kind of the cult band wagon.
>> Brian Holt: Definitely when like and eventually it got to the point where you just said react Redux right?

[00:03:12]
They just kind of went together in the same breath and that's not fair like react really stands on it's own. If you talk to like Ryan Florence, again one of the authors of React router, he said that he literally never uses Redux and he always just uses React.

[00:03:28]
I'm not too far away from that. There is a point where I will use Redux,
>> Brian Holt: And we'll definitely address more of that when we get to Redux. But I want to show you that you can build a big application just with React. And most the time that's okay.

[00:03:44]
There's a great blog post from Dan Abramov called You Might Not Need Redux. And so that's a good one to read as well.
>> Speaker 3: Even for scalable apps?
>> Brian Holt: For sure. You can write pretty big applications in React with no Redux. React is like the state management thing, like I showed you here in search, this scales to large applications for sure.

[00:04:19]

>> Speaker 4: There's more questions from chat.
>> Brian Holt: Cool.
>> Speaker 4: First a funny comment. He says I also got a job because of version two. And I'll sell the new version three stuff. But I'm seeing tomorrow at my work.
>> Brian Holt: That's awesome.
>> Speaker 4: What about nested arrays of objects which contain nested arrays of objects?

[00:04:43]

>> Speaker 4: Normalizer.
>> Brian Holt: Yeah, there's a library called Normalizer, or there's like a Redux normalizer. There's several ways to normalize that. Which is basically to say like, take crazy structures of data and turn them into a usable sort of data. There's a bunch of ways to do that, Redux has different ways of doing it, you don't necessarily need Redux to do that though.

[00:05:05]

>> Speaker 4: This one's an ES6 question about arrow function, I don't know.
>> Brian Holt: Okay, go ahead.
>> Speaker 4: I'd say, that one should probably look at Cal Simpson's ES6 The Right Parts if you got questions on arrow functions cuz Cala Simpson lays it in glorious detail in this course.
>> Brian Holt: Yeah, way better than I do, for sure.

[00:05:25]
I watch his courses, so I can tell you the same things.
>> Speaker 4: Will we cover hooking up our client-side app to a back end, or server-side?
>> Brian Holt: Yeah, so you saw the ratings API thing that I built for you that's inside of the app. We'll definitely be hooking it to our fake API.

[00:05:54]

>> Speaker 4: Yes, all of these last minute Q&As will be available to watch Tonight.
>> Speaker 4: There's a few people throwing in rxjs into chat but I didn't really see a good time to really talk about it. But using rx with React.
>> Brian Holt: So I love rxjs. It is crazy awesome and you should definitely watch course in for the masters, if you are interested in RX stuff, or Kyle's, either one of those are really good.

[00:06:29]

>> Speaker 4: Yeah he just recorded, last Saturday, an advanced asynchronous programming in JavaScript which covers more real world applications of RX.
>> Brian Holt: Perfect. So as far as it directly applied to react, I would say that there is no special place that it goes in react. In other words you would use RX in react as you would in any other program and there is no special hook into it.

[00:06:56]
Like there is no react RX or anything like that as far as I know or as far as I would want to use, so, like you could like an observable emitting a Jax client or web socket client but that would not be any different for react like it would for anything else.

[00:07:14]

>> Speaker 4: I think the point is that React just renders the data, right?
>> Brian Holt: Yeah.
>> Speaker 4: However you're dealing with data and handlers and stuff could be handled by Rx.
>> Brian Holt: Exactly.
>> Speaker 4: And once the observable kicks out data, then you would want to render that data to a component.

[00:07:31]

>> Brian Holt: Right.
>> Speaker 4: Another question, any thoughts on using graphic QL with React? I think that's the same thing where you're just pulling the data and rendering it to a component, right?
>> Brian Holt: It's a tiny bit more opinionated, so I considered covering it today, but that would Covering GraphQL would be literally a full nother day.

[00:07:58]

>> Brian Holt: The cool thing about using GraphQL with React is that you can make components declare their own data dependencies. So basically your component says, I require user name, and first name and last name from the API, and then as you build up your component tree, at the top level you'll gather all of the queries.

[00:08:19]
And then send that to GraphQL, and then feed that back down to your tree. So basically the fact that you're including a component will then be sending that data to an API. And the API will be automatically feeding that back down into the component, it's really slick. It's declarative data dependencies.

[00:08:40]
I did some helping with Falcor which is the Netflix version of that. And you can do a similar thing as well with Falcor. It's really cool, it's really sleek. And then GraphQL is the name of the language that you declare those dependencies in, and then Relay is the name of the serious.

[00:08:59]
Relay or Apollo are the two big ones that you feed that to. So a whole nother course, really cool, but we're not gonna talk about it.
>> Speaker 4: Sounds like another author or you should come back and do.
>> Brian Holt: Not me, I think it's really cool, I don't know too much about it though.

[00:09:20]
But yes, there definitely should be a course on GraphQL.
>> Speaker 4: Well, yeah, I mean, I think we've had like four authors propose GraphQL. But it's like GraphQL on Angular, GraphQL on Express, GraphQL-
>> Brian Holt: Yeah.
>> Speaker 4: It's like there's so many different contexts of using it and ways to teach it.

[00:09:40]
So we might have to do multiple courses.
>> Brian Holt: Yeah, that's true.
>> Speaker 4: Anyways, with that I don't see any other questions in chat. Now is your last chance before we go to day two, break for day two.
>> Speaker 5: Do we need to any service side rendering, or can we just do it all client side for react?

[00:10:03]

>> Brian Holt: The answer to that question is it depends on what your need are, right? Certainly service side rendering yields a lot of benefits. It's great for SCO. It's faster, right? It's perceived to be faster to the user. There's a bunch of stuff about that that's really cool. But it also does add some complexity to your app.

[00:10:25]
You have to make sure that everything works both in both the node and in the browser. You have to be using node, that's another layer of complexity. So you just need to, it's tradeoffs, right? You got to make the right tradeoffs for it. And we'll definitely be doing server side rendering, maybe by the end of tomorrow.

[00:10:42]
And you'll see, you'll get to experience those tradeoffs first hand.
>> Speaker 4: Okay, but we can run this on a server like a CMS or something that didn't have node installed on it?
>> Brian Holt: Absolutely.
>> Speaker 4: Yeah okay.
>> Brian Holt: Yep, definitely. There's a bunch of companies out there that are running react and production right now with no server side entry.

