WEBVTT

1
00:00:00.100 --> 00:00:00.600
&gt;&gt; Brian Holt: So

2
00:00:00.600 --> 00:00:04.360
I just reverted all my code back to using
the dev server but one thing I wanted

3
00:00:04.360 --> 00:00:08.230
to go capture in my package.json
is the ability to run that server.

4
00:00:09.370 --> 00:00:10.680
So I'm gonna call this start.

5
00:00:14.486 --> 00:00:21.886
&gt;&gt; Brian Holt: And
then I'm gonna say NOD_ENV =

6
00:00:21.886 --> 00:00:27.530
server node server.js.

7
00:00:27.530 --> 00:00:32.633
So now if I say yarn start,
it'll start my production server, right.

8
00:00:36.694 --> 00:00:41.209
&gt;&gt; Brian Holt: So again, I can just
come in here and say yarn start.

9
00:00:41.209 --> 00:00:44.477
And it should be good to go.

10
00:00:47.882 --> 00:00:48.382
&gt;&gt; Brian Holt: Hm.

11
00:00:50.740 --> 00:00:53.729
So, yeah, you just have to make sure
to not include hot module refresh or

12
00:00:53.729 --> 00:00:54.912
it's gonna have a bad time.

13
00:00:56.641 --> 00:01:01.092
&gt;&gt; Brian Holt: So I'm gonna change
this back from watch to dev, so

14
00:01:01.092 --> 00:01:04.628
I can go back to the development server.

15
00:01:04.628 --> 00:01:09.259
So we're gonna talk about
another thing here called

16
00:01:09.259 --> 00:01:14.214
code splitting, or chunking,
as it used to be called.

17
00:01:18.735 --> 00:01:22.463
&gt;&gt; Brian Holt: There's a kind
of a weird problem with,

18
00:01:22.463 --> 00:01:26.631
in particular doing server side rendering,

19
00:01:26.631 --> 00:01:31.800
hot module replacement and
code splitting all at once.

20
00:01:31.800 --> 00:01:35.155
It's a pick two scenario.

21
00:01:35.155 --> 00:01:40.119
That the three cannot co-exist all
together given the state of how webpack

22
00:01:40.119 --> 00:01:41.330
works.

23
00:01:41.330 --> 00:01:42.930
And the real problem is,

24
00:01:42.930 --> 00:01:46.140
we're gonna configure our routes
to be asynchronous, right?

25
00:01:46.140 --> 00:01:49.080
So that when I go from landing to search,

26
00:01:49.080 --> 00:01:52.940
it's actually going to pull in
the JavaScript for search and then

27
00:01:52.940 --> 00:01:56.820
when I go from search to details, it will
pull in the JavaScript just for details.

28
00:01:56.820 --> 00:02:01.220
The reason why it's nice is that means,
when I load landing for the first time,

29
00:02:01.220 --> 00:02:03.490
it's only going to load the code for
landing.

30
00:02:03.490 --> 00:02:06.540
And it's not gonna load anything for
search, and

31
00:02:06.540 --> 00:02:09.890
it's not going to load anything for
details, right?

32
00:02:09.890 --> 00:02:12.924
In other words,
we get to cut down on our bundle size, and

33
00:02:12.924 --> 00:02:18.010
we get to load only the JavaScript that's
necessary for that particular page.

34
00:02:18.010 --> 00:02:21.400
Which is gonna be, again,
another performance win for us.

35
00:02:21.400 --> 00:02:23.860
This is, again, something that
you're gonna wanna do in production.

36
00:02:23.860 --> 00:02:26.720
Maybe not in development because there's
no real reason that you need to be

37
00:02:26.720 --> 00:02:27.660
doing that in development.

