WEBVTT

1
00:00:00.420 --> 00:00:03.100
&gt;&gt; Brian Holt: Coming back here,
our application hopefully still works.

2
00:00:03.100 --> 00:00:07.060
What I wanna show you now are the Redux
depth tools, which are pretty cool.

3
00:00:07.060 --> 00:00:09.410
So, unlike the react ones

4
00:00:09.410 --> 00:00:13.320
where it just kind of works as
soon as you install the extension.

5
00:00:13.320 --> 00:00:15.640
With the Redux ones, you actually
have to hook into the library, so

6
00:00:15.640 --> 00:00:18.420
you have to actually write
your own debug code.

7
00:00:18.420 --> 00:00:19.264
And it's not too bad.

8
00:00:21.260 --> 00:00:25.130
&gt;&gt; Brian Holt: So go to store.js,
and in addition to createStore,

9
00:00:25.130 --> 00:00:27.286
I want you to import compose.

10
00:00:32.012 --> 00:00:38.178
&gt;&gt; Brian Holt: So const store is
gonna be createStore with reducer,

11
00:00:38.178 --> 00:00:43.530
and then you're gonna
do after that compose.

12
00:00:43.530 --> 00:00:51.040
And what we're gonna do is we're gonna
say, if type of window is object.

13
00:00:52.172 --> 00:00:55.570
This is basically saying if I'm in the
browser, so this will still run in node so

14
00:00:55.570 --> 00:00:58.000
we can still do server side rendering and
that's fine.

15
00:01:05.025 --> 00:01:10.415
&gt;&gt; Brian Holt: And,
&gt;&gt; Brian Holt: typeof

16
00:01:10.415 --> 00:01:16.283
window.devToolsExtension is

17
00:01:16.283 --> 00:01:20.850
not equal to undefined.

18
00:01:26.400 --> 00:01:30.440
&gt;&gt; Brian Holt: By the way, I just totally
grabbed these from the Redux websites.

19
00:01:30.440 --> 00:01:31.690
So I did not write this.

20
00:01:34.800 --> 00:01:36.705
&gt;&gt; Brian Holt: So
if both of those things are true,

21
00:01:36.705 --> 00:01:40.970
then what we're gonna do is we're going
to enable the dev tool extension here.

22
00:01:43.982 --> 00:01:48.607
&gt;&gt; Brian Holt: Else we're just gonna
give it a function that does nothing,

23
00:01:48.607 --> 00:01:49.972
which is f =&gt; f.

24
00:01:58.608 --> 00:02:01.529
&gt;&gt; Brian Holt: This is called an identity
function in case you were wondering.

25
00:02:11.274 --> 00:02:14.950
&gt;&gt; Brian Holt: So again, I just grabbed
this from the dev tools website.

26
00:02:19.126 --> 00:02:22.520
&gt;&gt; Brian Holt: Basically it's
saying if I'm in the browser and

27
00:02:22.520 --> 00:02:27.520
if I can find the Redux DevTools
extension, then use that.

28
00:02:27.520 --> 00:02:28.630
Otherwise, do nothing.

29
00:02:32.342 --> 00:02:33.452
&gt;&gt; Brian Holt: Okay?

30
00:02:38.033 --> 00:02:44.387
&gt;&gt; Brian Holt: Now, Google Redux DevTools
and if you're on Chrome it's this one and

31
00:02:44.387 --> 00:02:48.479
you just,
mine's already added to Chrome so

32
00:02:48.479 --> 00:02:54.530
I don't need to do anything but
if you need to, it's right there.

33
00:02:55.560 --> 00:02:58.470
And the Firefox ones are here.

34
00:03:06.800 --> 00:03:09.690
&gt;&gt; Brian Holt: Those are the only two
that are actually browser extensions.

35
00:03:09.690 --> 00:03:13.530
The nice thing about the Redux dev tools
is because they're written in React,

36
00:03:13.530 --> 00:03:16.040
you can actually render
it inside of the browser.

37
00:03:16.040 --> 00:03:20.250
So, say you're on I don't know, so
you're doing React native stuff.

38
00:03:20.250 --> 00:03:22.990
You can actually include the dev
tools inside of React native

39
00:03:22.990 --> 00:03:23.610
which is pretty cool.

40
00:03:27.242 --> 00:03:30.920
&gt;&gt; Brian Holt: Okay, so
now that I do that, you can see up here.

41
00:03:30.920 --> 00:03:36.560
It's kinda hard to see but there's
a little icon up there that is lit up.

42
00:03:36.560 --> 00:03:37.810
It will not be lit up on other pages.

43
00:03:37.810 --> 00:03:41.230
It's only going to be lit up on pages
that it's actually been engaged.

44
00:03:41.230 --> 00:03:43.330
If I click it,
I'm gonna get these dev tools out.

45
00:03:43.330 --> 00:03:48.070
And I can see that it's already
done an init action here, right?

46
00:03:51.160 --> 00:03:52.150
So let's see.

47
00:03:58.558 --> 00:04:00.974
&gt;&gt; Brian Holt: So I can come in here and
I can write black and

48
00:04:00.974 --> 00:04:03.258
that dispatched five actions, right,

49
00:04:03.258 --> 00:04:07.639
cuz every single time that the user types,
it dispatches an action to Redux.

50
00:04:07.639 --> 00:04:10.840
So if I got over my dev tools again.

51
00:04:10.840 --> 00:04:13.020
You're gonna see all of those actions,
right?

52
00:04:13.020 --> 00:04:14.350
One for each letter that I typed.

53
00:04:16.170 --> 00:04:19.820
Now let's get into why Redux DevTools
are really, really impressive to me.

54
00:04:19.820 --> 00:04:22.260
I can actually travel backwards in time.

55
00:04:22.260 --> 00:04:23.700
So I'm gonna say, you know what?

56
00:04:23.700 --> 00:04:24.480
Disable that one.

57
00:04:29.802 --> 00:04:30.490
&gt;&gt; Brian Holt: Let's see.

58
00:04:34.780 --> 00:04:35.850
&gt;&gt; Brian Holt: I'm
probably in the wrong one.

59
00:04:37.350 --> 00:04:38.810
Nope, that's not the one I wanted.

60
00:04:45.612 --> 00:04:47.160
&gt;&gt; Brian Holt: Let's
actually do it this way.

61
00:04:47.160 --> 00:04:49.070
You can actually open it here as well.

62
00:04:53.182 --> 00:04:54.979
&gt;&gt; Brian Holt: So this is the inspector,

63
00:04:54.979 --> 00:04:58.990
okay and that's what I wanted,
I wanted the log monitor.

64
00:05:02.526 --> 00:05:04.356
&gt;&gt; Brian Holt: And here,
I can start actually, so

65
00:05:04.356 --> 00:05:09.000
if you're looking up here in the top,
I'm disabling these action piece by piece.

66
00:05:09.000 --> 00:05:13.220
And I can go backwards and
forwards in time, right?

67
00:05:18.196 --> 00:05:22.120
&gt;&gt; Brian Holt: And I can reset everything,
and we can go back to the initial state.

68
00:05:25.638 --> 00:05:26.700
&gt;&gt; Brian Holt: And let's see it.

69
00:05:26.700 --> 00:05:28.230
There's also the Inspector.

70
00:05:28.230 --> 00:05:33.170
So the inspector's cool and
then the chart is also pretty cool

71
00:05:33.170 --> 00:05:38.200
cuz you can see those as
they come in as well.

72
00:05:38.200 --> 00:05:42.320
And you can inspect
the state tree of your app,

73
00:05:42.320 --> 00:05:46.320
ours isn't particularly interesting
because we have just the one piece of

74
00:05:46.320 --> 00:05:51.610
staping modified, but
let's go back to log monitor.

75
00:05:56.090 --> 00:05:56.610
&gt;&gt; Brian Holt: There we go.

76
00:06:02.701 --> 00:06:05.680
&gt;&gt; Brian Holt: Nope that's not
what I'm looking for either.

77
00:06:11.664 --> 00:06:14.280
&gt;&gt; Brian Holt: So anyway, you can
pop it out and do different things.

78
00:06:14.280 --> 00:06:17.130
You can also inspect like,
what the actions looked like.

79
00:06:17.130 --> 00:06:21.060
So in this particular one, you can see
this is what the action looks like.

80
00:06:21.060 --> 00:06:23.230
This is what the state
ended up being afterwards.

81
00:06:24.890 --> 00:06:25.970
You can actually go disable.

82
00:06:25.970 --> 00:06:29.290
Like what would happen if this particular
one in the middle was never dispatched.

83
00:06:29.290 --> 00:06:32.150
And the answer to that
question is nothing, right?

84
00:06:32.150 --> 00:06:35.210
Because each action is sending the full
search term every single time, so

85
00:06:35.210 --> 00:06:37.100
it's completely overwriting.

86
00:06:37.100 --> 00:06:39.470
But right now this middle
one's not actually happening.

87
00:06:39.470 --> 00:06:41.720
So this is called time travel debugging.

88
00:06:43.030 --> 00:06:46.140
And because of the way
that Redux is written,

89
00:06:46.140 --> 00:06:48.980
it lends itself very well to this.

90
00:06:48.980 --> 00:06:53.910
Now what's really cool about this is you
can actually dump the state of your Redux

91
00:06:53.910 --> 00:06:55.228
and send that off to your developer.

92
00:06:55.228 --> 00:06:59.520
And say like, here is a perfect
repro case for this particular bug

93
00:06:59.520 --> 00:07:02.780
that can download your Redux state and
see how you got into this state.

94
00:07:02.780 --> 00:07:03.980
And then they can go backwards and

95
00:07:03.980 --> 00:07:07.950
forwards in time to kind of understand
how this is happening, right?

96
00:07:07.950 --> 00:07:10.990
You can actually automate that process,
yeah.

97
00:07:10.990 --> 00:07:12.500
&gt;&gt; Audience 1: Could you
do this on production?

98
00:07:12.500 --> 00:07:15.520
So if you have a customer
that's running into an issue,

99
00:07:15.520 --> 00:07:19.050
they could send you a log and you could
pull it in and go through it step by step.

100
00:07:19.050 --> 00:07:19.570
&gt;&gt; Brian Holt: Absolutely.

101
00:07:19.570 --> 00:07:20.260
&gt;&gt; Audience 1: Yeah?
&gt;&gt; Brian Holt: Yeah, totally.

102
00:07:20.260 --> 00:07:21.150
&gt;&gt; Audience 1: Sweet.

103
00:07:21.150 --> 00:07:22.960
&gt;&gt; Brian Holt: You can just have
them dump their Redux state and

104
00:07:22.960 --> 00:07:24.610
then send it off to you.

105
00:07:24.610 --> 00:07:27.230
And like I was saying here,
you could automate that process.

106
00:07:27.230 --> 00:07:30.800
So like the user crashed the app,
lets dump Redux and

107
00:07:30.800 --> 00:07:33.100
send it back to development.

108
00:07:35.130 --> 00:07:37.439
So this affords some
really really cool things.

109
00:07:39.284 --> 00:07:41.987
&gt;&gt; Brian Holt: I find this pretty
entertaining, you can actually have

110
00:07:41.987 --> 00:07:45.280
a timeline here that you can go
backwards and forwards in time with.

111
00:07:46.859 --> 00:07:48.832
&gt;&gt; Brian Holt: In fact,
you can even press play,

112
00:07:48.832 --> 00:07:53.340
it'll actually just automatically show
you step by step what's happening.

113
00:07:55.940 --> 00:07:58.870
&gt;&gt; Brian Holt: I find this
very entertaining personally.

