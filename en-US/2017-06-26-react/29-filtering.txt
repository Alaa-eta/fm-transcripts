[00:00:00]
>> Brian Holt: So let's actually use search term, right? Right now, we're not really doing anything with it. I just wanted to show you that if we replace this.state.search term here inside of the h1, and then we come back over here to our nice little thing right here.
>> Brian Holt: Notice that we have nothing left there, and then as soon as I start typing it's echoed over here, right?

[00:00:32]

>> Brian Holt: So this data is bound to this one, so whatever is in the input it's also gonna be input over there, right? So this kind of bends back to what I was talking about earlier. You have to think of React components in terms of, given a certain set of state and a certain set of props, this is what it is going to look like, right?

[00:00:56]
So you think about React in terms of snapshots, right? Given this snapshot of props and this snapshot of state my reaction point is always going to look like this. It's deterministically going to look like this, right? Every single time given this state and given this props, it's always going to look this way.

[00:01:14]

>> Brian Holt: Now what's advantageous about thinking about your component in this particular light, is you get to eliminate the axis of time, right? So I'm sure many of you have debugged a problem with like jQuery or Angular or something like that, where you have, I've had to click this button then this button then this button, and then this broke over here, right?

[00:01:34]
So you had to go through these series of just like weirdness to get to eventually this stage, right? You have to think about events over time leading to this particular problem, right? With React components, it's just really given this state this breaks, right? And I feel like that's a much more simple thing to think about, because you no longer have to think about going through periods of time to arrive at a single point, right?

[00:01:59]
It's just, if I put this state into this component, it just breaks or it doesn't break, right?
>> Brian Holt: So yes, that's what I wanted to demonstrate to you here. That given this state, right, where this state it's going to look like this right? So when the state looks like this that component is always going to look like that, does that make sense?

[00:02:25]
Cool, Okay so-
>> Speaker 2: There's a few minor-
>> Brian Holt: Sure.
>> Speaker 2: Questions and chat. Amir is asking could you recap why the file names are jsx instead of js, conversion to they're all js.
>> Brian Holt: The answer to that question is, in version two they're all js, because that's where it seemed like things were going with Create React App.

[00:02:55]
Create React App enforces .js. And then we switch to the Airbnb style rules, which enforces JSX. And version one was JSX as well, [LAUGH]. So in other words, no one's really decided yet where it's gonna be. And I just went with what Airbnb decided. So yeah, that's why it is.

[00:03:16]
It's because the Airbnb rules enforce that.
>> Speaker 2: And could you recap the trade-off using the constructor versus?
>> Brian Holt: I just think this is more succinct, right? If you use the constructor method, that's valid ES6 today and this is using a stage two proposal. So I like this better, because I find it easier to read.

[00:03:39]
The other reason why it's going to be beneficial is, because when we get into flow types, flow can understand this better, which we will talk about that when we get to flow.
>> Speaker 3: Would we have to use a constructor if this component was accessing props?
>> Brian Holt: Nope. So I see what you're saying, because you have to call super props inside of constructor.

[00:04:04]
So you're overriding your React constructor if you write your own constructor, so the default React constructor will take care of the props for you.
>> Brian Holt: Good question.
>> Brian Holt: Any more?
>> Brian Holt: Cool, so this is probably the last thing we will do today. Let's talk about, or let's actually use search term Rather than just being something cute that displays at the top.

[00:04:38]
What I wanna do is, given some search term, some search term. So if I type black, right? I only want Black Mirror to show up, right? So I wanna be able to search in real-time my various shows that I have up here. So what we're gonna do is we're gonna do something a little clever.

[00:05:00]
So we have preload.shows, right, and we're using that to map out to a set of components. So if I want to show less components, I can do a little bit more functional fill, and I could just filter it before I map, right? So I can just filter out the ones I don't want based on that search term, and then only display the ones that I want.

[00:05:24]

>> Brian Holt: So what I'm gonna do here, is I'm gonna say dot, before I call a .map, I'm gonna call .filter. And what I'm gonna do here is I'm gonna pass in a show. So let's filter, if I return true for any given item it's gonna keep it in the array.

[00:05:45]
If I return false, it's gonna take it out of the array. So if I did false right here, right? I would get nothing, right? If I put true here, I would get everything, right? So what I'm gonna do here, is I'm gonna check to see if the search term exist in either the title or the description, right?

[00:06:05]
So I wanna know are you in the title, so show.title or the show.description, show.description.
>> Brian Holt: And then I'm gonna say,
>> Brian Holt: Yeah, I think this is the best way to do it, whatever. I wanna be case insensitive, right? So I'm gonna say two uppercase,
>> Brian Holt: .indexOf, so I'm gonna check if it exist anywhere in the string.

[00:06:45]

>> Brian Holt: That's gonna be this.state.searchTerm, right? So I'm gonna check if this .searchTerm exists inside of the show which I'm also gonna put the uppercase, right? Because I wanna make this thing totally case insensitive. And then I'm just gonna check to see if it's greater than or equal to zero.

[00:07:07]

>> Brian Holt: That should be a dot. This is a little dense. You could pull this out if this made you feel better, but let's just kind of recap here, right? So filter, right? We're doing a filter on this. This I'm putting show title and show description in one string together, right?

[00:07:30]
So I can check both the description and the title. I can put it in either order doesn't really matter, okay? I'm putting them to uppercase, because I wanna take case sensitivity out of the question. And then asking in this uppercase string right here, can you find search term, also in uppercase, right?

[00:07:49]
Because indexOf is gonna give you somewhere if it's greater than or equal to zero, it exists in the string. And if it doesn't exist in the string, its gonna return -1, right? So true if it's in the string, or false if its not in the string, right? And that's what we're gonna be filtering on.

[00:08:10]

>> Brian Holt: How do we feel about that? It's a little dense, but this is a good way of hacking a search, right? This isn't exactly Elasticsearch. I think their algorithm is a little bit more sophisticated, but this will do the job for what we're doing. So now if I type black, it's only gonna show Black Mirror and Orange is the New Black right?

[00:08:31]
If I'll type house, it's gonna type House of Cards or game, I got Game Of Thrones.
>> Brian Holt: Come on, that's pretty cool, right? Pretty cool? Pretty cool.
>> [APPLAUSE]
>> Brian Holt: Yes. [LAUGH]
So this is what I'm getting at and what I keep harping on, is given this state and given these props, this is what this component looks like, right?

[00:09:02]
So with the snapshot that, here's a good way of doing it, right? So we can set the default state. So if I put game right here and I save it, what's going to be rendered on first render?
>> Brian Holt: Just Game of Thrones, right? So given that snapshot where the search term is game, and then it's only gonna be showing Game of Thrones.

[00:09:25]
And then as soon as I delete it, I get everything back.
>> Brian Holt: Does that make sense? This is like, it only took me six god damn hours, but we eventually got to the point why I think React is amazing, right? Cuz I think this is a really powerful intuitive and performant way of writing JavaScript.

[00:09:47]
I think it's a way to write scalable apps.
>> Brian Holt: And the interesting things is like, you can come back later, and I mean barring this, I'd probably abstract this out into some sort of module or something actually a little bit more robust. But barring this little mess right here, this is actually pretty easy to read through, right?

[00:10:05]
It's pretty intuitive. That given this state you get this sort of output. I find it easy to use the term du jour, reason about, right?
>> Brian Holt: Any questions?
>> Brian Holt: Yeah, this is one of the things that just really made me realize like, this is great, I wanna keep writing this.

[00:10:43]
Someone pointed out to me the other day that the posters are of uneven size, and now I can't unsee it. [LAUGH]
>> Speaker 2: [LAUGH] Do you push?
>> Brian Holt: Yeah, definitely.
>> Speaker 2: There's a few people who are missing something along the way, so-
>> Brian Holt: Easy to do, I mean, we're writing a pretty big app together, so.

[00:11:03]

>> Speaker 2: Yeah, I love how many people have written into us, how this course gave them a job, right? Cuz it's like so real-world that people got, now know how to build the React production app. And they're like, I got this job because of it, right?
>> Brian Holt: That's super rewarding.

[00:11:21]
So I was at a user group, the Modern Web Meetup Group in San Jose last week. Some guy was on the phone, it was a little rude but it was pretty cool too. Walks up to me and says, hey I got a job at Facebook because of your course and then just like ran off.

[00:11:41]
[LAUGH] So I was like thank you, or you're welcome, or damn it, I don't know. I was both offended and bewildered, and honored all at the same time. So more honored, it was super cool. No it's awesome to hear that kind of stuff.
>> Speaker 2: Yeah, but the whole point of that is that software development is hard, right?

[00:11:58]
This stuff, building a real-world application is difficult. There's a lot of moving pieces.
>> Brian Holt: For sure.
>> Speaker 2: It's sort of demystifying each piece, especially with the videos, people can kind of come back to it and all that.
>> Brian Holt: For sure.
>> Speaker 2: But it is daunting, cuz it is hard.

[00:12:15]
And that's why people get paid a lot of money to write this kind of stuff.
>> Brian Holt: For sure. For sure, and that's why this class is structured the way it is. I like exercises that I leave for you to do on your own, and connect the dots yourself.

[00:12:30]
That's more useful for, I feel like algorithms, and like little bite size pieces, right? We're talking about modern application development, and like that's not in exercises. Okay, build a Netflix app, go and I'm just gonna sit over here, right? That doesn't work, right? We need to sit down together and build things.

[00:12:46]
And it's useful for you to type things even if you don't understand them, because at least for me the act of typing something like helps me connect dots in my brain, right? Especially like, I put all pieces together and then I step back. It's like, okay, now I see that it was a puzzle.

[00:12:59]
It's a picture or something.

