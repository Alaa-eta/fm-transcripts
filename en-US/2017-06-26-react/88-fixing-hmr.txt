[00:00:00]
>> Brian Holt: Let's go ahead and make hot module reload work with our server. Again, just what I was explaining earlier, I would typically leave server set rendering for production only and have a separate config for Dev. Often times, you're gonna end up with two web pack configs, one for dev and one for production.

[00:00:18]
Not gonna do that today. But that's a normal thing to encounter. But what I want you to do first is I want you to open your webpack config.
>> Brian Holt: And instead of having all of this stuff we're gonna do just one and it's gonna be 'webpack-hot-middleware/clinet7path=_webpack_hmr &timeout=2000'. So instead of orienting webpack to read from the devServer, we're going to orient it to read from our API server.

[00:01:16]
Or not our API server, just the normal server that we wrote. So that's all I need to do here. Now I want you to open your server.js.
>> Brian Holt: And up here we're going to do a couple more imports. We're gonna say, const webpacDevMiddleware = require('webpack-dev-middleware'). This is gonna take care of the actually feeding new pieces of code into your module.

[00:01:59]
And then you're also going to need the hot middleware. So webpack hot middleware. And that's equal to require('webpack-hot-middleware'). Then you also have to bring in webpack as well. So const webpack = require('webpack'). And as well and down towards here you're gonna have to read your webpack config cuz you're gonna have to feed that in as well.

[00:02:33]
So config =,
>> Brian Holt: I guess I can do this up here, require('./webpack.config'). So now I had got those and now what I have to do,
>> Brian Holt: Before public, we're gonna say, const compiler = webpack(config). So instantiating our webpack. Underneath that we're gonna say server.use.
>> Brian Holt: And then here we're gonna say webpackDevMiddleware, DevMiddleware.

[00:03:30]
Compiler is the first argument. The second one is an object, I'm gonna say publicPath: config.output.publicPath.
>> Brian Holt: And then underneath that we're gonna say server.use
>> Brian Holt: WebpackHotMiddleware and pass that to config as well, no, sorry the compiler.
>> Brian Holt: So now basically we setup the same server side rendering and worried about hot module replacement.

[00:04:23]
So now if I come back here and refresh. You gonna have to stop your server again.
>> Brian Holt: So little pro tip here. It's annoying to have to restart and stop your server every single time so I use a module called node daemon. I think we talked about this a little bit earlier in the day.

[00:04:47]
And this is just going to start and stop your server every single time I change something. So notice it says this right here. And then if I come in here and save this again it's gonna say, something changed, I'm gonna restart your server again for you. So, super useful, that's just something I do.

[00:05:07]
Now if I come here and refresh, it's going to take awhile cuz it's gonna build on the first time that you make a request to it. And now it works. And it's gonna say hot module replacement is connected. And everything is gonna work just the way you anticipated.

[00:05:27]

>> Brian Holt: Any questions about that?
>> Brian Holt: So again I am going to tell you that this is not typically what I would do. I typically reserve service side rendering just for production. And then I leave the rest of it in the dev config because it's a lot less of a problem to mess around with in development.

[00:05:54]
I'll just use the web pack development server. But there are occasions where you'll have problems specifically with server side rendering. So it's good to take a look at this, but I wouldn't say it's my go-to dev process. But I wanted to show you how, just in case that you wanted to, it is possible.

[00:06:16]
Yeah?
>> Speaker 2: What stops hot module replacement from running outside of development?
>> Brian Holt: The note environment. So if you say note m equals production, hot module replacement disables itself automatically. Actually, I'll show you here in just a second when we get to code splitting. You can actually just come into your config, your web pack config.

[00:06:44]
And say if I'm in development, then add this to the entry. If not, don't add it. Because you don't want to send out that hot module reload code. Unless you're actually in development. So you can just mess with this config based on environment it's being run in. But I'll show you that in just a sec.

[00:07:13]

>> Brian Holt: So what I'm gonna push here real quick another branch. And then I'm gonna go back to the dev config because it's gonna be a lot easier with the next section if we do it that way.

