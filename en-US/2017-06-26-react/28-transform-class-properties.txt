[00:00:00]
>> Brian Holt: However, along that route, we can actually do one better than this. Which is I would say the most recent way and my preferred way of writing this. However, depending on a stage to proposal, right? So, for those of you who are not familiar with how Java script is standardized.

[00:00:22]
Things can be stages. When we add a new feature to Java script it can be feature one, two, three, or four. If something is stage zero it's like a strawman proposal, there's like a very low chance actually that it's going to make it in the language. Stage one you're getting a better chance, once you're stage two, you're probably going to make it.

[00:00:41]
Stage three is almost certainly going to make it, and stage four has made it. Once things are stage four, they're ready to go into the language. So, I'm gonna show you right now a stage two proposal, that as far as anybody I ever talked to on TC39, the body that standardizes Java Script, this is definitely going to make it.

[00:01:01]
In other words, I feel comfortable writing this and if this doesn't make it, I guarantee you not only are you going to be screwed, but we're all going to be screwed, right? In other words, there's going to be a way forward for us
>> Brian Holt: So again, there's some level of danger to this, I'm just going to throw that out there.

[00:01:22]
Be aware of that. But, we're going to make this a tiny bit easier for ourselves. So the first thing that we gotta to do is, I want you to go to your babelrc. Cuz we need to add an additional plugin in here.
>> Brian Holt: So, there we go. Go and add another thing called plugins, so we're gonna include just one additional plugin here and this plugin is going to be babel-plugin-transform-class-properties.

[00:02:14]
This is going to add the, just one ability for us to add class properties onto our ES6 classes.
>> Brian Holt: Okay, so now come back to search.jsx, instead of having handleSearchTermChange like this, what we're gonna do is we're gonna say handleSearchTermChange equals arrow function like that.
>> Brian Holt: Right?
>> Brian Holt: My lint is yelling, but I don't think that's actually correct.

[00:03:05]

>> Brian Holt: I think it should work.
>> Brian Holt: Maybe no, parsing error.
>> Brian Holt: Hm.
>> Brian Holt: It looks like it's still working.
>> Brian Holt: It looks like it is just my linter failing for the moment.
>> Brian Holt: So, I'll have to figure out later why my, are you also seeing the same error?

[00:04:42]
So, I wonder if that's just something with ES Lint for me to tell that it needs to understand.
>> Brian Holt: Better JavaScript.
>> Brian Holt: Well in any case, it is actually a, it is working.
>> Brian Holt: So let's just press forward. And so come back here to search. There's actually something else we can do here to also simplify this.

[00:05:30]
We can actually get rid of the constructor all together, and we can say state =
>> Brian Holt: searchTerm, colon like that, and then we can just drop the whole constructor.
>> Brian Holt: That's super weird. This wasn't failing my Lint error earlier.
>> Brian Holt: And prettier understands it.
>> Brian Holt: And again, you can come back here and everything works just like you expect.

[00:06:14]

>> Brian Holt: Cool, any questions about that?
>> Brian Holt: So I'll push out a branch of this. Get checkout, v3/9, get commit/m9, get push origin v3/9, cool.
>> Speaker 2: Can you go back to your search please?
>> Brian Holt: Yeah.
>> Brian Holt: So this right here this is the dangerous part. So the ability to add properties like this onto your es six classes is not standard yet but it coming.

[00:07:15]

>> Brian Holt: And so what our friend over here was talking about, why this actually works where as it didn't before, is that,`
>> Brian Holt: Well that is it. Is that arrow functions do not create new contexts when they are created, right? So if I create an arrow function, it does not create a new context.

[00:07:52]
Why it's important is if I say,
>> Brian Holt: Or if I call render, right. Render whenever it's called creates a new context wherever it is. So in this particular case it's called within search so this refers to search, right?
>> Brian Holt: But if I pull render out and then call it in a different context it will create a new context there.

[00:08:12]
The difference with arrow functions is this will never create a new context. So it's always just going to refer it to search, right? So semantically, it's similar to binding the function. So if I call like dot bind this, right, whatever context I want it to be bound, it's semantically similar to it.

[00:08:30]
The only differences is that when you bind the contact, you're actually like melting the context together. Whereas with an arrow function you just never use a new context. And in state here, we're just setting the default state which is gonna be search term. Some of the people often ask me, why do we not have prop types for state?

[00:08:54]
Well, we don't need one, right? Because search term it's always just gonna be string, right? So it kind of is implicitly typed here.
>> Brian Holt: Questions?
>> Speaker 3: Does the state variable have to be state, named state?
>> Brian Holt: Yeah, good question. It has to be named state.
>> Speaker 4: I don't know if you wanna take a peek at the chat room?

[00:09:29]

>> Brian Holt: That's gonna figure out what I'm doing wrong.
>> Speaker 4: It's sorta like the last ten messages I don't really even know what to ask there.
>> Brian Holt: Yeah, so people are saying that it failed to compile. That's not entirely true, whoops. So whenever wet pack has a problem with any of it's loaders, right?

[00:09:58]
So in this particular case we have the ES Length loader. It says that it's a fail to compile. It's not actually super true. It actually will still compile even though the ES Length fails. So that's why we're still able to see our changes despite the fact that it says failed to compile.

[00:10:13]
It still compiled, I promise, right? Now if Babel fails, then it actually will fail to compile and nothing will change. But the thing is here, it won't auto reload when it fails to compile, so that's something to keep in mind.
>> Brian Holt: Then I'll just have to figure out here in a second why es link decided that it doesn't like me anymore.

[00:10:36]
It's gotta be something with that eslinks.jayson.
>> Brian Holt: Let's see I'm sure I have it here in the Complete intro to React, ESLint.json.
>> Brian Holt: Parser, that's it, found it. Okay, everyone go to your ESLint.json, and just put parser babel-eslint.
>> Brian Holt: So this means it'll use the parser from Babel so that it can understand everything that Babel can understand.

[00:11:22]

>> Brian Holt: So line 10 there, that's what I'm pointing at.
>> Brian Holt: Okay, so now hopefully, if we come back here and start and stop our desk server again, it'll stop yelling at us.
>> Brian Holt: Please, yes, nailed it.
>> Speaker 3: So it's Babel-eslint?
>> Brian Holt: Yeah, I need to pull up here.

[00:11:58]
This gonna tell which parts are used, cuz otherwise it won't run it through Babel.
>> Brian Holt: Something else I wanted to talk about with search.jsx. Someone asked in chat that I saw, what happens to the parenthesis here? I just mentioned earlier but I'll mention it again. As soon as I save it, those parenthesis are gonna go away.

[00:12:21]
If you have exactly one parameter is optional to have parenthesis and premier will drop them. So I typically would put them on. That's what standard required and I was used to writing standard but premier drops them. So that's fine and let's talk about event right here and what is event.

[00:12:45]
So I'm sure most of you are used to seeing event.target.value right? Yeah that's a very common way of interacting with the DOM and with DOM events. You can also put current target there, right? Either one of those works. It's safe enough to say target.value with the way the react works.

[00:13:07]
So this is semantically totally similar to a DOM event, right? You can actually never know that this is not really a DOM event. It's technically a synthetic react event. And the only reason that it's done this way is it's a little bit more performant and react can get a little more speed off of doing its own event system rather than letting the DOM do it.

[00:13:28]
So the only reason I mentioned that is if you ever call like or anything like that it might scare you. But it's totally similar, like you can use the MDM Docs, like the API for this event is exactly the same as the one that MDM has. So it's a totally normal event other than the fact that it's not an event [LAUGH].

[00:13:51]

And yeah, any questions about that?
>> Brian Holt: So this is the way that we will be doing both state and handle search term changes from now on. I don't think we'll ever use the constructor again. Just because it's kind of burdensome and I think this is a little bit more succinct.

[00:14:12]
So, I would invite you to do it this way, this is a very common way of writing react. But again, it's always up to you to make your own tradeoffs.

