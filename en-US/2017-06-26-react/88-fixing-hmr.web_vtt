WEBVTT

1
00:00:00.440 --> 00:00:05.590
&gt;&gt; Brian Holt: Let's go ahead and make
hot module reload work with our server.

2
00:00:05.590 --> 00:00:08.300
Again, just what I was explaining earlier,
I would typically leave

3
00:00:08.300 --> 00:00:12.240
server set rendering for production
only and have a separate config for Dev.

4
00:00:13.340 --> 00:00:17.470
Often times, you're gonna end up with two
web pack configs, one for dev and one for

5
00:00:17.470 --> 00:00:18.187
production.

6
00:00:18.187 --> 00:00:18.965
Not gonna do that today.

7
00:00:18.965 --> 00:00:23.630
But that's a normal thing to encounter.

8
00:00:23.630 --> 00:00:29.234
But what I want you to do first is I
want you to open your webpack config.

9
00:00:33.783 --> 00:00:38.790
&gt;&gt; Brian Holt: And instead of having all

10
00:00:38.790 --> 00:00:44.036
of this stuff we're gonna

11
00:00:44.036 --> 00:00:49.758
do just one and it's gonna be

12
00:00:49.758 --> 00:00:59.758
'webpack-hot-middleware/clinet7path=_webp-
ack_hmr

13
00:01:03.115 --> 00:01:08.632
&amp;timeout=2000'.

14
00:01:08.632 --> 00:01:12.544
So instead of orienting webpack
to read from the devServer,

15
00:01:12.544 --> 00:01:16.003
we're going to orient it to
read from our API server.

16
00:01:16.003 --> 00:01:18.239
Or not our API server,
just the normal server that we wrote.

17
00:01:21.080 --> 00:01:23.240
So that's all I need to do here.

18
00:01:23.240 --> 00:01:26.885
Now I want you to open your server.js.

19
00:01:30.123 --> 00:01:34.640
&gt;&gt; Brian Holt: And up here we're
going to do a couple more imports.

20
00:01:34.640 --> 00:01:38.178
We're gonna say,

21
00:01:38.178 --> 00:01:43.930
const webpacDevMiddleware =

22
00:01:43.930 --> 00:01:53.007
require('webpack-dev-middleware').

23
00:01:53.007 --> 00:01:57.691
This is gonna take care of the actually
feeding new pieces of code into

24
00:01:57.691 --> 00:01:59.450
your module.

25
00:01:59.450 --> 00:02:01.580
And then you're also going
to need the hot middleware.

26
00:02:01.580 --> 00:02:04.490
So webpack hot middleware.

27
00:02:04.490 --> 00:02:09.305
And that's equal to

28
00:02:09.305 --> 00:02:16.910
require('webpack-hot-middleware').

29
00:02:16.910 --> 00:02:18.840
Then you also have to
bring in webpack as well.

30
00:02:20.370 --> 00:02:26.980
So const webpack = require('webpack').

31
00:02:26.980 --> 00:02:30.640
And as well and
down towards here you're gonna have

32
00:02:30.640 --> 00:02:33.770
to read your webpack config cuz you're
gonna have to feed that in as well.

33
00:02:33.770 --> 00:02:39.989
So config =,
&gt;&gt; Brian Holt: I

34
00:02:39.989 --> 00:02:44.258
guess I can do this up here,

35
00:02:44.258 --> 00:02:50.954
require('./webpack.config').

36
00:02:50.954 --> 00:02:55.114
So now I had got those and

37
00:02:55.114 --> 00:03:04.710
now what I have to do,
&gt;&gt; Brian Holt: Before public,

38
00:03:04.710 --> 00:03:10.549
we're gonna say,
const compiler = webpack(config).

39
00:03:10.549 --> 00:03:14.202
So instantiating our webpack.

40
00:03:15.370 --> 00:03:18.788
Underneath that we're
gonna say server.use.

41
00:03:23.556 --> 00:03:28.580
&gt;&gt; Brian Holt: And then here we're gonna
say webpackDevMiddleware, DevMiddleware.

42
00:03:30.190 --> 00:03:32.520
Compiler is the first argument.

43
00:03:32.520 --> 00:03:37.210
The second one is an object, I'm gonna say

44
00:03:37.210 --> 00:03:42.435
publicPath: config.output.publicPath.

45
00:03:47.231 --> 00:03:51.379
&gt;&gt; Brian Holt: And then underneath
that we're gonna say server.use

46
00:03:54.831 --> 00:03:57.377
&gt;&gt; Brian Holt: WebpackHotMiddleware and

47
00:03:57.377 --> 00:04:02.692
pass that to config as well,
no, sorry the compiler.

48
00:04:15.722 --> 00:04:19.287
&gt;&gt; Brian Holt: So now basically we setup
the same server side rendering and

49
00:04:19.287 --> 00:04:21.720
worried about hot module replacement.

50
00:04:23.230 --> 00:04:28.200
So now if I come back here and refresh.

51
00:04:28.200 --> 00:04:30.142
You gonna have to stop your server again.

52
00:04:33.972 --> 00:04:36.090
&gt;&gt; Brian Holt: So little pro tip here.

53
00:04:37.490 --> 00:04:39.994
It's annoying to have to restart and

54
00:04:39.994 --> 00:04:44.854
stop your server every single time so
I use a module called node daemon.

55
00:04:44.854 --> 00:04:47.720
I think we talked about this
a little bit earlier in the day.

56
00:04:47.720 --> 00:04:49.790
And this is just going to start and

57
00:04:49.790 --> 00:04:53.330
stop your server every single
time I change something.

58
00:04:53.330 --> 00:04:56.920
So notice it says this right here.

59
00:04:56.920 --> 00:05:00.280
And then if I come in here and save this
again it's gonna say, something changed,

60
00:05:00.280 --> 00:05:02.460
I'm gonna restart your server again for
you.

61
00:05:02.460 --> 00:05:05.200
So, super useful,
that's just something I do.

62
00:05:07.520 --> 00:05:13.980
Now if I come here and refresh, it's going

63
00:05:13.980 --> 00:05:17.830
to take awhile cuz it's gonna build on the
first time that you make a request to it.

64
00:05:17.830 --> 00:05:18.750
And now it works.

65
00:05:18.750 --> 00:05:21.590
And it's gonna say hot module
replacement is connected.

66
00:05:21.590 --> 00:05:23.527
And everything is gonna work
just the way you anticipated.

67
00:05:27.535 --> 00:05:28.408
&gt;&gt; Brian Holt: Any questions about that?

68
00:05:34.148 --> 00:05:37.077
&gt;&gt; Brian Holt: So again I am going to tell
you that this is not typically what I

69
00:05:37.077 --> 00:05:37.600
would do.

70
00:05:39.040 --> 00:05:44.560
I typically reserve service side
rendering just for production.

71
00:05:44.560 --> 00:05:49.580
And then I leave the rest of it in
the dev config because it's a lot

72
00:05:49.580 --> 00:05:54.530
less of a problem to mess
around with in development.

73
00:05:54.530 --> 00:05:56.260
I'll just use the web
pack development server.

74
00:05:58.500 --> 00:06:01.780
But there are occasions where you'll have

75
00:06:01.780 --> 00:06:04.140
problems specifically with
server side rendering.

76
00:06:04.140 --> 00:06:09.910
So it's good to take a look at this, but
I wouldn't say it's my go-to dev process.

77
00:06:09.910 --> 00:06:13.920
But I wanted to show you how, just in
case that you wanted to, it is possible.

78
00:06:16.750 --> 00:06:17.500
Yeah?

79
00:06:17.500 --> 00:06:20.103
&gt;&gt; Speaker 2: What stops hot module
replacement from running outside of

80
00:06:20.103 --> 00:06:20.800
development?

81
00:06:23.260 --> 00:06:24.150
&gt;&gt; Brian Holt: The note environment.

82
00:06:25.810 --> 00:06:28.020
So if you say note m equals production,

83
00:06:28.020 --> 00:06:31.740
hot module replacement
disables itself automatically.

84
00:06:33.980 --> 00:06:38.340
Actually, I'll show you here in just
a second when we get to code splitting.

85
00:06:38.340 --> 00:06:44.288
You can actually just come into
your config, your web pack config.

86
00:06:44.288 --> 00:06:48.973
And say if I'm in development,

87
00:06:48.973 --> 00:06:53.300
then add this to the entry.

88
00:06:53.300 --> 00:06:54.760
If not, don't add it.

89
00:06:54.760 --> 00:06:59.300
Because you don't want to send
out that hot module reload code.

90
00:06:59.300 --> 00:07:01.510
Unless you're actually in development.

91
00:07:01.510 --> 00:07:05.310
So you can just mess with this config
based on environment it's being run in.

92
00:07:07.790 --> 00:07:11.351
But I'll show you that in just a sec.

93
00:07:13.704 --> 00:07:17.080
&gt;&gt; Brian Holt: So what I'm gonna
push here real quick another branch.

94
00:07:17.080 --> 00:07:19.738
And then I'm gonna go back to
the dev config because it's gonna

95
00:07:19.738 --> 00:07:22.105
be a lot easier with the next
section if we do it that way.

