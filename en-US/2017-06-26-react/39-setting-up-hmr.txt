[00:00:00]
>> Brian Holt: Let's go into plugins in our Babel-RC file. So right now, we already have babel-plugin-transform-class-properties, and we're going to add this one as the first one, which is going to be react-hotloader.
>> Brian Holt: /babel.
>> Brian Holt: This is going to do a Babel transformation that basically it's going to make the joints that the hot module replacement knows where to cut off and reinsert itself into.

[00:00:38]
It just does that all for free for you behind the scenes, thanks to Babel.
>> Brian Holt: Okay,
>> Brian Holt: Now, I want you to go into your webpack config.
>> Brian Holt: Gonna have to make it a tiny bit more complicated. First thing is we're gonna import,
>> Brian Holt: Webpack as well.
>> Brian Holt: I should say that this is a feature that was already built into Webpack and React is just kind of the first that would take advantage of it.

[00:01:13]
But Webpack was already armed with this ability with Webpack one, I believe. It's just no one was really taking any advantage of it yet until the same guy that wrote Redux and now works in the React Core Team, Dan Abramov, said like, I should do this, and so he did.

[00:01:34]
The first thing we need to change here is entry. This is gonna have to now be an array, cuz we have to give it some additional code so it knows how to do the hot module replacement.
>> Brian Holt: Okay, and we're gonna do, first one is gonna be react-hot-loader/patch.

[00:01:53]
I will say that the order here is critical, so make sure you get it in the right order.
>> Brian Holt: Webpack-devserver/client,
>> Brian Holt: and then you need to give it some,
>> Brian Holt: you need to give it the URL that it's going to live on, so we're gonna do localhost:8080.
>> Brian Holt: And then we're gonna do webpack/hot/only-dev-server.

[00:02:33]
There are several types of hot reloaders and I went through them and chose this one, and I do not remember why. But, feel free to go check out the web pack docs, there are a couple different types of the way it does hot reloading.
>> Brian Holt: So make sure you're doing cheap-evol-source-map.

[00:02:59]
Something I need to tell you about hot module reload is that, again, it's kind of a new thing so browsers haven't totally caught up that this is happening. So, the first thing you're gonna mess up is your source map. So your source maps upon hot reload, they're not going to necessarily follow along.

[00:03:15]
It's a bug with a browser. I know Chromium, as of last week, is working on it. And Firefox just says like, that seems like a problem. And that's about all we've gotten out of them. So it'll eventually get fixed, I'm sure, just not today.
>> Brian Holt: Okay so under devServer,

[00:03:35]

>> Brian Holt: You just need to say, hey, I need this to be a hot server.
>> Brian Holt: Okay, and now I want you to go down to
>> Brian Holt: right underneath stats, we'll do it there. There's another thing called plugins.
>> Brian Holt: This is augmenting the abilities of webpack. So we need to give it two plugins here, one of them is new webpack.HotModuleReplacementPlugin and new webpack.NamedModulesPlugin.

[00:04:33]

>> Brian Holt: So, I'm sure you can imagine why we have HotModuleReplacement, that's just giving it the additional abilities to insert those hot connectors. And NamedModules, it's gonna send down the names of whatever modules you're replacing. So at least, if something goes wrong, it's going to tell you something went wrong with search.

[00:04:51]
That's the NamedModulesPlugins does for you, is it just sends down the names as well for debugging purposes.
>> Brian Holt: Okay, we are not done yet. [LAUGH]
The problem that we have now, if we go to clientApp.jsx, is what happens if app changes. We have no way to, because this is the entry file, we have no way to replace it.

[00:05:29]
And so we actually have to enable our code to be replaced. So what we're going to do is we're going to put split client app into a separate file, and then we're going to have a clientApp.jsx, which will be an entry point for hot module reload. This will also be useful later for several purposes, one of them which is code splitting, and one of which is service side rendering, so we would have to do this anyway eventually, so it's okay.

[00:05:55]
[LAUGH] I see some looks like, I don't wanna do that. [LAUGH] I get it, but believe me, overall, this is gonna be a positive thing. So I want you to create a new file called app.jsx. And this is going to be a file that can also be used service-side rendered and all that kind of stuff, so it's good.

[00:06:15]
So in app.jsx we're gonna have to basically take most of this.
>> Brian Holt: We're gonna have to take the browser router, we're gonna have to take react, basically everything but the render statements, that's gonna stay here. So we're gonna pull that out and go to app.jsx. I'm gonna pull copy react cuz it's needed in both places.

[00:06:43]

>> Brian Holt: And then down here, we're gonna pull out 404 and app.
>> Brian Holt: And we're going to put that in here. Then down here we're going to export default App. And I think that should be enough for this.
>> Brian Holt: Now, if we come in to clientApp.jsx, we're going to import app.

[00:07:23]

>> Brian Holt: ./App.
>> Brian Holt: So now, this should work again, right? Now we have Apps split out as a separate component on all client app does is render it out. But we wanna make this a little bit more smart, we want this to be able to hot reload. So what we're gonna do is we're gonna make a function called renderApp and it's gonna be a function that all it's gonna do is to render(< App />, document.getElementById(' ')) App, okay.

[00:08:08]
So basically what we had down here. And then the first thing we're gonna do is we're gonna call renderApp, so it gets rendered the first time. And then down here we're gonna say if module.hot, which will only be available in dev, right? So this will not be enabled in production.

[00:08:28]
We're gonna say module.hot.accept('./App'.
>> Brian Holt: and then renderApp.
>> Brian Holt: So, what this is really doing. If hot module replacement is for this particular build, it's going to say, okay, I see that module.hot exists, right? So if module.hot exists you can be assured that you're in development. And then it says, every time that you tell me that app has changed, I need to call this function.

[00:09:15]
So any time that app changes, just re-render the whole app.
>> Brian Holt: Everything else, because there is those joints that we did with the battle plugin, they know how to replace themselves. It's just the top level component that you need to give a little extra help to be able to know how to replace.

[00:09:35]

>> Brian Holt: Doing this, some people get worried about this calling render multiple times. It's okay. React knows how to handle that. That's the preferred way that if you need to force a re-render of the top level component, this is the way you're supposed to do it. It'll do the same virtual DOM diffing.

[00:09:49]
It just works like a normal replacement. So that's okay, you can definitely do that.
>> Speaker 2: In the module variable, where is that coming from?
>> Brian Holt: Webpack. It's a webpack thing, so it's specific to webpack.
>> Brian Holt: Any questions before we go see how awesome it is?
>> Speaker 3: Could you show the app file again?

[00:10:16]

>> Brian Holt: Sure. App, that one. It's pretty much what we had before so it's not doing any cleanse head rendering. So again, I wanted to emphasize, this is a good pattern to split out App.jsx, which has no necessarily browser concerns of it's own, right? So now this can be run in Node.

[00:10:42]
You have to take care of browser router it but there's a way to do that. So don't worry about that.
>> Brian Holt: In fact, we'll do that later. And then client app here. If you need to do anything specifically from the browser, like module.hot, this is where you would do it.

[00:11:01]
Now let's say you needed to, I don't know,
>> Brian Holt: mess with the documents somehow. You can be assured that if you're inside of client app and you wanna do something only in the browser and not in Node, this is the place that you would do it. So client app is the place for your browser code.

[00:11:21]

>> Brian Holt: If you need to just fire off Google Analytics, you would only wanna do that in the browser, this would be the place that you'd want to do that.
>> Brian Holt: And people get a little upset just like, well, this is dev code that I'm gonna be shipping down to the client, I don't wanna do that.

[00:11:39]
If you really don't wanna do that, there's a tool called groundskeeper that you can remove code before you send it down to production. You can do that, but this is gonna end up being like a few bites, so it doesn't bother me but it might bother you. Okay, so let's restart webpack since we messed a bunch with it.

[00:12:03]

>> Brian Holt: Then once this hopefully works, I will refresh your branch for you
>> Brian Holt: Take a second for webpack to build, okay?
>> Brian Holt: That's a good sign, you can see here that it's including some webpack hot stuff
>> Brian Holt: So, the one thing, this is gonna balloon your Dev build even bigger than it was before, which is okay.

[00:12:35]
None of this will get shipped down to production. So now, if we come back here, and if you look at your console, you can see what it's getting back from the Dev Server. It's gonna say how module replacement enabled, and then, hopefully, so I'm gonna go change this.

[00:12:54]
So first of all, I'm gonna give this some state, so if there's a hard refresh on state, if there's a hard refresh, the state would be blown away, I guess it's gonna be anyway, it doesn't matter, anyway. So if we come in here to search and modify s video and have this be something else,

[00:13:27]

>> Brian Holt: all right, let's try that again.
>> Brian Holt: Letâ€™s do it with,
>> Brian Holt: letâ€™s do it with landing. Okay, so with the landing, I'm going to change this to be, yet different.
>> Brian Holt: Hard refreshes, thatâ€™s kind of annoying.
>> Brian Holt: Okay.
>> Speaker 4: People are asking, where is module coming from?

[00:14:01]

>> Brian Holt: Webpack. Webpack injects that.
>> Speaker 4: So you don't need to import it.
>> Brian Holt: No.
>> Brian Holt: All right, for those,
>> Brian Holt: let's see. Preserve log, that's what I wanted. So clear, and we'll change this to be landing.
>> Brian Holt: So that's what I wanted to see, it's for whatever reason, 404ing on the hot updates.

[00:14:46]
So it says, cannot find update, need to do a full reload.
>> Brian Holt: So let's try, why are you doing a full reload?
>> Brian Holt: I think that's something I messed up. So go to webpack config. It's a very delicate balance to get this tool to work. You need to do here in,

[00:15:29]

>> Brian Holt: so we need to require webpack. Need additional files. Output, yeah, that's what I messed up. So, here in output, you need to make the output aware of where it's going to be searched from. So, because those hots.json files are going to be served from the same directory, so we're gonna have to do output.

[00:15:50]
And it's going to be the same as what's in the dev server, which is gonna be /public
>> Brian Holt: So let's try that again.
>> Brian Holt: And we go to landing.jsx and change this to something else.
>> Brian Holt: And I need to restart. Gotta restart web pack.
>> Brian Holt: Did I put output?

[00:16:29]
I meant public path. Yep, sorry. PublicPath inside of the output object, which should be the same as, cuz there's gonna be a publicPath both in output and devServer.
>> Brian Holt: Okay, try that again.
>> Brian Holt: Okay, fingers crossed.
>> Brian Holt: Okay, so hot module replaces are in effect, go to landing.

[00:17:07]
Change this back to something yet else.
>> Brian Holt: There we go. It worked! [LAUGH] Cool, so if you look down here you can see it says hot update, checking for updates on the server, updated the modules, and then it did something different. So if I go back here and change this to svideo,

[00:17:33]

>> Brian Holt: It will actually change it without actually doing the hard refresh on the page, which is pretty cool.
>> Speaker 3: So this is primarily just for development?
>> Brian Holt: It's only for development. You would never, ever, ever, ever launch this down to production.
>> Speaker 4: Can you show having state then?

[00:17:52]

>> Brian Holt: Yeah, let's do that. So if you go to search.jsx, so we have something else right here, right? I'm going to do black right here and if I change something else to be back what it should be, which is svideo,
>> Brian Holt: Notice that black state here and svideo was able to change.

[00:18:15]

>> Speaker 4: So you can write code with state?
>> Brian Holt: And it will constantly be replacing itself.
>> Brian Holt: So this is a huge win, in my opinion, for developer productivity. It's just a really tight feedback loop, and I think that's something that Facebook does a really good job of putting emphasis on is the tighter you make that feedback loop.

[00:18:37]
The faster you can go as a developer, cuz how many times you save something and you have to wait, even 30 seconds for something to run, and before long you're just on Twitter and you waste 10 minutes on Twitter, at least that's exactly what I do. I'm projecting myself on you [LAUGH].

[00:18:54]

>> Speaker 4: And then you hit refresh, and then you have to click three buttons to see if that bug was fixed [LAUGH].
>> Brian Holt: Yeah, which ends up for me like 10 more minutes on news.
>> Speaker 4: Cuz you're replacing state. Yeah.
>> Brian Holt: [LAUGH]
>> Speaker 4: 10 more, it seems like a good place to push a branch.

[00:19:09]

>> Brian Holt: Yeah, totally. I changed a lot of stuff to get that to work. So it is really fun. It's really cool. The thing with hot module reload is it doesn't really play well with some of the newer technologies. Like its doable with, well so you have hot module replace, you have service side rendering, and you have code splitting, and it's pretty much a choose to scenario.

[00:19:36]
Getting all three to work at the same time, as far as I know, is actually impossible.
>> Speaker 4: I was asking if I was using import to import CSS files, would I be able to edit the CSS and have that update without having to reload?
>> Brian Holt: If using the CSS modules with hot module reload, or refresh, replace?

[00:19:57]
[LAUGH] I don't know, I think-
>> Speaker 4: It seems like you were using CSS as in JavaScript solution like-
>> Brian Holt: Style components will for sure work,-
>> Speaker 4: Like style components.
>> Brian Holt: No issue for sure. But if you're actually using CSS imports, I'm gonna go with a strong maybe. [LAUGH] I think so, but I'm not positive.

[00:20:17]
Well,
>> Brian Holt: Yeah, maybe. Maybe is my best answer to that.
>> Brian Holt: v3-13
>> Brian Holt: v3-13.
>> Brian Holt: Cool, v3-13 is now up and available.

