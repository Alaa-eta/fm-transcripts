[00:00:00]
>> Brian Holt: So let's keep going, the last thing we did was eslint ignore to make sure that we don't get all these crazy errors when we run yarn lint. Everything should be good now. I pushed up v3-2, I believed. Yeah, I did. So that should be good as well.

[00:00:24]
Yeah, yeah, that's fine. So up to this point we've been writing just plain vanilla JavaScript in our ClientApp.jsx.
>> Brian Holt: And we are gonna take this a step further now. So let's see, let's get this back to where it was, function.
>> Brian Holt: So now we're gonna start writing this in terms of jsx instead of using Vanilla React.

[00:00:59]
So let's go ahead and refactor my title first.
>> Brian Holt: Yeah, let's do that. So what we're gonna do here, is instead of having all of these ce stuff, actually you can just comment that out for a second. And we're gonna say return div,
>> Brian Holt: And,
>> Brian Holt: Then inside that we'll put an h1 with props.title inside of it.

[00:01:56]

>> Brian Holt: Okay, and then we'll get to the style here momentarily. But you can see here this looks a little peculiar. This isn't a string or anything. This is actually like writing HTML directly into our JavaScript. This is JSX, this is what I keep referring to as JSX. So basically, all JSX is gonna do for you.

[00:02:20]
It doesn't extend JavaScript at all, other than adding this XML like syntax into JavaScript. So we get to write basically, the HTML that we want to show up, we just get to write that directly. The reason why there's rows is, if you look at this, when we're doing this CE syntax, this create element syntax, we're writing code that mimics our markup, right?

[00:02:46]
So if you're writing code that mimics you're markup, wouldn't it be nice if you could just write the markup and not have to mimic it? It's kind of the general gist here is we're writing the actual markup instead of writing the code that's going to mimic the markup.

[00:03:03]
So we put it in a div, right? This is just putting out literally a div text, and this is getting compiled to the ce div, right? So there's no real magic happening here. All this is going to end up being is, pretty much this, right? That's all it's getting compiled out here.

[00:03:25]

>> Brian Holt: Now you might ask, look, okay, what about these curly braces? Well if I don't put these curly braces in, it's going to literally output the string prop.title, right? Like literally, the string props.title. We don't want that. We wanted to put in, like what is inside a prop.title, what does it represent.

[00:03:44]
So the way you do that with JSX is you just put curly braces. That's just saying, inside of here is a JavaScript expression and I want you to output that. So I can put two uppercase here, right, and that would work. So anything that can be basically on the right side of an equal sign works here.

[00:04:12]

>> Brian Holt: Okay, makes sense? So let's go ahead and bring in this style as well. So what we do there is we say style.
>> Brian Holt: Okay, so this works the same way. We're gonna put curly braces here, right? And that's gonna represent some sort of expression that's gonna be going on inside of there.

[00:04:36]
Now let's say const style = {color: props.color}, right? It's gonna look something like that. And then we can put style right there. So this corresponds to that, right? Good so far?
>> Brian Holt: Now the question you might ask me is, why can't we just put this straight in there?

[00:05:07]
Well, you can. The reason why I show you this first is, cuz people get really weirded out by seeing curly braces next to each other, right? They think that the double curly brace means something and it doesn't, right? The outer curly braced means that it's an expression, the inner curly braces mean JavaScript object.

[00:05:28]
So that's why I wanted to show you first that, that's why you can just put styles like that. But I'm gonna leave it as the object there and get rid of this.
>> Brian Holt: So now this return right here, and this return right here are equivalent. To the point that, actually this is getting transpiled to pretty much literally be this.

[00:06:01]

>> Brian Holt: Any questions about JSX so far?
>> Brian Holt: Makes sense?
>> Brian Holt: Okay?
>> Brian Holt: So this will work, you can type a clean mix, JSX with not JSX. I can't see why you would, but it works, I promise. We're getting some linting errors which we will address later. Don't worry about them for now.

[00:06:32]
Okay, and what we're gonna do here is change this to be. So let's do this.
>> Brian Holt: We're gonna do div id='"my-first-component".
>> Brian Holt: Something else that bears mentioning. So you see how this begins and ends with a parenthesis? The reason why we do that is it just makes it appear a little bit nicer, it makes the spacing more pleasant.

[00:07:11]
If you don't put the parenthesis there, this return thinks it's ended, cuz there's the hard return there. And so, it doesn't actually carry onto the next line to finish the expression. So you put the parenthesis there to let JavaScript know that, hey I'm not done yet, you need to go to the next line, right?

[00:07:30]
Does that make sense? But just so you know this is just as valid.
>> Brian Holt: Just looks really weird, right? In fact, I think if you, nope, prettier let is stand. Sometimes prettier will just fix that for you.
>> Brian Holt: Prettier is a,
>> Brian Holt: JSX aware.
>> Brian Holt: Yeah, so yeah, we have to finish working with this.

[00:08:11]
Okay, so we finished div and so now we're going to do these MyTitle components.
>> Brian Holt: Let's see, Game of Thrones color equals YellowGreen.
>> Brian Holt: Okay, and so this one was Stranger Things
>> Brian Holt: This one was House of Cards.
>> Brian Holt: And this one was, I don't know, The Americans, or something like that.

[00:09:06]

>> Brian Holt: GreenYellow.
>> Brian Holt: Peru, and how about burlywood? That's another good one, okay?
>> Brian Holt: So something else you're gonna note here is MyTitle. We can treat it as if it was like a it's a real HTML element, right? Despite the fact that it's one that we've created. In React terms it's called a composite component, right?

[00:09:38]
It's a component made up of other components.
>> Brian Holt: And we get to treat it as if it was a real HTML thing, right? And we can give it attributes the same way, right? This one, we're giving it an ID up here, right? This one, we're giving it a title here.

[00:09:56]
Something else you might be tempted to do is leave off the trailing slash, because that's technically valid html. It's not valid JSX. So you have to have that closing slash if it's a self closing tag. The same things for like input, right?
>> Brian Holt: This is technically valid HTML, right?

[00:10:21]
You don't actually have to have that self-closing slash. For JSX you must have it, just so you know.
>> Brian Holt: But what else is kind of fun about it is anything can be self-closing. So if you need a self-closing div, feel free to do that. Any questions?
>> Brian Holt: Yeah?

[00:10:46]

>> Speaker 2: Doug was just asking me, if JSX was used anywhere else other than React. And someone else chimed in that you can use JSX with view.
>> Brian Holt: So it definitely was invented for React. It was invented by a team of Facebook to mimic their XHP, I think is what it's called.

[00:11:08]
Their internal PHP thing that they were using. And they invented it to mimic that, and then it just kinda stuck, because people found it very useful. JSX has then since been separated from React, so JSX and React are not necessarily together. JSX has its own separate standard that React then uses.

[00:11:29]
And so, as it's been pointed out, view is one of the places that it's being used. There's other things like Deco, Deco, I don't know how to say it, that one uses it as well. Preact uses, like there's a bunch of different languages. It's available for any language to use.

[00:11:46]

>> Speaker 3: Why don't you need the create element on this one?
>> Brian Holt: So why don't you need react.create elements?
>> Speaker 3: Yeah
>> Brian Holt: That's what it's getting transpiled to. So this h1 is actually gets through being run through bubble, it actually end up being React.createElement h1, null, props.title. So, This is pre-Babel this is post-Babel.

[00:12:20]
That make sense?
>> Speaker 2: Well I guess that's an attribute in that case.
>> Brian Holt: Yeah, yeah, it would be this.
>> Brian Holt: Well style right, whatever. So yes, there would be a style object in there.
>> Brian Holt: Cool, other questions, make sense?
>> Brian Holt: So we are getting some linting errors. It's asking for prop types and to that, I say let's tackle that a little bit later.

[00:12:56]
For now I'd like to move on, and then we'll come back to tackle the prop types conundrum.
>> Speaker 2: Are you gonna finish making the bottom JSX?
>> Brian Holt: Yeah, good call. So I say create element down here with my first component. You can say my first component like that.

[00:13:23]

>> Speaker 2: And remove the CE definition at the top?
>> Brian Holt: Yeah, cuz now it's gonna be erroring up, up there.
>> Speaker 4: We remove the reacting port as well?
>> Brian Holt: So that's a good question. The answer to that question is anywhere you're using JSX, you have to import the React library.

[00:13:44]
Because what is this getting transpiled to? It's getting transpiled to React.createElement, right? So it is being used, expect the fact that you are not directly using it. Luckily you're a linter. So if I remove this, it's gonna error out right here, and it says right here, React must be in scope when using JSX.

[00:14:13]

>> Brian Holt: Good question.
>> Brian Holt: So a thing worth pointing out. This is only going to be true for a little bit longer, but it is true now nonetheless. We'll just do like h2 doesn't work.
>> Brian Holt: So this doesn't work. We can't have two top level returns, right? There needs to be one top level element for every single React component.

[00:14:47]
Now why is that? Well if you think about what this is being transpiled to, it would be MyTitle equals ce div, ce h2, right? That is making sense in JavaScript, right, you can have that being assigned to two thing at once. So this doesn't work. However with React 16, which we are on 15.5 right now, this will work.

[00:15:21]
We will be able to return an array of top level components, and that will work with what's called React Fiber which is the new architecture React coming. It's kind of outside the scope of what we wanna talk about today, but suffice to say, it is coming. And I really don't see it affecting too much how I write code anyway, but eventually it will be possible.

[00:15:48]

>> Brian Holt: Cool, so what will happen typically if you have something like this, where you have two things you want to return as top level, you'll just wrap them both in a div, right? So you'll see a lot of wrapping divs for that reason. Does that make sense? Do div, right?

[00:16:11]
That's typically the way you would handle that.
>> Brian Holt: So that kind of concludes what we wanted to talk about today with kind of our intro to React, like bare bones, like actually just messing around with React itself. And now were actually going to start building an app together which we will build through the rest of the two and a half days that we have left together, right?

