WEBVTT

1
00:00:00.360 --> 00:00:03.080
&gt;&gt; Brian Holt: We're gonna go ahead and
start with webpack.

2
00:00:03.080 --> 00:00:07.380
So let's go ahead and first make it
necessary for us to have webpack.

3
00:00:08.530 --> 00:00:15.464
So here, in clienApp.jsx, rather than
having React look like this up here,

4
00:00:15.464 --> 00:00:19.680
we're gonna say import React from 'react'.

5
00:00:20.760 --> 00:00:26.061
And we're gonna say import { render } from

6
00:00:26.061 --> 00:00:33.813
'react-dom'.
&gt;&gt; Brian Holt: Okay,

7
00:00:33.813 --> 00:00:38.940
so these are ES6 modules,
this is what they look like now.

8
00:00:41.030 --> 00:00:44.482
For those of you who are coming
from a Node background or

9
00:00:44.482 --> 00:00:48.610
a common JS background,
this is the same as const React = require

10
00:00:48.610 --> 00:00:56.438
('react').
&gt;&gt; Brian Holt: But

11
00:00:56.438 --> 00:00:58.990
we're not doing this anymore,
this is the old way of doing it.

12
00:00:58.990 --> 00:01:01.940
And import React from 'react',
this is the new way of doing it.

13
00:01:03.245 --> 00:01:06.180
Now you might ask yourself why are we
doing it this way, why didn't we just

14
00:01:06.180 --> 00:01:09.230
stick to require because everything
already supported require?

15
00:01:10.520 --> 00:01:15.230
Well, if you'll look at what this
was there, this is dynamic, right?

16
00:01:15.230 --> 00:01:17.930
We're feeding React in to a function
that's gonna bring it in.

17
00:01:17.930 --> 00:01:23.980
Therefore, we could say require x,
right, and x = 'react'.

18
00:01:23.980 --> 00:01:28.420
So this can be dynamic, which is cool.

19
00:01:28.420 --> 00:01:29.270
But to be honest with you,

20
00:01:29.270 --> 00:01:33.010
most of us were not using the dynamic
functionality of importing modules.

21
00:01:33.010 --> 00:01:36.680
Some of us were,
someone's gonna point that out to me.

22
00:01:36.680 --> 00:01:39.150
But most of us,
we're just using it statistically, right?

23
00:01:39.150 --> 00:01:41.460
Which is just exactly like this.

24
00:01:41.460 --> 00:01:44.720
You can't say import react from x,
that's invalid, right?

25
00:01:44.720 --> 00:01:46.430
It's always going to be from that.

26
00:01:48.640 --> 00:01:53.583
So in light of this, if we do static
modules as opposed to dynamic modules,

27
00:01:53.583 --> 00:01:56.334
this affords us some really cool things.

28
00:01:56.334 --> 00:02:03.797
That, for example, we can have
webpack go through all of our code and

29
00:02:03.797 --> 00:02:10.242
only include the things that
are actually being included.

30
00:02:10.242 --> 00:02:13.770
So, an example of that would be,

31
00:02:13.770 --> 00:02:18.684
let's say how to module
that export default,

32
00:02:18.684 --> 00:02:22.716
or let's say export const x = 5, and

33
00:02:22.716 --> 00:02:28.660
I have another that says
export const y = 10, right?

34
00:02:28.660 --> 00:02:30.960
So let's say I had a file that did this,

35
00:02:30.960 --> 00:02:33.720
that exported these two
different constants, right?

36
00:02:33.720 --> 00:02:37.935
In another file I would say import,

37
00:02:37.935 --> 00:02:43.580
it's a different file.
&gt;&gt; Brian Holt: Import

38
00:02:43.580 --> 00:02:48.774
x from like, I'm in ClientApp right now,

39
00:02:48.774 --> 00:02:53.550
but it could be from MyModule, right?

40
00:02:55.630 --> 00:03:00.576
This is MyModule.
&gt;&gt; Brian Holt: What's

41
00:03:00.576 --> 00:03:03.515
cool about this is I'm only including x,
right?

42
00:03:03.515 --> 00:03:04.435
And I'm not including y.

43
00:03:05.795 --> 00:03:07.855
Webpack is smart enough to say now,

44
00:03:07.855 --> 00:03:13.215
because of static modules, y is never
imported, I'm not going to include it.

45
00:03:15.400 --> 00:03:17.860
Now this is often referred
to as tree shaking, right?

46
00:03:17.860 --> 00:03:22.910
That's the common terminology for
this which is a total misnomer, right?

47
00:03:22.910 --> 00:03:25.250
Cuz tree shaking has the idea of like,
we were gonna go through and

48
00:03:25.250 --> 00:03:26.700
shake all the dead things off.

49
00:03:26.700 --> 00:03:29.980
It sounds like dead code or elimination
which is not actually quite true.

50
00:03:31.040 --> 00:03:32.623
It's actually live code inclusion.

51
00:03:32.623 --> 00:03:33.135
[LAUGH] So

52
00:03:33.135 --> 00:03:37.898
it's actually going to only include
things that could possibly be reached.

53
00:03:37.898 --> 00:03:41.389
As opposed to dead code elimination,
it's going to go through your code and

54
00:03:41.389 --> 00:03:43.090
remove things that could not be run.

55
00:03:44.860 --> 00:03:47.745
Largely, you're gonna end
up at similar situations,

56
00:03:47.745 --> 00:03:49.170
but let's be accurate here, right?

57
00:03:51.010 --> 00:03:53.860
So, [COUGH] that's why we went
with this new module system is

58
00:03:53.860 --> 00:03:56.026
it can be statically
analyzed by our tools and

59
00:03:56.026 --> 00:03:59.682
we can start pruning things off that
don't need to go down the wire, right?

60
00:03:59.682 --> 00:04:03.239
That's really important to us because
we're trying to constantly get things down

61
00:04:03.239 --> 00:04:07.292
in terms of file size.
&gt;&gt; Brian Holt: So,

62
00:04:07.292 --> 00:04:13.110
notice that I'm saying,
include only render from react-dom.

63
00:04:13.110 --> 00:04:15.910
Now I have no idea how react-dom
is actually structured.

64
00:04:17.290 --> 00:04:22.770
But ideally if render is not importing
other things and react-dom was

65
00:04:22.770 --> 00:04:26.820
built with this static analysis in mind,
we could only include the render function.

66
00:04:26.820 --> 00:04:27.864
We could leave everything else behind.

67
00:04:27.864 --> 00:04:29.866
I don't know if that actually happens or
not, but

68
00:04:29.866 --> 00:04:32.406
it's just a good idea to only
include the things that you need.

69
00:04:32.406 --> 00:04:36.082
So just in case they built in such a way
that or maybe in the future, it gets built

70
00:04:36.082 --> 00:04:39.560
in such a way that you're only including
code that could possibly be run.

71
00:04:41.600 --> 00:04:43.070
So that's what these curly braces mean.

72
00:04:43.070 --> 00:04:47.010
It means I'm only including
this particular piece.

73
00:04:47.010 --> 00:04:49.426
So down here,
instead of saying ReactDOM.render,

74
00:04:49.426 --> 00:04:51.528
I'm actually just gonna say render, right?

75
00:04:51.528 --> 00:04:54.970
Cuz these two we've referenced to
each other, render and render.

76
00:04:56.940 --> 00:04:57.610
That make sense?

77
00:04:59.340 --> 00:05:02.950
Now, notice I don't have
curly braces around React.

78
00:05:02.950 --> 00:05:04.870
I'm including the entire package here.

79
00:05:07.880 --> 00:05:11.386
So if you remember here,
I had export const x = 5,

80
00:05:11.386 --> 00:05:16.730
right?
&gt;&gt; Brian Holt: So,

81
00:05:16.730 --> 00:05:21.090
if I say export default 5, right,
that's what you're getting here.

82
00:05:21.090 --> 00:05:27.230
That's the default export.
&gt;&gt; Audience 1: If you mixed

83
00:05:27.230 --> 00:05:31.000
in a require in there, if you did have
a dynamic module that was being loaded,

84
00:05:31.000 --> 00:05:34.413
would webpack just skip over it then?
&gt;&gt; Brian Holt: I think the answer to that

85
00:05:34.413 --> 00:05:37.860
question is it would just compile
them to be the same thing.

86
00:05:37.860 --> 00:05:40.170
I think it would actually work,
it's not valid, right?

87
00:05:40.170 --> 00:05:44.056
But I think it would still work with

88
00:05:44.056 --> 00:05:47.791
webpack.
&gt;&gt; Brian Holt: The real answer to that

89
00:05:47.791 --> 00:05:52.450
question is you can still do dynamic
imports, it's just done differently now.

90
00:05:54.300 --> 00:05:59.510
We're gonna talk about it at
the end of the third day.

91
00:05:59.510 --> 00:06:02.840
But there's a thing called
import as a function, right?

92
00:06:02.840 --> 00:06:08.260
And this is going to be how
we do dynamic imports now.

93
00:06:10.300 --> 00:06:18.204
And then you can say, promise.then(React).
&gt;&gt; Brian Holt: Right,

94
00:06:18.204 --> 00:06:22.900
and then you can start working with
React inside of that promise body.

95
00:06:22.900 --> 00:06:30.643
So it's also asynchronous.
&gt;&gt; Brian Holt: So

96
00:06:30.643 --> 00:06:32.631
semantically it's a bit different, but

97
00:06:32.631 --> 00:06:34.800
this is ultimately going to be better for
us.

98
00:06:34.800 --> 00:06:35.740
It's gonna be better for the web.

99
00:06:37.190 --> 00:06:40.317
Okay, so now this doesn't work.

100
00:06:40.317 --> 00:06:44.250
[LAUGH] We broke it,
because this has to be compiled now.

101
00:06:44.250 --> 00:06:46.845
Because right now, well actually,

102
00:06:46.845 --> 00:06:51.876
Chrome does support a little bit of
ES6 modules native to the browser.

103
00:06:51.876 --> 00:06:53.870
But we're not going to
be doing that today.

104
00:06:53.870 --> 00:06:56.813
So we need to run this through webpack
now, so that webpack can go out and

105
00:06:56.813 --> 00:06:57.364
grab React.

106
00:06:57.364 --> 00:07:01.313
It can go out and grab react-dom,
compile them together, and

107
00:07:01.313 --> 00:07:06.249
send down one file.
&gt;&gt; Brian Holt: So,

108
00:07:12.206 --> 00:07:15.391
&gt;&gt; Brian Holt: What we're gonna do here

109
00:07:15.391 --> 00:07:21.572
is, there it is.
&gt;&gt; Brian Holt: We're gonna go

110
00:07:21.572 --> 00:07:29.311
to the command line and we are gonna say,
&gt;&gt; Brian Holt: First of all,

111
00:07:29.311 --> 00:07:32.015
you're going to have to do
a either a yarn global add or

112
00:07:32.015 --> 00:07:36.657
a npm install--global
&gt;&gt; Brian Holt: If you're getting sick of

113
00:07:36.657 --> 00:07:38.960
this, there's also kind of a little
cheat that you can do here.

114
00:07:38.960 --> 00:07:41.154
You can also say
./node.modules.bin/webpack.

115
00:07:41.154 --> 00:07:48.680
This should work for all of you
if you've done the Yarn installs.

116
00:07:48.680 --> 00:07:52.470
So inside of bin is gonna
be all of the different

117
00:07:52.470 --> 00:07:55.830
things that are being
included into our project.

118
00:07:55.830 --> 00:07:57.470
So we can call eslint from there,

119
00:07:57.470 --> 00:08:01.120
we can call flow from there,
prettier, all these different things.

120
00:08:03.130 --> 00:08:06.310
So, if you want to you can do that as
well, or you can just install it globally.

121
00:08:06.310 --> 00:08:08.968
That's kind of up to you.

122
00:08:08.968 --> 00:08:11.150
I have installed globally so
I'm just gonna do it that way.

123
00:08:12.474 --> 00:08:14.894
Maybe I don't, so
I'm gonna do it that way,

124
00:08:14.894 --> 00:08:19.306
node_modules/.bin/webpack.
&gt;&gt; Brian Holt: Then the entry file is

125
00:08:19.306 --> 00:08:25.920
going to be client or
it's gonna be jsx, ClientApp.jsx.

126
00:08:25.920 --> 00:08:33.376
And then I'm gonna have it
output to public/bundle.js

127
00:08:40.709 --> 00:08:42.827
&gt;&gt; Brian Holt: So you can see now,

128
00:08:42.827 --> 00:08:49.880
it took in this file ClientApp.jsx and
it output bundle.js.

129
00:08:49.880 --> 00:08:56.060
So now if you go into js,
sorry not js, if you go into public

130
00:08:56.060 --> 00:09:02.490
you should see a file called bundle.js.
&gt;&gt; Brian Holt: And you can see

131
00:09:02.490 --> 00:09:08.414
that it has all this stuff in there.
&gt;&gt; Brian Holt: Did I not save this?

132
00:09:08.414 --> 00:09:10.180
I did not save it, okay.

133
00:09:12.070 --> 00:09:16.140
This should be a lot bigger now because
it's going to include, let me run it

134
00:09:16.140 --> 00:09:25.930
again.
&gt;&gt; Brian Holt: There you go, okay.

135
00:09:25.930 --> 00:09:27.260
Yours should look something like that,
right?

136
00:09:28.890 --> 00:09:32.032
Basically it's saying, I need to
include all of this stuff, right?

137
00:09:32.032 --> 00:09:35.544
Cuz this is all the stuff
coming from React and

138
00:09:35.544 --> 00:09:38.600
I outputted a bundle that is 739 Kb.

139
00:09:40.620 --> 00:09:41.860
Seems reasonable, doesn't it?

140
00:09:41.860 --> 00:09:45.460
[LAUGH] It's not,
it's not reasonable at all.

141
00:09:45.460 --> 00:09:48.700
But you have to keep in mind this is
unminified, this is ungzipped and

142
00:09:48.700 --> 00:09:50.970
this is the development build, right?

143
00:09:50.970 --> 00:09:53.896
So we're building specifically now for
our purposes.

144
00:09:53.896 --> 00:09:55.540
This is gonna be code
that's easier to read, so

145
00:09:55.540 --> 00:09:57.865
you can actually open up the bundle and
read it.

146
00:09:57.865 --> 00:10:01.450
And it's gonna be a version of React that
has all of like the developer warnings and

147
00:10:01.450 --> 00:10:04.855
all that kind of stuff available.
&gt;&gt; Brian Holt: So

148
00:10:04.855 --> 00:10:08.430
when we build this for production,
it's gonna be much smaller, right?

149
00:10:08.430 --> 00:10:12.500
Cuz it's gonna be minified, it's gonna be
gzipped, it's gonna be treeshook, it's

150
00:10:12.500 --> 00:10:18.242
gonna be all of those different things.
&gt;&gt; Brian Holt: Okay,

151
00:10:18.242 --> 00:10:22.670
so now if you go to index.html.

152
00:10:22.670 --> 00:10:28.085
And we have the script right here,
we're gonna say src= public/bundle,

153
00:10:34.337 --> 00:10:36.905
&gt;&gt; Brian Holt: .js, right?

154
00:10:36.905 --> 00:10:39.746
And now we don't have to include these
two script tags up here either, right?

155
00:10:39.746 --> 00:10:43.250
Cuz they're already being
included with our bundle.

156
00:10:45.870 --> 00:10:49.692
So this is one of the nice parts about
webpack is every time I include a module I

157
00:10:49.692 --> 00:10:51.808
don't have to go add another script tag.

158
00:10:51.808 --> 00:10:54.280
It's just going to always
be included in that bundle.

159
00:10:58.766 --> 00:11:01.347
&gt;&gt; Brian Holt: So I should be able now to

160
00:11:01.347 --> 00:11:07.790
go to this, and I can refresh and
it still works, right?

161
00:11:07.790 --> 00:11:12.739
Everything's still being included.
&gt;&gt; Brian Holt: You can see that

162
00:11:12.739 --> 00:11:13.920
it's only including bundle.

163
00:11:15.310 --> 00:11:18.600
Which if you look at how big it is,
it's quite large.

164
00:11:25.432 --> 00:11:27.090
&gt;&gt; Brian Holt: You can see it's huge.

165
00:11:31.136 --> 00:11:32.346
&gt;&gt; Brian Holt: I mean look at that,

166
00:11:32.346 --> 00:11:36.460
look on the side there,
it's just astronomically huge.

167
00:11:36.460 --> 00:11:38.300
But this is literally
the entire library for

168
00:11:38.300 --> 00:11:42.030
React unminified with all
of the development helpers.

169
00:11:44.950 --> 00:11:48.940
Any questions about webpack?
&gt;&gt; Audience 2: Can you go

170
00:11:48.940 --> 00:11:51.508
back to the ClientApp again?
&gt;&gt; Brian Holt: Yeah.

171
00:11:57.860 --> 00:12:00.129
&gt;&gt; Audience 1: How does it know how to do

172
00:12:00.129 --> 00:12:04.050
that without any webpack config for l?
&gt;&gt; Brian Holt: Well,

173
00:12:04.050 --> 00:12:06.494
we're just using all the default settings.
&gt;&gt; Audience 1: And

174
00:12:06.494 --> 00:12:10.497
webpack already has that out of the box?
&gt;&gt; Brian Holt: Yeah, it's actually,

175
00:12:10.497 --> 00:12:16.670
people like think that webpack is
a big complicated beast for sure.

176
00:12:16.670 --> 00:12:19.600
It doesn't have to be
a big complicated beast.

177
00:12:19.600 --> 00:12:22.123
The only thing that it's bare
minimum that it requires,

178
00:12:22.123 --> 00:12:24.656
it requires an entry point
which we gave it, ClientApp.

179
00:12:24.656 --> 00:12:29.087
And it requires an exit
point which is Bundle.js,

180
00:12:29.087 --> 00:12:35.080
everything else we can just rely
on webpack to take care of.

181
00:12:35.080 --> 00:12:39.600
Now don't get me wrong, we're about
to make a big ass config file, right?

182
00:12:39.600 --> 00:12:44.590
Because we don't want the default build,
but by in itself this works as is.

183
00:12:45.640 --> 00:12:47.890
Webpack can be configured through the CLI,

184
00:12:47.890 --> 00:12:51.600
I guess that's what I'm
trying to get at here.

