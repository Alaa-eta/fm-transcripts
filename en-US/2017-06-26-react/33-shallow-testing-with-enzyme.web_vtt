WEBVTT

1
00:00:00.470 --> 00:00:03.400
&gt;&gt; Brian Holt: I wanna show you
a problem with what we have right now.

2
00:00:03.400 --> 00:00:08.930
So if I come in here to showcard.jsx,
and I change this to be, I don't know,

3
00:00:08.930 --> 00:00:16.340
I put like another thing in here,
something different.

4
00:00:17.800 --> 00:00:23.280
So I have changed Showcard, And
I have not changed search.jsx, right?

5
00:00:24.370 --> 00:00:30.602
If I run jest again what's gonna happen?
&gt;&gt; Brian Holt: Let's do it,

6
00:00:30.602 --> 00:00:36.660
yarn test.
&gt;&gt; Brian Holt: It failed my test.

7
00:00:36.660 --> 00:00:42.680
So something going wrong in showcard
is failing my search component test.

8
00:00:42.680 --> 00:00:47.125
Now, some people say that's fine, right, I
don't care, I just want something to fail,

9
00:00:47.125 --> 00:00:48.790
and that can be your opinion.

10
00:00:48.790 --> 00:00:50.550
It's wrong, but that can be your opinion.

11
00:00:51.600 --> 00:00:55.544
Just kidding, I mean, maybe,
I think it's wrong, [LAUGH] but

12
00:00:55.544 --> 00:00:59.789
my problem with this is that if
there's nothing wrong with search,

13
00:00:59.789 --> 00:01:03.230
I don't want search to fail,
I want ShowCard to fail.

14
00:01:03.230 --> 00:01:05.910
I want the test for ShowCard to fail so

15
00:01:05.910 --> 00:01:09.810
that I immediately have to go and
check out ShowCard.

16
00:01:09.810 --> 00:01:12.907
So let's bring in a library that's
actually going to allow us to do

17
00:01:12.907 --> 00:01:19.276
that.
&gt;&gt; Brian Holt: In

18
00:01:19.276 --> 00:01:25.040
fact I'm gonna leave this for now and
then we'll fix it here in just a second.

19
00:01:25.040 --> 00:01:30.778
So come back to search.spec.jsx.
&gt;&gt; Brian Holt: And

20
00:01:30.778 --> 00:01:36.304
we're going to import
a library called enzyme,

21
00:01:36.304 --> 00:01:41.019
so import [ shallow ] from 'enzyme',

22
00:01:41.019 --> 00:01:46.005
and we're gonna modify
this a little bit and

23
00:01:46.005 --> 00:01:50.200
we're also going to drop renderer.

24
00:01:54.830 --> 00:01:58.080
Because enzyme is actually going to
use renderer underneath the hood, so

25
00:01:58.080 --> 00:01:59.280
we don't actually have
to import it directly.

26
00:01:59.280 --> 00:02:02.630
In fact you can't import it directly
if you, you can't have renderer and

27
00:02:02.630 --> 00:02:04.810
enzyme in the same import.

28
00:02:07.040 --> 00:02:11.696
Okay, so what we're gonna do here is we're
going to, instead of doing render.create,

29
00:02:11.696 --> 00:02:17.671
we're going to do shallow,
&gt;&gt; Brian Holt: And

30
00:02:17.671 --> 00:02:20.798
then we can actually
just do this directly, so

31
00:02:20.798 --> 00:02:28.096
expect(component).toMatchSnapshot.
&gt;&gt; Brian Holt: So

32
00:02:28.096 --> 00:02:32.146
what enzyme is a wrapper on top
of react test renderer, but

33
00:02:32.146 --> 00:02:34.801
it's gonna do certain things for us.

34
00:02:34.801 --> 00:02:37.710
One of the things is it's going to address
the problem that I just showed you.

35
00:02:37.710 --> 00:02:42.340
It's actually going to stub out all
of the children components, right?

36
00:02:42.340 --> 00:02:44.740
So, for example, we have ShowCard, right?

37
00:02:44.740 --> 00:02:47.570
It's going to not actually go down and
render everything in ShowCard,

38
00:02:47.570 --> 00:02:51.685
it's just going to say a ShowCard was
rendered here with these props, and

39
00:02:51.685 --> 00:02:56.920
then it doesn't actually dive
down into that child component.

40
00:02:56.920 --> 00:03:02.026
So what's awesome about that, it stops
caring what's happening in ShowCard and

41
00:03:02.026 --> 00:03:07.061
it will only fail things in search, when
something in search is actually wrong.

42
00:03:07.061 --> 00:03:08.780
This is still not gonna work yet.

43
00:03:08.780 --> 00:03:09.770
We have to do one more thing.

44
00:03:11.340 --> 00:03:15.040
Save that, go to package.json and

45
00:03:15.040 --> 00:03:18.520
we need to tell,
you can put this anywhere, wherever.

46
00:03:18.520 --> 00:03:23.830
We have to give this
a jest top level property.

47
00:03:23.830 --> 00:03:32.222
We have to tell jest how to
snapshot enzyme components.

48
00:03:32.222 --> 00:03:37.993
So what we're going to do
here is we're going to say,

49
00:03:37.993 --> 00:03:46.965
snapshotSerializers,
&gt;&gt; Brian Holt: Which is gonna be an array,

50
00:03:46.965 --> 00:03:51.611
because you could have multiple kinds
of serializers, but we just have one,

51
00:03:51.611 --> 00:04:01.235
it's gonna be jest-serializer-enzyme.
&gt;&gt; Brian Holt: So

52
00:04:01.235 --> 00:04:04.798
again, what this is doing is
this is telling Jest hey,

53
00:04:04.798 --> 00:04:09.760
whenever you encounter an enzyme
component, this is how you serialize it.

54
00:04:09.760 --> 00:04:12.340
It's giving it code to know how to
serialize that into a snapshot,

55
00:04:12.340 --> 00:04:14.199
does that make sense?

56
00:04:18.290 --> 00:04:19.350
Okay.

57
00:04:19.350 --> 00:04:20.530
Cool.

58
00:04:20.530 --> 00:04:24.761
So, go back to your search.spec.jsx and

59
00:04:24.761 --> 00:04:29.812
now save it, and come back and
run yarn test again,

60
00:04:29.812 --> 00:04:34.630
and now it's going to fail again,
because now it

61
00:04:34.630 --> 00:04:39.680
has the enzyme output and
not the previous output,

62
00:04:39.680 --> 00:04:44.290
but this is what the enzyme
output looks like.

63
00:04:44.290 --> 00:04:48.420
Notice it's actually going down and
like rendering like the Game of Thrones.

64
00:04:48.420 --> 00:04:50.380
All of the mark up inside a ShowCard.

65
00:04:50.380 --> 00:04:53.180
Now it just says I'm getting a ShowCard,
here's the props passed in,

66
00:04:53.180 --> 00:05:01.490
I don't know anything else about it.
&gt;&gt; Brian Holt: Does that make sense?

67
00:05:01.490 --> 00:05:03.710
So let's go ahead and
run yarn test:update so

68
00:05:03.710 --> 00:05:08.380
that we can actually just go in and
look at the snapshot.

69
00:05:08.380 --> 00:05:15.540
Okay so we updated that, and
let's go look at the snap.snap.

70
00:05:15.540 --> 00:05:16.550
So again looking here.

71
00:05:18.560 --> 00:05:22.691
Rather than actually outputting the markup
for ShowCard it's just actually giving you

72
00:05:22.691 --> 00:05:31.486
a react looking component.
&gt;&gt; Brian Holt: Make sense?

73
00:05:31.486 --> 00:05:33.406
Pretty cool I think.

74
00:05:33.406 --> 00:05:37.942
So now, even though that we're messing
around with ShowCard in here, so

75
00:05:37.942 --> 00:05:42.126
I can go back and delete this,
save it, and try running this again.

76
00:05:42.126 --> 00:05:49.018
Oops, not update, just test.
&gt;&gt; Brian Holt: It'll

77
00:05:49.018 --> 00:05:51.890
still pass despite the fact that
I'm changing things in ShowCard.

78
00:05:51.890 --> 00:05:55.771
You have a question?
&gt;&gt; Speaker 2: Yeah,

79
00:05:55.771 --> 00:06:00.440
Doug's asking, with the test and test
update scripts, does that automatically

80
00:06:00.440 --> 00:06:06.726
set the environment ENV?
&gt;&gt; Brian Holt: It must be,

81
00:06:06.726 --> 00:06:13.745
I had not thought of that.
&gt;&gt; Brian Holt: Yeah,

82
00:06:13.745 --> 00:06:17.830
I wonder if jest,
let's actually look, I have no idea.

83
00:06:17.830 --> 00:06:22.490
So, if you look at my notes, I actually
have in there, setting the node EMV,

84
00:06:22.490 --> 00:06:24.164
but if we go to speck.jsx.

85
00:06:30.424 --> 00:06:35.219
&gt;&gt; Brian Holt: (process.env.NODE_ENV) So,

86
00:06:35.219 --> 00:06:38.624
let's try running that.

87
00:06:44.315 --> 00:06:45.614
&gt;&gt; Brian Holt: Yeah, check that out.

88
00:06:45.614 --> 00:06:47.453
It actually sets the node ENV in for you.

89
00:06:47.453 --> 00:06:48.615
Who knew?

90
00:06:48.615 --> 00:06:49.495
I did not know that.

91
00:06:49.495 --> 00:06:50.370
Today I learned.

92
00:06:53.130 --> 00:06:55.452
That is pure fortunate happenstance.

93
00:06:55.452 --> 00:07:04.721
[LAUGH]
&gt;&gt; Brian Holt: So

94
00:07:04.721 --> 00:07:07.224
the way that you would handle that in

95
00:07:07.224 --> 00:07:10.515
here,
&gt;&gt; Brian Holt: So

96
00:07:10.515 --> 00:07:13.105
you could say NODE_ENV=test jest, and

97
00:07:13.105 --> 00:07:17.989
you can change this to be whatever you
want, like production for your server or

98
00:07:17.989 --> 00:07:22.653
whatever
&gt;&gt; Brian Holt: This is okay, if you're

99
00:07:22.653 --> 00:07:25.636
using it just for yourself, and you're
sure that everyone using it has Bash.

100
00:07:25.636 --> 00:07:27.594
This is not going to work across shells.

101
00:07:27.594 --> 00:07:33.060
So there's a tool called crossenv,
which I don't remember the API for it.

102
00:07:33.060 --> 00:07:38.278
It looks like this,
&gt;&gt; Brian Holt: And then you provide it,

103
00:07:38.278 --> 00:07:42.528
I think it looks something like that,
it's another node package that you would

104
00:07:42.528 --> 00:07:46.735
install, that will take care of all
those various different shells to cover.

105
00:07:46.735 --> 00:07:50.055
So if you need to be setting
your environment across shells,

106
00:07:50.055 --> 00:07:58.599
this is how you do it.
&gt;&gt; Brian Holt: Anyway, that's cool.

107
00:07:58.599 --> 00:08:04.429
Any questions?
&gt;&gt; Brian Holt: All

108
00:08:04.429 --> 00:08:09.729
right.
&gt;&gt; Brian Holt: Enzymes a super cool tool.

109
00:08:09.729 --> 00:08:14.877
There is an interesting thread on the
GitHub for React, that they're considered

110
00:08:14.877 --> 00:08:20.024
making it the official testing suite of
React, and they ended up not doing it, but

111
00:08:20.024 --> 00:08:25.580
they said like internal at Facebook, they
actually do use enzyme for all testing.

112
00:08:25.580 --> 00:08:29.510
The only reason that they don't make it
official is they thought it might stunt

113
00:08:29.510 --> 00:08:31.690
the innovation happening
around testing in React.

114
00:08:31.690 --> 00:08:36.750
So, nonetheless, pretty much any company
that's testing React is probably using

115
00:08:36.750 --> 00:08:43.410
enzyme.
&gt;&gt; Brian Holt: Okay, so

116
00:08:43.410 --> 00:08:49.460
let's go back and look at spec.jsx here.
&gt;&gt; Brian Holt: Enzyme

117
00:08:49.460 --> 00:08:52.501
has several layers of rendering.

118
00:08:52.501 --> 00:08:55.790
The one that you want to be using
as much as possible is shallow.

119
00:08:55.790 --> 00:08:58.140
You can see that our test is pretty zippy,
right?

120
00:08:58.140 --> 00:09:01.230
It's not doing anything particularly
crazy cuz it's not actually

121
00:09:01.230 --> 00:09:03.830
creating any sort of like thick dom or
anything like that.

122
00:09:03.830 --> 00:09:05.310
It's just rendering up the component and

123
00:09:05.310 --> 00:09:09.470
testing against the markup
that's being rendered there.

124
00:09:11.100 --> 00:09:15.500
If you need to go deeper,
there's another one called render, and

125
00:09:15.500 --> 00:09:17.510
if you wanna go deeper than
that there's one called static.

126
00:09:17.510 --> 00:09:20.535
You don't have to bring those in, Im
just showing you that they're available.

127
00:09:20.535 --> 00:09:26.510
Render's actually going to
emulate a dom with like jsdom.

128
00:09:26.510 --> 00:09:29.860
But if you've ever tested with
jsdom before it's real slow.

129
00:09:29.860 --> 00:09:32.152
It's gonna greatly slow down your tests,
and

130
00:09:32.152 --> 00:09:35.050
a fast test suite is a happy test
[LAUGH] suite in my opinion.

131
00:09:36.350 --> 00:09:40.000
Static is actually going to bring in
Cheerio, if you're familiar with Cheerio.

132
00:09:40.000 --> 00:09:45.170
It's an awesome library for doing dom
exploring in a node like environment.

133
00:09:45.170 --> 00:09:48.928
So you can actually fetch a page
using ajax on your server and

134
00:09:48.928 --> 00:09:50.291
pull stuff off of it.

135
00:09:50.291 --> 00:09:54.370
So if you wanna do web scraping,
Cheerio's a really great way to do it.

136
00:09:54.370 --> 00:09:57.941
So that's what static does, it uses
Cheerio to explore your react components

137
00:09:57.941 --> 00:10:03.393
and those are also available to you.
&gt;&gt; Brian Holt: But

138
00:10:03.393 --> 00:10:07.660
again, both static and
render are much slower than shallow.

139
00:10:07.660 --> 00:10:10.540
Shallow is pretty fast, so
stick to shallow where possible.

