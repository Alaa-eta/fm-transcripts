WEBVTT

1
00:00:00.320 --> 00:00:04.680
&gt;&gt; Brian Holt: So the last thing that
we're gonna wanna test is our Thunk.

2
00:00:04.680 --> 00:00:07.135
It's a little bit more complicated cuz now
we're gonna have to start dealing with

3
00:00:07.135 --> 00:00:08.610
asynchronous code, it's not so easy.

4
00:00:10.610 --> 00:00:12.730
But it's not horrible,
which is the good news.

5
00:00:13.950 --> 00:00:17.555
So the first thing we're gonna import
up here, and this is actually one of

6
00:00:17.555 --> 00:00:21.685
the reasons I chose axios for this course,
is it actually has its own mocking library

7
00:00:21.685 --> 00:00:27.636
called moxios.
&gt;&gt; Brian Holt: Let

8
00:00:27.636 --> 00:00:34.650
me push a branch real quick.
&gt;&gt; Brian Holt: So I'm gonna yarn add .get.

9
00:00:36.420 --> 00:00:38.660
Why am I doing this?

10
00:00:38.660 --> 00:00:44.669
git add ., git checkout -b v3-25,

11
00:00:44.669 --> 00:00:49.994
git commit -m25, git push origin

12
00:00:49.994 --> 00:00:56.912
v3-25.
&gt;&gt; Brian Holt: Okay,

13
00:00:56.912 --> 00:00:58.660
so v3-25 is out there.

14
00:01:01.590 --> 00:01:04.426
I guess I pushed it with moxios in there,
so you'll have that linting error, but

15
00:01:04.426 --> 00:01:04.980
that's okay.

16
00:01:06.680 --> 00:01:10.121
So now we're going to go do some testing

17
00:01:10.121 --> 00:01:14.910
with,
&gt;&gt; Brian Holt: moxios.

18
00:01:14.910 --> 00:01:19.430
So the first we're gonna do is we're
gonna pull this addAPIData thing out.

19
00:01:19.430 --> 00:01:21.171
And we're just gonna say this is

20
00:01:21.171 --> 00:01:26.552
Stranger Things.
&gt;&gt; Brian Holt: And

21
00:01:26.552 --> 00:01:30.971
we're gonna say const
strangerThings = blah.

22
00:01:30.971 --> 00:01:32.557
And then we can reuse it in this next

23
00:01:32.557 --> 00:01:36.658
test here.
&gt;&gt; Brian Holt: So

24
00:01:36.658 --> 00:01:40.429
we're gonna test('getAPIDetails',

25
00:01:43.249 --> 00:01:45.909
&gt;&gt; Brian Holt: getAPIDetails.

26
00:01:49.709 --> 00:01:50.745
&gt;&gt; Brian Holt: And up here,

27
00:01:50.745 --> 00:01:57.294
we're gonna import getAPIDetails.
&gt;&gt; Brian Holt: So

28
00:01:57.294 --> 00:02:01.571
moxios has this cool ability to do

29
00:02:01.571 --> 00:02:08.157
moxios.withMock.
&gt;&gt; Brian Holt: And

30
00:02:08.157 --> 00:02:12.496
then inside of here,
&gt;&gt; Brian Holt: If I ever call axios,

31
00:02:12.496 --> 00:02:17.127
it's just going to substitute the mock
version instead of actually trying to make

32
00:02:17.127 --> 00:02:18.279
a request, right?

33
00:02:18.279 --> 00:02:20.155
So, anything inside of that body

34
00:02:20.155 --> 00:02:24.981
will happen.
&gt;&gt; Brian Holt: So

35
00:02:24.981 --> 00:02:28.319
the first thing we're gonna
do is const dispatchMock,

36
00:02:31.580 --> 00:02:35.660
&gt;&gt; Brian Holt: = jest.fn().

37
00:02:35.660 --> 00:02:39.464
This is called a spy function,
so ultimately,

38
00:02:39.464 --> 00:02:45.742
what we're concerned about is given input,
right, if I request something,

39
00:02:45.742 --> 00:02:52.215
I'm going to expect,
&gt;&gt; Brian Holt: For

40
00:02:52.215 --> 00:02:54.970
the dispatch to be called with
the correct functionality, right?

41
00:02:56.040 --> 00:03:00.120
So, if I request Stranger Things,
I'm going to expect it to

42
00:03:00.120 --> 00:03:04.444
eventually dispatch an action
to update that in Redux, right?

43
00:03:04.444 --> 00:03:05.540
That's what I'm testing here.

44
00:03:06.620 --> 00:03:08.729
So that's why I'm gonna use
this dispatchMock function.

45
00:03:08.729 --> 00:03:13.218
I'm going to pass this in as the dispatch
function and test later if it was called

46
00:03:13.218 --> 00:03:16.635
with the correct parameters,
that's what we're going for

47
00:03:16.635 --> 00:03:22.510
here.
&gt;&gt; Brian Holt: That makes sense?

48
00:03:25.320 --> 00:03:28.489
So another thing about this is this
test is going to be asynchronous, right?

49
00:03:29.730 --> 00:03:32.481
It's not going to complete synchronously,
right?

50
00:03:32.481 --> 00:03:36.492
This one, there's no asynchronous
component to it, whereas with moxios and

51
00:03:36.492 --> 00:03:39.180
with API requests,
it's asynchronous in nature.

52
00:03:40.410 --> 00:03:43.920
So we have to be worried about that,
we don't want the test to complete

53
00:03:43.920 --> 00:03:47.500
before we've actually
finished the testing, right?

54
00:03:47.500 --> 00:03:50.931
So what you can do here is
you can say done: Function.

55
00:03:50.931 --> 00:03:53.370
This is an ability for jest, right?

56
00:03:53.370 --> 00:03:57.274
This done: Function, this is when
you call and say I'm done, right?

57
00:03:57.274 --> 00:03:59.930
So as soon as you call done,
your test case is finished, and

58
00:03:59.930 --> 00:04:03.660
so if everything hasn't wrapped up,
it's gonna fail your test.

59
00:04:03.660 --> 00:04:07.521
It also knows that don't finish
the test case until I call this,

60
00:04:07.521 --> 00:04:12.323
okay?
&gt;&gt; Brian Holt: So, what I'm gonna do

61
00:04:12.323 --> 00:04:16.960
here is with Mock, I do this outside,
it doesn't really matter, but whatever.

62
00:04:19.440 --> 00:04:23.920
With Mock,
I'm going to call getAPIDetails, and

63
00:04:23.920 --> 00:04:30.730
I'm going to pass in
strangerThings.imdbID, right?

64
00:04:32.150 --> 00:04:33.310
What does this return to me?

65
00:04:34.510 --> 00:04:35.840
It's a thunk, right?

66
00:04:35.840 --> 00:04:39.040
So if I call getAPIDetails
with strangerThings id,

67
00:04:39.040 --> 00:04:42.630
this is going to return
to me another function.

68
00:04:42.630 --> 00:04:45.230
Typically, Redux calls this function for
us,

69
00:04:45.230 --> 00:04:47.910
but we're not involving Redux
in this process, right?

70
00:04:47.910 --> 00:04:50.230
We're testing just this thunk, so

71
00:04:50.230 --> 00:04:53.150
we actually have to call
the function given back.

72
00:04:53.150 --> 00:04:56.190
So that's why we're gonna put
a second set of parentheses here.

73
00:04:56.190 --> 00:04:59.400
Cuz we're gonna call
the function that's given back.

74
00:04:59.400 --> 00:05:03.524
If this is more clear to you, you're
welcome to say const thunk = that and

75
00:05:03.524 --> 00:05:05.331
then call thunk right after it.

76
00:05:05.331 --> 00:05:09.432
If you wanna be more explicit that way,
that's totally fine as well.

77
00:05:09.432 --> 00:05:13.043
But what we're gonna do here
is we're gonna call it, and

78
00:05:13.043 --> 00:05:15.312
what is that function called with?

79
00:05:15.312 --> 00:05:19.760
So if we go look at our actionCreators.js,
if you look right here,

80
00:05:19.760 --> 00:05:23.832
what is it called with,
it's called with dispatch, right?

81
00:05:23.832 --> 00:05:26.500
This is injected by Redux, right?

82
00:05:28.600 --> 00:05:31.927
So if we go back to
actionCreators.spec.js,

83
00:05:31.927 --> 00:05:34.762
we wanna call it with our dispatchMock.

84
00:05:34.762 --> 00:05:37.637
And so now, that's going to be
provided to our function, and

85
00:05:37.637 --> 00:05:41.140
we're going to wait to see if that's
called with the correct parameters.

86
00:05:41.140 --> 00:05:42.530
That's what we're actually testing here.

87
00:05:45.410 --> 00:05:50.500
So, what we're gonna say is hey,
moxios, just chill out for a second.

88
00:05:50.500 --> 00:05:54.364
So you're gonna say moxios.wait,
&gt;&gt; Brian Holt: And

89
00:05:54.364 --> 00:05:59.352
give that a callback function.
&gt;&gt; Brian Holt: And

90
00:05:59.352 --> 00:06:04.551
then you're gonna say, const request

91
00:06:04.551 --> 00:06:09.601
= moxios.requests.mostRecent.

92
00:06:10.960 --> 00:06:14.380
So the first thing we're gonna check to
see is, was it called with the right URL?

93
00:06:16.250 --> 00:06:19.022
Did our thunk reach out to
the correct API, right?

94
00:06:19.022 --> 00:06:23.142
And we can inspect that request
here given back to us by

95
00:06:23.142 --> 00:06:26.518
moxios.
&gt;&gt; Brian Holt: So

96
00:06:26.518 --> 00:06:32.062
we're gonna say request,
&gt;&gt; Brian Holt: .respondWith,

97
00:06:37.682 --> 00:06:39.778
&gt;&gt; Brian Holt: status: 200, and

98
00:06:39.778 --> 00:06:46.020
response is going to be strangerThings.
&gt;&gt; Brian Holt: So

99
00:06:46.020 --> 00:06:49.884
yeah, that's what we're doing here in
particular, is it's gonna make that

100
00:06:49.884 --> 00:06:53.703
request, and you're gonna say hey,
respond to this request with a 200.

101
00:06:53.703 --> 00:06:57.343
And then our next test case could be text,

102
00:06:57.343 --> 00:07:02.343
what happens if this is 404 and
this is error, right?

103
00:07:02.343 --> 00:07:03.663
And we can test that as well.

104
00:07:03.663 --> 00:07:04.951
Not gonna test that right now, but

105
00:07:04.951 --> 00:07:11.021
that's how you would do that as well.
&gt;&gt; Brian Holt: This is gonna give you

106
00:07:11.021 --> 00:07:17.044
back a promise, so I'm gonna say .then.
&gt;&gt; Brian Holt: And

107
00:07:17.044 --> 00:07:19.920
in here,
we can test what actually is gonna happen.

108
00:07:19.920 --> 00:07:25.483
So the first thing we're gonna expect
is we're going to expect(request.url),

109
00:07:31.123 --> 00:07:31.903
&gt;&gt; Brian Holt: toEqual,

110
00:07:35.183 --> 00:07:37.069
&gt;&gt; Brian Holt: (http://

111
00:07:37.069 --> 00:07:46.710
localhost:3000/$[strangerThings.imdbID],
right?

112
00:07:46.710 --> 00:07:49.440
So that's the URL it should be calling,
right?

113
00:07:51.100 --> 00:07:54.644
The next thing is we're gonna
say expect(dispatchMock),

114
00:07:59.545 --> 00:08:00.931
&gt;&gt; Brian Holt: toBecalledWith,

115
00:08:00.931 --> 00:08:05.720
this is a function of the spy
function that we're using here.

116
00:08:05.720 --> 00:08:08.275
It's very similar to signOn,
if you've ever used that one.

117
00:08:08.275 --> 00:08:12.064
And we're going to expect it to
be called with addAPIData, right,

118
00:08:12.064 --> 00:08:15.260
that's ultimately the action
that we're looking for.

119
00:08:15.260 --> 00:08:20.375
So, it's gonna be addAPIData
with strangerThings.

120
00:08:28.619 --> 00:08:29.405
&gt;&gt; Brian Holt: And then down here,

121
00:08:29.405 --> 00:08:32.552
we're gonna have to call done, right,
otherwise, it doesn't know that it's

122
00:08:32.552 --> 00:08:38.272
finished, so, done.
&gt;&gt; Brian Holt: So

123
00:08:38.272 --> 00:08:43.307
a big key here is we're testing kind of
the integration between the thunk and

124
00:08:43.307 --> 00:08:47.095
then eventually getting to
dispatch in the addAPIData.

125
00:08:48.180 --> 00:08:51.425
We need to test addAPIData
before we test the thunk, right?

126
00:08:51.425 --> 00:08:54.364
That's actually really,
really key here, so

127
00:08:54.364 --> 00:08:57.085
that's why addAPIData is up here, right?

128
00:08:57.085 --> 00:09:01.980
We need to be sure that this is iron clad
before we test this one because if this

129
00:09:01.980 --> 00:09:06.330
fails, right, we want this test
case to fail first, right?

130
00:09:06.330 --> 00:09:09.050
We want this one to say,
hey, this is messed up.

131
00:09:09.050 --> 00:09:12.730
And all these tests that depend
on this working need to,

132
00:09:12.730 --> 00:09:16.430
this needs to be tested
first before we get to here.

133
00:09:16.430 --> 00:09:20.433
So the fact that we've tested this first
means that I feel okay down here testing

134
00:09:20.433 --> 00:09:25.004
the integration between the two, okay?
&gt;&gt; Brian Holt: So

135
00:09:25.004 --> 00:09:26.700
that's the two things we're testing here.

136
00:09:26.700 --> 00:09:30.710
We're testing that the correct
API is being called, right?

137
00:09:30.710 --> 00:09:34.536
And then we're testing that the correct
action is being dispatched.

138
00:09:38.115 --> 00:09:40.728
&gt;&gt; Brian Holt: So now if you come in here

139
00:09:40.728 --> 00:09:45.825
and say yarn test,
hopefully we should pass,

140
00:09:45.825 --> 00:09:50.796
cool.
&gt;&gt; Brian Holt: So,

141
00:09:52.996 --> 00:09:53.971
&gt;&gt; Brian Holt: The hallmark of any good

142
00:09:53.971 --> 00:09:57.285
test is to go make sure that it actually
fails when you anticipate it should fail,

143
00:09:57.285 --> 00:09:58.470
so that's always what I do.

144
00:09:59.810 --> 00:10:02.747
I'm always suspicious of things
that pass the first time, so

145
00:10:02.747 --> 00:10:05.576
let's go into actionCreators and
make sure that it fails.

146
00:10:05.576 --> 00:10:10.996
So the first thing, let's say,
I'm gonna update the URL to 9000, right?

147
00:10:10.996 --> 00:10:16.236
I should expect that URL to fail, right?

148
00:10:16.236 --> 00:10:20.196
So now it's saying, hey,
I expected this to be 3000, and

149
00:10:20.196 --> 00:10:23.460
I got back 9000 and that's a problem.

150
00:10:23.460 --> 00:10:32.250
So that test is good.
&gt;&gt; Brian Holt: Yep, so that's good.

151
00:10:32.250 --> 00:10:35.090
So that failed the way I wanted it to, and

152
00:10:35.090 --> 00:10:40.411
let's say that this dispatch is,
I don't know, null for now.

153
00:10:44.090 --> 00:10:45.896
So let's go make sure
that that fails as well.

154
00:10:53.295 --> 00:10:55.015
&gt;&gt; Brian Holt: And that fails as well

155
00:10:55.015 --> 00:10:59.986
because it's saying, hey,
I expected to get this back, and

156
00:10:59.986 --> 00:11:04.360
it didn't get that, so
that sucks, so cool.

157
00:11:04.360 --> 00:11:06.137
That fails as well when we
anticipate it should fail.

158
00:11:13.157 --> 00:11:13.938
&gt;&gt; Brian Holt: Okay,

159
00:11:13.938 --> 00:11:18.630
go make sure that I deep roped everything.

160
00:11:20.130 --> 00:11:24.975
And it all works, okay.
&gt;&gt; Brian Holt: Any questions about

161
00:11:24.975 --> 00:11:30.572
this?
&gt;&gt; Brian Holt: To be totally honest with

162
00:11:30.572 --> 00:11:37.350
you, going back to our spec here,
&gt;&gt; Brian Holt: Mocking API responses and

163
00:11:37.350 --> 00:11:39.240
testing that, this is, I mean,

164
00:11:39.240 --> 00:11:42.764
obviously more involved than any
of the other tests we wrote.

165
00:11:42.764 --> 00:11:46.342
But I would say this is pretty good for
testing asynchronous code, right?

166
00:11:46.342 --> 00:11:49.622
It's pretty nested, right?

167
00:11:49.622 --> 00:11:52.704
We're how many layers deep,
but at the same time,

168
00:11:52.704 --> 00:11:58.018
this reads pretty well to me.
&gt;&gt; Brian Holt: So

169
00:11:58.018 --> 00:12:00.966
the fact that we can test
that in one small chunk, and

170
00:12:00.966 --> 00:12:05.322
now we have confidence that getAPIDetails
is not going to regress over time,

171
00:12:05.322 --> 00:12:08.870
unless we anticipate changing
it in some direction.

172
00:12:08.870 --> 00:12:11.740
So this is a good test case,
I'm pretty happy with this.

173
00:12:11.740 --> 00:12:14.870
Again, this is one of the big
strengths about redux, is we can

174
00:12:14.870 --> 00:12:19.200
isolate these little tiny pieces, and
then just really test them super well.

175
00:12:19.200 --> 00:12:23.106
And then you can kind of have bigger and
bigger test case that cover more and

176
00:12:23.106 --> 00:12:25.627
more of the stack to get
more of an integration,

177
00:12:25.627 --> 00:12:27.469
instead of just a unit style test.

178
00:12:27.469 --> 00:12:28.910
So, I'm a fan.

