[00:00:00]
>> Brian Holt: So let's move beyond what happens after we get done with the UI. So a handleSearchTermChange gets called cuz an event happened, right? I type black in here, right? So I get events.target.value. This is gonna be black. I'm going to create a new action based on what happened in the action creator, right?

[00:00:18]
So it's gonna be action type setSearchTerm. Action.payload is going to be black, right. And this is going to get dispatched to redux, okay. So let's go to reducers.js, okay. The rootReducer is now going to be called with the existing state, right? So the DEFAULT_STATE is gonna be something here, right?

[00:00:45]
And the action, which is the one we just created, right? It's gonna be action type setSearchTerm, an action payload black, okay. It's gonna say, okay, I'm gonna go into this switch statement based on the action type. I'm just gonna say what is the action type here, is it SET_SEARCH_TERM.

[00:01:05]
Yes, it is a SET_SEARCH_TERM. So it's going to be turn the result of setSearchTerm the reducer with state and action, right? So state here is still the same state, it's the initial state of the Redux store. And action is going to be that same action that we created in the action creator, right?

[00:01:24]
Type setSearchTerm, and payload black, right? It's then going to call object.assign with a new object, the old state. So if there was for example, other stuff here, right?
>> Brian Holt: It's not gonna overwrite that, it's only going to overwrite SearchTerm, right? That's why you have to be careful not to blow away the rest of your state.

[00:01:53]
And then it's going to overwrite only SearchTerm with whatever is in action.payload. So in this particular case it's going to be black cuz that's what the user typed. So something is going to become black, right? We're going to return this, which then gets returned here. Which then gets returned back to redux.

[00:02:10]
And whatever the results of setSearchTerm here, is going to be the new state of Redux, right? That's going to inform React, just like, hey, I have a change, right? And then React is gonna say cool, I'm gonna re-render. And then that's how we end up back at a Redux state, right.

[00:02:30]
Now Redux has a new state and then the UI is going to re-render based on the state of Redux.
>> Brian Holt: [NOISE] And that's it. [LAUGH] So like I told you, we used to have a pretty tight loop and we extended this loop quite a bit to get Redux into the application.

[00:02:52]

>> Brian Holt: So let's see that in action. It's not gonna be super exciting up front and then I'll push a branch right after this. So there is nothing in here right now, but now I can type and do it. Hopefully I'm we're not gonna see any errors.
>> Brian Holt: So let's just prove it to you really quick.

[00:03:17]
Let's go into landing.jsx. Instead of saying this, we're gonna say props.searchTerm.
>> Brian Holt: So now if we refresh nothing should be there up front but as soon as I start typing into it, it's gonna be reading that props from Redux.
>> Brian Holt: All right, what questions do you have here?

[00:03:40]
I mean the question you might ask is why? [LAUGH] Why would you do this to yourself? That's a very good question of why would you do this to yourself? As you can see here, this adds a lot of complexity, and there's multiple more steps that we need to get through.

[00:03:55]
We used to be able to see everything in one file. Like the whole loop used to be tightly wound into one file. And now we're spread across five files. It's still very predictable, right? What I showed you, this long loop that we went through, it's the same every time.

[00:04:10]
And being able to predict how your state is going to influence your app is very valuable. So it's not horrible, it's just longer. And when you're dealing with states spread across multiple different parts, right. The only thing you have to do, as you see here with landing.
>> Brian Holt: See, I just subscribed to the state right here.

[00:04:31]
So if I have another part of the application that cares about searchTerm just as much as landing does, it just has to subscribe to the store and it's magically available. So that's powerful. That's really cool and that's really the big payoff here is that only the components that care about that piece of state have to subscribe, and none of the parents have to care about it.

[00:04:52]
That's what's powerful about Redux.
>> Brian Holt: So anyway, any questions or should we keep going? Usually those people are like, nope. I hate you Redux. I don't care. Never gonna use you. And I really try not to sell it short, but I also want you to be aware of what you're getting yourself into.

[00:05:14]
Because a lot of people just start as like, well if I'm gonna use Redux I guess I have to use Redux and that is not true. Definitely not true.
>> Audience 1: I have a question about the separation of the action type?
>> Audience 1: The action creator and the action reducer.

[00:05:38]
So for example setSearchTerm. We have the constant, we've got a function that creates an action and then we have the reducer that implements the action. Why the separation? Why can't we just leverage JacaScript's functional capabilities and invoke setSearchTerm that creates a function action, and then pass that into the dispatch [INAUDIBLE].

[00:06:04]

>> Brian Holt: You're totally could. So I think rather than having the setSearchTerm here, why couldn't we just dispatch and action directly here? Is that.
>> Audience 1: Yeah. So let's say setSearchTerm was the global action, and you pass it.
>> Audience 1: You pass it the,
>> Audience 1: You pass it the SEARCH_TERM tag that was input by the user.

[00:06:29]

>> Brian Holt: Mm-hm
>> Audience 1: And then that returns a function that captured that. That then can be invoked in the reducer. So the incoming action is actually a function that you.
>> Brian Holt: Okay. So the first to answer that question, actions are always objects. And they always have a type.
>> Audience 1: Okay, and since functions are objects, they can also have a type property?

[00:07:00]

>> Brian Holt: I mean you could get there, I mean I guess I've never really thought about that. You should go create a new framework, I guess. [LAUGH]
>> Brian Holt: The answer to the question is, I'm sure it would work, right. You could definitely get that to work.
>> Brian Holt: The question is do you want to?

[00:07:27]
I never really thought about it before. I will think about it, and I will have an answer for you.

