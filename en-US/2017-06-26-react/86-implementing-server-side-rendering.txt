[00:00:00]
>> Brian Holt: The next thing I'm gonna need you to do is open .babelrc.
>> Brian Holt: If you remember, we're using import everywhere, the ES6 module system in Node. We're gonna have to translate that so Node knows how to understand it. Because Node still does not know how to do ES6 modules, right.

[00:00:19]
So we're gonna have to give it another env here, and it's actually gonna be exactly the same as test, that's not always going to be the case. That's probably often going to be the case, but we're gonna make another one called server,
>> Brian Holt: And it's gonna have plugins.

[00:00:41]

>> Brian Holt: And it's gonna have the same transform-es2015-modules-commonjs.
>> Brian Holt: Again, you could make this the same env, they're different concerns, right? What goes in the test does not necessarily gonna be what goes into the server. So I recommend against doing that despite the fact that it'd be impossible. Okay, so from here I want you to create a new file, it's gonna be called server.js.

[00:01:14]
It's going to be outside of the js directory cuz everything in the js directory is our react app. This is going to be in the top level, this is going to be our node server. And, this is just gonna be a lot of code all at once, because you need all of it for it to work.

[00:01:31]
So, just bear with me. First thing I'm gonna do, is I'm gonna say, I'm gonna use some console logging in here and that's okay.
>> Brian Holt: So no-console: 0. This is turning off the no console warning for this particular file. First thing we're gonna do up here is require('babel-register').

[00:01:55]
There's a couple of ways you can do this. I'm using babel-register, which means everything in this file itself will not be transpiled. So I can't use JSX or anything that node doesn't understand here. But everything that it requires will be run through Babel. So when I require my app, it can use JSX, it can use future ES stuff, all that's fine.

[00:02:19]
That's what Babel register does for you. It's kinda hooking into that require and running it all through Babel. There's another thing called babel-node that will actually compile the file that's being run as well. And you're welcome to use that. It's kind of up to you. So, let's just require a bunch of stuff now.

[00:02:39]
So, const express = require('express').
>> Brian Holt: const React = require('react'). const ReactDOMServer = require('react-dom/server').
>> Brian Holt: const ReactRouter = require('react-router-dom'). const _ = require('_').
>> Brian Holt: const fs = require('fs'). And const App = require('./js/App'). And something you're gonna have to do here if you recall we're using ES6 modules, so when that gets translated to being a required common js module.

[00:03:48]
Remember, we export default, right? So you're gonna have to say .default, that's just what you have to do there.
>> Brian Holt: Cuz this is going to return to you an object with one key in it, the one key in it is going to be default, sometimes you have to pull the default part off of it, okay?

[00:04:08]
From here, we're gonna pull out const StaticRouter = ReactRouter.StaticRouter.
>> Brian Holt: This StaticRouter is going to be what we're going to use to replace browser router. This works in node. Okay, const port. You can put this on whatever port suits you. I'm gonna put it on 8080.
>> Brian Holt: const baseTemplate, this is gonna be our indexer HTML file.

[00:04:46]
Is going to be equal to fs.readFileSync('./index.html').
>> Brian Holt: So, just so you're aware, this is definitely not a node course but readFileSync is going to read this file from the file system. And it's going to pause until it is finished reading. This is typically a horrible idea, however on startup it's okay, right?

[00:05:19]
Cuz this is going to be read once. If you're doing readFileSync in every request, you're gonna have a bad time, for sure. So, just be aware. Typically, you would do here is readFile, right? And then you'd provided a call back like once it was finish reading it. But here, we can do syncs and this is gonna be done once on start up and that's totally fine.

[00:05:44]

>> Brian Holt: const template = _.template(baseTemplate). What template is going to be now is a function. That when we invoke it, we pass in body. And we're going to get back our mark up inside of the indexer html file. So this is a function. Okay, that should be enough kind of setup for ourselves.

[00:06:10]
And now we're gonna say const Server = express(). Again you can do this with any different node server. We could use arrstify, we could use happy, we could use culla. I'm just using express because it's very simple and it suits our needs for today.
>> Brian Holt: And the first thing we're gonna do here is say server.use('/public', express.static('./public')).

[00:06:49]
This is saying statically serve everything that's in the public directory. So that's like all our CSS, that'll be our bundle.js, that'll be all that stuff. All the images.
>> Brian Holt: It'll also put all the correct mime types and all that kinda stuff for us, cuz that's really annoying to write yourself.

[00:07:08]

>> Brian Holt: Okay, and then after that we're gonna say server.use((req,res)). This is where we're going to be doing our templating and all that kind of stuff. So I'll pull this up so that you could see it.
>> Brian Holt: So, the first thing that we're gonna wanna do is create a context object.

[00:07:33]
This is something that's gonna be passed to react router.
>> Brian Holt: I'm gonna say const body = ReactDOMServer.renderToString.
>> Brian Holt: See now how we use React's DOM.render and then we tell it where to put it in the DOM, right? This is replacing that instead of rendering out to a DOM or something like that.

[00:07:56]
It's just gonna give you back a string of the HTML, okay. Then here, remember that we're not in JSX land, so we can't use JSX here. So we're going to fall back to that first set of skills that I taught you the very first thing of using React.createElement.

[00:08:19]
So this should all look familiar to you. So React.createElement.
>> Brian Holt: And the first most outermost layer is going to be the static router. And we're going to pass to the static router the location, which is gonna be req.url, right, that's what the user requested from the website. And we're going to pass to it the context object.

[00:08:45]
But if you remember context:context, we can shorten that down to just context. So that's what that is context:context. And then inside of that we're gonna have ReactcreateElement('App'). And we don't need to give anything to app, that's just fine, right? So that's gonna be a static router on the outside and app on the inside and that's all that's gonna be, okay?

[00:09:13]
So now we're gonna get the string which is gonna be here on body, right?
>> Brian Holt: So the reason why we're passing this context object to React router sometimes you're going to get redirected, right? Our app will never redirect because we never wrote any redirects, right? But if that happens, I wanted to show you how that you would handle that.

[00:09:39]

>> Brian Holt: So, you're gonna say: if (context.url). So this is gonna say React router is going to modify this context object that you passing to it. If there's a redirect in here, you can say res.redirect.
>> Brian Holt: And you can put the status on here if you want to like 301 or 302, depending on what you're doing.

[00:10:04]
I'm just gonna leave it off for now, context.url. I think it defaults to 301 if I remember correctly. So that's how you do that. If there is a redirect, this will send them off to wherever they need to go. Otherwise res.write, template(body: body). Then again ,we can just put body.

[00:10:29]
And then you're gonna say res.end().
>> Brian Holt: So this is service side rendering with React Router. What's amazing about this is we don't have to duplicate our logic anymore, right. We get to write one set of route definitions in the client, and it's automatically sent to node, as well.

[00:10:55]
So you have one source of truth.
>> Brian Holt: Okay, down here at the bottom, we're gonna say, console.log('listening on ${port}') to let it, we can see into the console that we're up and going. And then we're gonna say server.listen(port).
>> Brian Holt: If you want to, you can say up here console.log.

[00:11:30]
Something I like to do is req.url so I can see requests coming in and where they're going.
>> Brian Holt: And typically, you would have some sort of server logging framework, like Morgan or something like that.
>> Brian Holt: There's plenty of great nodes stuff on, for the masters. So, if that's interesting to you, go down that path.

