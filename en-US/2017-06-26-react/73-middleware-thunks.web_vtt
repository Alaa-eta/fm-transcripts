WEBVTT

1
00:00:00.472 --> 00:00:05.542
&gt;&gt; Brian Holt: What we're gonna
do now is inside of details we

2
00:00:05.542 --> 00:00:10.352
have this access get logic and
this is really

3
00:00:10.352 --> 00:00:15.040
application state in my opinion, right?

4
00:00:15.040 --> 00:00:17.478
We were requesting
something from the API and

5
00:00:17.478 --> 00:00:21.170
they were storing it right now
in the state of details right.

6
00:00:21.170 --> 00:00:22.090
But if we have Redux,

7
00:00:22.090 --> 00:00:24.240
this is probably something that
should live inside of Redux.

8
00:00:25.340 --> 00:00:29.770
The problem that we have right now is we
have no way of achieving a synchronous

9
00:00:29.770 --> 00:00:31.360
Redux, right?

10
00:00:31.360 --> 00:00:36.540
Now, don't get me wrong, we can still
just make the get request here, right?

11
00:00:36.540 --> 00:00:40.610
And then dispatch the final action
to Redux and that's acceptable.

12
00:00:40.610 --> 00:00:41.910
You could do it that way, right?

13
00:00:41.910 --> 00:00:45.468
But I would argue that there's
a better way to do it, and that's for

14
00:00:45.468 --> 00:00:48.215
Redux making the asynchronous request for
you, and

15
00:00:48.215 --> 00:00:51.106
then dispatching more actions
on top of that, right?

16
00:00:51.106 --> 00:00:55.091
So moving this axios request
from componentDidMount,

17
00:00:55.091 --> 00:00:58.530
moving that into our action creators,
right.

18
00:00:58.530 --> 00:01:00.830
That's, in my opinion, that's the goal.

19
00:01:00.830 --> 00:01:01.949
That's the best way to do it.

20
00:01:03.600 --> 00:01:06.010
But again, if we go into Action Creators.

21
00:01:06.010 --> 00:01:10.510
When we're creating actions and things
that we pass into the dispatch function.

22
00:01:10.510 --> 00:01:13.280
The only thing that Redux knows
how to understand right now

23
00:01:13.280 --> 00:01:16.520
are synchronous objects, right.

24
00:01:16.520 --> 00:01:20.190
It has to be an action with the type and
a payload and

25
00:01:20.190 --> 00:01:23.170
that's the only thing that
Redux knows how to do.

26
00:01:23.170 --> 00:01:26.300
So we need to augment somehow
the abilities of Redux.

27
00:01:26.300 --> 00:01:30.380
Now there are several ways to do this and
I'm going to show you I would say,

28
00:01:30.380 --> 00:01:35.740
one the most common and
the most popular, which is Redux Thunk.

29
00:01:35.740 --> 00:01:38.080
And there are several ways to do this.

30
00:01:38.080 --> 00:01:39.950
There's a Redux promise.

31
00:01:39.950 --> 00:01:41.660
There's Redux Observable.

32
00:01:41.660 --> 00:01:43.220
There's Redux Sagas.

33
00:01:43.220 --> 00:01:45.080
And we can chat a little bit
about what those are but

34
00:01:45.080 --> 00:01:46.910
today we're just going to do Thunks.

35
00:01:46.910 --> 00:01:50.790
And then I'll leave the more advanced use
cases for you to go discover yourself.

36
00:01:53.260 --> 00:01:55.110
So, what is a Thunk?

37
00:01:55.110 --> 00:01:57.780
Like, the answer to that question
really is a Thunk is pretty

38
00:01:57.780 --> 00:01:59.000
much just a function, right?

39
00:01:59.000 --> 00:02:03.330
It's just a real fancy
way of calling functions.

40
00:02:03.330 --> 00:02:06.110
It's a little bit more complicated
than that, it's a function

41
00:02:06.110 --> 00:02:09.420
that's going to return you a value
that's determined at run time, right?

42
00:02:09.420 --> 00:02:15.150
So if I say like var x = 5 this is
determined already statically forever,

43
00:02:15.150 --> 00:02:18.130
right, x is gonna be 5, right?

44
00:02:18.130 --> 00:02:20.170
If I make it a function
that returns something,

45
00:02:20.170 --> 00:02:23.690
that's going to be determined wherever
that function is called, right?

46
00:02:25.390 --> 00:02:26.260
So that's what a Thunk is.

47
00:02:26.260 --> 00:02:30.500
It's basically deferring when you're
gonna determine what that value is.

48
00:02:30.500 --> 00:02:33.540
So for us, we're deferring when
we're going to create the actions

49
00:02:33.540 --> 00:02:35.550
until its asynchronous
action is completed.

