[00:00:00]
>> Brian Holt: What we're gonna do now is inside of details we have this access get logic and this is really application state in my opinion, right? We were requesting something from the API and they were storing it right now in the state of details right. But if we have Redux, this is probably something that should live inside of Redux.

[00:00:25]
The problem that we have right now is we have no way of achieving a synchronous Redux, right? Now, don't get me wrong, we can still just make the get request here, right? And then dispatch the final action to Redux and that's acceptable. You could do it that way, right?

[00:00:41]
But I would argue that there's a better way to do it, and that's for Redux making the asynchronous request for you, and then dispatching more actions on top of that, right? So moving this axios request from componentDidMount, moving that into our action creators, right. That's, in my opinion, that's the goal.

[00:01:00]
That's the best way to do it. But again, if we go into Action Creators. When we're creating actions and things that we pass into the dispatch function. The only thing that Redux knows how to understand right now are synchronous objects, right. It has to be an action with the type and a payload and that's the only thing that Redux knows how to do.

[00:01:23]
So we need to augment somehow the abilities of Redux. Now there are several ways to do this and I'm going to show you I would say, one the most common and the most popular, which is Redux Thunk. And there are several ways to do this. There's a Redux promise.

[00:01:39]
There's Redux Observable. There's Redux Sagas. And we can chat a little bit about what those are but today we're just going to do Thunks. And then I'll leave the more advanced use cases for you to go discover yourself. So, what is a Thunk? Like, the answer to that question really is a Thunk is pretty much just a function, right?

[00:01:59]
It's just a real fancy way of calling functions. It's a little bit more complicated than that, it's a function that's going to return you a value that's determined at run time, right? So if I say like var x = 5 this is determined already statically forever, right, x is gonna be 5, right?

[00:02:18]
If I make it a function that returns something, that's going to be determined wherever that function is called, right? So that's what a Thunk is. It's basically deferring when you're gonna determine what that value is. So for us, we're deferring when we're going to create the actions until its asynchronous action is completed.

