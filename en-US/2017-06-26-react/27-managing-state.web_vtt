WEBVTT

1
00:00:00.590 --> 00:00:03.050
&gt;&gt; Brian Holt: Let's go inside here and
search.

2
00:00:03.050 --> 00:00:04.720
And I want you to put a header.

3
00:00:09.158 --> 00:00:13.778
&gt;&gt; Brian Holt: And a h1 with the name
of whatever you decided to call

4
00:00:13.778 --> 00:00:15.910
your video service.

5
00:00:15.910 --> 00:00:20.557
And then input type= 'text'

6
00:00:20.557 --> 00:00:25.037
placeholder ='Search'.

7
00:00:30.061 --> 00:00:30.887
&gt;&gt; Brian Holt: Cool, save that.

8
00:00:30.887 --> 00:00:32.780
Check it out, you got a nice little
header up here at the top now.

9
00:00:35.500 --> 00:00:41.713
Wouldn't it be nice if all of your stuff
just styled itself like this, right?

10
00:00:41.713 --> 00:00:42.873
That would be fun.

11
00:00:45.480 --> 00:00:46.038
&gt;&gt; Brian Holt: But yeah,

12
00:00:46.038 --> 00:00:49.016
you should be seeing this
little fixed header at the top.

13
00:00:52.425 --> 00:00:56.477
&gt;&gt; Brian Holt: So
now we have this input right here.

14
00:00:56.477 --> 00:00:59.529
It doesn't really do anything
particularly interesting,

15
00:00:59.529 --> 00:01:02.470
I'll just put some inputs to that header.

16
00:01:02.470 --> 00:01:04.950
But we have no access to this
input anywhere in the header.

17
00:01:04.950 --> 00:01:09.650
So what we need now is we need react to
keep track of whatever is in that input.

18
00:01:09.650 --> 00:01:13.480
Right now,
we refer to this as an untracked input.

19
00:01:15.260 --> 00:01:19.956
&gt;&gt; Brian Holt: Okay, so
React has this other ability that

20
00:01:19.956 --> 00:01:24.658
we have not yet used called state, right?

21
00:01:24.658 --> 00:01:29.881
So I guess something that we didn't
mention is if we go down here to show

22
00:01:29.881 --> 00:01:35.469
card, we have this props.title,
props.year, props.description.

23
00:01:35.469 --> 00:01:38.830
This data, this props object is immutable.

24
00:01:40.560 --> 00:01:41.490
You cannot change it.

25
00:01:41.490 --> 00:01:44.410
If I say props.poster
equals something else

26
00:01:44.410 --> 00:01:46.030
it's not gonna actually change it, right?

27
00:01:46.030 --> 00:01:48.370
In fact,
I think reactable will give you an error.

28
00:01:48.370 --> 00:01:49.956
Or in other words, don't change it.

29
00:01:49.956 --> 00:01:55.350
[LAUGH] So, things that pass down
from the parent to the child,

30
00:01:55.350 --> 00:01:57.600
can not be changed in anyway shape or
form.

31
00:01:57.600 --> 00:02:00.520
It's totally up to the parent
what to pass down and

32
00:02:00.520 --> 00:02:02.600
the child just gets whatever it gets,
right?

33
00:02:05.613 --> 00:02:10.090
&gt;&gt; Brian Holt: So that's useful,
however, sometimes we need state.

34
00:02:10.090 --> 00:02:11.380
We need things that are stateful.

35
00:02:12.650 --> 00:02:15.819
So react has this other concept
beside props called state.

36
00:02:17.230 --> 00:02:21.661
So the peculiar thing about state is
a component can have its own state, right?

37
00:02:21.661 --> 00:02:27.540
If we have some sort of if I click on s
video and it goes bold or un-bold, right?

38
00:02:27.540 --> 00:02:28.650
Depending on if I click on it or not.

39
00:02:30.360 --> 00:02:33.960
This particular component can
keep track of its own state, but

40
00:02:33.960 --> 00:02:35.800
only a component can modify its own state.

41
00:02:36.930 --> 00:02:43.660
So for example, if ShowCard has state,
the search can't modify

42
00:02:43.660 --> 00:02:49.290
a ShowCard state and vice versa showCard
can't modify a searches state, right?

43
00:02:49.290 --> 00:02:52.340
They can only each modify their own state.

44
00:02:53.530 --> 00:02:55.000
So again, if one of them has a problem,

45
00:02:55.000 --> 00:02:59.270
you know that the problem lies
right there with the state.

46
00:03:00.980 --> 00:03:06.320
Furthermore, let's say I gave ShowCard
state and if I have a problem

47
00:03:06.320 --> 00:03:10.480
with Atlanta state here, I can be assured
that billions didn't cause it, right?

48
00:03:10.480 --> 00:03:14.490
It must live within Atlanta so it can
only modify it's own instance, right?

49
00:03:15.860 --> 00:03:17.490
So let's take a look at what
that actually looks like.

50
00:03:18.634 --> 00:03:20.646
&gt;&gt; Brian Holt: If you
go here to Search and

51
00:03:20.646 --> 00:03:25.700
you wanna make Search be
able to have it's own state.

52
00:03:25.700 --> 00:03:28.760
So far we've been using what are called

53
00:03:28.760 --> 00:03:32.720
functional components often called
stateless functional components.

54
00:03:32.720 --> 00:03:35.460
They are stateless functional
components because as you see here,

55
00:03:35.460 --> 00:03:38.360
there's no mechanism to get the state.

56
00:03:38.360 --> 00:03:42.042
So we need to convert this to
a different kind of component,

57
00:03:42.042 --> 00:03:44.629
which is called an ES6 class component.

58
00:03:44.629 --> 00:03:49.590
So what we're gonna do here is we're
just gonna do a little bit of change.

59
00:03:49.590 --> 00:03:57.510
I'm just gonna say class Search extends,
&gt;&gt; Brian Holt: Component,

60
00:03:57.510 --> 00:04:00.954
and we're gonna import Component up here.

61
00:04:08.021 --> 00:04:09.597
&gt;&gt; Brian Holt: And
we're going to remove that.

62
00:04:20.461 --> 00:04:24.508
&gt;&gt; Brian Holt: Okay, and
then this is going to be a render method.

63
00:04:31.559 --> 00:04:32.700
&gt;&gt; Brian Holt: It's kind of
awkward to get this going.

64
00:04:32.700 --> 00:04:36.360
But the nice thing, again,
is that I don't have to format this.

65
00:04:36.360 --> 00:04:38.190
Prettier it's gonna do it for
me voluntarily.

66
00:04:40.720 --> 00:04:45.170
Lo and behold,
&gt;&gt; Brian Holt: It looks like this.

67
00:04:45.170 --> 00:04:52.760
Okay, so I have class Search extends
Component, I imported a Component up here.

68
00:04:52.760 --> 00:04:57.869
You are equally working
to say react.component.

69
00:04:57.869 --> 00:04:59.718
This is just how I prefer to do it.

70
00:05:03.602 --> 00:05:06.403
&gt;&gt; Brian Holt: Okay, an lint error,
for now, we're gonna fix that.

71
00:05:06.403 --> 00:05:09.541
Basically what it's saying right now is,
hey you don't have any state,

72
00:05:09.541 --> 00:05:11.730
this should be a stateless
functional component.

73
00:05:13.700 --> 00:05:17.353
But we're going to need
a state here in just a second.

74
00:05:17.353 --> 00:05:20.729
So ES6 classes,

75
00:05:20.729 --> 00:05:25.460
classes came with ES6.

76
00:05:27.590 --> 00:05:29.938
Much to the joy of Java
developers everywhere.

77
00:05:29.938 --> 00:05:31.550
[LAUGH] Just kidding.

78
00:05:31.550 --> 00:05:33.440
I like to prod Java developers.

79
00:05:35.110 --> 00:05:38.890
Keep in mind that these are like pseudo
classes in the sense that these are not

80
00:05:38.890 --> 00:05:42.670
true classical inheritance, so
don't treat them like Java classes.

81
00:05:42.670 --> 00:05:47.200
These are still protypal inheritance,
just like it's always been in JavaScript.

82
00:05:47.200 --> 00:05:49.810
This is just a different way
to write protypal inheritance.

83
00:05:49.810 --> 00:05:51.760
So definitely keep that in mind.

84
00:05:54.440 --> 00:06:01.139
One thing about react component classes
is that they must have a render method.

85
00:06:01.139 --> 00:06:04.520
100% of the time without exception,
must have a render method.

86
00:06:05.700 --> 00:06:07.210
So just keep that in mind.

87
00:06:08.430 --> 00:06:10.140
And the render method must return markup.

88
00:06:11.860 --> 00:06:15.370
That's really the only hard
requirements of react components.

89
00:06:16.620 --> 00:06:19.430
Everything else is kind of optional, okay?

90
00:06:19.430 --> 00:06:21.522
&gt;&gt; Speaker 2: And
the rendered math has the return markup?

91
00:06:21.522 --> 00:06:22.266
&gt;&gt; Brian Holt: Mm-hm.

92
00:06:26.362 --> 00:06:28.216
&gt;&gt; Brian Holt: Yep, yep, yep.

93
00:06:28.216 --> 00:06:30.683
Just like those stateless
functional components,

94
00:06:30.683 --> 00:06:32.810
they also must return markup, right?

95
00:06:32.810 --> 00:06:33.620
It's the same kind of idea.

96
00:06:33.620 --> 00:06:38.538
So you can think of those function bodies
of the stateless functional components as

97
00:06:38.538 --> 00:06:40.586
being the same as render, right?

98
00:06:45.968 --> 00:06:51.376
&gt;&gt; Brian Holt: Okay, so now we have that,
we've converted this to an ES6

99
00:06:51.376 --> 00:06:58.082
class,
&gt;&gt; Brian Holt: [INAUDIBLE]

100
00:06:58.082 --> 00:07:00.639
we're gonna fix that momentarily.

101
00:07:04.022 --> 00:07:09.247
&gt;&gt; Brian Holt: So what we're gonna do
here is we're gonna make a constructor.

102
00:07:09.247 --> 00:07:14.910
And the constructor takes in props,
and then it passes props up.

103
00:07:18.120 --> 00:07:25.010
This is kind of annoying about ES6
classes, you just have to do this.

104
00:07:25.010 --> 00:07:26.927
This is just boiler plate that
you have to do it this way.

105
00:07:26.927 --> 00:07:29.320
It takes in props and
you have to pass it up.

106
00:07:31.690 --> 00:07:33.799
Then here we're going to say this.state.

107
00:07:35.120 --> 00:07:39.860
We're initializing our state here in the
constructor and we're gonna keep track of

108
00:07:39.860 --> 00:07:46.270
the search term which is going to be,
this is some sort of debug statement.

109
00:07:50.818 --> 00:07:55.124
&gt;&gt; Brian Holt: Eventually we're gonna
make this just an empty string to be

110
00:07:55.124 --> 00:07:59.860
initialized with but I want to put
this debug statement there, so

111
00:07:59.860 --> 00:08:02.634
you can kinda see how we're using it.

112
00:08:02.634 --> 00:08:05.856
So now, we have some state for search.

113
00:08:10.109 --> 00:08:16.395
&gt;&gt; Brian Holt: So what I want you to
do is I want you to come in here and

114
00:08:16.395 --> 00:08:23.572
on the input say
value={this.state.searchTerm}.

115
00:08:30.397 --> 00:08:33.302
&gt;&gt; Brian Holt: Okay, so
you should be able to save that and

116
00:08:33.302 --> 00:08:38.146
come back over to your browser, and
you should see here the value of this

117
00:08:38.146 --> 00:08:42.450
is now tied to whatever the initial
value of state was, right?

118
00:08:44.937 --> 00:08:46.810
&gt;&gt; Brian Holt: Now I want you to try and
type in there.

119
00:08:52.127 --> 00:08:55.830
&gt;&gt; Brian Holt: I'm typing I promise,
I'm not just making noises.

120
00:08:55.830 --> 00:08:56.710
We broke it, right?

121
00:08:56.710 --> 00:08:57.520
It doesn't work.

122
00:08:57.520 --> 00:08:58.849
&gt;&gt; Speaker 3: Log me out.

123
00:08:58.849 --> 00:09:03.630
&gt;&gt; Brian Holt: [LAUGH] So,
what happened, right?

124
00:09:03.630 --> 00:09:04.570
We broke the browser.

125
00:09:06.280 --> 00:09:07.960
That's actually pretty hard to do, right?

126
00:09:07.960 --> 00:09:11.450
Typically, breaking an input
like this takes work.

127
00:09:11.450 --> 00:09:17.110
[LAUGH] So, let's evaluate
what's actually happening here.

128
00:09:17.110 --> 00:09:20.750
So I press a key, right?

129
00:09:20.750 --> 00:09:24.940
That fires off an event,
that event is caught by react and

130
00:09:24.940 --> 00:09:27.770
then react says, an event happened, right?

131
00:09:27.770 --> 00:09:29.218
I'm gonna kick off a re-render.

132
00:09:29.218 --> 00:09:34.490
So it re-renders everything and then finds
the diff of between what was there and

133
00:09:34.490 --> 00:09:36.910
what you're trying to put there now,
right?

134
00:09:36.910 --> 00:09:42.450
So, in this particular case, if I type
a letter, and then it re-renders, and

135
00:09:42.450 --> 00:09:49.210
it goes back to re-render this value right
here, what is this .state.searchTerm?

136
00:09:49.210 --> 00:09:52.420
Well, this is some sort of
de-bug statement, right?

137
00:09:52.420 --> 00:09:55.760
And as soon as I press that key,
nothing is modifying that, right?

138
00:09:55.760 --> 00:10:00.250
So, every time I kick off an event you
still end up with that same string, right?

139
00:10:00.250 --> 00:10:03.340
Hence, that's why it never changes, right?

140
00:10:03.340 --> 00:10:08.490
Because whenever we kick off those events,
nothing goes back and modifies the state.

141
00:10:08.490 --> 00:10:10.670
So it's aways gonna re-render what it has.

142
00:10:11.850 --> 00:10:13.270
That make sense?

143
00:10:13.270 --> 00:10:14.710
So now we need to de-break that.

144
00:10:17.030 --> 00:10:20.441
So we need to give it an onChange handler.

145
00:10:20.441 --> 00:10:23.064
So onChange =

146
00:10:23.064 --> 00:10:30.527
{this.handleSearchTermChange}.

147
00:10:30.527 --> 00:10:34.829
And we'll create a method called

148
00:10:34.829 --> 00:10:41.127
handleSearchTermChange that
takes an event and

149
00:10:41.127 --> 00:10:46.350
calls this.setState and searchTerm,

150
00:10:46.350 --> 00:10:52.220
which is going to be event.target.value.

151
00:10:52.220 --> 00:10:56.830
So now we have this method
here handleSearchTermChange

152
00:10:58.400 --> 00:11:02.400
which is going to get called every time a
change event happens on this input, right?

153
00:11:03.640 --> 00:11:08.094
It in turn it's gonna call this.setState
which is the way that you change state.

154
00:11:09.951 --> 00:11:15.520
&gt;&gt; Brian Holt: So again it's do not
do this.state.searchTerm = "blah",

155
00:11:15.520 --> 00:11:17.740
don't do that.

156
00:11:17.740 --> 00:11:22.310
The reason being is this will work,
this actually will modify the state.

157
00:11:22.310 --> 00:11:25.090
React doesn't put any
safeguards in front of you.

158
00:11:25.090 --> 00:11:28.950
The problem is if you do that, React
doesn't know something changed, right?

159
00:11:28.950 --> 00:11:32.110
It's not observing for
those sorts of changes.

160
00:11:32.110 --> 00:11:37.280
You need to let React know,
hey React, I called set state,

161
00:11:37.280 --> 00:11:39.620
now you need to kick off
another re-render, right?

162
00:11:39.620 --> 00:11:41.640
So that's how that happens.

163
00:11:41.640 --> 00:11:46.640
So that's why we call this.setState, this
is just a way that we let React know, hey,

164
00:11:46.640 --> 00:11:52.250
I'm updating this,
you need to kick off a re-render.

165
00:11:52.250 --> 00:11:53.840
I'm simplifying there.

166
00:11:53.840 --> 00:11:56.190
To be honest with you,
it's actually batching your changes.

167
00:11:56.190 --> 00:11:58.210
So you can call setState
a bunch of times in a row and

168
00:11:58.210 --> 00:12:00.310
it'll only kick off one re-render.

169
00:12:00.310 --> 00:12:04.540
So you're kind of opting into that
optimization path by using set state.

170
00:12:04.540 --> 00:12:06.930
Or in other words,
do not modify state directly.

171
00:12:06.930 --> 00:12:11.060
That's the takeaway here, use setState.

172
00:12:13.320 --> 00:12:17.250
So if I save this,
still not quite there, right?

173
00:12:17.250 --> 00:12:19.140
This still doesn't actually work.

174
00:12:19.140 --> 00:12:23.870
If you go back here and refresh and

175
00:12:23.870 --> 00:12:27.290
I type in here, you're gonna get
all sorts of error messages.

176
00:12:27.290 --> 00:12:29.200
It says you can't read
set state of undefined.

177
00:12:30.990 --> 00:12:31.490
Why?

178
00:12:33.040 --> 00:12:36.970
Okay so I kicks off in of it.

179
00:12:36.970 --> 00:12:38.600
This is new as well.

180
00:12:38.600 --> 00:12:42.480
This finally are long enough that
prettier set I'm gonna wrap this.

181
00:12:43.610 --> 00:12:46.477
So while this sets is weird for
HTML to be written this way,

182
00:12:46.477 --> 00:12:48.652
this is very normal to
see React in this way.

183
00:12:48.652 --> 00:12:52.137
Once you start recon this really long HTML
elements it's just easier to see it in

184
00:12:52.137 --> 00:12:53.970
multiple lines, it's how that happen.

185
00:12:55.260 --> 00:13:02.840
Okay so here, handleSearchTerm this
gets called on every event, right?

186
00:13:02.840 --> 00:13:04.530
Where is this event handler called?

187
00:13:06.810 --> 00:13:08.031
The answer is, I don't know.

188
00:13:08.031 --> 00:13:10.680
I don't know where it's getting called but
the answer is not here, right?

189
00:13:10.680 --> 00:13:13.640
It's not getting called
within this context.

190
00:13:13.640 --> 00:13:18.320
So what is this wherever handle
search term is being called?

191
00:13:19.550 --> 00:13:24.920
Again, I don't know, but it's not search
and it needs to be search, right?

192
00:13:24.920 --> 00:13:28.002
But because we're called
this.setState on search,

193
00:13:28.002 --> 00:13:30.419
we want to modify that instance of search.

194
00:13:30.419 --> 00:13:35.400
So in another words we need to bind
the context to be the correct context.

195
00:13:35.400 --> 00:13:40.409
There's several ways to do this.I will
show you the bad way, which inevitably

196
00:13:40.409 --> 00:13:45.360
you'll see someone write it this way
because it's the lazy way to writing it.

197
00:13:45.360 --> 00:13:49.580
I could totally put.bind this, right?

198
00:13:49.580 --> 00:13:51.320
I'll save this.

199
00:13:51.320 --> 00:13:52.690
I'm sure Lint is going to yell at me.

200
00:13:54.230 --> 00:13:56.400
Js prac should not use .bind.

201
00:13:56.400 --> 00:14:00.160
Good job, but it'll work, right?

202
00:14:01.620 --> 00:14:03.950
Now this works, and
the state is being set correctly.

203
00:14:05.880 --> 00:14:06.670
Why is this bad?

204
00:14:08.150 --> 00:14:09.070
This is bad because,

205
00:14:09.070 --> 00:14:12.860
if you remember I was telling you,
render gets called a lot, right?

206
00:14:12.860 --> 00:14:16.370
It gets called every single time that
an event gets kicked off to make sure

207
00:14:16.370 --> 00:14:17.699
something changed or didn't change.

208
00:14:20.640 --> 00:14:23.579
What happens when I call .bind?

209
00:14:23.579 --> 00:14:26.710
It's creating a new function every
single time render gets called.

210
00:14:27.780 --> 00:14:31.786
Which, functions are cheap but
they certainly are not free.

211
00:14:31.786 --> 00:14:35.280
And particularly bind,
bind's a pretty expensive one.

212
00:14:36.280 --> 00:14:39.200
Recent versions of Chrome are a lot
better, but if you're more than two or

213
00:14:39.200 --> 00:14:40.740
three versions old of Chrome, or

214
00:14:40.740 --> 00:14:44.430
pretty much any other browser,
it's really expensive.

215
00:14:44.430 --> 00:14:47.230
So, in other words,
this is bad, do not do it, and

216
00:14:47.230 --> 00:14:49.720
if you see your colleagues do it,
just throw something at them, right?

217
00:14:50.880 --> 00:14:52.220
So that one's out.

218
00:14:54.570 --> 00:15:01.115
So our answer is here, we're gonna
say this.handleSearchTermChange

219
00:15:01.115 --> 00:15:06.059
= this.handleSearchTermChange.bind(this).

220
00:15:07.244 --> 00:15:10.270
&gt;&gt; Brian Holt: This will happen
once in the constructor and

221
00:15:10.270 --> 00:15:12.326
then it's forever working.

222
00:15:14.475 --> 00:15:16.420
&gt;&gt; Brian Holt: So
this looks super awkward, right?

223
00:15:18.360 --> 00:15:23.910
But now any time
handleSearchTermChange gets called,

224
00:15:23.910 --> 00:15:26.240
we are guaranteed it is going
to be in the right context.

225
00:15:27.560 --> 00:15:30.910
So again, if we come in here,
now this works again,

226
00:15:30.910 --> 00:15:32.630
and we're not getting any errors.

227
00:15:37.826 --> 00:15:42.260
&gt;&gt; Brian Holt: So you'll see this a lot.

228
00:15:42.260 --> 00:15:46.170
This is valid ES6 today, everything works.

229
00:15:46.170 --> 00:15:50.490
This is the way, for example for
a long time and that's right at this way.

230
00:15:53.930 --> 00:16:01.653
&gt;&gt; Speaker 4: Supposing arrow function
is just as expensive as using bind.

231
00:16:01.653 --> 00:16:06.110
&gt;&gt; Brian Holt: Yeah, if you're creating
an arrow function inside of here, yeah.

232
00:16:06.110 --> 00:16:06.610
It is.

