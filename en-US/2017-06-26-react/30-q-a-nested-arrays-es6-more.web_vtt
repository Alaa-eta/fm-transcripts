WEBVTT

1
00:00:00.025 --> 00:00:04.058
&gt;&gt; Brian Holt: V3-10 is pushed for
those that need it.

2
00:00:04.058 --> 00:00:06.910
&gt;&gt; Speaker 2: So now that the search

3
00:00:06.910 --> 00:00:12.932
component can filter
based on a search term,

4
00:00:12.932 --> 00:00:20.250
how do we use the route on
the client app component?

5
00:00:20.250 --> 00:00:24.680
And pass a search term
to a search component so

6
00:00:24.680 --> 00:00:31.220
that as we navigate to the landing page
to the search results page we get.

7
00:00:31.220 --> 00:00:32.264
&gt;&gt; Brian Holt: Yes cuz we had that little

8
00:00:32.264 --> 00:00:34.730
search box on the landing page?
&gt;&gt; Speaker 2: Yeah.

9
00:00:36.130 --> 00:00:36.670
&gt;&gt; Brian Holt: The answer to

10
00:00:36.670 --> 00:00:39.644
that question is there
are several ways you can do that.

11
00:00:39.644 --> 00:00:45.030
You could have

12
00:00:45.030 --> 00:00:49.430
probably the app keep track of
the landing or the search term.

13
00:00:49.430 --> 00:00:55.480
And then it would pass that both into the
landing page and the search page, right?

14
00:00:55.480 --> 00:01:02.870
So if we go back here to app.jsx
&gt;&gt; Brian Holt: Climbedapp.jsx.

15
00:01:02.870 --> 00:01:05.500
We would make this a useful component and

16
00:01:05.500 --> 00:01:11.340
then it would pass the search term both
into landing and into search right?

17
00:01:11.340 --> 00:01:15.900
And then it would keep track of it so
in other words you find a common ancestor.

18
00:01:15.900 --> 00:01:19.370
The ancestor keeps track of it and
then passes into both the children.

19
00:01:20.660 --> 00:01:23.480
That is how I would do
it without using redux.

20
00:01:23.480 --> 00:01:28.271
The real answer to your question is how

21
00:01:28.271 --> 00:01:32.740
are we going to do it, with Redux.

22
00:01:32.740 --> 00:01:36.600
That segways into a thought I
wanted to say before we left.

23
00:01:36.600 --> 00:01:41.950
We are going to build this entire
application besides that, with React and

24
00:01:41.950 --> 00:01:43.430
no Redux.

25
00:01:43.430 --> 00:01:46.540
React solves almost all
of your problem and

26
00:01:46.540 --> 00:01:50.700
reducts is a really big hammer
that only sometimes do you need.

27
00:01:50.700 --> 00:01:55.400
And I'm going to say as
much as rarely need, right.

28
00:01:55.400 --> 00:01:58.450
Do not start building your applications
with Redux out of the box cuz

29
00:01:58.450 --> 00:02:00.370
it adds a lot of complexity to your app.

30
00:02:00.370 --> 00:02:02.980
And React solves most of it by itself,
right?

31
00:02:02.980 --> 00:02:06.680
What I showed you here scales
to large applications.

32
00:02:06.680 --> 00:02:11.068
To the point at Netflix we still were not
using Redux in most of our applications.

33
00:02:13.866 --> 00:02:17.219
&gt;&gt; Speaker 3: Yeah, I guess related to

34
00:02:17.219 --> 00:02:22.180
data fetching without Redux.
&gt;&gt; Brian Holt: How do you do that?

35
00:02:22.180 --> 00:02:25.040
So data fetching without Redux.

36
00:02:25.040 --> 00:02:28.442
There is a specific section on this,
we will go over it, but the answer is,

37
00:02:28.442 --> 00:02:34.916
is inside of your React components.
&gt;&gt; Brian Holt: So React

38
00:02:34.916 --> 00:02:40.860
can take care of everything that redux
can, 100 percent for sure, no problem.

39
00:02:43.020 --> 00:02:44.260
Well, I guess problem right.

40
00:02:44.260 --> 00:02:46.940
Eventually you're gonna run into a problem
which is where Redox comes in, right.

41
00:02:48.240 --> 00:02:52.480
&gt;&gt; Speaker 4: I feel like Redux was so

42
00:02:52.480 --> 00:02:56.760
new and cool and everybody wants to
reach for the cool, new, complex

43
00:02:58.640 --> 00:03:02.430
thing, versus looking at,
what is it solving.

44
00:03:02.430 --> 00:03:03.860
Why do I need it?

45
00:03:03.860 --> 00:03:08.140
First, it's just like kind
of the cult band wagon.

46
00:03:08.140 --> 00:03:09.570
&gt;&gt; Brian Holt: Definitely when like and

47
00:03:09.570 --> 00:03:12.720
eventually it got to the point where
you just said react Redux right?

48
00:03:12.720 --> 00:03:15.080
They just kind of went together
in the same breath and

49
00:03:15.080 --> 00:03:19.040
that's not fair like react
really stands on it's own.

50
00:03:19.040 --> 00:03:24.530
If you talk to like Ryan Florence,
again one of the authors of React router,

51
00:03:24.530 --> 00:03:28.140
he said that he literally never uses
Redux and he always just uses React.

52
00:03:28.140 --> 00:03:30.210
I'm not too far away from that.

53
00:03:30.210 --> 00:03:34.960
There is a point where I will use Redux,
&gt;&gt; Brian Holt: And

54
00:03:34.960 --> 00:03:38.430
we'll definitely address more
of that when we get to Redux.

55
00:03:38.430 --> 00:03:41.600
But I want to show you that you can
build a big application just with React.

56
00:03:42.880 --> 00:03:44.650
And most the time that's okay.

57
00:03:44.650 --> 00:03:48.450
There's a great blog post from Dan Abramov
called You Might Not Need Redux.

58
00:03:48.450 --> 00:03:54.687
And so that's a good one to read as well.
&gt;&gt; Speaker 3: Even for

59
00:03:54.687 --> 00:03:59.640
scalable apps?
&gt;&gt; Brian Holt: For sure.

60
00:03:59.640 --> 00:04:03.009
You can write pretty big
applications in React with no Redux.

61
00:04:04.890 --> 00:04:10.060
React is like the state management thing,

62
00:04:10.060 --> 00:04:14.654
like I showed you here in search, this

63
00:04:14.654 --> 00:04:19.930
scales to large applications for sure.
&gt;&gt; Speaker 4: There's

64
00:04:19.930 --> 00:04:21.288
more questions from chat.
&gt;&gt; Brian Holt: Cool.

65
00:04:24.064 --> 00:04:25.270
&gt;&gt; Speaker 4: First a funny comment.

66
00:04:25.270 --> 00:04:27.710
He says I also got a job
because of version two.

67
00:04:27.710 --> 00:04:30.920
And I'll sell the new version three stuff.

68
00:04:30.920 --> 00:04:36.420
But I'm seeing tomorrow at my work.
&gt;&gt; Brian Holt: That's

69
00:04:36.420 --> 00:04:38.825
awesome.
&gt;&gt; Speaker 4: What about nested arrays of

70
00:04:38.825 --> 00:04:40.469
objects which contain nested arrays of

71
00:04:40.469 --> 00:04:44.680
objects?
&gt;&gt; Speaker 4: Normalizer.

72
00:04:45.830 --> 00:04:46.900
&gt;&gt; Brian Holt: Yeah, there's a library

73
00:04:46.900 --> 00:04:50.110
called Normalizer, or
there's like a Redux normalizer.

74
00:04:50.110 --> 00:04:52.300
There's several ways to normalize that.

75
00:04:52.300 --> 00:04:55.490
Which is basically to say like,
take crazy structures of data and

76
00:04:55.490 --> 00:04:57.960
turn them into a usable sort of data.

77
00:04:57.960 --> 00:05:01.580
There's a bunch of ways to do that, Redux
has different ways of doing it, you don't

78
00:05:01.580 --> 00:05:08.010
necessarily need Redux to do that though.
&gt;&gt; Speaker 4: This one's an ES6 question

79
00:05:08.010 --> 00:05:09.887
about arrow function, I don't know.
&gt;&gt; Brian Holt: Okay,

80
00:05:09.887 --> 00:05:10.940
go ahead.
&gt;&gt; Speaker 4: I'd say,

81
00:05:10.940 --> 00:05:15.970
that one should probably look at
Cal Simpson's ES6 The Right Parts

82
00:05:15.970 --> 00:05:21.130
if you got questions on arrow
functions cuz Cala Simpson lays it

83
00:05:21.130 --> 00:05:23.760
in glorious detail in this course.
&gt;&gt; Brian Holt: Yeah,

84
00:05:23.760 --> 00:05:25.340
way better than I do, for sure.

85
00:05:25.340 --> 00:05:26.154
I watch his courses, so

86
00:05:26.154 --> 00:05:32.764
I can tell you the same things.
&gt;&gt; Speaker 4: Will

87
00:05:32.764 --> 00:05:36.274
we cover hooking up our
client-side app to a back end,

88
00:05:36.274 --> 00:05:38.960
or server-side?
&gt;&gt; Brian Holt: Yeah, so

89
00:05:38.960 --> 00:05:44.350
you saw the ratings API thing that I
built for you that's inside of the app.

90
00:05:44.350 --> 00:05:46.066
We'll definitely be hooking it to our fake

91
00:05:46.066 --> 00:05:54.667
API.
&gt;&gt; Speaker 4: Yes,

92
00:05:54.667 --> 00:05:58.004
all of these last minute Q&amp;As
will be available to watch

93
00:05:58.004 --> 00:06:03.780
Tonight.
&gt;&gt; Speaker 4: There's

94
00:06:03.780 --> 00:06:07.234
a few people throwing
in rxjs into chat but

95
00:06:07.234 --> 00:06:11.880
I didn't really see a good
time to really talk about it.

96
00:06:11.880 --> 00:06:17.860
But using rx with React.
&gt;&gt; Brian Holt: So I love rxjs.

97
00:06:18.970 --> 00:06:22.290
It is crazy awesome and
you should definitely watch course in for

98
00:06:22.290 --> 00:06:28.150
the masters, if you are interested
in RX stuff, or Kyle's,

99
00:06:28.150 --> 00:06:31.680
either one of those are really good.
&gt;&gt; Speaker 4: Yeah he just recorded,

100
00:06:31.680 --> 00:06:36.180
last Saturday, an advanced asynchronous
programming in JavaScript which covers

101
00:06:36.180 --> 00:06:39.700
more real world applications of RX.
&gt;&gt; Brian Holt: Perfect.

102
00:06:39.700 --> 00:06:42.640
So as far as it directly applied to react,
I

103
00:06:43.900 --> 00:06:48.910
would say that there is no special
place that it goes in react.

104
00:06:48.910 --> 00:06:53.950
In other words you would use RX in react
as you would in any other program and

105
00:06:53.950 --> 00:06:55.410
there is no special hook into it.

106
00:06:56.570 --> 00:07:01.410
Like there is no react RX or
anything like that as far as I know or

107
00:07:01.410 --> 00:07:07.170
as far as I would want to use, so,
like you could like an observable

108
00:07:07.170 --> 00:07:11.630
emitting a Jax client or web socket client
but that would not be any different for

109
00:07:11.630 --> 00:07:15.500
react like it would for anything else.
&gt;&gt; Speaker 4: I think the point is that

110
00:07:15.500 --> 00:07:18.890
React just renders the data, right?
&gt;&gt; Brian Holt: Yeah.

111
00:07:18.890 --> 00:07:19.980
&gt;&gt; Speaker 4: However you're dealing

112
00:07:19.980 --> 00:07:22.500
with data and handlers and

113
00:07:22.500 --> 00:07:25.230
stuff could be handled by Rx.
&gt;&gt; Brian Holt: Exactly.

114
00:07:25.230 --> 00:07:26.680
&gt;&gt; Speaker 4: And once the observable

115
00:07:26.680 --> 00:07:31.885
kicks out data, then you would want
to render that data to a component.

116
00:07:31.885 --> 00:07:34.240
&gt;&gt; Brian Holt: Right.

117
00:07:34.240 --> 00:07:36.222
&gt;&gt; Speaker 4: Another question,

118
00:07:36.222 --> 00:07:40.658
any thoughts on using
graphic QL with React?

119
00:07:40.658 --> 00:07:45.551
I think that's the same thing where
you're just pulling the data and

120
00:07:45.551 --> 00:07:49.360
rendering it to a component, right?
&gt;&gt; Brian Holt: It's a tiny bit more

121
00:07:49.360 --> 00:07:53.553
opinionated, so I considered covering it
today, but that would Covering GraphQL

122
00:07:53.553 --> 00:07:58.906
would be literally a full nother day.
&gt;&gt; Brian Holt: The cool

123
00:07:58.906 --> 00:08:02.752
thing about using GraphQL
with React is that you can

124
00:08:02.752 --> 00:08:07.380
make components declare
their own data dependencies.

125
00:08:07.380 --> 00:08:11.710
So basically your component says,
I require user name, and first name and

126
00:08:11.710 --> 00:08:17.290
last name from the API, and
then as you build up your component tree,

127
00:08:17.290 --> 00:08:19.780
at the top level you'll
gather all of the queries.

128
00:08:19.780 --> 00:08:23.430
And then send that to GraphQL, and
then feed that back down to your tree.

129
00:08:23.430 --> 00:08:27.620
So basically the fact
that you're including

130
00:08:27.620 --> 00:08:31.130
a component will then be
sending that data to an API.

131
00:08:31.130 --> 00:08:34.730
And the API will be automatically feeding
that back down into the component,

132
00:08:34.730 --> 00:08:36.380
it's really slick.

133
00:08:36.380 --> 00:08:39.120
It's declarative data dependencies.

134
00:08:40.410 --> 00:08:46.080
I did some helping with Falcor which
is the Netflix version of that.

135
00:08:46.080 --> 00:08:48.200
And you can do a similar
thing as well with Falcor.

136
00:08:49.300 --> 00:08:51.060
It's really cool, it's really sleek.

137
00:08:51.060 --> 00:08:55.140
And then GraphQL is the name of
the language that you declare

138
00:08:55.140 --> 00:08:59.840
those dependencies in, and
then Relay is the name of the serious.

139
00:08:59.840 --> 00:09:03.740
Relay or Apollo are the two big
ones that you feed that to.

140
00:09:03.740 --> 00:09:07.625
So a whole nother course, really cool, but

141
00:09:07.625 --> 00:09:12.245
we're not gonna talk about it.
&gt;&gt; Speaker 4: Sounds like another

142
00:09:12.245 --> 00:09:16.110
author or you should come back and do.
&gt;&gt; Brian Holt: Not me,

143
00:09:16.110 --> 00:09:18.120
I think it's really cool,
I don't know too much about it though.

144
00:09:20.080 --> 00:09:24.870
But yes, there definitely
should be a course on GraphQL.

145
00:09:24.870 --> 00:09:25.400
&gt;&gt; Speaker 4: Well, yeah,

146
00:09:25.400 --> 00:09:30.100
I mean, I think we've had like
four authors propose GraphQL.

147
00:09:30.100 --> 00:09:33.440
But it's like GraphQL on Angular,

148
00:09:33.440 --> 00:09:36.600
GraphQL on Express, GraphQL-
&gt;&gt; Brian Holt: Yeah.

149
00:09:36.600 --> 00:09:37.150
&gt;&gt; Speaker 4: It's like there's so

150
00:09:37.150 --> 00:09:40.070
many different contexts of using it and
ways to teach it.

151
00:09:40.070 --> 00:09:44.205
So we might have to do multiple courses.
&gt;&gt; Brian Holt: Yeah, that's true.

152
00:09:44.205 --> 00:09:44.780
&gt;&gt; Speaker 4: Anyways,

153
00:09:44.780 --> 00:09:48.400
with that I don't see any
other questions in chat.

154
00:09:48.400 --> 00:09:52.590
Now is your last chance before
we go to day two, break for

155
00:09:52.590 --> 00:09:57.420
day two.
&gt;&gt; Speaker 5: Do we need

156
00:09:57.420 --> 00:10:01.910
to any service side rendering, or
can we just do it all client side for

157
00:10:01.910 --> 00:10:04.730
react?
&gt;&gt; Brian Holt: The answer to that question

158
00:10:04.730 --> 00:10:08.400
is it depends on what your need are,
right?

159
00:10:08.400 --> 00:10:11.440
Certainly service side rendering
yields a lot of benefits.

160
00:10:11.440 --> 00:10:12.560
It's great for SCO.

161
00:10:14.020 --> 00:10:16.080
It's faster, right?

162
00:10:16.080 --> 00:10:17.990
It's perceived to be faster to the user.

163
00:10:19.630 --> 00:10:21.770
There's a bunch of stuff about
that that's really cool.

164
00:10:22.970 --> 00:10:25.660
But it also does add some
complexity to your app.

165
00:10:25.660 --> 00:10:28.020
You have to make sure that everything
works both in both the node and

166
00:10:28.020 --> 00:10:28.630
in the browser.

167
00:10:28.630 --> 00:10:31.680
You have to be using node,
that's another layer of complexity.

168
00:10:33.610 --> 00:10:36.160
So you just need to,
it's tradeoffs, right?

169
00:10:36.160 --> 00:10:37.700
You got to make the right tradeoffs for
it.

170
00:10:37.700 --> 00:10:41.760
And we'll definitely be doing server side
rendering, maybe by the end of tomorrow.

171
00:10:42.980 --> 00:10:47.790
And you'll see, you'll get to
experience those tradeoffs first hand.

172
00:10:47.790 --> 00:10:49.320
&gt;&gt; Speaker 4: Okay, but we can run this

173
00:10:49.320 --> 00:10:53.500
on a server like a CMS or
something that didn't have node

174
00:10:53.500 --> 00:10:54.328
installed on it?

175
00:10:54.328 --> 00:10:55.744
&gt;&gt; Brian Holt: Absolutely.
&gt;&gt; Speaker 4: Yeah okay.

176
00:10:55.744 --> 00:10:56.700
&gt;&gt; Brian Holt: Yep, definitely.

177
00:10:56.700 --> 00:10:59.270
There's a bunch of companies out
there that are running react and

178
00:10:59.270 --> 00:11:01.062
production right now with
no server side entry.

