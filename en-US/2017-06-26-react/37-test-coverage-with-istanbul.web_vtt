WEBVTT

1
00:00:00.440 --> 00:00:02.820
&gt;&gt; Brian Holt: Let's do
something kind of fun.

2
00:00:02.820 --> 00:00:04.850
There's a tool called Istanbul.

3
00:00:04.850 --> 00:00:06.780
It's been around for
a long time for JavaScript.

4
00:00:06.780 --> 00:00:07.760
It does test coverage.

5
00:00:09.220 --> 00:00:11.600
It can be kind of a pain to wire up,
particularly with, like,

6
00:00:11.600 --> 00:00:15.310
Mocha and
some of these other testing frameworks.

7
00:00:15.310 --> 00:00:18.180
It's all ready built into Jest,
so you don't have to do anything.

8
00:00:18.180 --> 00:00:19.770
It's kind of for free.

9
00:00:19.770 --> 00:00:25.764
So we can do yarn test -- --coverage.

10
00:00:29.158 --> 00:00:32.161
&gt;&gt; Brian Holt: And it's going to
run our tests with, let's see.

11
00:00:32.161 --> 00:00:34.490
Let's just make it so
you can see the nice table.

12
00:00:36.570 --> 00:00:39.886
It's gonna output this nice line of, like,

13
00:00:39.886 --> 00:00:43.831
this is how much you're
covering your file of tests.

14
00:00:43.831 --> 00:00:48.010
So with search.jsx,
we got 100% test coverage.

15
00:00:48.010 --> 00:00:50.123
It's hitting literally every line of Jest.

16
00:00:50.123 --> 00:00:57.406
ShowCard, we got 80% of it,
100% of branches and 0% of functions.

17
00:00:57.406 --> 00:01:02.328
So just by importing ShowCard, we're
kinda validating that ShowCard's probably

18
00:01:02.328 --> 00:01:05.485
at least going to not have
any syntax errors, right?

19
00:01:05.485 --> 00:01:08.585
[LAUGH] But we haven't really
tested much more than that.

20
00:01:08.585 --> 00:01:12.069
And then it's saying all files
that the test suite knows about,

21
00:01:12.069 --> 00:01:15.500
we have 88% coverage of statements,
which is pretty cool.

22
00:01:17.440 --> 00:01:20.580
Furthermore, what you can do is you can
actually cd into this coverage directory

23
00:01:20.580 --> 00:01:21.610
that it created for you.

24
00:01:22.880 --> 00:01:25.473
And you can go into the lcov-report.

25
00:01:28.141 --> 00:01:32.296
&gt;&gt; Brian Holt: And
then you can say open index.html.

26
00:01:34.792 --> 00:01:36.850
&gt;&gt; Brian Holt: Let's say,
I could make this a little bigger for you.

27
00:01:38.100 --> 00:01:41.080
This is an auto-generated
report from Istanbul.

28
00:01:42.420 --> 00:01:46.310
So I can click into ShowCard and I can
see, hey, this wrapper part, right here,

29
00:01:46.310 --> 00:01:48.250
you didn't actually run this.

30
00:01:48.250 --> 00:01:50.080
Like, I never saw you run this.

31
00:01:50.080 --> 00:01:53.275
But everything else was at
least passed over once.

32
00:01:53.275 --> 00:01:54.212
That's probably really hard to see.

33
00:01:54.212 --> 00:01:58.870
So like, hey, this never got run, right?

34
00:01:58.870 --> 00:02:00.549
This part in here, this red part?

35
00:02:01.810 --> 00:02:03.480
But I at least saw this.

36
00:02:03.480 --> 00:02:04.880
I at least saw this, right?

37
00:02:07.850 --> 00:02:12.470
And then you can come
in here to search.jsx.

38
00:02:12.470 --> 00:02:17.260
And this is something that I think
is pretty cool for you to see.

39
00:02:19.720 --> 00:02:21.830
If you look down here on line 28,

40
00:02:21.830 --> 00:02:27.720
this got run 60 times just in
a span of our little tests, right?

41
00:02:27.720 --> 00:02:31.780
That was for, yeah,
all the various tests that we ran.

42
00:02:31.780 --> 00:02:35.328
So this lets you know, like,
this part right here, line 28,

43
00:02:35.328 --> 00:02:38.812
that's gotta be a pretty optimized
code because just with like

44
00:02:38.812 --> 00:02:41.855
a couple of re-renders,
we ran this code 60 times.

45
00:02:45.154 --> 00:02:48.107
&gt;&gt; Brian Holt: So
this might even tell you something, like,

46
00:02:48.107 --> 00:02:52.420
this particular toUpperCase
business we are doing here.

47
00:02:52.420 --> 00:02:54.700
We should probably cache that, right?

48
00:02:54.700 --> 00:02:58.199
Because running toUpperCase with doing
this template string a bunch of times, it

49
00:02:58.199 --> 00:03:01.900
could be a lot more performant, especially
if you're gonna be doing this a lot.

50
00:03:01.900 --> 00:03:05.290
So all this good stuff to know.

51
00:03:05.290 --> 00:03:07.600
Same with this map right here, 47 times.

52
00:03:08.690 --> 00:03:10.335
All things that you might wanna consider.

53
00:03:13.118 --> 00:03:14.810
&gt;&gt; Brian Holt: Any questions?

54
00:03:14.810 --> 00:03:15.650
It's pretty cool, right?

55
00:03:16.680 --> 00:03:20.507
All this stuff we just got for
free cuz Jest just does it for yo.

56
00:03:20.507 --> 00:03:23.280
Which is coming from Istanbul.

57
00:03:23.280 --> 00:03:25.210
Which is a pretty cool library.

58
00:03:25.210 --> 00:03:28.716
Another reason why I like Jest,
cuz setting this up can be kind of a pain.

59
00:03:34.084 --> 00:03:38.501
&gt;&gt; Brian Holt: So let's go just
put that into our package.json, so

60
00:03:38.501 --> 00:03:41.260
we can have that kind of forever.

61
00:03:42.350 --> 00:03:46.909
So we're gonna do one more,
underneath test here, and

62
00:03:46.909 --> 00:03:49.640
it's gonna be test:coverage.

63
00:03:49.640 --> 00:03:54.498
And it's gonna be jest --coverage.

64
00:03:59.097 --> 00:04:02.576
&gt;&gt; Brian Holt: So something that people
tell me that I probably do too much

65
00:04:02.576 --> 00:04:07.080
is I put too much into scripts.json or
the scripts part of package.json.

66
00:04:07.080 --> 00:04:12.390
Like, there's no reason I can't
just do yarn test -- --coverage.

67
00:04:12.390 --> 00:04:14.800
The problem is I forget this
stuff all the time, right?

68
00:04:16.490 --> 00:04:19.308
Like, if I don't run coverage very often,
which, to be honest with you,

69
00:04:19.308 --> 00:04:23.260
I don't, I forget what the name of
that god damn parameter is, but

70
00:04:23.260 --> 00:04:25.820
it's really easy for
me to open the package.json and say, cool.

71
00:04:25.820 --> 00:04:27.161
Here's all the stuff I can do.

72
00:04:27.161 --> 00:04:29.450
So that's why I put everything into here.

73
00:04:34.720 --> 00:04:38.979
So something I wanted to kind
of say is people take test

74
00:04:38.979 --> 00:04:43.995
coverage to be like a gospel,
like a core metric of their code,

75
00:04:43.995 --> 00:04:48.080
and I think it's kind of bullshit,
in my opinion.

76
00:04:50.210 --> 00:04:55.900
Reason being is that this says that you
have 80% test coverage of ShowCard.

77
00:04:55.900 --> 00:04:57.900
We have not tested a thing about ShowCard.

78
00:04:57.900 --> 00:04:59.100
All we did was import it.

79
00:04:59.100 --> 00:05:02.820
We haven't really validated anything
that it's supposed to actually be doing.

80
00:05:02.820 --> 00:05:07.239
So this gives you good feelings about how
much coverage you have about ShowCard, and

81
00:05:07.239 --> 00:05:09.180
you should not have a good feelings.

82
00:05:09.180 --> 00:05:11.530
You should not have them because
we're not testing it at all, right?

83
00:05:12.970 --> 00:05:16.600
So be extremely careful about how
much faith you put into coverage.

84
00:05:16.600 --> 00:05:19.280
It's a good secondary metric,
don't get me wrong.

85
00:05:19.280 --> 00:05:21.150
Like, if you have high test coverage,

86
00:05:21.150 --> 00:05:24.240
that's a positive indication
of things that you are doing.

87
00:05:24.240 --> 00:05:27.558
But because you have high test coverage,
do not feel good about yourself.

88
00:05:27.558 --> 00:05:30.952
[LAUGH] Right?

89
00:05:30.952 --> 00:05:31.600
That's all I want to say.

90
00:05:34.070 --> 00:05:37.990
&gt;&gt; Speaker 2: Is the Functions column
a little more reliable on that,

91
00:05:37.990 --> 00:05:39.710
which shows 0%?

92
00:05:39.710 --> 00:05:41.270
&gt;&gt; Brian Holt: I'm gonna say no.

93
00:05:41.270 --> 00:05:45.459
I mean, it's certainly not
a good thing that it's 0%, but

94
00:05:45.459 --> 00:05:51.121
you could have 100% function coverage and
still not really be doing anything.

95
00:05:52.966 --> 00:05:53.604
&gt;&gt; Brian Holt: Yeah.

96
00:05:56.891 --> 00:05:59.351
&gt;&gt; Brian Holt: I mean, in this
particular case where it's 0 out of 1,

97
00:05:59.351 --> 00:06:02.893
that is a strong indication that you're
not actually really doing anything, but

98
00:06:02.893 --> 00:06:05.613
I could still see cases where you
would have it be pretty high and

99
00:06:05.613 --> 00:06:07.242
still not really be doing anything.

100
00:06:11.143 --> 00:06:11.752
&gt;&gt; Brian Holt: So.

101
00:06:14.854 --> 00:06:16.840
&gt;&gt; Brian Holt: I would say,
if we go back to that,

102
00:06:16.840 --> 00:06:19.700
this is a good way of
deriving negative signals.

103
00:06:19.700 --> 00:06:23.590
So if these numbers are low,
then you definitely have a problem, right?

104
00:06:23.590 --> 00:06:26.140
If they're high you might
still have a problem.

105
00:06:26.140 --> 00:06:28.759
That's how I want to phrase that.

106
00:06:28.759 --> 00:06:29.754
&gt;&gt; Speaker 3: I think
I just missed a step.

107
00:06:29.754 --> 00:06:33.430
How do you get to that
screen on your browser?

108
00:06:33.430 --> 00:06:36.260
&gt;&gt; Brian Holt: So,
if you go in here to your project,

109
00:06:39.210 --> 00:06:42.619
when you run coverage, it generates
this directory right there, right?

110
00:06:43.910 --> 00:06:48.040
So I just opened it in my browser,
but you could go into cd coverage, and

111
00:06:48.040 --> 00:06:53.610
then it's lcov-report, and then this
is just a website that you can open.

112
00:06:54.610 --> 00:06:58.387
So I just said open index.html,
which, that's a Mac thing,

113
00:06:58.387 --> 00:07:00.038
so if you're using Linux.

114
00:07:00.038 --> 00:07:03.747
But if you're using Mac, that'll just
open it in your favorite browser.

