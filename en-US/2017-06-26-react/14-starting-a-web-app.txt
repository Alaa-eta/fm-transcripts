[00:00:00]
>> Brian Holt: So if you go back to your index.html real quick, we are going to include a link here in the header to public slash style.css. I wrote the CSS for you, this is definitely not a CSS workshop. I don't purport this to be particularly good CSS. It's very structural base.

[00:00:28]
So if you follow the same structure to your HTML elements, you should get all the styling for free. We will talk about styled components a little bit later, which will be pretty fun. We're not going to do everything in styled components just because it would be a lot of time writing CSS, which is not where I wanna focus.

[00:00:46]
I wanna focus on the JavaScript part of this. So I will show you how you style components but then we'll just go back to using the CSS that I wrote for you. So suffice it to say, if you mimic my markup you should get all the style for free.

[00:01:01]

>> Brian Holt: Cool.
>> Brian Holt: So that sounds good. Let's go back to, we are going to go back to clientapp.jsx. So you can pretty much just delete all of this stuff, which is what I'm going to do.
>> Brian Holt: And we're going to pretty much start over. So the first thing we're going to do, is we're going to create Const App, which is going to be the overarching component for our app.

[00:01:38]
And I'm going to make it an arrow function. So for those of you that have not seen an arrow function before, relatively similar to,
>> Brian Holt: Normal function, it's just a little bit shorter to write. There's some other things that have to do with context of how arrow functions work, but we'll get into those as we kind of run onto where it'll be different from normal functions.

[00:02:02]
Suffice it to say, for all intents and purposes for what we're doing here, this is a normal function.
>> Brian Holt: Okay, and what we're gonna do here is return some markup. So we're gonna do div.
>> Brian Holt: So typically you would put class here if you wanted to give a class type.

[00:02:28]
However, as you may remember, we are writing JavaScript, so we have to abide by the rules of JavaScript. The word class is a reserved word, right? Because you can have like class Foo, and so this class word is reserved. You can't use that keyword directly. So instead, we're going to use class name.

[00:02:52]
This is really one of the very few gotchas with JSX and React in general, cuz you have to call it className instead of class. There's a couple other like for. As you might imagine, for is valid HTML5. But there's for loops, right? So I don't use for that terrible much, so it's really just class.

[00:03:13]

>> Brian Holt: Now to justify this decision, like I was telling your earlier, the way this works is this is actually interacting with the DOM API. And the name for manipulating classes on an HTML element via the DOM API is class name, right? If I come in here and say, console.

[00:03:35]
So if I just say, so x = $0. Okay, so I have the span right here, right? So if I say, x.className, right? That's how I actually get a className. So, it is a valid choice, right? The reason why I bring this up is I defend it so much is because I've had to defend it so much.

[00:03:57]
So, just wanted you to know that that's a valid choice on their part. Okay, so className= app.
>> Brian Holt: And then here we're gonna say, div className= landing.
>> Brian Holt: And what we're gonna do here is we're gonna put an h1, you can name your video service whatever you want.

[00:04:23]
I called mine svideo. We're gonna out an input, type= text, placeholder=search.
>> Brian Holt: And then we'll put an a tag.
>> Brian Holt: For now it's not gonna go anywhere, so we'll just put a, or Browse All.
>> Brian Holt: It's mad at me for my anchor tag, but we will fix that later or can we just not put it?

[00:05:11]
Okay, just don't put it.
>> Brian Holt: We'll make it go somewhere later. Okay, and then down on the bottom we're going to render app to document.getElementById, app.
>> Brian Holt: Okay, so we save that. Now we do have a lint error up here. That's because these arrow functions have something called an implicit return, right?

[00:05:49]
For those of you coming from Ruby, or CoffeeScript, you're probably used to seeing implicit returns that no matter what the last line is returned automatically, right? Well, with arrow functions, if it's a one liner, it's also an implicit return, okay? So, what the Airbnb eslint rules require, is that if you have a function, that just immediately returns, it must use the implicit return, okay?

[00:06:19]
So, what we can do, instead of saying curly brace.
>> Brian Holt: Let me show you what I mean, right? So, if I have const add equals return a and b, a + b, right?
>> Brian Holt: It's gonna be mad at me because I could have written it this way.
>> Brian Holt: const add2 = (a,b), a + b.

[00:07:02]

>> Brian Holt: So that's the way it wants me to write it. If you do not put the curly braces there, whatever expression you put there is going to be implicitly returned, so these two lines are equivalent, right? Does that makes sense? Okay, so here I'm just returning immediately this React's component.

[00:07:28]
So if I just get rid of this and bring this parenthese up there and then delete that.
>> Brian Holt: So get rid of that, that's the same thing. So the key here is, this is a parenthesis and not a curly brace.
>> Brian Holt: How do we feel about that? It's a little weird, right?

[00:07:56]
But I don't know, I kind of like it.
>> Brian Holt: The thing is, if I ever need anything other than just returning immediately, I have to switch that back to using curly braces, right? Cuz I can't put anything up here. Like, I don't know.
>> Brian Holt: This is no longer valid, right?

[00:08:19]
Because I've, see, it has to be just an immediate return. So I have linked in my notes here, there's a blog that I reference constantly in here, written by Dr. Axel Rauschmayer. I'm probably saying that incorrectly, but he has a blog called 2ality. And it's just amazing for explaining JavaScript grammar.

[00:08:42]
It's both succinct and in-depth, and I think it pretty easy to understand. So I have a 2ality post linked here that if you need to understand it and need more depth, it's all there.
>> Brian Holt: Okay, so if I go back here and I start doing yarn watch.
>> Brian Holt: Okay, so now, I should be able to come back over here and go back to my,

[00:09:25]

>> Brian Holt: So I am getting some, there should be a background. That's weird.
>> Speaker 2: It's just three dot jpeg not found.
>> Brian Holt: Yeah, so the problem here is that, in just a second, yeah. We'll fix it in just a second. We're gonna be running a dev server here really quick and all the paths are based on absolutes versus relatives.

[00:09:53]
So we'll need to fix that. But suffice it to say, we're getting a nice looking UI here with an input, and a title, and all that kind of stuff.
>> Brian Holt: So that's all good.
>> Brian Holt: So something that would be really nice is.
>> Brian Holt: Here in our console, rather than just have it have to come back here and run lint, I guess we're running it within our editor.

[00:10:26]
But I wanted to show you actually how to have webpack run your linting as well. So go into your webpack config, and we're going to add another rule. Do it before the babel-loader.
>> Brian Holt: And what we're going to do is we're going to do enforce, pre.
>> Brian Holt: Test,

[00:11:00]

>> Brian Holt: I guess the test is gonna be the same as this, right?
>> Brian Holt: loader, eslint-loader, and exclude, node_modules.
>> Brian Holt: My notes are a little incorrect here.
>> Brian Holt: So, let's talk about this. Running it on the same files, right? So, it's the same test function. That makes sense. Loader, we're using the eslint-loader.

[00:11:40]
Hopefully, that makes sense too. It's just going to be running eslint and all the files that are going through your build pipeline. The nice thing is it'll only be running on files that have changed, as opposed to being run on every file every single time. Exclude, we don't care if our node_modules pass our linting, right?

[00:11:57]
That's someone else's problem, not mine, so that's how we're excluding everything out of node_modules. But then there's this funny thing called pre. What this is doing is it's ensuring that it's running before babel, right? We do not care if our post compilation code passes lint, we care if it passes it before, right?

[00:12:17]
So it has to be pre, does that make sense? There's also a post, as well. I don't know what you would do with post, maybe like, minify and things like that. I don't know. So, now, we're going to have to go restart our watch. Anytime you mess with a webpack config, you're going to have to restart watch, just so you know.

[00:12:43]

>> Brian Holt: Okay, now if come back here to client.app and const x = 5, make our lint fail.
>> Brian Holt: Now notice in my command line, it's automatically outputting these errors to my console, right? So it says, x was assigned but never used and then you also meet that empty space there

[00:13:08]

>> Brian Holt: So this is useful as well because we don't have to constantly be running our lint. Now if it's built into your editor, that's nice too. But not everyone's gonna build it into their editor, especially if you're in a team. So this is really good to enforce these lint rules and have a short feedback on linting rules.

[00:13:25]
So definitely, definitely we'll suggest that.

