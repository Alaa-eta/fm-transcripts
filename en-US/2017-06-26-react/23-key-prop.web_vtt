WEBVTT

1
00:00:00.360 --> 00:00:02.250
&gt;&gt; Brian: Now if we come back here
everything should be working.

2
00:00:02.250 --> 00:00:05.460
But we're getting this error
down here in the console,

3
00:00:05.460 --> 00:00:09.340
which is each child array should
have a unique key property.

4
00:00:10.710 --> 00:00:12.990
So you should be seeing that right
now cuz we have not fixed it.

5
00:00:14.520 --> 00:00:15.369
Let's talk about that.

6
00:00:17.753 --> 00:00:20.040
&gt;&gt; Brian: So
imagine we had a sort ability on here,

7
00:00:20.040 --> 00:00:23.539
that we could sort shows by title,
ascending, descending,

8
00:00:23.539 --> 00:00:27.800
sort by when it was released,
sort by all these different things, right?

9
00:00:29.610 --> 00:00:32.440
Well, what would be happening is we'd
have this array of components and

10
00:00:32.440 --> 00:00:34.980
we'd be changing the order of them, right?

11
00:00:34.980 --> 00:00:39.397
And each one of these components has a
somewhat nested style of components right?

12
00:00:39.397 --> 00:00:42.100
There's components within components
within components, right?

13
00:00:43.840 --> 00:00:48.948
Well right now the way it works
is React is going to check,

14
00:00:48.948 --> 00:00:53.853
is this array as the same as
when the last one was there?

15
00:00:53.853 --> 00:00:56.738
And it's gonna say no and
then it's gonna blow everything away and

16
00:00:56.738 --> 00:00:58.239
totally re-render everything.

17
00:00:59.620 --> 00:01:03.500
Now that should set off some warning
bells in your head because that's

18
00:01:03.500 --> 00:01:04.394
really inefficient, right?

19
00:01:05.460 --> 00:01:07.740
What it could be doing is just
reorganizing them, right,

20
00:01:07.740 --> 00:01:08.860
because that's all we're doing.

21
00:01:08.860 --> 00:01:12.320
So it could keep all of that dom
structure, all those dom nodes, and

22
00:01:12.320 --> 00:01:13.260
just move them around.

23
00:01:14.360 --> 00:01:18.050
And these aren't particularly
complicated components, right?

24
00:01:18.050 --> 00:01:21.547
But imagine if they were deeply nested
components, that have D3 charts,

25
00:01:21.547 --> 00:01:24.360
and svgs, and
all that kind of crazy stuff on there.

26
00:01:24.360 --> 00:01:26.470
That could get really
expensive really fast,

27
00:01:26.470 --> 00:01:27.980
especially if you have a hundred nodes.

28
00:01:29.430 --> 00:01:33.260
So now I'm painting worst case
scenario for you, but hopefully,

29
00:01:33.260 --> 00:01:36.050
I'm demonstrating into
the problem that can exist here.

30
00:01:37.320 --> 00:01:43.220
So the way that you can sidestep this,
if we go back to search.jsx, we can

31
00:01:43.220 --> 00:01:47.680
give basically, reacts like, hey here's
a handle that you could hold on to, right?

32
00:01:47.680 --> 00:01:52.870
Something really fast that you can
compare to see if something changed, and

33
00:01:52.870 --> 00:01:54.640
if the order of things changed, right?

34
00:01:56.010 --> 00:01:59.000
So I can say key and

35
00:01:59.000 --> 00:02:02.892
I can say key= show.something
that is unique about it, right?

36
00:02:02.892 --> 00:02:07.603
There's that several pieces of information
here that are unique about it, but

37
00:02:07.603 --> 00:02:10.219
the most obvious one is the imdb ID,
right?

38
00:02:10.219 --> 00:02:13.830
Typically, it's going to be some
sort of identifier like that.

39
00:02:13.830 --> 00:02:14.430
But, I mean,

40
00:02:14.430 --> 00:02:19.330
maybe it's your user's table and
you can use the email as the key, right?

41
00:02:19.330 --> 00:02:22.440
The only thing that's required here,
is it's unique for that particular object.

42
00:02:24.500 --> 00:02:25.670
And a big no, no here,

43
00:02:25.670 --> 00:02:31.100
which a lot of people are tempted to do,
is just say index right here, right?

44
00:02:31.100 --> 00:02:35.030
And then use index here,
well what did that buy us?

45
00:02:35.030 --> 00:02:36.270
Literally nothing, right?

46
00:02:36.270 --> 00:02:40.052
Because if anything gets sorted out of
order, then the index is gonna change and

47
00:02:40.052 --> 00:02:41.920
it's gonna rerender anyway, right?

48
00:02:41.920 --> 00:02:43.420
So don't use index that way.

49
00:02:44.610 --> 00:02:48.280
Unless that's literally
the only thing that changes.

50
00:02:49.927 --> 00:02:52.810
&gt;&gt; Brian: So in this case,
we're gonna use imdbID.

51
00:02:52.810 --> 00:02:57.080
That way, let's say if I move Atlanta
from the first one to the last one,

52
00:02:57.080 --> 00:03:00.290
it can just say, okay,
this imdbID is the same.

53
00:03:00.290 --> 00:03:02.154
I'm just gonna take this one and
plop it down here.

54
00:03:02.154 --> 00:03:04.305
Makes sense?

55
00:03:06.623 --> 00:03:07.438
&gt;&gt; Brian: Cool.

56
00:03:10.497 --> 00:03:14.840
&gt;&gt; Brian: So yeah, now we should
be able to go back over here.

57
00:03:14.840 --> 00:03:17.390
And everything is all good.

