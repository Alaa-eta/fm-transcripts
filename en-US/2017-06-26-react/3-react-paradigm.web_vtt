WEBVTT

1
00:00:00.870 --> 00:00:03.176
&gt;&gt; Brian: Hopefully now you're seeing
more things kind of come together, right?

2
00:00:03.176 --> 00:00:07.988
The fact that you can make components up
of other components means we have some

3
00:00:07.988 --> 00:00:10.740
pretty powerful patterns at our disposal.

4
00:00:12.120 --> 00:00:17.130
We can create reusable components
like a day picker, right?

5
00:00:17.130 --> 00:00:20.638
And then we can reuse that day picker
throughout our entire website.

6
00:00:20.638 --> 00:00:23.413
I'm sure you've seen many instances
where this could be useful.

7
00:00:26.550 --> 00:00:30.458
&gt;&gt; Brian: So yeah, we can use these
components to encapsulate logic,

8
00:00:30.458 --> 00:00:34.211
mark up and style,
kind of compress those all together and

9
00:00:34.211 --> 00:00:36.987
then shift them out in individual pieces.

10
00:00:36.987 --> 00:00:40.670
And we're kind of getting out what
the core of what React is all about.

11
00:00:42.340 --> 00:00:45.323
So at least for
me I used to write back-phone, but

12
00:00:45.323 --> 00:00:49.157
I used to write a decent amount
of angular pre one, like 0.8,

13
00:00:49.157 --> 00:00:52.869
I think it was when I was writing angular,
maybe angular one.

14
00:00:54.821 --> 00:00:57.191
&gt;&gt; Brian: And they were kind of
all inclusive frameworks, right?

15
00:00:57.191 --> 00:00:59.961
They kind of emulated NVC on the server,

16
00:00:59.961 --> 00:01:05.514
it felt a lot like writing something like
Django or Rails or something like that.

17
00:01:05.514 --> 00:01:08.447
We have the model, you'd have the view and
you'd have the controller, right?

18
00:01:08.447 --> 00:01:11.530
And you'd have the model sit on one end,
you'd have the view sit on the other, and

19
00:01:11.530 --> 00:01:14.310
then the controller's kind
of routing to each other.

20
00:01:14.310 --> 00:01:17.786
This is an amazing paradigm on the server,
really,

21
00:01:17.786 --> 00:01:21.028
there's not many better
ways to write servers.

22
00:01:21.028 --> 00:01:24.517
And we kind of thought well this is
a really great way to write servers,

23
00:01:24.517 --> 00:01:27.134
why shouldn't we try this with the client,
right?

24
00:01:27.134 --> 00:01:29.822
And it worked okay,
it was better than writing the jQuery

25
00:01:29.822 --> 00:01:31.962
spaghetti code that at
least I used to write.

26
00:01:31.962 --> 00:01:36.637
But it over time you kinda see that kind
of the cracks show when you have a large

27
00:01:36.637 --> 00:01:37.860
app right.

28
00:01:37.860 --> 00:01:41.109
The real problem is that you'd have
these models and they'd be used,

29
00:01:41.109 --> 00:01:43.711
one model be used in a bunch
of different views, right.

30
00:01:43.711 --> 00:01:46.661
Then you have these controllers,
doing all these sort of crazy

31
00:01:46.661 --> 00:01:50.739
routing from one model to many controllers
and many controllers to one model, right.

32
00:01:50.739 --> 00:01:55.730
It was just many to many mess,
that's kind of what ended up happening.

33
00:01:55.730 --> 00:01:58.560
So some really smart people at Facebook

34
00:01:58.560 --> 00:02:01.760
decided that this was not necessarily
a very good way to write code.

35
00:02:03.160 --> 00:02:06.830
And they kind of yearn for the days
when we could just write some mark-up

36
00:02:06.830 --> 00:02:09.320
on a page and it just worked, right?

37
00:02:09.320 --> 00:02:12.910
So they kind of went forward with that
idea that well, why don't we embrace

38
00:02:12.910 --> 00:02:15.910
the paradigm of what's on the web,
which is components, right?

39
00:02:15.910 --> 00:02:21.408
We would have these bits of mark-up which
had CSS that would get applied to them.

40
00:02:21.408 --> 00:02:24.280
And then we could reuse these different
pieces of mark up all over the site.

41
00:02:25.310 --> 00:02:29.661
So they kind of embraced and
leaned into this pattern, and said well,

42
00:02:29.661 --> 00:02:34.113
why can't we create these components
then we can render out to the dom?

43
00:02:34.113 --> 00:02:37.230
And so that's kind of what
they started leaning into and

44
00:02:37.230 --> 00:02:39.230
we ended up with react components.

45
00:02:40.230 --> 00:02:45.590
And a React Component is just
an encapsulated piece of component,

46
00:02:45.590 --> 00:02:49.730
HTML, or behavior, style, and
markup, HTML, CSS, and Java Script.

47
00:02:51.760 --> 00:02:55.022
Now this ends up being really really
powerful because it's a natural way to

48
00:02:55.022 --> 00:02:56.326
think about the web, right?

49
00:02:56.326 --> 00:03:00.510
It's a natural way of creating interfaces.

50
00:03:00.510 --> 00:03:05.370
So rather than having models, views, and
controllers all separated that separation

51
00:03:05.370 --> 00:03:09.680
of concern doesn't necessarily make
a ton of sense for interfaces.

52
00:03:09.680 --> 00:03:12.534
So what they did is they took
models of user control, and

53
00:03:12.534 --> 00:03:16.197
they shoved them all together for
very very small components, right.

54
00:03:16.197 --> 00:03:21.831
So everything for a component lives
inside of one file basically.

55
00:03:21.831 --> 00:03:26.064
Now this is really really awesome because
if something breaks it's all right there,

56
00:03:26.064 --> 00:03:29.420
you don't have to go through
multiple files, right?

57
00:03:29.420 --> 00:03:33.950
How many of you have ever debugged like
an angular one app and you look at some

58
00:03:33.950 --> 00:03:37.990
component that broke on the page, and
you have no idea how it broke, right?

59
00:03:37.990 --> 00:03:40.380
It could be in the directive,
it could be in the controller,

60
00:03:40.380 --> 00:03:45.050
it could be in the template,
it could be in the service.

61
00:03:45.050 --> 00:03:49.309
Like, I can go on and on and on of where
all the different places this could live.

62
00:03:49.309 --> 00:03:53.794
The cool thing about a React Component
is due to the encapsulation of how these

63
00:03:53.794 --> 00:03:57.382
components work, if you see
something that breaks on a page,

64
00:03:57.382 --> 00:04:00.775
you have a pretty damn good
idea of what happened, right.

65
00:04:00.775 --> 00:04:03.340
Because it all lives right
there in that one file.

66
00:04:04.720 --> 00:04:10.060
Now I'm kind of exaggerating
a little bit because

67
00:04:10.060 --> 00:04:14.560
modules can break and etc but
you always have a good starting point.

68
00:04:14.560 --> 00:04:16.760
So this is all getting
to why I love React.

69
00:04:16.760 --> 00:04:19.840
React is going to be more robust for
sure than Angular, right?

70
00:04:19.840 --> 00:04:24.730
You can write amazing interfaces with
Angular and with very, very little code.

71
00:04:24.730 --> 00:04:28.510
However when you go back to maintain
some of these very clever Angular apps.

72
00:04:28.510 --> 00:04:33.059
I'm speaking on my own behalf, I wrote
crappy Angular, I own that [LAUGH].

73
00:04:33.059 --> 00:04:37.895
But-
&gt;&gt; Brian: Maintaining some of these clever

74
00:04:37.895 --> 00:04:40.569
Angular apps is atrocious,
it's nightmarish, right?

75
00:04:42.310 --> 00:04:46.353
With reactive forces even to such
a paradigm that it's much easier to debug,

76
00:04:46.353 --> 00:04:48.134
it gets much easier to maintain.

77
00:04:48.134 --> 00:04:50.910
It's much easier for someone to
come back later, you, yourself or

78
00:04:50.910 --> 00:04:54.170
someone else and read through the code and
kind of understand it because it's very,

79
00:04:54.170 --> 00:04:55.480
very explicit.

80
00:04:55.480 --> 00:04:57.736
This comes to the cost as
that you write more code,

81
00:04:57.736 --> 00:04:59.960
it's physically more key
strokes to get it out.

82
00:05:01.450 --> 00:05:05.610
That's kind of the paradigm of
why React is the way that it is.

83
00:05:05.610 --> 00:05:08.941
There's a forth some other really
interesting patterns which we're gonna be

84
00:05:08.941 --> 00:05:12.540
getting to throughout the next couple of
days but that's where we're gonna start.

85
00:05:12.540 --> 00:05:13.211
Yeah.

86
00:05:13.211 --> 00:05:15.822
&gt;&gt; Speaker 2: Is this
the couple of clarifications or

87
00:05:15.822 --> 00:05:19.787
questions in the chapter,
why we need the null parameter?

88
00:05:19.787 --> 00:05:20.298
&gt;&gt; Brian: Yep.

89
00:05:20.298 --> 00:05:23.761
&gt;&gt; Speaker 2: And the barge is saying the
second parameter is a set of properties,

90
00:05:23.761 --> 00:05:25.659
attributes, that can be passed in?

91
00:05:25.659 --> 00:05:26.771
&gt;&gt; Brian: Yeah.
&gt;&gt; Speaker 2: The first is the tag.

92
00:05:26.771 --> 00:05:27.876
&gt;&gt; Brian: Yeah.

93
00:05:27.876 --> 00:05:28.569
&gt;&gt; Speaker 2: The second is properties.

94
00:05:28.569 --> 00:05:29.971
&gt;&gt; Brian: Yeah,
I'll talk about it here in just a sec.

95
00:05:29.971 --> 00:05:33.532
&gt;&gt; Speaker 2: The third
is the child element.

96
00:05:33.532 --> 00:05:38.300
And then, yeah,
why do we need to do two react

97
00:05:38.300 --> 00:05:44.372
CreateElement together and
your just showing nesting.

98
00:05:44.372 --> 00:05:45.980
&gt;&gt; Brian: Yep, yep.

99
00:05:45.980 --> 00:05:51.540
So to talk about this null right here
you can also pass an empty object,

100
00:05:51.540 --> 00:05:52.240
that's fine too.

101
00:05:54.150 --> 00:05:55.873
So what this is?

102
00:05:55.873 --> 00:05:57.138
This is all the attributes or

103
00:05:57.138 --> 00:06:00.280
properties that's going to be
passed to that particular element.

104
00:06:00.280 --> 00:06:04.450
So for example for a div let's say you
wanted to give it this particular div,

105
00:06:04.450 --> 00:06:08.650
an id of, let's do this one right here.

106
00:06:08.650 --> 00:06:12.040
An id of like my first component.

107
00:06:12.040 --> 00:06:15.330
You'd say id: "my-first-component"..

108
00:06:18.490 --> 00:06:22.395
So now if I refresh this,
I look here inside of my element,

109
00:06:22.395 --> 00:06:25.998
notice I get the id right
there of my first component.

110
00:06:25.998 --> 00:06:29.870
So this is how you pass attributes
to these particular things.

111
00:06:29.870 --> 00:06:30.780
Now we're going to,

112
00:06:30.780 --> 00:06:34.540
we can also pass attributes to my title
as well which we'll do momentarily.

113
00:06:35.630 --> 00:06:37.170
&gt;&gt; Speaker 2: And
then one more clarification

114
00:06:37.170 --> 00:06:39.150
is you're taking about angular one, right?

115
00:06:39.150 --> 00:06:42.078
With everything being split apart,
is angular two and

116
00:06:42.078 --> 00:06:44.824
four whatever- [CROSSTALK]
&gt;&gt; Brian: I don't know anything about

117
00:06:44.824 --> 00:06:45.676
angular two, so.

118
00:06:45.676 --> 00:06:46.603
&gt;&gt; Speaker 2: Okay.

119
00:06:46.603 --> 00:06:52.500
&gt;&gt; Brian: So all of my ragging angular
from here forth will be on angular one.

120
00:06:52.500 --> 00:06:53.765
Thank you for that clarification.

121
00:06:53.765 --> 00:06:54.770
&gt;&gt; [LAUGH]
&gt;&gt; Speaker 2: Yeah,

122
00:06:54.770 --> 00:06:59.634
a lot of the frameworks are coming into
this new paradigm of putting your mark

123
00:06:59.634 --> 00:07:03.662
of your CSS, your component and
everything into one file now.

124
00:07:03.662 --> 00:07:04.217
&gt;&gt; Brian: Definitely.

125
00:07:04.217 --> 00:07:05.759
No, it would be fun and

126
00:07:05.759 --> 00:07:10.972
useful to compare this particular course
with loose course on angular two.

127
00:07:14.047 --> 00:07:16.299
&gt;&gt; Brian: Cool.

128
00:07:16.299 --> 00:07:20.720
So yeah, someone ask about why we're
doing multiple create elements, right?

129
00:07:22.190 --> 00:07:26.410
This is how you create like for example
a div, and then inside of that div, right?

130
00:07:26.410 --> 00:07:30.915
So notice that were still inside of this
particular parenthesis from this one,

131
00:07:30.915 --> 00:07:32.965
we're doing nesting, right?

132
00:07:32.965 --> 00:07:37.905
And here instead of putting text, we can
actually put more CreateElements, right?

133
00:07:37.905 --> 00:07:40.464
It's like HTML there's infinite
nesting that you can do.

134
00:07:40.464 --> 00:07:42.545
So that's what going on there.

