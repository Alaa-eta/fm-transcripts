[00:00:00]
>> Brian Holt: So, kinda to recap where we were, we've now integrated Redux, into our application. It now works. So, if I type black right there, and I go into Black Mirror, and I go back out of it. Notice, that Black is still up there.
>> Brian Holt: That's because, Redux is keeping that state.

[00:00:20]

>> Brian Holt: And, yeah, so we were able to do that. It's not fun to refacter to include redux because it involves touching a lot of pieces of your code, and those sorts of refacters are the worst. There's a lot of potential for breakage. But now that it's in there, it's actually pretty convenient to keep using it and keep dispatching actions via the reducers and all that kind of stuff.

[00:00:43]
So something that we have not done yet is we have not integrated flow into redux yet. And I did this on purpose because you can do redux again without flow. I wanted to show you how to do that. But now that you've seen how to do redux without flow I wanna go back and refactor to include flow.

[00:00:59]
And luckily, because of the patterns that we followed, it's not gonna be terribly difficult. So the first thing I want you to do is we're gonna open our Types File.
>> Brian Holt: This is inside of your Flow Type Directory. And we're gonna add three new types in here. Redux is for the most part pretty easy to, like already rely on the types that come with it.

[00:01:25]
If you notice inside of your MPM Directory here, down here, you're gonna have some redux types down here. Already included. But what we're gonna do now is we're going to go type our actions. And I admit that I totally lifted this from the Facebook F8 app. It's kind of like the best example app for how to use flow with various different components.

[00:01:53]
So I definitely when I was just checking it out, it was their open source app that they wrote for their F8 conference. So the first thing we are going to do is we are going to declare all of the potential action types that we could, that we can have.

[00:02:10]
So the first one I wanna say is declare,
>> Brian Holt: type ActionType = ' SET_SEARCH_ TERM'. This is what we're gonna call an enumerated type which if you have worked in various other programming languages you usually will see here and there. This is just saying I have this action type and for this particular case our action type can literally only be the string.

[00:02:38]
If it's literally anything else, you're going to get a type checker error. However, as we add more action types, we're just gonna keep adding them there. And so an action type can be one of these strings, right. So for this particular one it's set search term. So the second thing we're gonna have is we're going to have an action type that's gonna be generic.

[00:02:58]
So we're gonna say declare type action T and this is gonna take in an A, which is gonna be an action type and it's gonna take in a P, which is going to be some sort of payload.
>> Brian Holt: So we're just using A and P to be generic types, right?

[00:03:22]
I'll show you how to use this momentarily. So the first thing is gonna have the type, right? Cuz every action has a type, it's gonna be A. And it's gonna have the payload, which is gonna be P, okay.
>> Brian Holt: So these two types are purely for internal use inside of this types file.

[00:03:54]
The one that we're actually gonna export out into the world is called action. So we're going to export, type, action, which is going to be equal to one of these action Ts. And it's going to be a set search term and a string for the payload.
>> Brian Holt: So we have ActionType.

[00:04:26]
This is always going to be a string. In this case it's always gonna be the SET_SEARCH_TERM string, right? We have this kind of generic ActionType that's gonna take in as you can see here, it takes in this parameter and this parameter. So it takes in an action type and it takes in a payload type of some sort, right?

[00:04:44]
Because your payload can vary from action to action, right? We're actually gonna write one here momentarily that it's going to be an object. But for this particular one, it's just gonna be a generic P, right? And the payload is going to be that, right? So for every time that we have a set search term action, its type is going to be string for the payload, right?

[00:05:06]
Does that make sense? Sort of?
>> Speaker 2: Could you explain that syntax?
>> Brian Holt: Like the angle brackets?
>> Speaker 2: Yeah.
>> Brian Holt: Sure. So when you do these angle brackets, this is like parameters that you are giving to that particular item. So for example, you've done this earlier where we had an array of show, right.

[00:05:29]
So we are adding another type to this type, right. So in particular for this array of show, it is going to go validate everything inside of it is a show, right. For ours here that we're doing, we're gonna validate that the first item is going to be the type of the action, right.

[00:05:45]
And the second type, the P is going to be whatever the type of the payload is, right. So the payload for SET_SEARCH_TERM is always gonna be a string. So if I try and create a SET_SEARCH_TERM action that's a number, it's going to fail my type check, which is exactly what I want it to do.

[00:06:02]
I guess I was curious is that in EX6?
>> Speaker 2: This is a Flow.
>> Brian Holt: Purely Flow stuff.
>> Speaker 2: Okay. Gotcha.
>> Brian Holt: Good question.
>> Brian Holt: And then what I'll do here for action. Right now the only action that I have in this application is this SET_SEARCH_TERM action, but as we come and add more actions, what we're gonna say is, this can be this kind of action or it can be this kind of action, right.

[00:06:29]
And we'll create each different kind of action that we can have, which will be great because flow will actually be able to warn us, like hey, you're dispatching this action and that's not a valid action, right. And it's going to save you a ton of bugs that way, that you are not going to be dispatching wrong sorts of actions.

[00:06:47]

>> Brian Holt: So this will get us started and as we go do the next actions when we get to the asynchronous actions, we will go write another action type. So you can see what it's like when there are multiple types of actions.
>> Brian Holt: Okay, so now we have to go opt in all of our files to flow.

[00:07:05]
So open reducers,
>> Brian Holt: And say At flow.
>> Brian Holt: Open store,
>> Brian Holt: Add At flow. Open action creators. By the way, you will still be getting this lint error. We'll be fixing that here in just a little bit, but if you're still seeing ES lint errors, that's expected. Save action creators and then lastly, we have actions that will need to go off that one into flow as well.

