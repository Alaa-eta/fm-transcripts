[00:00:00]
>> Brian Holt: First thing we're going to do here is we are going to define our DEFAULT_STATE.
>> Brian Holt: So that's going to be = searchTerm.
>> Brian Holt: So what we are going to migrate first to Redux is we are going to take the searchTerm searching. And we're gonna migrate that into Redux.

[00:00:22]
And then we're gonna make both landing and search read from our Redux store for it. So const rootReducer = (state = DEFAULT_STATE, action).
>> Brian Holt: Okay, and I guess the other thing is worth mentioning, I'm gonna show you how to do this without flow first. Because flow makes redux better in my opinion, but again, it's more levels of complexity on top of it.

[00:00:59]
So I wanna show you how to do it without first.
>> Brian Holt: So switch action.type and default, return state and export default rootReducer. So let's talk about what we did here first. At the top level of every store is one reducer, right? In that case it's the rootReducer, and again when I say reducer it takes in state, it takes in action and a return state.

[00:01:37]
That is what a rootReducer does, it has no side effects to borrow from our functional friends in their terminologies that means that I can call this 10 billion times with the same state and the same action, and I'm always gonna get the same state out of it, right?

[00:01:52]
So you don't wanna anything happening around it, like you don't wanna have a counter here, right, and say counter++, right? Cuz that would be a side effect, right, that means, if I call it 10 billion times I'm gonna get different answers every single time, right? I wanna to be the same thing.

[00:02:09]
I want given the same input in I want the same output out every single time. That is absolutely essential with Redux.
>> Brian Holt: Okay, so you're gonna have one rootReducer, and then inevitably that rootReducer is going to dispatch to other reducers. So to borrow in flux terminology for those of you that are familiar with flux, the rootReducer is pretty much the dispatch function, right.

[00:02:37]
It's gonna taken, and then it's going to give that off to another reducer which is actually gonna take care of the transformation. In this particular case we have no other reducers yet. We're just instantiating our routeReducer, okay? Two other things about the rootReducer that you have to know.

[00:02:54]
It needs to take care of the default state which is what we've done here, right? This is ES6 to say, if state is undefined, if this is called without state, then the default state is going to be made state, right? So, if state is undefined, then it's going to be this right here.

[00:03:13]
The searchTerm would be an empty string, okay? So it needs to take care of the default state. Cuz the first thing that redux is gonna do is call the rootReducer with no state to get the initial state, okay? Okay, the second thing is is it needs to handle actions that it doesn't know what they are, right?

[00:03:36]
So in this particular case, if it doesn't know what the action type is then, it's just going to return state, right?. So if I call this with some random action, and it's just gonna say cool, I don't know what this is. Here have this state back, right? That's the second thing that it has to, has to do.

[00:03:57]

>> Brian Holt: Let's talk about what actions are for a second? Actions are objects, that's really at the at the most base level what they are. They're gonna have a type which is going to be a string, right? And they're gonna have a payload which is going to be a thing, right?

[00:04:16]
It's gonna be a string, it can be a number, it could be a boolean and it could be another object. It can be any number of things, right?
>> Brian Holt: And furthermore, they don't actually have to be anything. Nothing is enforcing it to look like this it's just a really good idea to make it like this.

[00:04:37]
This is called a Flux Standard Action, which is a defined way of dispatching actions. So if you follow the Flux Standard Action way of creating actions, then things that are created for flux and things that are created for MobX and all these other kind of state management systems are also going to work with your system, right?

[00:04:58]
That's what the idea of using Flux Standard Actions is for. That's why it's always called payload, it's always called type. There's two others we're not gonna worry about which is error which is gonna be something else. And then, the last one is going to be metadata which is gonna be an object of other metadata that you wanna include with your action.

[00:05:17]
Again, we're not gonna use these today, we're just gonna use type and payload.
>> Brian Holt: Okay, so here we have basically the most basic reducer that we can have, okay? Now I want you to go create another file called store.js. Also my notes are wrong here.
>> Brian Holt: Which is unfortunate, so you're going to import create store from Redux, and we are going to import reducer from ./reducer.

[00:06:19]

>> Brian Holt: Reducers.
>> Brian Holt: Gonna say const store = createStore(reducer).
>> Brian Holt: And then we're going to export defaultStore.
>> Brian Holt: So there's not usually gonna be too much to the store part of your app. If you're gonna do any other configuration like introducing middlewares which we'll talk about momentarily. That stuff is gonna live here.

[00:06:50]
But usually, there's not a whole lot to store.
>> Brian Holt: Okay.
>> Brian Holt: I want to create another file called actions.js.
>> Brian Holt: And what we're gonna do here in actions is we're just gonna say export const SET_SEARCH_TERM = SE_SEARCH_TERM.
>> Brian Holt: So this is something that I do, and I would say something that is common but not something that you necessarily have to do.

[00:07:33]
Rather than, this is gonna yell at you for not making it. I'm just gonna do blah = blah. I don't know. Anyway, [COUGH] ESLint is gonna yell at you for now because when you have one export, it wants it to be default, right, and this is a named export.

[00:07:54]
So I would say for now just ignore it. We'll fix it, because eventually we'll have more than one action type. Okay, so, the reason why I do this this way where I have these constants in this file is we're going to be referencing SET_SEARCH_TERM in multiple different places.

[00:08:13]
So it's good to have that reading from one particular source. You don't have to do it this way and in particular, when we start doing it with flow, it will become mostly irrelevant. But I will still tell you that I think this is a good idea. It is sometimes useful to have this be a variable instead of it having, like, just referencing the string literal setSearchTerm.

[00:08:35]
So, I will say that this is a common pattern so I encourage you to follow along and then later make a decision of whether or not you wanna follow it. So this file is just gonna be a bunch of constants being exported and that's it.
>> Brian Holt: And often in the same thing, they don't have to be, I'm just really bad at naming things.

[00:08:54]
And I'm even worse at naming things twice, so, okay, make a new file called actionCreators.
>> Brian Holt: Okay, and import SET_SEARCH_TERM
>> Brian Holt: From ./actions and then here we're gonna export a function setSearchTerm which takes in a searchTerm
>> Brian Holt: And it returns.
>> Brian Holt: Type is going to be setSearchTerm, and the payload is going to be searchTerm.

[00:10:00]

>> Brian Holt: So again, it's gonna yell at you because it's gonna wanna say hey you only have one export. There should be a default export. Just ignore it for now cuz eventually we'll come back and have multiple exports.
>> Brian Holt: So again, the action creators is kind of optional. But I'm gonna say it's not really optional.

[00:10:17]
What an action creator does is it takes in in this case it's a searchTerm. And then it's going to return to you a well formatted action that can go straight into redux right. So given this action or given this input, this is a valid action for it, right?

[00:10:34]
And then this is what's going to go into Redux, which is gonna hit the reducer, right? It's gonna switch on the action type, right? And then based on that input, it's going to update your store in some particular way.
>> Brian Holt: In fact lets go back here to reduces.js, and lets actually make the reducer that's going to do the update here.

[00:11:01]

>> Brian Holt: So we're gonna have const setSearchTerm, which is going to be at reducer function It's going to take in state and action. And given that
>> Brian Holt: It's going to return Object.assign, empty object state and another object was searchTerm : action.payload.
>> Brian Holt: Okay? So Object.assign, if you're not familiar with it.

[00:11:47]
It's gonna basically do a left merge of this object. So this is an empty object, so it's a brand new object so we're not modifying state. This is key, do not modify the original state, right? You need to return a new state, not modify the old one. Even if you say like state.searchTerm and then return that, don't do that either.

[00:12:10]
That is like, that doesn't count, don't do it. You're gonna run to a ton of problems. Mostly that your stuff won't update because it's just gonna do a shallow check to see if the state has changed or not. And if it's the same object that's been returned because it's a shallow check, it's gonna assume nothing changed.

[00:12:26]
So, you must return new state. Like, let's emphasize that again. You must return a new object, don't return the old one, okay? So, a new object, we're going to merge all the state that was in there previously. We don't wanna override anything that's already in state, right? And then the last thing, the only thing that we want to override is the searchTerm.

[00:12:47]
So this one's going to be the most salient. So this is the one that's going to actually end up being in there. So this is going to overwrite whatever searchTerm that state had in this new object, right? Object that assigned, this came with ES 6, so that's all that that does.

[00:13:04]
So now, we've created this function here, setSearchTerm, so now we need to go up right into our rootReducer. Into it inside of the switch statement, so here we're gonna say. Case SetSearchTerm. SET_SEARCH_TERM I just need to import that as well. So up here at the top Import SET_SEARCH_TERM from ./ actions.

[00:13:39]
This is what I was saying that you need to use setSearchTerm in multiple places, that's why I like having one constant to represent all of them. So you don't have a fat finger problem, I have fat fingers, so that's why.
>> Brian Holt: And then here, we want to return setSearchTerm with state and action.

[00:14:12]

>> Brian Holt: Yep, yep, I think that's right.
>> Brian Holt: Okay, we're getting a Lint error here. And that's because this is a one-liner, right? All we're doing is returning. So if you remember you can do implicit returns, and with Airbnb's config rules you have to.
>> Brian Holt: And get rid of these ones down here at the end.

[00:14:43]

>> Brian Holt: So again all I did was make this a one liner, this is now an implicit return.
>> Brian Holt: Any questions about that?
>> Brian Holt: I feel like this is not working the way that I think it should, js prettier user printWidth: 120, that's what it says, that's usually what I have it at.

[00:15:13]

>> Brian Holt: Whatever, we'll just leave it.
>> Brian Holt: [COUGH] Like I wish this wrapped a little bit sooner, that's all I'm thinking.
>> Brian Holt: Nonetheless this works.
>> Brian Holt: Wonder if I can wrap this in parentheses and it will honor that.
>> Brian Holt: Nope, it won't let me. Okay, so that's the way it is.

[00:15:43]
So, now we have this setSearchTerm this is also a reducer right so the rootReducer delegates to the setSearchTerm reducer I just wanted to make you familiar with that terminology. A reducer is anything that takes in state and action returns new state that's the whole contract there

