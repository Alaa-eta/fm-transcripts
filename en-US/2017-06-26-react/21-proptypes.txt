[00:00:00]
>> Brian Holt: So I just push up v3-7. So if you are following along, that's where we are. And we are now going to fix all of our linting errors. And hopefully from here on out, I won't make you ignore lint errors anymore. Believe me, it pains my soul to see the red outline on there, I just can't even.

[00:00:18]
So I'm gonna help you also be able to not even.
>> Brian Holt: So what's going on here is, there is a package that used to be included with React in and of itself, called PropTypes, as of 15.5 they are no longer packaged with React. This is an effort to kind of trim down the internal library of what React includes and doesn't include.

[00:00:46]
It's still isn't quite a clean break because there are certain parts of React that still rely on PropTypes if you wanna be able to use them. So that's an ongoing effort. But they stripped out PropTypes and they also stripped out something called create class. Which we are not using at all today because its been deprecated.

[00:01:06]
And they stripped out a couple of other things. So I'm gonna show you first how to use PropTypes. Because it is useful for you to know, eventually we're going to get into using Flow. Once we get to using Flow, that kind of supersedes our need for PropTypes. But I would say that using PropTypes is more popular than using Flow.

[00:01:29]
So it's useful for you to have that knowledge and then we can get rid of them. So I want you to go and say, import shape and string from, prop-types. So, prop-types is the actual library, that used to be included with React, in and of itself. And only, a month or two ago, was it stripped out.

[00:01:59]
Okay? Then what we're gonna do underneath here, underneath ShowCard, we're gonna say ShowCard.propTypes.
>> Brian Holt: And I guess I should say PropTypes are by no means required. Notice this is a Linting error, right? And our app still builds, it still runs just fine. What PropTypes are gonna do is kinda two-fold thing for you.

[00:02:28]
First of all, it's going to be a runtime check for you to see if you're including the right properties into showcard. So what we're gonna do here is we're gonna say show,
>> Brian Holt: Shape, and then we're going to identify all the different properties that we expect to be on show.

[00:02:51]
So we expect there to be a poster. That's gonna be string.isRequired. We're gonna do title, which is also going to be a string.isRequired. Then we're gonna do year, which is a string as well, and that's gonna be required. And description, which is going to be a string.isRequired. As well as the show itself is required.

[00:03:25]

>> Brian Holt: No more linting errors, right? They all went away. So let's about what's actually PropTypes are. So we did shape, right? Shape just means object. Right?
>> Brian Holt: And I totally could just do, I think this works.
>> Brian Holt: So I could do shape like that.
>> Brian Holt: Yep, yep, yep, yep, okay so we could do this, right, and you could just say its gonna be an object, and you would do this if you had a case of like it was an object and you didn't know what it was gonna look like coming in.

[00:04:05]
However we know what it's gonna look like and so we're also going to identify the things that are inside of shape, right? So we're gonna identify poster, title, year and description. If you do not put an isRequired then as you might imagine it's optional right, so it doesn't mean, it means that it's not going to send you an error saying hey you forgot this.

[00:04:30]

>> Brian Holt: I kind of wish that they had done, isRequired as being the default, and then isOptional. Because usually things are required.
>> Brian Holt: Also, according to the Airbnb config, if it's optional you have to give it a default prompt. And you would do default process the same way. You would say like, showcard.defaultprops equals, whatever you want them to be by default.

[00:04:56]
Okay? Any questions and the other thing I wanted to say about PropTypes, these runtime checks are not incredibly useful, their kind of useful in depth it'll tell you in the consoles like, hey you forgot this, right? The real use for this is that it's documentation, right? Anyone that comes and then looks at this component is gonna look instantly down at the PropTypes and say, okay, it's gonna take in the show and it's gonna have poster, title, year and description.

[00:05:20]
It's just like a summary of what the API for that particular component is. That is, I'm gonna say 95% of the used case. Because again, runtime checks, by the time it's in run time, it's either broken or not, right? Sometimes it'll be useful as like, I didn't know it was including that.

[00:05:38]
Like what happens if I say, foo and it's a string that's required, right? So now if I go into here
>> Brian Holt: And I refresh.
>> Brian Holt: Yeah, ignore the show.foo thing. We'll worry about that later.
>> Brian Holt: Maybe let's do it this way.
>> Brian Holt: Now, refresh again. Okay, so right here.

[00:06:15]
This is what I'm talking about. It's gonna say hey, you said foo was required. No, ignore that too.
>> Brian Holt: It should tell you, it should give you an error saying I wonder if it's just being covered up by ESLint. But in any case, it should send you an error into the,

[00:06:41]

>> Brian Holt: Console saying, hey, this is not there and it should be there. So that's kinda the point. Yeah?
>> Speaker 2: Can you give us an example of default PropTypes?
>> Brian Holt: Yeah, we will see if I can remember off the top of my head. I think it just looks like this.

[00:06:58]

>> Brian Holt: And we will be using them later for sure.
>> Brian Holt: And let's just like put it out here for fun.
>> Brian Holt: So default props, I think that's what it should be. Yeah, so you can see right there it's rendering out stuff right there. Right, so it's just saying hey if you don't pass in these props this is the default PropType.

[00:08:02]
So again these are not technically required by React but they are required by the Airbnb ES centrals that we're using. The reason being is that it just eliminates a class of problems that you can have. Right? Like how many times have you gone to say like props.show.description.two uppercase and it was undefined instead of being a string and you gotta run time error.

[00:08:25]
So it just eliminates that class of error. In other words, it's kind of annoying but ultimately useful

