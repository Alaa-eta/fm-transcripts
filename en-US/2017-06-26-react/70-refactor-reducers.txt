[00:00:00]
>> Brian Holt: What we're gonna do now is we're gonna go refactor our reducers a little bit. And you're also probably gonna be getting some flow typing errors here because it's gonna say I can't tell what this is.
>> Brian Holt: But we're gonna do something kinda cool here. So I wanted to show you how to write your own rootReducer.

[00:00:20]
To show you that rootReducer is nothing more than just taking an action and routing it to some other reducer, like it's a pretty simple function. So it's really easy to write yourself. However, there's a function from redux called combined reducers that will actually write this function for you, so you don't have to go in and write that switch case for every single thing.

[00:00:41]
Furthermore, it's actually going to silo each piece of your state into its own reducer, which is pretty cool in my opinion. So let's go ahead and do that. Up here, we're going to import,
>> Brian Holt: combineReducers,
>> Brian Holt: from redux.
>> Brian Holt: Now what we're gonna do,
>> Brian Holt: We're gonna refactor setSearchTerm a little bit.

[00:01:14]
First thing is we're gonna call the reducer the same thing as the name of the state. So instead of being setSearchTerm, we're just gonna call it searchTerm, and I'll show you why here in just a second,
>> Brian Holt: Okay. Then state is going to represent not the whole state of your entire redux store, it's going to represent just that piece of state, right?

[00:01:39]
So the default state for this is not going to be this object up here. In fact, you can just go ahead and delete that. The default state of searchTerm is going to be empty string, right.
>> Brian Holt: Cuz now, this reducer is only going to worry about searchTerm and nothing else, okay?

[00:02:00]
Action, as you may have guessed is an action, which is the type that we just created.
>> Brian Holt: And then here, we have to make this a whole method body.
>> Brian Holt: And what this is gonna do here, we can just get rid of that. So now, this reducer is going to get run on every single action that happens.

[00:02:25]
So you need to make sure and check that it's the correct action for this reducer. So we're gonna say if action.type === SET_SEARCH_TERM, then you're gonna return, action.payload, right? Otherwise, you're just going to return state.
>> Brian Holt: Okay? So this is the new way that we're going to be reducers from now on.

[00:03:05]
We're gonna write these single responsibility reducers. And we're not gonna have this like big reducers that worry about multiple pieces of state all at once. This one's only going to worry about searchTerm, and that's it, okay? You can actually just delete all of reducer here. I'm gonna say const rootReducer = combineReducers, what we wanna have here is ({searchTerm: searchTerm}).

[00:03:37]
So, what this is saying here is we have this piece of state called searchTerm. And the one reducer that worries about searchTerm is called searchTerm, right? Now, the reason why I call this searchTerm is so I can take advantage of a little ES6 nicety which is if I have searchTerm: searchTerm, I can actually just say searchTerm, and just cut it down to one thing.

[00:04:04]
It's a new thing with the ES6. It's just me being super lazy. That's the sum of the story here. That searchTerm right there is the exact same thing as [searchTerm]:[searchTerm]. So that's what combined reducers does for you. I still see I have an error here, could not resolve a name,

[00:04:35]

>> Brian Holt: Could not resolve name.
>> Brian Holt: Right, I got this wrong.
>> Speaker 2: I think you need an equal sign there.
>> Brian Holt: Yeah, I think you're right there too.
>> Brian Holt: Okay, sorry. So go back to your types file. And you need to see ActionT =, which is something I forget there.

[00:05:21]
And then you also need the bar here and the bar here. And that's just the notation for declaring the types like this. Okay, and that should fix our problems. So that's what I just fixed right there what I have highlighted. Cool, and now, go back to reducers
>> Speaker 2: Sorry, what are the bars for?

[00:05:45]
Is that needed in generic types?
>> Brian Holt: So go back to reducers. And now, hopefully, action will be pleased with what you've done. Let's make sure.
>> Brian Holt: Cool, so now, we have to go fix something else but that's okay. We'll fix that here just momentarily. So, that is correct, that is working as expected.

[00:06:25]

>> Brian Holt: Yep, cool. So combineReducers is really great. What I like about it is now searchTerm is very much siloed just to this particular reducer. And other reducers that don't care about it, will not see it, right? So all of that object merging and stuff that we were doing previously.

[00:06:42]
combineReducers is just gonna do it for you behind the scenes.
>> Brian Holt: And you can actually use combineReducers kind of in tandem with other things as well. Like say you do have a reducer that needs to worry about multiple pieces of state all at once. You can write your own rootReducer that takes care of those cases.

[00:07:05]
And then at the bottom, use combineReducers to deal with all the other single responsibility ones. So you can use combine reducers and write your own reducers all at once, like that's an acceptable way to go as well. So I typically use combineReducers, but I wanted you to see that it's not very complicated what it does.

[00:07:27]
So, cool. So, I think the last thing we have to do is go set a type on Action Creators. So we have searchTerm here, and we just need to tell it that, that is a string.
>> Brian Holt: I'm still pissed off about eslint, but we were getting there, in just a second.

[00:07:55]
What I want to do is say export default here, right? But that's not what we wanna do.
>> Brian Holt: Okay, any questions about combineReducers or how we typed redux?
>> Brian Holt: That's really it for redux itself, right? That's pretty much all the surface area for Redux. We're gonna get in and augment some of the abilities of redux when we get into asynchronous actions.

[00:08:31]
But for now, that's it.

