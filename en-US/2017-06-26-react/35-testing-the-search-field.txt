[00:00:00]
>> Brian: So now we have two passing tests, right, and let's go ahead and make our third test which is gonna a little bit more involved but it's gonna show you some of the cool stuff you can do with Jasmine. Well and jest actually if that matter. So we're gonna have a search word here, this is testing exactly what I was talking about earlier that if I put Black here, that I get Black Mirror and Orange Is the New Black.

[00:00:21]
So I'm going to say const search word equals black. Okay, I'm going to do component.find. Did I not update this?
>> Brian: No, this is fine, okay. Component.find input.simulate, so I'm gonna simulate an event on the input. Before I move on, something I did wanna talk about here, so I did component.find showcard here so that's one of the cool things about enzyme is you can find either with like CSS selectors right which is what we're going to do here with this.

[00:01:08]
Or you can actually do it with reactive components you can say hey, I expect this reactive component to be found there which, I think is pretty cool right so it works both. For searching for shallowly rendered react components, which is why we import ShowCard up here. Okay, so now we're gonna stimulate an event, it's going to be a change event.

[00:01:31]
And we're gonna give it the event that we want it to pass, which is going to be event, target, value, search word.
>> Brian: Right, this is the event that we want to happen on the input, right? Does that makes sense?
>> Brian: So if we go look at our input here in search.jsx, we have this input, this is what it's targeting, and we want to trigger this on change handler.

[00:02:06]
That's the goal here. So, this is as if the user had typed in black into the search box, that's what line 19 is currently doing.
>> Brian: Okay, next thing we're gonna do is const showCount =
>> Brian: And what we're gonna do, I'm just gonna kinda shortcut this for you.

[00:02:36]
We want it to do this, this particular thing right here, where it's trying to find that we wanted to do this filter right here. So I'm just gonna copy and paste this right now.
>> Brian: Typically you don't wanna duplicate logic in your test, that's a bad idea. So what I would normally do, is I would abstract this out to a module and then test this module to make sure that it worked.

[00:03:08]
And then after I was assured that that test module worked, then I would bring that into my tests. That's not really a super useful exercise, so I'm just gonna copy and paste this, but I'm telling you that this particular thing that we're doing right now is kind of a bad idea.

[00:03:33]

>> Brian: So,
>> Brian: There we go.
>> Brian: So now what showCount is going to be is it's going to, I don't want this this.state.searchTerm, I want searchWord.
>> Brian: Yeah, you have to bring this component part right down there too.
>> Brian: Okay.
>> Brian: So some of the story is we have this show count right here.

[00:04:33]
This is gonna be however many shows that it actually finds, right? So the reason why I'm putting this as opposed to just putting the number that I know it's going to be, which is two. I'm doing this so that if I add stuff or take stuff away from that data.Jason file, that this test doesn't have to be updated every time that I do that.

[00:04:54]

>> Brian: Okay, so now I can say expect component.find(ShowCard).length).toEqual(showCount)
>> Brian: So in this particular case, let's step through this line by line to kinda make sure that you get what's going in. I have searchWord, right? Black, right? I'm gonna render out the component. I'm going to take that component, I'm going to find the input on there.

[00:05:37]
You might want to put like a class on there or something like that. Right now I know there's only gonna be one input but this is just lazy. This can be any CSS selector, okay? .find input, then I'm going to simulate as if the user was typing on it, right?

[00:05:53]
I'm gonna simulate a change event on that input. And I'm going to pass this event as the event for it, right? So this is like simulating a dom event, right, with a target and value, right? Cuz if you look at our search.jsx, what is it reading? Event.target.value, right.

[00:06:17]
Event.target.value, that is what it's actually reading. We are passing in this search word black into that, okay. So now this component is going to take off that re-render cycle inside of this particular component. And it's going to re-render to that new state, right? That new state if we look here, that's going to set this to be black, right?

[00:06:48]

>> Brian: Coming back to or spec. Then showCount is, if we look down here in search. It's basically simulating what's happening here, this filter statement. And then we're saying, does the amount of showCards match how many shows I expect it to be there? Cool, does that make sense? So now if we do yarn test.

[00:07:19]

>> Brian: It's not running the test. You need to say, please actually test this. It passes, just kidding.
>> Brian: Okay,
>> Brian: So expected to receive two.
>> Brian: And it caught a whole bunch of stuff. Yeah, no. Right now [LAUGH] we're giving it the actual shows, what we actually want is the length.

[00:07:50]

>> Brian: And I guess we could of just unlinked up here. Since that's actually what that variable represents. So the key is that I just added here. We need this .link statement right there. No, down there, .length.
>> Brian: Okay, let's try that again.
>> Brian: Expected value to equal 14, and it received two.

[00:08:25]

>> Brian: That's neat.
>> Speaker 2: Is your show count getting the index rather than the actual shows? Do we need to do two uppercase?
>> Brian: So there's two uppercase here and two uppercase there.
>> Speaker 2: On show title, or show description.
>> Brian: Show title and show description. No. It's doing that collectively here with this to UpperCase.

[00:08:55]

>> Speaker 2: I see what you're doing.
>> Brian: So it expected 14. So it is something wrong with this statement right here. Two is the correct answer so my test is actually correct, my test case is not doing it correctly. preload.shows.filter show, title toUpperCase indexOf searchWord.
>> Speaker 2: Is greater than or equal to zero?

[00:09:25]

>> Brian: And this needs to be, yeah, that's exactly it. I dropped that. Greater than or equal to zero.
>> Brian: Yep, okay.
>> Brian: Cuz this is a filter, it still needs to be true or false. So it was dropping one show which was a zero with element which is why we're getting 14.

[00:09:49]
Thank you.
>> Brian: So now we get all of D Test. So this is why I was saying that this is a good way to phrase it because there's a check mark that says search renders correctly, right, that is doing that.

