[00:00:00]
>> Brian: Let's go actually start typing our project. The thing that you're gonna find with any type system that you slowly introduce to your project is that up front it's a lot more burden then it is helpful, right? If you're only type checking one file, it basically accepting a bunch of, excuse me, what we're gonna call any types and I'll explain to you momentarily what that means.

[00:00:21]
But as we slowly expand and more files are being typed, you're gonna find that once everything is typed then it's a huge productivity boom for you. It's just up front you're gonna have to pay a pretty steep cost to be totally honest.
>> Brian: So let's go to search jsx and actually do some typing.

[00:00:45]

>> Brian: So the way that you opt in a file to be checked with flow is // @flow. As you can see already, my editor is already complaining, he's like, you told me to check flow, now you're gonna screw up a bunch of stuff. Actually it's only one thing, which is nice.

[00:01:06]
But you can see here, it says, hey, this isn't working yet.
>> Brian: And that's because Flow wants to have type annotations for parameters.
>> Brian: Which is what we're gonna do. And then the other thing is that. So we're gonna be doing more like invalid JavaScript, right? Adding type annotations to your code is not valid JavaScript because there's no type annotations in JavaScript.

[00:01:38]
So you would need a Babel plugin to transform your code from code that has flow annotations to normal JavaScript. Luckily for us, we’re including the React preset for Babel and that includes the flow annotation removing code. So if you’re not including that, you have to include that now.

[00:01:56]
But since we included that preset, in fact I’ll show you real quick, babel RC. This right here, this line, makes it so that our code is already able to remove those flow type annotations. Okay, sorry, going back to search.jsx. So now we want to type this event, right?

[00:02:20]
Because otherwise if you go here to yarn flow, it's gonna say, hey, you need an annotation here, I don't know what this is, right? The other thing to note is notice this ran really fast, right? As opposed to last time, it took a bit to start up. Before it was starting up that whole process, but now it's just running constantly in the background.

[00:02:44]
So now it's really fast. Okay, so, we need to add a type annotation to this. What is this? You're gonna find yourself asking that question a lot, when you're adding types to something. But, what this is, it's a really positive thing, not just for your future self and like getting the flow type and all the stuff like that.

[00:03:06]
But it's useful for you to think through what your code actually does, right? And you'll find here that you'll start refactoring things to be more concise because you're more aware of whats going into functions and whats coming out of them. That becomes very important when you're doing types.

[00:03:24]

>> Brian: Okay, so this is a KeyboardEvent.
>> Brian: What's nice about specifically flow is it has all this like browser stuff already typed for you. You don't have to do anything, like KeyboardEvent already exists. And if you need to or if you want to look at them, go to flowtype.org.

[00:03:48]
Something, another place that if you're gonna do flow typing, you're gonna spend a lot of time in the documentations. And there's like the type system, there's library definitions, configurations, all that kind of stuff.
>> Brian: For those of you with, and I would also recommend that you put this into your editor, like I have.

[00:04:11]
So again, I'm gonna show you for Sublime, you're gonna say, Install Package. I'm gonna share a list cuz I have it installed. And then if you go down here, remember that I installed the SublimeLinter,. Right, for the ESLint, there's another one called SublimeLinter-flow. And I'm gonna get all those flow errors directly in to my editor.

[00:04:35]
It already exists for Adam as well, I can't remember the name of the package off the top of my head. But I know this one called nuclide that Facebook puts out. I'd have very little experience with nuclide but nuclide was specifically built by Facebook with flow in mind.

[00:04:54]

>> Brian: Okay, so this is a KeyboardEvent. That's actually not even 100% true because this is a React Synthetic KeyboardEvent. Again, likely since this is built by Facebook, they already provided for this, so this is actually a SyntheticKeyboardEvent.
>> Brian: Did I spell that wrong? SyntheticKeyboardEvent.
>> Brian: Now I thought that was right.

[00:05:36]
Well, let's keep going. Let's stick with KeyboardEvent for just a second but,
>> Brian: Now what this is gonna complain about is it's still saying right here that event.target.value is not guaranteed to be there. That's because when you have a KeyboardEvent, it is possible for the browser to emit the KeyboardEvent with no target.

[00:06:01]
Don't ask me how that happens but it is possible. And so Flow is gonna make you say, I want you to acknowledge that this is going to be there. So what you can say is and,
>> Brian: target is going to be an HTMLInputElement.
>> Brian: And now, that's been typed.

[00:06:31]

>> Brian: SyntheticKeyboardEvent. Why was that working for me before? All right, react flow synthetic event.
>> Brian: SyntheticKeyboardEvent.
>> Brian: That's super weird to me. I have no idea why it doesn't like that. Okay, another problem that I have with sometimes with Flow, sometimes it's just slow on the uptake.
>> Brian: Cuz my yarn flow is not complaining, so I'm sure it'll eventually go away.

[00:07:29]

>> [LAUGH]
>> Brian: Yeah, it's particularly with Flow, sometimes it takes awhile for it to kind of say, you know what, this is actually okay. Like take your input from the command line is gospel. Okay, so we're gonna leave that alone for now.
>> Brian: That's what it is, yeah.

[00:08:05]

>> Brian: So we have to go make ESLint play okay with Flow as well.
>> Speaker 2: Is running the yarn flow output a list of files that it processes flow files,
>> Speaker 2: For these account or something.
>> Brian: There is something you can do.
>> Brian: I will just look at the help, so that's what it is, that's what it is.

[00:08:39]

>> Brian: So I'm gonna come in here to my project.
>> Brian: And we're gonna look at the eslint.json. This is what you need which I don't have in my notes.
>> Brian: Yep, that's the one. Okay, so come to your eslint.json. We need to let eslint to know, it's like, hey, we're gonna be doing a bunch of stuff with flow, and that's okay.

[00:09:16]
So right there you're gonna put plugin:flowtype/recommended.
>> Brian: Do I need to plug in flow and down there as well? I do, okay. And then above prettier, you're gonna also have to have a flowtype plugin.
>> Brian: So this is just saying I have this plugin flowtype for eslint. And I want you to bring in all their recommended rules, right?

[00:09:45]
They have more rules as well but I found they're a little too strict. So I just bring in what they call their recommended rule set. Okay, now, so yeah again, we added two lines, line number 9 right there and line number 3 right there. And let's go take a look at search again.

[00:10:12]

>> Brian: And now, now it's going to recognize that the SyntheticKeyboardEvent is actually a flow thing and that's okay.
>> Brian: Now the most beautiful part about flow to me is it's pretty good at already knowing what everything is. So the only reason that we had to annotate event right here was that there was no way that flowtype could figure out what that is eventually going to be.

[00:10:37]
How it was eventually going to be called, right? So we had to go in and say, hey, this is what this is, but everything else, right? It knows that like Search now is a React component, I never have to tell it that because it's already figured that out.

[00:10:54]
So it does a ton of what's called type inference for you, just out of the box for free.
>> Brian: Which is pretty great. And it's even gonna go as far to read actually like preload into the JSON file and see what's coming out of there and everything like that which is awesome.

[00:11:13]

>> Brian: So, let's go and do some more typing because that's always fun. Let's go to ShowCard.
>> Brian: Gonna opt this one into flow typing.
>> Brian: And as soon as you do that, then it's gonna say a bunch of stuff.
>> Brian: So the first thing it's gonna say is, styled-components required module not found.

[00:11:48]
That's a new one.
>> Brian: Well, let's keep going with this anyway. The thing about flowtype is you don't need prop-types anymore, right? Because the type checking that Flow is gonna do for you is more robust than anything prop-types would ever do for you. So we're actually just gonna drop the prop-types here.

[00:12:19]
And then down here where it says ShowCard.propTypes, we're actually just gonna go up and type these props right here where they are. So I'm just gonna copy this and then here, I'm going to make these the prop-types up here, but you gotta get rid of all of the isRequired stuff.

[00:12:46]
So I'm gonna just do this.
>> Brian: With yarn flow what is with that? Do I have more is required down there? Yeah, and drop the prop-types down there, you don't need those anymore.
>> Brian: yarn flow.
>> Brian: Required module not found.
>> Brian: Yeah, okay,
>> Brian: That is the issue.

[00:13:39]
So the problem that we've done here is that we ignored styled-components but we still have to acknowledge that it's there. So this is gonna be style-components, I think.
>> Brian: Yeah, okay, no.
>> Brian: So, going back to my completed code here, flow config libs styled-components. Did I do that?

[00:14:18]
I think that's what I did.
>> Brian: Styled-components, there we go. So what I did was come into the flow config where we're trying to ignore this directory because it has a bunch of flow errors inside of it. But we still have to acknowledge that it exists otherwise Flow want acknowledge it exists.

[00:14:40]
So libs is just gonna say this is something that I have coming in and just don't type check this, that's what it does.
>> Brian: So come back to ShowCard and now hopefully,
>> Brian: This resolved itself, okay.
>> Brian: Why don't you love me? What is your problem with me?

[00:15:14]

>> Brian: Well, it is what it is right now
>> Brian: FlowFixMe I think is what it is.
>> Brian: That's cool, we will come back to this later. But for now if you ever need to ignore a line which I do not suggest you do unless you're giving a live workshop in front of hundreds of people, you can use FlowFixMe to say ignore me for now.

