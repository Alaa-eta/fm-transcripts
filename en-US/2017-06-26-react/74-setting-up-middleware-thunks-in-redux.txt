[00:00:00]
>> Brian Holt: So what I want you to do is I want you to go into your store.js. So I guess I didn't talk about what compose is here. This is augmenting the abilities of Redux by handing it a middleware. This middleware just intercepts all of the actions, and feeds it in the Dev tools.

[00:00:19]
That's all this is Bit of code is doing, right? We're gonna hand it another middleware, which is going to make Redux able to deal with thunks. So what I want you to do up here is import thunk from 'redux-thunk'. And then down here, you're gonna say inside of the composed function, applyMiddleware.

[00:00:47]
So I guess I have to go and port that as well, applyMiddleware(thunk).
>> Brian Holt: And up here, we're gonna also have to get applyMiddleware.
>> Brian Holt: Yep.
>> Brian Holt: So just, you have to go to applyMiddleware. You have to import thunk. And then you have to apply the middleware in compose.

[00:01:24]

>> Brian Holt: Okay? Now, we're gonna have to create two different things, two different action creators. We're gonna have to create an action creator that actually goes out and makes the request, right? The thunk part. Then we have to have another type of action that actually takes the result of that and feeds it into Redux as an action, right?

[00:01:42]
So we need the Thunk and the actual action, that's gonna get dispatched, and I'll show you what that means. So first thing, let's go to action.js and we're gonna create a new type of constant here, which is gonna be ADD_API_DATA. That's gonna be ADD_API_DATA,
>> Brian Holt: And we'll finally get rid of that stupid eslint error.

[00:02:10]

>> Brian Holt: Okay. And now I want you to go into types, and we're gonna make another type of type. So action type will either be able to be SET_SEARCH_TERM, or add API data.
>> Brian Holt: Okay, close. And then here, down where we're exporting the action down here, we're gonna make another type of action T.

[00:02:53]

>> Brian Holt: So what are we gonna get back from the API? Well, in fact, let's go actually go run it. I still have it running but, if you need refresher, it's just the yarn api.
>> Brian Holt: And then if I go to localhost.3000/ some valid id,
>> Brian Holt: So this is from Master of None.

[00:03:18]
What does this look like? Well, it looks like a show, right? It's the same show, it's actually literally the show object, because that's where I'm reading it from. So the action type is gonna be ADD_API_DATA. What is the payload type gonna be? Show, right, that's what the payload's gonna be.

[00:03:38]
So this is gonna be ADD_API_DATA, space Show, right, because the payload type is gonna be Show. That makes sense? Now, we're gonna have to do one thing appeared to show because if you look over here, it's getting one more thing which is the rating, right? So we're just gonna add that in to our show type.

[00:04:07]

>> Brian Holt: And that's gonna be a string. You don't want it to be a number in this particular case, because we want it to be like 9.0. And if you make it a number, it's gonna drop to 0.0, right? So you want the ratings to always have that, so we're just gonna keep it as a string.

[00:04:24]

>> Brian Holt: Let's see, make sure I get that right.
>> Brian Holt: Okay, and actually this is gonna be a maybe type,
>> Brian Holt: Because we're not always going to get the rating back, that's only gonna be from back from the API. And when we preload it on the site, it is not gonna come back with rating data, so we're gonna make that rating data a maybe type.

[00:04:57]

>> Brian Holt: Okay? Now, let's go back to Reducers.
>> Brian Holt: Okay, we're going to import, ADD_API_DATA. So again, just to be clear, right now everything that we're doing is just the synchronous normal action types. We haven't done anything asynchronous yet.
>> Brian Holt: So we have const searchTerm here, and then what we're gonna have here is const apiData.

[00:05:27]

>> Brian Holt: The default state of this is going to be an empty object, and the action is going to be, of course, an action. So, how are we gonna store this apiData? I found a useful way to do this is to start with as a key value store, right?

[00:05:49]
Because every time we go to the API, we want to store in a way that we can easily retrieve it. So we're going to restore it with an object where the IMDb ID is actually going to be the key, and the value of that is going to be the show object, right?

[00:06:05]
So that way, in the future, if I navigate to Orange is the New Black, and then I back out of it and then I go back to Orange is the New Black, I can just get the data out of Redux, and it will have to request it again from the API, right?

[00:06:15]
Does that make sense?
>> Brian Holt: Maybe not, no, okay, okay, [LAUGH] I saw some head shakes, so we'll go with yes, it makes sense, okay.
>> Brian Holt: So the first thing you're gonna do is just like in searchTerm, I'm gonna say if (action.type ===ADD_API_DATA).
>> Brian Holt: So another thing that we're kind of doing here behind the scenes, which you may not have noticed, is this another type refinement here, which I think is pretty clever.

[00:06:50]
So as soon as I establish that Action.Type === ADD_API_DATA, what do I know about the payload? I know for a fact the payload is going to be a show. So I can start saying like Action.Payload.Rating, and my typecheck is like cool. I know that's gonna be there, because you checked to see if the type was an ADD_API_DATA.

[00:07:12]
It is cool, I know exactly what payload is. By the same token, I can say return action.payload.toUpperCase here, right? This is not gonna fail because this knows like, that's a string. I know that's a string, whereas, if I try and say like map, right? I don't think that's a function on strings.

[00:07:34]
It's gonna say hey, add some payloads of string and it doesn't have a map feature on it, so that's cool. That's how we're able to do that. This is a type refinement right here, kinda happening behind the scenes.
>> Brian Holt: I think it's cool. You can disagree with me.

[00:07:54]
You're just wrong, that's all, [LAUGH] just kidding. Okay, so what we're gonna do here is we're going to return, if it is in fact ADD_API_DATA is the action type. We're gonna do object.assign, empty object, new object, right? state, so we're gonna keep everything that we had before, then we're going to return a new object.

[00:08:23]
So what we want is we want this, the key here to be whatever the IMDb ID of the new thing that we got. So the way we're gonna do that is we're gonna say, action.payload.imdbID. These square brackets around it mean I want this to actually be what it is, right, so action.payload.imdbID.

[00:08:46]
It's gonna take that string and make that the key, okay? Then I'm gonna say :action.payload.
>> Brian Holt: This would have been similar, like if you wanted to do it a different way, constkey = action.payload.imdbID. And then you could have said const obj = new object, you could have said obj key = action.payload, right?

[00:09:20]
And now object would be what you would put here. This is just the new ES6 way of doing dynamic keys, right, and dynamic,
>> Brian Holt: Yeah, key names. That make sense? Okay, cool.
>> Brian Holt: Okay, and then if it's not an ADD_API_DATA action, what do we do? Just return whatever was there.

[00:09:59]

>> Brian Holt: Okay? Then down here, the name of our key and our state is going to be called apiData, right? So we can just do ,apiData.
>> Brian Holt: Cool? So that's the Reducer. Now, we are set up to be storing these API data results.

