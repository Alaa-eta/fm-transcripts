[00:00:00]
>> Brian: Hopefully now you're seeing more things kind of come together, right? The fact that you can make components up of other components means we have some pretty powerful patterns at our disposal. We can create reusable components like a day picker, right? And then we can reuse that day picker throughout our entire website.

[00:00:20]
I'm sure you've seen many instances where this could be useful.
>> Brian: So yeah, we can use these components to encapsulate logic, mark up and style, kind of compress those all together and then shift them out in individual pieces. And we're kind of getting out what the core of what React is all about.

[00:00:42]
So at least for me I used to write back-phone, but I used to write a decent amount of angular pre one, like 0.8, I think it was when I was writing angular, maybe angular one.
>> Brian: And they were kind of all inclusive frameworks, right? They kind of emulated NVC on the server, it felt a lot like writing something like Django or Rails or something like that.

[00:01:05]
We have the model, you'd have the view and you'd have the controller, right? And you'd have the model sit on one end, you'd have the view sit on the other, and then the controller's kind of routing to each other. This is an amazing paradigm on the server, really, there's not many better ways to write servers.

[00:01:21]
And we kind of thought well this is a really great way to write servers, why shouldn't we try this with the client, right? And it worked okay, it was better than writing the jQuery spaghetti code that at least I used to write. But it over time you kinda see that kind of the cracks show when you have a large app right.

[00:01:37]
The real problem is that you'd have these models and they'd be used, one model be used in a bunch of different views, right. Then you have these controllers, doing all these sort of crazy routing from one model to many controllers and many controllers to one model, right. It was just many to many mess, that's kind of what ended up happening.

[00:01:55]
So some really smart people at Facebook decided that this was not necessarily a very good way to write code. And they kind of yearn for the days when we could just write some mark-up on a page and it just worked, right? So they kind of went forward with that idea that well, why don't we embrace the paradigm of what's on the web, which is components, right?

[00:02:15]
We would have these bits of mark-up which had CSS that would get applied to them. And then we could reuse these different pieces of mark up all over the site. So they kind of embraced and leaned into this pattern, and said well, why can't we create these components then we can render out to the dom?

[00:02:34]
And so that's kind of what they started leaning into and we ended up with react components. And a React Component is just an encapsulated piece of component, HTML, or behavior, style, and markup, HTML, CSS, and Java Script. Now this ends up being really really powerful because it's a natural way to think about the web, right?

[00:02:56]
It's a natural way of creating interfaces. So rather than having models, views, and controllers all separated that separation of concern doesn't necessarily make a ton of sense for interfaces. So what they did is they took models of user control, and they shoved them all together for very very small components, right.

[00:03:16]
So everything for a component lives inside of one file basically. Now this is really really awesome because if something breaks it's all right there, you don't have to go through multiple files, right? How many of you have ever debugged like an angular one app and you look at some component that broke on the page, and you have no idea how it broke, right?

[00:03:37]
It could be in the directive, it could be in the controller, it could be in the template, it could be in the service. Like, I can go on and on and on of where all the different places this could live. The cool thing about a React Component is due to the encapsulation of how these components work, if you see something that breaks on a page, you have a pretty damn good idea of what happened, right.

[00:04:00]
Because it all lives right there in that one file. Now I'm kind of exaggerating a little bit because modules can break and etc but you always have a good starting point. So this is all getting to why I love React. React is going to be more robust for sure than Angular, right?

[00:04:19]
You can write amazing interfaces with Angular and with very, very little code. However when you go back to maintain some of these very clever Angular apps. I'm speaking on my own behalf, I wrote crappy Angular, I own that [LAUGH]. But-
>> Brian: Maintaining some of these clever Angular apps is atrocious, it's nightmarish, right?

[00:04:42]
With reactive forces even to such a paradigm that it's much easier to debug, it gets much easier to maintain. It's much easier for someone to come back later, you, yourself or someone else and read through the code and kind of understand it because it's very, very explicit. This comes to the cost as that you write more code, it's physically more key strokes to get it out.

[00:05:01]
That's kind of the paradigm of why React is the way that it is. There's a forth some other really interesting patterns which we're gonna be getting to throughout the next couple of days but that's where we're gonna start. Yeah.
>> Speaker 2: Is this the couple of clarifications or questions in the chapter, why we need the null parameter?

[00:05:19]

>> Brian: Yep.
>> Speaker 2: And the barge is saying the second parameter is a set of properties, attributes, that can be passed in?
>> Brian: Yeah.
>> Speaker 2: The first is the tag.
>> Brian: Yeah.
>> Speaker 2: The second is properties.
>> Brian: Yeah, I'll talk about it here in just a sec.
>> Speaker 2: The third is the child element.

[00:05:33]
And then, yeah, why do we need to do two react CreateElement together and your just showing nesting.
>> Brian: Yep, yep. So to talk about this null right here you can also pass an empty object, that's fine too. So what this is? This is all the attributes or properties that's going to be passed to that particular element.

[00:06:00]
So for example for a div let's say you wanted to give it this particular div, an id of, let's do this one right here. An id of like my first component. You'd say id: "my-first-component".. So now if I refresh this, I look here inside of my element, notice I get the id right there of my first component.

[00:06:25]
So this is how you pass attributes to these particular things. Now we're going to, we can also pass attributes to my title as well which we'll do momentarily.
>> Speaker 2: And then one more clarification is you're taking about angular one, right? With everything being split apart, is angular two and four whatever- [CROSSTALK]

[00:06:43]

>> Brian: I don't know anything about angular two, so.
>> Speaker 2: Okay.
>> Brian: So all of my ragging angular from here forth will be on angular one. Thank you for that clarification.
>> [LAUGH]
>> Speaker 2: Yeah, a lot of the frameworks are coming into this new paradigm of putting your mark of your CSS, your component and everything into one file now.

[00:07:03]

>> Brian: Definitely. No, it would be fun and useful to compare this particular course with loose course on angular two.
>> Brian: Cool. So yeah, someone ask about why we're doing multiple create elements, right? This is how you create like for example a div, and then inside of that div, right?

[00:07:26]
So notice that were still inside of this particular parenthesis from this one, we're doing nesting, right? And here instead of putting text, we can actually put more CreateElements, right? It's like HTML there's infinite nesting that you can do. So that's what going on there.

