WEBVTT

1
00:00:00.650 --> 00:00:04.580
&gt;&gt; Brian Holt: Let's go put into
our package.json how to build, so

2
00:00:04.580 --> 00:00:05.560
we're gonna put build.

3
00:00:08.380 --> 00:00:11.570
Now notice I don't have webpack
installed globally right now cuz I

4
00:00:11.570 --> 00:00:13.070
was running it from the node modules.

5
00:00:14.430 --> 00:00:17.941
Well I can just actually put webpack here.

6
00:00:17.941 --> 00:00:22.774
And when you do yarn build, or npm run
build, it's actually smart enough to

7
00:00:22.774 --> 00:00:27.020
look first in its node modules to
see if it's there first, right?

8
00:00:28.350 --> 00:00:31.280
So every time I wanna build,
I'm just gonna say yarn webpack, and

9
00:00:31.280 --> 00:00:32.800
it's gonna build for me, right?

10
00:00:38.257 --> 00:00:41.920
&gt;&gt; Brian Holt: So I just put yarn or
build right there.

11
00:00:43.840 --> 00:00:50.286
So, now if I go back to my command line,
&gt;&gt; Brian Holt: And

12
00:00:50.286 --> 00:00:54.830
I say clear, yarn build,
notice it runs webpack.

13
00:00:59.801 --> 00:01:00.685
&gt;&gt; Brian Holt: And same thing happens.

14
00:01:03.693 --> 00:01:06.243
&gt;&gt; Brian Holt: Now I wanna show you
something else that's kind of a cool

15
00:01:06.243 --> 00:01:07.730
trick too.

16
00:01:07.730 --> 00:01:10.770
Say I wanted to run it with that -p again.

17
00:01:10.770 --> 00:01:16.430
I can say yarn build -- everything
after the -- is going to

18
00:01:16.430 --> 00:01:21.330
be provided as a command line argument to
the command being ran underneath, right?

19
00:01:21.330 --> 00:01:27.020
So if I say -p,
notice it's gonna say webpack -p, right?

20
00:01:27.020 --> 00:01:29.970
So if you just want to try something
out real quick that's a easy cheat way

21
00:01:29.970 --> 00:01:33.297
to do it.

22
00:01:33.297 --> 00:01:35.025
&gt;&gt; Brian Holt: And
as was pointed out earlier,

23
00:01:35.025 --> 00:01:38.739
what's annoying about what's
happening right now, is I have to run

24
00:01:38.739 --> 00:01:42.990
build every single time I run a change
of file, which is a non-starter for me.

25
00:01:42.990 --> 00:01:44.520
I'm way to lazy to have to do that.

26
00:01:45.690 --> 00:01:48.720
So, luckily webpack takes care of that for
you.

27
00:01:49.890 --> 00:01:53.704
If I just provide --watch,

28
00:01:55.224 --> 00:01:59.448
&gt;&gt; Brian Holt: It's gonna build once, and

29
00:01:59.448 --> 00:02:04.560
now notice that it doesn't exit.

30
00:02:04.560 --> 00:02:05.920
It's still going.

31
00:02:05.920 --> 00:02:11.100
If I come in here to clientApp.jsx and
I change this to be instead of

32
00:02:11.100 --> 00:02:17.050
Silicon Valley,
I put House of Cards and I save it.

33
00:02:18.210 --> 00:02:22.320
Notice it rebuilt really fast because
it keeps everything in memory for you.

34
00:02:23.340 --> 00:02:26.040
And now if I refresh here,
it says House of Cards.

35
00:02:29.485 --> 00:02:30.620
&gt;&gt; Brian Holt: Any questions about that?

36
00:02:34.167 --> 00:02:37.112
&gt;&gt; Brian Holt: So again,
let's go put that into our package.json,

37
00:02:37.112 --> 00:02:39.480
cuz I think that's useful to have.

38
00:02:39.480 --> 00:02:44.612
So what we're gonna do here,
&gt;&gt; Brian Holt: Is we're gonna

39
00:02:44.612 --> 00:02:49.730
say watch and
it's gonna be webpack --watch.

40
00:02:55.744 --> 00:03:01.194
&gt;&gt; Brian Holt: Okay, and now,
you can just say yarn watch,

41
00:03:01.194 --> 00:03:04.790
and you're off to the races.

42
00:03:06.620 --> 00:03:10.500
So the last thing I wanna do,
that I wanna show you.

43
00:03:10.500 --> 00:03:12.710
And so if I say yarn lint right now,

44
00:03:12.710 --> 00:03:16.608
it's gona lose its mind in
about the bundle file, right?

45
00:03:16.608 --> 00:03:21.417
Because it's gonna have literally
every eslint problem there is,

46
00:03:21.417 --> 00:03:23.450
and we don't care, right?

47
00:03:23.450 --> 00:03:26.071
It's compiled code, we don't care
if it passes lint or not, right?

48
00:03:26.071 --> 00:03:28.010
We care that our source code passes lint.

49
00:03:29.570 --> 00:03:33.070
So real quick,
I want you to go create a new file.

50
00:03:35.409 --> 00:03:38.322
&gt;&gt; Brian Holt: And
I want you to call it .eslintignore,

51
00:03:38.322 --> 00:03:40.660
I think it's what it's called.

52
00:03:42.130 --> 00:03:42.630
Yup.

53
00:03:47.115 --> 00:03:50.111
&gt;&gt; Brian Holt: And
then inside of eslintignore,

54
00:03:50.111 --> 00:03:54.721
I want you put public/ and
node_modules/ right?

55
00:03:54.721 --> 00:03:58.700
Because if some node maintainer
is not passing your lint rules,

56
00:03:58.700 --> 00:04:00.660
then you don't care about that either,
right?

57
00:04:02.799 --> 00:04:04.415
&gt;&gt; Speaker 2: Can you go
back to package JSON?

58
00:04:04.415 --> 00:04:08.050
&gt;&gt; Brian Holt: Yeah, sure.

59
00:04:14.375 --> 00:04:17.020
&gt;&gt; Brian Holt: Now right after
this I'll push a branch.

60
00:04:17.020 --> 00:04:19.530
So you can have all the built config and
stuff like that.

61
00:04:24.933 --> 00:04:27.455
&gt;&gt; Brian Holt: So
now if I come back here and

62
00:04:27.455 --> 00:04:32.080
I say yarn lint,
we should be passing lint again.

63
00:04:35.667 --> 00:04:37.507
&gt;&gt; Brian Holt: So
if you ever have arrows with lints,

64
00:04:37.507 --> 00:04:39.480
the best thing to do is just ignore them.

65
00:04:39.480 --> 00:04:41.230
That's ultimately what
I'm getting at here.

66
00:04:42.710 --> 00:04:43.350
That's a joke.

67
00:04:43.350 --> 00:04:44.080
Don't do that.

68
00:04:44.080 --> 00:04:47.067
But you can definitely
ignore your bundled files.

69
00:04:49.977 --> 00:04:53.310
&gt;&gt; Brian Holt: And the other thing,
I believe, I should check.

70
00:04:53.310 --> 00:04:56.467
I'm pretty sure prettier also
reads your eslintignore,

71
00:04:56.467 --> 00:04:57.720
so that's also helpful as well.

