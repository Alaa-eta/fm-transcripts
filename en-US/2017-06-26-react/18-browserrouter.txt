[00:00:00]
>> Brian Holt: I'm getting really sick of this hash routing going on. So let's actually go make that work. Go back to client app, change HashRouter in all three places here to, come on.
>> Brian Holt: Change that to BrowserRouter.
>> Brian Holt: So import BrowserRouter and then the opening and closing tag change that to BrowserRouter.

[00:00:36]

>> Brian Holt: Okay now go to your webpack config
>> Brian Holt: And inside of the devServer, just add one more thing that says historyApiFallback is true. This is basically telling your devServer that if you don't recognize something just send it down to the client. Or in other words, the client will worry about the routing, I will not.

[00:01:11]

>> Brian Holt: So I just added line 13 here.
>> Speaker 2: And that allows browser router to work?
>> Brian Holt: Yep, if you don't put that then you're going to get a 404 as soon as you go to search, right? Cuz it doesn't know to send it down to the index at html.

[00:01:39]
Now you've gotta restart your server cuz you modified the. And there you go. 404s will fallback to index.html.
>> Brian Holt: Question I'm often asked is, like will, if 404s fall back to the index.html what happens when I actually have a 404? And the answer to that question is that your browser router will have to take care of it as well.

[00:02:12]

>> Brian Holt: So in fact I think we can just do that super quick. Not, this is in my notes so. Programming on the fly. So you get const FourOhFOur = H1FourOhFour, and then you can do down here the last thing route, and you just say component without a path, basically says if nothing else matches, then render this.

[00:02:57]

>> Brian Holt: So now I should be able, I'll go back in just a second, but let me. When I'm coding on the fly, it's probably best to, then you need to do switch, right? Well, we're getting crazy now.
>> Brian Holt: So we're gonna put a component in there called Switch and I think this should work now.

[00:03:35]

>> Brian Holt: [NOISE] Good, okay so let's talk about what or what we did here. Okay, so couple of things happened. First thing we do is we switch the browser router, right? So, if you look here our URLs are now much better. They look like what we were to expect when you go to /search it takes you to this page is supposed to have stupid hash in there.

[00:04:03]
This is also way more SCO friendly 10 billion times more SEO friendly, I believe that's an actual number.
>> Brian Holt: The second thing we did here, is we told webpack that whenever it does not recognize the URL, right cuz it doesn't have a /search file to serve, it doesn't know about anything like that.

[00:04:25]
So it, if you don't recognize something just send it index.html. That's what this HistoryApiFallback is. This is probably not what you're going to do in production. Definitely not what you're going to do in production. Actually you're not going to run dev server in production, so you're not going to do that in production.

[00:04:45]
So this is a dev trick, okay? And then you're going to go back to client app. I wanted to show you what a 404 looks like. So we made this 404 component. And we told it to render, basically any time that nothing else is matched. However if we did not put the switch component in, what the switch component does is says render exactly one component.

[00:05:17]
And never render two. So, then it's gonna go in order and notice on landing it matches this one first, right? So then it doesn't even look at the other ones. If I don't have that switch component in there, it's gonna render both of them, right? Cuz they both technically match, this one right here 404 matches everything, right?

[00:05:37]
So you need the switch component to say, only render this when nothing else matches, and make sure it's the last one. Any questions about router?
>> Brian Holt: If there's some more advanced and weird cases you can use with router but to be honest with you this is most of it.

[00:05:56]
I'm gonna show you the other kind of, other two harder things to do with router which is making service side router work. Because If you don't do it correctly, you end up writing your routes twice, right? Once in the server and once in the client. And as everyone knows that writes any amount of code, if you try to keep two files in sync, they inevitably fall out of sync, right?

[00:06:20]
So it's really nice if we can make the server side or the router here work both on the client on the server, which you can, It is possible, we'll do that later. And then we'll also do code splitting, so you can split on routes as well. So you can asynchronously load those chunks.

[00:06:36]
Yeah?
>> Speaker 3: How do you comment out a section of HTML, in JSX?
>> Brian Holt: Yeah so, he's astutely pointing out that, that does not work. So if you remember, anything between the curly braces is a JavaScript expression, right? So if I wanted to comment out this route right here, I'd do.

[00:07:03]

>> Brian Holt: Right?
>> Brian Holt: That's how you do block comments in JavaScript is /star then star/ to end it. And then we just put that inside of curly braces, and anything between those two things will be commented out.
>> Brian Holt: That make sense?
>> Brian Holt: The another thing you can do which is pretty easy is you can just move it out, and then just comment it.

[00:07:43]

>> Speaker 3: One note on that, because I used my command/ editor comment. And it did that, exactly what you said, but then the linter underlined it. And now that you said that that is correct, I looked at what the linter was telling me. The space is required after the asterisk.

[00:08:02]

>> Brian Holt: Yep, like that? Yep, that Airbnb config is super strict. But it will save you bugs, I promise.
>> Brian Holt: Other questions?
>> Brian Holt: How do we feel so far, is brain melting a little bit? Is it just a little mushy? It's a lot of content in a short amount of time.

[00:08:31]

>> Speaker 4: I do have one question. Will we be able to do dynamic routing?
>> Brian Holt: In what sense?
>> Speaker 4: So, let's say that we were going to do translations or something like that, and then have it in the URL have like English or Spanish like /en or /es or something like that.

[00:08:52]

>> Brian Holt: You can do it like that.
>> Speaker 4: You can do it like that?
>> Brian Holt: So if you've prefixed it with a colon is saying this is a variable. We'll actually be doing this later when we add our next route which is details. And now, so basically, anything can match on this, right?

[00:09:07]
You can give it regular expressions I think to only match on certain things, like I think there is some fanciness to go on there.
>> Speaker 4: Okay.
>> Brian Holt: It will then pass it as a parameter to search, right? And then inside of search you can switch on and do whatever you want.

[00:09:20]

>> Speaker 5: People are just asking to get your plugin for sublime, that's adding a little green and red dots.
>> Brian Holt: Right here on the side?
>> Speaker 5: Yeah.
>> Brian Holt: It's called Git Gutter.
>> Speaker 5: Git Gutter.
>> Brian Holt: It's one of my favorites. So it's probably super hard for you guys to see.

[00:09:42]
If you see that little plus red right there. My theme is all sorts of messed up right now. It's a lot bigger typically on my computer. But that's a line that I have modified I think, no I've deleted lines between that since I last committed. Or if I add like.

[00:10:03]
So you can see what the white means I've added new lines. And then if I do, you'll see, whoa, that's red, because it's not real. If you look down here where it says the yellow square, I've modified it. So it, that actually might be useful for you to kinda follow along cuz you can see what I've seen since I last committed.

[00:10:28]

>> Speaker 5: And then they're also saying in the terminal as well, you've got something for get. Like my ZSH get plugin or something like that.
>> Brian Holt: The, my bash prompt, this thing?
>> Brian Holt: They might be talking about that brew list. Bash git prompt that's what it is.
>> Brian Holt: So I'm using bash, this isn't in ZSH.

[00:11:01]
I was using fish before this but if I used fish no one would understand what the hell I was doing. So we're sticking to the bash today, yeah.
>> Speaker 4: Is there any known disadvantages to using the hash router?
>> Brian Holt: It's like really SEO unfriendly in particular, so that's, that's part of it.

[00:11:25]
It's just, it's easier to set up server side. But once you set it up on the service side to work with the client typically it's not a lot more work to keep it going. So it's just a little bit more front work. And it just makes for better looking URLs which, it's just a better thing.

[00:11:44]
Yeah, it makes deep linking better, it's just, it's a better thing. You should do it. Because I said so. Just kidding, I don't know.
>> Speaker 6: I was gonna ask that exact same question.
>> Brian Holt: Yeah, better looking URLs, right? I mean, one of, one of the tests that I ran at a former company was be found that if you have better URLs, people can remember them.

[00:12:10]
And so they'll share them, they'll tweet them, all those sorts of things.
>> Brian Holt: And if people see hashes in there, they don't know what that mean.

