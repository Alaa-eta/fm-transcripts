[00:00:00]
>> Jen Kramer: All right, so then we're gonna move on here to nesting, so if you open up chapter 13.
>> Jen Kramer: And I believe what have I got going on here this time?
>> Jen Kramer: Okay. So this time what I've done is the following. I have the same fine web page we've been working with so far, and inside of my article I have a series of little boxes, which I'd like to display all next to each other, okay.

[00:00:29]
So there's a couple of ways that you could code this. You could try coding this just with Flexbox, using these asides here, these three asides and white. You could code them with Flexbox, inside of this particular article. That would be a really great way of doing things. Then Flexbox will control however many items there were.

[00:00:49]
They would wrap on to other lines. They would adjust to the appropriate widths, and whatever parameters that you happen to set up. And what I'm talking about when I say lay this out with flexbox, I'm talking about the way that we laid out our image gallery with flexbox, not the flexbox grid system.

[00:01:06]
There's no reason to use the flexbox grid system if you're working with CSS Grid. Just worked with CSS Grid, okay? But in the interest of showing you exactly how a nested grid would work. If that one to being something that is important to you, I will show you that now.

[00:01:25]
The disadvantage here, to the CSS group portion of this is that it doesn't depending on what kind of crazy layout you're doing in this CSS Grid. It may or may not repeat adequately. So like if you think about the Mondrian paintings we laid out earlier, it'll be pretty hard to repeat that for another bunch of these articles.

[00:01:47]
And you know, flexbox of course, you get what you get. It's gonna be a series of these boxes one after the other. But I'm right now just demonstrating to you how a nested grid system would work. So the HTML is exactly the same as what we have been working with before.

[00:02:04]
We're gonna go to the CSS and what I've done here is the following. So remember that, there's a parent-child relationship in grid. We have the grid container, and you have the grid items. So the grid container, its direct descendents are all grid items. Anything inside of the grid items is unaffected by grid, right?

[00:02:30]
So if you look at your HTML here, we have wrapper, which is our grid container. Its children are the header and the article, right? And the aside, so those are all grid items. But inside of the article itself, I now have this div with a class of nested and three asides inside of that.

[00:02:52]
None of those have any grid properties associated with them at all because that's as far as the inheritance goes. From the rapper to its children and that's it. So what we need to do here is, with this div class of nested, we're gonna declare that to be the next grid container.

[00:03:11]
And the sides become the grid items, make sense?
>> Jen Kramer: Okay, so to do that,
>> Jen Kramer: Here, we'll go ahead and put in another class. I'm gonna put it in right before my media query here. And I'm gonna call this the nested class, which you saw it was there inside of a div.

[00:03:33]

>> Jen Kramer: And just as we typically do, we can just say display: grid, grid-gap. Whatever you wanna do, I said 1em, you could, of course, pick whatever you want.
>> Jen Kramer: And I added here also a grid-template-columns,
>> Jen Kramer: Auto. And the reason I did that is because I'm gonna call out grid-template-columns in the media queries later.

[00:04:04]
Otherwise, I would just not even declare it here. Okay, then inside the media queries.
>> Jen Kramer: So in this first media query here.
>> Jen Kramer: So here's what I did. We have a bunch of asides going on here, so there's a series of asides that are here, okay? There's also an aside over here on the outside.

[00:04:35]
You could do funky things with whatever, nth child or nth of type and so forth. To select these, my sense was it would be simpler for a lot of people if I just declared a class here. So I'm gonna declare this last aside here, that's on line 33 in my HTML.

[00:04:52]
I'm gonna call that a class of sidebar cuz I want its behavior to be very different than the sides that I'm working with inside of here.
>> Jen Kramer: And consequently, inside of my media queries where you see the side currently I'm gonna change that to dot sidebar in both locations.

[00:05:19]
Otherwise what would happen is that the styles that are here for the aside. The generic HTMO class would apply also to those asides that are going to be inside of the article. And we don't want that. So that was a just a switch we had to make because we're adding this extra code.

[00:05:36]
Now the actual new code that we're gonna add is this, nested, is my class inside of the media query. And I can then say, grid-template-columns: repeat. Three coma, one fraction,
>> Jen Kramer: Okay?
>> Jen Kramer: So that make sense?
>> Jen Kramer: Okay.
>> Jen Kramer: And if we now take a look at our webpage and refresh.

[00:06:14]
There's our three asides all side by side. Everything looks great. And when I crunch the page down, at some point along the way those will all stack, and there they go, okay?
>> Jen Kramer: All right.
>> Jen Kramer: So just to refresh again. What we did was, we declared with a class of nested becomes our grid container.

[00:06:49]
The asides, theyâ€™re inside of that, become our grid items. And that is then reflected inside of our CFSs. So, here is our nested, is our grid container. Declared here outside of the media queries and then inside the media queries we can declare exactly how we want those to display.

[00:07:09]
In this case, at the larger screen sizes, we'd like to have three columns of equal size. That bobble dimensions we just gonna stuck them on top of each other.

