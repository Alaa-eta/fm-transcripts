WEBVTT

1
00:00:00.200 --> 00:00:03.660
&gt;&gt; Jen Kenner: So Floats are one
of the original hacks for layout.

2
00:00:03.660 --> 00:00:07.350
When I started back in 2000,
started laying out webpages,

3
00:00:07.350 --> 00:00:12.290
we had Tables and that was how we laid
out webpages because we had nothing else.

4
00:00:12.290 --> 00:00:14.580
Floats came along shortly thereafter.

5
00:00:14.580 --> 00:00:17.766
This was in the much nicer
way of laying things out, but

6
00:00:17.766 --> 00:00:22.005
all floats were even intended to do
was to float an image on a webpage.

7
00:00:22.005 --> 00:00:25.635
Make it go over to the left,
wrap the text around it really nicely,

8
00:00:25.635 --> 00:00:28.865
kind of like what we're
accustomed to seeing in print.

9
00:00:28.865 --> 00:00:31.685
It was never really intended
to lay out whole webpages.

10
00:00:31.685 --> 00:00:35.004
But we had nothing else, and
the market was fairly clean,

11
00:00:35.004 --> 00:00:39.020
of course table-based market can
be something entirely different.

12
00:00:39.020 --> 00:00:43.362
So floats were something that we
went ahead and took advantage of and

13
00:00:43.362 --> 00:00:47.380
we had taken advantage of now for
lo these many years.

14
00:00:47.380 --> 00:00:51.490
So remember that they are a hack for
layout, although they are very cross

15
00:00:51.490 --> 00:00:54.860
browser compatible because they have
been around for a really long time.

16
00:00:54.860 --> 00:00:57.420
They have rows and cells, right?

17
00:00:57.420 --> 00:01:02.180
So if you think about your favorite
responsive design framework,

18
00:01:02.180 --> 00:01:03.420
there's typically a row.

19
00:01:03.420 --> 00:01:05.500
Inside of the row there's
a series of cells.

20
00:01:05.500 --> 00:01:09.780
One row has nothing to do with
the next row in terms of layouts.

21
00:01:09.780 --> 00:01:11.460
This is just typically
the way that it works.

22
00:01:12.750 --> 00:01:16.990
The rows typically again,
most of the responsive design frameworks.

23
00:01:16.990 --> 00:01:20.551
The rows are responsible for
clearing the cells,

24
00:01:20.551 --> 00:01:23.360
because if you float, you must clear.

25
00:01:23.360 --> 00:01:26.029
If you float, you must clear.

26
00:01:26.029 --> 00:01:27.326
Let's say it one more time!

27
00:01:27.326 --> 00:01:30.352
If you float, you must clear.

28
00:01:30.352 --> 00:01:34.474
And I say that because many of the
problems that we encounter as we layout

29
00:01:34.474 --> 00:01:38.239
webpages and we don't understand
why something happened,

30
00:01:38.239 --> 00:01:41.910
is because you floated but
you didn't clear, okay?

31
00:01:41.910 --> 00:01:43.560
So, don't forget to clear when you float.

32
00:01:44.920 --> 00:01:48.450
The source ordering is going to
determine the display on the page.

33
00:01:49.550 --> 00:01:52.980
So, depends on what order your HTML is.

34
00:01:52.980 --> 00:01:56.960
That's how things are going to
display on your webpage with floats.

35
00:01:56.960 --> 00:02:00.890
With the minor exception, it is possible
to reorder some of this things like make

36
00:02:00.890 --> 00:02:04.950
the left column on a desktop
appear underneath the content.

37
00:02:06.260 --> 00:02:08.240
Say, on a mobile phone.

38
00:02:08.240 --> 00:02:13.580
But, this kind of rearrangement
is fairly limited, alright?

39
00:02:13.580 --> 00:02:17.650
Fairly limited as to what we can do in
terms of rearranging things on the screen.

40
00:02:17.650 --> 00:02:19.240
Wait until you see what
we can do with grid.

41
00:02:20.500 --> 00:02:25.070
Okay, one of the major disadvantages with
floats are equal column heights, right?

42
00:02:26.330 --> 00:02:27.580
So we can have a wonderful row,

43
00:02:27.580 --> 00:02:32.160
we can have a series of cells in it,
they're all different heights.

44
00:02:32.160 --> 00:02:37.110
Especially when we go from,
say a desktop size to a tablet size and

45
00:02:37.110 --> 00:02:40.200
things wrap around,
we commonly run into issues.

46
00:02:40.200 --> 00:02:43.380
So here's some diagrams of
what I'm talking about.

47
00:02:43.380 --> 00:02:44.930
Here I've got a row.

48
00:02:44.930 --> 00:02:47.610
Here's a series of cells
inside of that row.

49
00:02:47.610 --> 00:02:51.240
Let's say that they all are marked
up in the following way.

50
00:02:51.240 --> 00:02:54.950
Those of you who are standards
compliant people, yes,

51
00:02:54.950 --> 00:02:59.620
I've just done this all with divs, but if
you notice, we don't exactly have the most

52
00:02:59.620 --> 00:03:03.230
interesting content in the world, so
we don't need any semantics at all.

53
00:03:03.230 --> 00:03:04.830
This is just done with divs.

54
00:03:04.830 --> 00:03:10.590
So, we have a row on the outside, we have
a series of columns inside of this, And

55
00:03:10.590 --> 00:03:13.410
then typically the way the code is
gonna look is something like this.

56
00:03:13.410 --> 00:03:17.960
So, we have some type of mechanism for
clearing our row.

57
00:03:17.960 --> 00:03:21.240
Whatever formula it is that you like for
clearing a row.

58
00:03:21.240 --> 00:03:22.540
There it is.

59
00:03:22.540 --> 00:03:23.850
That's my methodology.

60
00:03:23.850 --> 00:03:25.310
You may have something else.

61
00:03:25.310 --> 00:03:30.060
And then we're going to have for
our column 1 here.

62
00:03:30.060 --> 00:03:31.880
We're going to have code
that looks like this.

63
00:03:31.880 --> 00:03:37.590
And typically, it consist of we're gonna
float an element often to the left

64
00:03:37.590 --> 00:03:41.440
where it might give it some margins so,
we have space in between our cells.

65
00:03:41.440 --> 00:03:44.750
And then of course, we have to give it
a width otherwise we won't wind up with

66
00:03:44.750 --> 00:03:48.270
things next to each other as you go
across the page.oh of crirl wejad ae So,

67
00:03:48.270 --> 00:03:49.870
there's the formula right there.

68
00:03:51.570 --> 00:03:56.280
If we wrap, via media query, let's say we
have a range here for this media query.

69
00:03:57.440 --> 00:04:01.210
We might change the width of
the column at this point in time.

70
00:04:01.210 --> 00:04:05.090
And hopefully the cells will stack
on top of each other so very nicely.

71
00:04:05.090 --> 00:04:06.140
All right, hopefully.

72
00:04:07.140 --> 00:04:09.160
And then when we go to mobile,

73
00:04:09.160 --> 00:04:12.840
Maybe these things stack on top of each
other as they go vertically down the page.

74
00:04:12.840 --> 00:04:14.670
So we have a width of margin, and a float.

75
00:04:14.670 --> 00:04:17.400
Maybe we turn the float off and
say float none.

76
00:04:17.400 --> 00:04:21.720
And this of course is just
displaying the HTML in first order.

77
00:04:21.720 --> 00:04:26.600
Okay here's the big problem
with floats right there.

78
00:04:26.600 --> 00:04:31.010
You end up with a long one, a short
two Three tries to reach around and

79
00:04:31.010 --> 00:04:33.430
go underneath of 1, but

80
00:04:33.430 --> 00:04:38.430
unfortunately 1 blocks it, so
it winds up over on the right side,

81
00:04:38.430 --> 00:04:43.460
four wraps around, it gets to be
a mess when we look at the page.

82
00:04:43.460 --> 00:04:47.850
So then we find up applying some kind
of JavaScript to this and there's

83
00:04:47.850 --> 00:04:51.468
approximately 5,000 billion solutions to
equal helight colummns am appliance height

84
00:04:51.468 --> 00:04:54.850
columns, jQuery-based, not jQuery-based,
all kinds of things that you can do

85
00:04:54.850 --> 00:04:59.660
to make these columns some kind of equal
height so that they wrap appropriately.

86
00:04:59.660 --> 00:05:04.579
All right, if we wanna rearrange
the columns we write crazy code like this.

87
00:05:06.050 --> 00:05:10.450
So, we set our columns to have
a position that relative.

88
00:05:10.450 --> 00:05:15.440
Relative positioning means that
we're going to take our particular

89
00:05:15.440 --> 00:05:17.000
element on the page.

90
00:05:17.000 --> 00:05:19.140
We can pull it out of the normal flow,

91
00:05:19.140 --> 00:05:22.660
by using our properties of
left right topper bottom.

92
00:05:22.660 --> 00:05:25.990
But the space that that element
used to occupy is preserved,

93
00:05:25.990 --> 00:05:29.670
as opposed to absolute positioning where
we pull it out of the normal flow and

94
00:05:29.670 --> 00:05:31.380
that space is collapsed.

95
00:05:31.380 --> 00:05:34.680
So here what we are gonna do is we
are going to push it over to the left or

96
00:05:34.680 --> 00:05:37.590
in a positive or negative direction.

97
00:05:37.590 --> 00:05:40.870
So, that's what we have going
on here with this code.

98
00:05:40.870 --> 00:05:45.110
Does anyone know the very
first declaration on this,

99
00:05:45.110 --> 00:05:46.610
with the square brackets here?

100
00:05:46.610 --> 00:05:49.260
Anyone know what kind of selector that is?

101
00:05:49.260 --> 00:05:50.870
Anyone familiar with that selector?

102
00:05:53.510 --> 00:05:54.950
&gt;&gt; Jen Kenner: All right, I'm sorry.

103
00:05:54.950 --> 00:05:57.929
The first declaration here on the slide.

104
00:06:01.486 --> 00:06:06.960
&gt;&gt; Jen Kenner: No one has any idea, okay
so this is called an attribute selector.

105
00:06:06.960 --> 00:06:10.680
This is one of the coolest
selectors I think is out there.

106
00:06:10.680 --> 00:06:12.930
All right so
this is called an attribute selector.

107
00:06:12.930 --> 00:06:16.770
So rather than selecting
your HTML tag right?

108
00:06:16.770 --> 00:06:20.820
We're creating a class,
what we're doing is we're saying here, for

109
00:06:20.820 --> 00:06:24.040
any HTML element with
the attribute of class,

110
00:06:26.500 --> 00:06:29.770
somewhere inside is that attribute,
that's the star equals,

111
00:06:29.770 --> 00:06:33.150
it can be at the beginning, the end,
there's actually a number of these,

112
00:06:34.800 --> 00:06:38.440
the operator here can be portrayed
in a number of different ways,

113
00:06:38.440 --> 00:06:41.570
to begin the string, to end the string,
to blah blah blah blah blah.

114
00:06:41.570 --> 00:06:43.600
There's a whole bunch of them,
you can look them up.

115
00:06:43.600 --> 00:06:49.220
But this particular operator says
anywhere within the string contains col-.

116
00:06:51.580 --> 00:06:54.970
So the cool thing about that is that
selects all of our column 1, column 2,

117
00:06:54.970 --> 00:06:55.760
column 3, column 4.

118
00:06:55.760 --> 00:07:02.280
All of our various classes are no affected
by that one declaration, sweet, all right.

119
00:07:03.470 --> 00:07:04.790
So attribute selectors.

120
00:07:05.950 --> 00:07:08.640
By the way, my favorite trick
with attribute selectors,

121
00:07:08.640 --> 00:07:16.620
if you say href="http":, you can now
tag all of your links that go off site,

122
00:07:16.620 --> 00:07:22.350
maybe with a little background image
that indicates it goes off site.

123
00:07:22.350 --> 00:07:23.680
If you use that http*=".

124
00:07:23.680 --> 00:07:28.520
.pdf, you could stick a little PDF
icon after every link that has a PDF.

125
00:07:31.161 --> 00:07:32.030
&gt;&gt; Jen Kenner: There you go.

126
00:07:32.030 --> 00:07:34.320
Worth the price of admission just for
that.

127
00:07:34.320 --> 00:07:34.820
Awesome!

