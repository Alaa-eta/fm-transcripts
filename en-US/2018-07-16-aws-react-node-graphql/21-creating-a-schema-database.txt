[00:00:00]
>> Steve Kinney: All right, so let's actually go ahead to the Amazon console and take this for a spin.
>> Steve Kinney: Cool, go ahead and try it.
>> Steve Kinney: You might see a different screen if you've ever used this before. If this is the first time, it's gonna look something like this.

[00:00:32]
We're gonna make a custom schema. But I'm gonna hit the sample one cuz it actually shows it to you below. And we'll actually see where like a GraphQL schema with some relations actually looks like. So this is one for events and comments on events. So you can see, there is a type comment.

[00:00:48]
It has an event ID, a comment ID, content, and a created app that are all strings. We have an event, which has an ID, name, where, when, description, and a number of comments that by default is ten. You're gonna limit ten of them because like when you say get me all of something you, depending on how big that is, you could get a lot of data, so this'll be by default limiting to ten but you can override that.

[00:01:14]
We'll talk about the connections in a second. I'm not like glossing over them. A mutation for creating an event, where you're gonna provide a name, a when, where, a description, and you're gonna get back a full-on event. Deleting, you just give it an ID, and you get back the entire event that was deleted.

[00:01:29]
Now remember, if you don't want everything back from there, you can define, okay, you are offering me the entire event, but all I want is the ID. Right, you can define that. It's all really up to the person consuming the API. Queries, we can get an individual event, we can get all of the events.

[00:01:45]
Subscription, which is subscribe to event comments, which is you give it the idea of a single event, and it's going to push you a notification every single time. And this is basically the schema like here, the query that we had, which are these two queries. The mutation, which in this case is create event, delete event, and comment on event, are mutations in this case.

[00:02:06]
And our single subscription. So this is an example of a graphical API with some amount of relations, and so on and so forth. We're gonna create a slightly simpler one. And we'll just kind of go over here, we'll call it grudges, we'll say it's custom, click Create. So it starts you out with an API URL and an API key.

[00:02:35]
You could actually also do it with all sorts of different things, like you can do it with Cognito Identity Pools IM user, so on and so forth. We're gonna keep it simple right now. I'm gonna delete all of this real quick. And here is where you can start defining your schema, right.

[00:02:49]
So what does the data in my application look like? So we're gonna follow the example we've been using for most of the day, which is we'll have a grudge, it has an ID. It'll have a person, which'll just be a string. We have a deed, we have the avenged which is a Boolean.

[00:03:09]
We'll make that required as well. So here's like what our grudge looks like. This is very similar to what it did before. And then we could also have query,
>> Steve Kinney: Where we just say, we'll just make a default one. I'll show in a second why this isn't important.

[00:03:26]
And you're like, I don't know a lot of GraphQL. Also, like I don't know how to implement this back end. I will warn you that that should not stop you from being awesome. So, you can kind of see like it helps visualize what a grudge is, it's kind of gotten a little smaller at this point.

[00:03:46]
The query in this case, and this is a very simple one. You saw all that stuff we had before, like the connections and the subscriptions and the mutations, and all that stuff. We don't have any of that yet. I'm just gonna hit Save. It's gonna update my schema.

[00:04:02]
And the other thing is, I made a schema, but I have no back end, officially, right? I don't really have anything in place, what happens if I hit this create resources button?
>> Steve Kinney: We'll say, a grudge, it's cool, do you want me to make you a DynamoDB table?

[00:04:20]
I'm like, yes, I do, I absolutely would love you to. And then, it will go ahead and actually create a really rich schema for us, right. So you just go like hey, these are some of the models that I'm working with, and here are some of the properties, and you're like, an AppSync is like, got it, right?

[00:04:39]
You just tell me the very basics. I will create the databases that you need. I will go ahead and actually give you a pretty legit schema. So here you can see, it's gonna call get grudge and listGrudges, we'll have a mutation of create, update and delete, I'll create all those for us.

[00:04:59]
It's also the hidden part here as the resolvers. Had you go from the GraphQL schema to editing the database? It's also gonna create all of those for us too, right. And subscriptions, it's gonna give you a real time push notifications on CreateGrudge, on UpdateGrudge, on DeleteGrudge. Everything you need, right.

[00:05:18]
This GrudgeConnection, I glossed over those before. What a connection is it's basically, let's say hypothetically, you got angry really easily and your grudge list got very long, right? And you needed to start thinking about pagination. What a GrudgeConnection does, if you look at the queries,
>> Steve Kinney: Oops, we're all up, is it takes first, how many do you want?

[00:05:48]
And then a token for where to start and basically, the connection types are basically free pagination. Which is, if you say, let's say that you have 56 grudges. We'll actually see this in action in a second. Let's say you have 56 grudges, and you say first 20. It'll give you the first 20 and then it's gonna give you a next token, which is a string, right.

[00:06:12]
So then you could call listGrudges again, and you could say 20. After you handed that string, it's gonna give you 21 through 40, right? So it's a way to like, you just get pagination for free, you're not dealing with any of that. It's all just kinda built in.

[00:06:26]
So it creates a schema for you, it's gonna create a database, I just say create. I move that Jerry ticket across the board, everyone thinks I did a whole bunch of work. But realize, I hit a button and went home for the day. Cool, so it's going to, it's very serious about this.

[00:06:44]
I've never actually like, tempted it by going ahead. So it basically created a schema for us, created a database for us. We'll actually see that in a second, and it actually created the resolvers. So I'll just show you when we get down to a query, let's actually hit Save.

[00:07:07]

>> Steve Kinney: Cool, I'm gonna zoom out a little bit.
>> Steve Kinney: Cool. I think this actually takes a second to create all the databases. Let's go to data sources. You can see that I made this grudge table in DynamoDB, ready to go. We can take a look at it but we don't really need to, he says as he clicks on it.

[00:07:32]

>> Steve Kinney: So let's go take a look. You can see the other ones from Mobile Hub that I made earlier. There's no items in it yet. But it's queried the entire table for us, it can do all the things of scanning, pagination, all of it is setup, we're ready to go, with some best practices.

