WEBVTT

1
00:00:00.030 --> 00:00:02.730
&gt;&gt; Steve Kinney: I wanna implement and
create, because once I have create,

2
00:00:02.730 --> 00:00:05.754
I can start to play around
the subscriptions and it show you a little

3
00:00:05.754 --> 00:00:09.323
about how the subscriptions work and
how easy it is to implement with AppSync.

4
00:00:09.323 --> 00:00:11.552
So here we are there's
a few things in here.

5
00:00:11.552 --> 00:00:15.074
The next thing we wanna do is
we wanna have a query for or

6
00:00:15.074 --> 00:00:18.620
really this gets a mutation for
creating one.

7
00:00:18.620 --> 00:00:23.020
And this is important, because before,
when you watched me in the playground,

8
00:00:23.020 --> 00:00:26.090
I was kinda put out hard
coding in all the fields.

9
00:00:26.090 --> 00:00:29.757
I hard coded in an ID,
I hard coded in all the different data.

10
00:00:29.757 --> 00:00:32.529
But in this case, we're gonna take
stuff from our application and

11
00:00:32.529 --> 00:00:33.827
we want to be able to pass it in.

12
00:00:33.827 --> 00:00:37.839
In the same way that instead of hard
coding objects into your code, you might

13
00:00:37.839 --> 00:00:41.723
take a function that takes arguments and
use those to create a new object,

14
00:00:41.723 --> 00:00:45.740
it's very much the same concept
in our GraphQL mutation.

15
00:00:45.740 --> 00:00:47.640
So it's gonna look a little squirrelly,
but

16
00:00:47.640 --> 00:00:49.060
I'm gonna try to explain
it as we go along.

17
00:00:50.170 --> 00:00:53.232
So I'm gonna go into graphql.js and
we're making a second one

18
00:00:53.232 --> 00:00:58.100
called,
&gt;&gt; Steve Kinney: CreateGrudge.

19
00:01:01.530 --> 00:01:05.130
Again, really just a string and
if you look,

20
00:01:05.130 --> 00:01:09.520
if we go back to the AppSync,

21
00:01:09.520 --> 00:01:13.570
before we were hard coding it in.

22
00:01:13.570 --> 00:01:20.370
Right, we put in, okay, ID is 789,
person is Minnesota, so on so forth.

23
00:01:20.370 --> 00:01:22.760
In this case, we wanna be able to
take a bunch of arguments, and

24
00:01:22.760 --> 00:01:24.400
then use those arguments in here.

25
00:01:24.400 --> 00:01:28.570
So it's gonna be kind of one level
more than we're used to seeing, but

26
00:01:28.570 --> 00:01:31.530
let's try it out,
try it out, see what it is.

27
00:01:31.530 --> 00:01:35.920
So mutation will be CreateGrudge.

28
00:01:35.920 --> 00:01:39.670
And we kind of said when we gave it
a name like this, you could literally

29
00:01:39.670 --> 00:01:43.460
omit this and just have the mutation but
it's useful for giving it a name.

30
00:01:43.460 --> 00:01:46.940
And in the same way that a function
can take no arguments or it can take

31
00:01:46.940 --> 00:01:49.920
arguments, the same thing is true for
any of the stuff we've been working with.

32
00:01:49.920 --> 00:01:50.786
So, like I said, CreateGrudge.

33
00:01:52.766 --> 00:01:55.050
&gt;&gt; Steve Kinney: And
it's gonna take some arguments.

34
00:01:55.050 --> 00:01:57.680
The arguments are not going to
be surprising to you at all.

35
00:01:57.680 --> 00:02:00.790
They're going to be literally the stuff
that you need to go ahead and

36
00:02:00.790 --> 00:02:02.380
create a grudge.

37
00:02:02.380 --> 00:02:04.420
The variables start with a dollar sign and
so,

38
00:02:04.420 --> 00:02:06.996
we're basically saying
the types that it's expecting.

39
00:02:06.996 --> 00:02:12.370
This way it will blow up, if we get a data
that's not gonna really work for us.

40
00:02:12.370 --> 00:02:18.790
So let's say person, say String,
we'll say deed, string,

41
00:02:21.580 --> 00:02:26.190
avenged, looks very exciting.

42
00:02:26.190 --> 00:02:26.980
Like Boolean!

43
00:02:26.980 --> 00:02:29.300
Like with an exclamation point.

44
00:02:29.300 --> 00:02:32.250
So now, we'll take that, and then that's
the one we'll actually call the mutation.

45
00:02:32.250 --> 00:02:37.360
So we'll say create grudge and if you
look previously, we're saying input and

46
00:02:37.360 --> 00:02:41.260
we're handing out object this is where we
start to hard code it and all the values.

47
00:02:41.260 --> 00:02:44.950
Instead of all the hard coded values we're
gonna take the stuff that was past in from

48
00:02:44.950 --> 00:02:52.330
above, so feels a little tedious,
but it's okay, right?

49
00:02:52.330 --> 00:02:55.610
That's when we hard coded in 7, 8,
9, or something along those lines.

50
00:02:55.610 --> 00:02:58.817
So this one, we're taking whatever
gets passed in from the outside world.

51
00:03:02.771 --> 00:03:11.460
&gt;&gt; Steve Kinney: Deed,
&gt;&gt; Steve Kinney: Avenged: $avenged,

52
00:03:11.460 --> 00:03:13.559
and then what do we we want to return?

53
00:03:13.559 --> 00:03:19.500
We could just return the ID,
we technically have the grudge in memory,

54
00:03:19.500 --> 00:03:22.272
and all those kind of things, but

55
00:03:22.272 --> 00:03:26.942
let's actually just return
everything one more time.

56
00:03:26.942 --> 00:03:30.649
It feels a little bit tedious when
you're watching someone type it, but

57
00:03:30.649 --> 00:03:34.173
if you think about the fact that
once you've created this query, and

58
00:03:34.173 --> 00:03:38.214
its reusable, you now have this ability
to put in all the things that you need.

59
00:03:38.214 --> 00:03:42.820
All right, so we've got this in place,
let's go ahead and use it.

60
00:03:42.820 --> 00:03:48.116
So we'll go back to our application and

61
00:03:48.116 --> 00:03:50.850
the api.graphql.

62
00:03:52.500 --> 00:03:57.280
We'll do this graphql operation again,
and this time we're gonna pass a two

63
00:03:57.280 --> 00:04:02.360
arguments, CreateGrudge, which I have
not imported yet, someone remind me, and

64
00:04:02.360 --> 00:04:07.990
the grudge that got passed, then I'll
have an ID, it's gonna have person and

65
00:04:07.990 --> 00:04:10.770
a deed and everything along those lines.

66
00:04:10.770 --> 00:04:12.962
Cool, and then we'll say then.

67
00:04:15.119 --> 00:04:16.039
&gt;&gt; Steve Kinney: And
we'll hit a response..

68
00:04:19.155 --> 00:04:20.151
&gt;&gt; Steve Kinney: And server and

69
00:04:20.151 --> 00:04:24.727
this is gonna be,
&gt;&gt; Steve Kinney: Newgrudge,

70
00:04:24.727 --> 00:04:29.146
so different object is gonna be
response.data which is a very common

71
00:04:29.146 --> 00:04:33.150
that you're going to see in
each one of them .createGrudge.

72
00:04:33.150 --> 00:04:35.180
And if we were to go run it
in that playground again,

73
00:04:35.180 --> 00:04:41.440
that's exactly the object structure that
we got from in the playground as well.

74
00:04:41.440 --> 00:04:47.599
And then all we need to do,
&gt;&gt; Steve Kinney: Is

75
00:04:47.599 --> 00:04:52.335
save that,
&gt;&gt; Steve Kinney: I just want

76
00:04:52.335 --> 00:04:55.336
the record to point out again
that we never made a database,

77
00:04:55.336 --> 00:04:58.592
I know that we covered that, but
it's so very impressive to me.

78
00:04:58.592 --> 00:05:00.905
&gt;&gt; Speaker 2: Multi-imported.

79
00:05:00.905 --> 00:05:01.464
&gt;&gt; Steve Kinney: Thank you.

80
00:05:01.464 --> 00:05:08.150
[LAUGH]
&gt;&gt; Steve Kinney: CreateGrudge, perfect.

81
00:05:08.150 --> 00:05:11.444
It would have been better than the
slightly confused look on my face when I

82
00:05:11.444 --> 00:05:15.451
hit submit even though i said like, hey,
I'm gonna do this, I haven't imported yet,

83
00:05:22.190 --> 00:05:23.750
&gt;&gt; Steve Kinney: Cool.

84
00:05:23.750 --> 00:05:30.096
Refresh,
&gt;&gt; Steve Kinney: You

85
00:05:30.096 --> 00:05:32.183
go to the assignment never used.

86
00:05:43.631 --> 00:05:45.614
&gt;&gt; Steve Kinney: It should still
probably be in the database.

87
00:05:45.614 --> 00:05:46.974
We'll take a look at it in a second.

88
00:05:53.631 --> 00:05:55.302
&gt;&gt; Steve Kinney: It would've
showed up a little too fast,

89
00:05:55.302 --> 00:05:56.697
I was like, that's suspicious.

90
00:06:06.651 --> 00:06:10.895
&gt;&gt; Steve Kinney: All right, cool, so
there it is, it's in our database.

