[00:00:00]
>> Steve Kinney: For our next trick, I think it makes sense to look at a subscription, right? Because it would be cool to see that happen on multiple clients, and get pushed out. And when we think about, real-time, we think, all right. So I need to set up a WebSocket server, and I need it to do all this crazy stuff.

[00:00:17]
I wanna kinda point out that if we remember the schema that we had earlier, the subscriptions are already in place, right? So there's onCreateCrudge subscription, there is an onUpdate. And really where the magic is, is this @aws_subscribe mutations. And it's saying, what is the mutation that I should push out a notification on it if it happens?

[00:00:47]
So here it is. So we can actually just go ahead and use it.
>> Steve Kinney: Cool. So, let's go ahead and write that query.
>> Steve Kinney: We'll go back to our graphql.
>> Steve Kinney: Call it SubscribeToNewGrudge.
>> Steve Kinney: Cool. So before we played around with some, or we played around with mutations and queries.

[00:01:18]
So this is simply a subscription,
>> Steve Kinney: onCreateGrudge, which is what we saw on our schema earlier and,
>> Steve Kinney: Say, this is the name of it like before. I can also call this one SubscribeToNewGrudges, just to keep it,
>> Steve Kinney: And we can see onCreateGrudge.
>> Steve Kinney: Give me the id, person, deed, and whether or not they were avenged, right?

[00:01:56]
So we're saying hey, I want to subscribe to this and this is what I wanna hear back about every single time we get a new notification on this subscription. So, last thing we need to do is wire it up. I'm gonna do it on componentDidMount. So, I start listening as soon as the application is up and working.

[00:02:15]
So, we'll say, API.graphql, and then we're gonna play a fun game where we gonna have a small problem. And we'll all take a lucky guess on what it's gonna be, other than I'm gonna forget to import this again.
>> Steve Kinney: Not this time, All right.
>> Steve Kinney: It's like a Visual Studio thing that works half the time.

[00:02:42]
All right, so we're gonna take this, and we're actually gonna call this time .subscribe. And .subscribe actually just takes an object, what we wanna say is the next thing that comes in, we'll take the response,
>> Steve Kinney: We'll say, const grudge. This is very similar to what we did with the post.

[00:03:00]
Const grudge = response.value.data.onCreateGrudge, right? They're always name space but the actually name of the mutation, or the query, or in this case, the subscription. Cool, and then we'll just steal this. This is .setState, also fun to say.
>> Steve Kinney: Anyone want to take a lucky guess what the small problem is going to be?

[00:03:29]

>> Student: The dot value?
>> Steve Kinney: We'll see.
>> Student2: Added twice?
>> Steve Kinney: Well, this one's, yeah. It's gonna add it twice, cuz I'm both adding it manually and subscribing to the change. So, because you win, we'll actually just fix it now.
>> Steve Kinney: So, we'll just say that it happened. And this isn't fun unless I open up two browser windows.

[00:03:59]

>> Steve Kinney: There are a few things in programming that will always be worth it, and one is watching anything pushed to a browser.
>> Steve Kinney: So let that load up.
>> Steve Kinney: Cool, and you can see, push to both of them. And we have real time push.
>> Multiple: [APPLAUSE]
>> Steve Kinney: Yeah, that's really it.

[00:04:34]
And we can do that for updates and deletes too, which means that our data effectively stays in sync as well which is super, super cool. There's one more thing I wanna show which is, it's definitely, you can feel what we're talking about and there are resolvers, right? And it's something advanced graphical courses that talk about like how resolvers work.

[00:04:54]
They're like basic of the translation layer between this great graphql stuff, and the actual real databases under the hood. Now, if you're rolling your own graphql server you can do it all in Node. The Amazon ones are not in Node, which can feel intimidating. So let's actually just take a look at one.

[00:05:18]
>> [MUSIC]

[00:05:19]
>> Steve Kinney: So actually,
>> Steve Kinney: We'll go to our Mutations. So you can all the Mutations have these Resolvers, so we'll actually go to create Grudge. Is this language agnostic templating language? Called Velocity, which is, I believe, an Apache project. And this is effectively taken into something that DynamoDB can understand.

[00:05:44]
So it's saying, what version of the API do you use? In this case we're doing a put item. And the key is going to be whatever key Sctx.orgs, so this is whatever from all the arguments passed in, that input, which is what the mutations took, to it's id property, right?

[00:06:04]
So it's basically saying whatever you passed in, as the arguments, the input object, it's id property, use that for the id. So that's part of the template of the Dynamo put request. And this is for all the attributes basically get it in a format that dynamo understands, but this all of the args.input.

[00:06:24]
So if we go back to the queries, oops gone. We can say that all of the mutations taken an input, says where the input comes from and then there were a bunch of properties on those. An id, person IDI, and so it's just basically a schema for going ahead and figuring out that stuff and how to like translate it.

[00:06:46]
These are created for you, but you could stuff really interesting if you wanted to. Which is I have like been like for this entire workshop belaboring that I don't coming up with ids on the client, like I don't trust it. I would like the server to come up with the ids for me, that is in my, I think I'm getting old, but it's just how I believe databases should work.

[00:07:05]
So we could, for instance, it's a very powerful templating language. There's, and to be really honest, I know about as much to get myself in trouble. And for the most part like the defaults have been very good to me. But there is one we can kinda like play around with as well which is, we can say the key instead of taking the one that we passed in.

[00:07:26]
What I would like you to do, and some of this requires a little bit of dynamo knowledge. Which is, for dynamo, you say what type it's gonna be. In this case, we're saying a string, that's what that S means. And we'll actually say,
>> Steve Kinney: Util.autoId, and this will actually now instead of taking an id, we can remove the fact that the client has to pass in an id, because we are going to ignore it anyway.

[00:07:54]
In this case, we are gonna actually create our own automatic id. There are a whole bunch of helpers, and you can begin to modify these in the same way that I showed you in the cloud API. That you can change anything you don't like that comes out of the box.

[00:08:07]
These are generated for you, but like the point that I really want to make is you're never locked in. It's not this was magic. I got a bunch of databases. I'm stuck with the abstractions that apps and gave me. No, you're not. Everything is super configurable, and it's all, again, based on real DynamoDB databases, real S3 buckets, real CloudFront distributions, right?

[00:08:31]
So you can like start with any of the stuff you're aware like what happens if I outgrow it? Great, you still have like world-class infrastructure. [LAUGH] You can now customize it either in the infinitely customizable. Or you can just take your, you can basically take the DynamoDB database under the hood.

[00:08:47]
And walk away with it, away from everything else if you want to. Which for me is where I'd be starting to come in really excited about this stuff. This idea that I could get applications up and running, know that I don't have to worry about scale. I know that they're effectively secure out of the box, right?

[00:09:03]
Knowing that I'm getting all of this infrastructure in place, and then also that I'm not locked in to any proprietary system, right? It is still like I'm technically locked into AWS, but I'm okay with that. We write custom code for a lot of this stuff that's in grid on AWS on purpose.

[00:09:23]
So it's really cool to be able to do it here as well.

