[00:00:00]
>> Steve Kinney: So what we're gonna do is we looked at some graphql in the playground. What I'd like to do is show it in the example application that we were working on earlier, keeping track of the list of grudges. So I'm back on the master branch, which is a clean slate of just the client's side application, and what we'll do is we will implement the CRUD inputs we had earlier with an added bonus of we'll also add the ability to be notified when a new grudge gets added.

[00:00:31]
We could clearly do this as well for the update and removals, but for the sake of keeping it, avoiding redundancy. We'll look at it in that case, cuz we can see how we could apply that further. So yeah, like I said, this is a back to the master branch.

[00:00:47]
And let's actually just git checkout,
>> Steve Kinney: graphql app sync. So I have my new branch. At one point, I will go ahead and do some of the AWS init. In fact, what I'll actually do is, I will run that now while I go do a few other things.

[00:01:11]
So you saw that there was appsync in the Amplifier. That was very recently added. And the reason that I donâ€™t use it is cuz even if you do dash dash prompt, at this moment, to ask we record this. If you do dash dash prompt it, it'll actually do the entire scheme up of those events and comments, and all that stuff.

[00:01:30]
And I'm not super interested in clearing that out. And I think it's a really great way to show that you could actually take other things from the AWS ecosystem, and pull it into your Amplify project, or your MobileHub project as well. So we'll go ahead and awsmobile init in here.

[00:01:49]
I should have done the dash yes.
>> Steve Kinney: We'll just hit enter. Cool, while that cooks for a little bit, we do want to get the configuration from here. So if I go to Grudges and I scroll down. You can see that you can get the configuration for iOS, Android, Web, or React Native.

[00:02:15]
We'll actually go ahead and hit download on this one and I will go ahead and open it. And this is all, this is basically just configuration. And this isn't exactly the way that amplify needs it, so we'll have to modify a little bit. Also in npm, there is an appsync client as well.

[00:02:36]
If you only want appsync, and you don't want all the rest of this, there is an appsync library as well, an appsync SDK that you can use. It works a little bit different than everything else. So for consistency, we're just gonna stick with Amplify for now. But definitely worth checking out if you're only interested in the graphql stuff.

[00:02:53]
So what I'll do is I'm gonna copy this JavaScript object.
>> Steve Kinney: And in my index
>> Steve Kinney: It looks like I have some of this in place already still. So I'll just make an appSyncConfig. We'll paste that. The syntax is a little bit different. Luckily, it's pretty easy, which is all of these prefixes, aws_appsync_.

[00:03:27]
That's how because Amplify is keeping track of a lot of different configuration. It's just letting Amplify know exactly what we're doing. If you were just using the AppSync client by itself, exactly what we copy and pasted would've been fine. So what we'll do here is we'll say all the configuration plus all of the appSyncConfig.

[00:03:49]
And so that will be the merged Amplify configuration along with the appSyncConfiguration. So now we're getting both in this case. All right, very cool. And so that's kinda in place.
>> Steve Kinney: So now we have that going, I'm just going to go ahead and we'll do awsmobile features.
>> Steve Kinney: Turn off what I don't need in this case.

[00:04:19]
Looks like the only thing. AppSync is not turned on cuz I didn't turn it on in Mobile Hub. I kind of brought it in by myself. We'll just turn off analytics for now. Cool, all right. So, we have, just hosting have AppSync in place. And we are ready to get started.

[00:04:38]
What I'm probably gonna do is I'm gonna go ahead and write a query. The first one that makes sense is to get all of the grudges from the database. Now, because we played in the playground, there's actually already grudges in there, so we'll have fun stuff to see from the very beginning.

[00:04:53]
But what we can do is actually if I go back to that playground, I'm actually just going to steal it. I have to modify it a little bit but that'll be fine. For the sake of simplicity, what I'm gonna do is, I'm gonna make a single file that is gonna keep track of all of my graphic QL.

[00:05:16]
On a larger app, that's not really gonna work. You'll see structures that we'll have a directory for all the queries or all the mutations, as your application grows you're gonna like be putting everything in one file. It's not really gonna work. You'll likely have a directory and then a file for every kind of query mutation or subscription.

[00:05:34]
But just for the sake of like, I've noticed that when showing stuff if I jump around files a lot, everyone wants to cry a little bit. So we'll just keep it all in one file for now. So let's say export const
>> Steve Kinney: ListGrudges, and it's really just gonna be a string.

[00:05:55]
And that will turn that string into something in a second. But the way we can store all of these queries, very similar to when I was first learning SQL and I have to do a bunch of like Data analysis, which is I tweaked the SQL query over the course of like a day.

[00:06:08]
And then I copy and pasted it into a notes file, and just use that forever and ever and never thought about it again. Not dissimilar from what we're doing right now. I'm just gonna give this a consistent name. And I'm gonna ask for everything in this case. ID Person deed avenged.

[00:06:28]
I'm gonna keep my data small so I won't need pagination. But we've seen effectively how it works in this case. So this is gonna get me everything out of the database. I just need to wire it up. So we'll go into the application
>> Steve Kinney: And we're gonna need a few things.

[00:06:47]
It looks like I branched off the last thing I did. No, this is just the wrong file. One moment, I'm in the wrong project. One moment please. I'll go ahead and actually I can just grab all of that.
>> Steve Kinney: We'll go into the.
>> Steve Kinney: Bring in that configuration.

[00:07:19]
It's called reinforcing what we've just learned. It's a teaching technique where I do something, making you believe I did in the wrong place. You can watch me copy and paste it. All right, very cool. So we have list of grudges, we have index dot JS where we've done the configuration and we'll go into application.

[00:07:40]
And if you remember from my earlier slide, I'm like, the API, it has a git, and a put, and a post, and a delete. And I was like, yeah, and it's got a graphical one at the bottom, don't worry about that. We're gonna worry about it now. So what we'll do is, we will import API, and this graphqlOperation from AWS amplify.

[00:08:10]

>> Steve Kinney: Cool. Now, we also need to get that query that we just made. So we'll say Import List grudges from dot slash .graphql. So now we have the means from Amplify to go get stuff and we have a directive of what it is we'll like to get. We'll start by saying the componentDidMount again

[00:08:43]

>> Steve Kinney: I'll say API.graphql. Now I have to actually use this graphql operation helper, and that's because it takes the string of graphql and it parses it and turns it into an actual object that it can use as a query. So I'll say ListGrudges. So this will pass it in there correctly.

[00:09:06]
And I'll say then response. Now, probably don't remember, but way back when I first was playing with the playground you'll notice it was very nested, it had data and then it had the name of the query, in some cases it had items if I was doing the overall one.

[00:09:23]
So before I get carried away, what I'm going to do is console log the response. Cool and let's verify that everything works. I don't trust this one that's running, so I'll start it again. I think it was running since earlier today so that's not to be trusted. Cool, that's firing up.

[00:09:57]
Those are some of the analytics. So I've got to turn that off in a second. There is an object in there, but the development server is still starting up.
>> Steve Kinney: Cool.
>> Steve Kinney: So you can see there's a response and it's got data, list grudges, and then it's got the items in it.

[00:10:26]
So we need to drill all the way down to actually get the actual grudges out.
>> Steve Kinney: I'll do a awsmobile push while I work on that.
>> Steve Kinney: All right, let that go ahead, all right, so we had.
>> Steve Kinney: We'll say const grudges is actually, so it's a little bit nested in there, but still for the power we get it's definitely worth it.

[00:11:05]
So we'll say, response.data. Name of the query was listGrudges. And then items which is from that Grudge connection, right? So, those will actually be everything that we're looking for, and we'll just say Grudges.
>> Steve Kinney: We'll go back over and see what we get.
>> Steve Kinney: There are my Grudges.

[00:11:33]
It turns out that a console log will not add it to the state of your application.
>> Steve Kinney: So we'll say that this.setState.
>> Steve Kinney: You can see from the console log that exactly the stuff we played in the playground was there, and here it all is. We queried everything out of the database very, very quickly.

