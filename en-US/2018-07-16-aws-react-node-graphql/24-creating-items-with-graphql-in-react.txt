[00:00:00]
>> Steve Kinney: I wanna implement and create, because once I have create, I can start to play around the subscriptions and it show you a little about how the subscriptions work and how easy it is to implement with AppSync. So here we are there's a few things in here. The next thing we wanna do is we wanna have a query for or really this gets a mutation for creating one.

[00:00:18]
And this is important, because before, when you watched me in the playground, I was kinda put out hard coding in all the fields. I hard coded in an ID, I hard coded in all the different data. But in this case, we're gonna take stuff from our application and we want to be able to pass it in.

[00:00:33]
In the same way that instead of hard coding objects into your code, you might take a function that takes arguments and use those to create a new object, it's very much the same concept in our GraphQL mutation. So it's gonna look a little squirrelly, but I'm gonna try to explain it as we go along.

[00:00:50]
So I'm gonna go into graphql.js and we're making a second one called,
>> Steve Kinney: CreateGrudge. Again, really just a string and if you look, if we go back to the AppSync, before we were hard coding it in. Right, we put in, okay, ID is 789, person is Minnesota, so on so forth.

[00:01:20]
In this case, we wanna be able to take a bunch of arguments, and then use those arguments in here. So it's gonna be kind of one level more than we're used to seeing, but let's try it out, try it out, see what it is. So mutation will be CreateGrudge.

[00:01:35]
And we kind of said when we gave it a name like this, you could literally omit this and just have the mutation but it's useful for giving it a name. And in the same way that a function can take no arguments or it can take arguments, the same thing is true for any of the stuff we've been working with.

[00:01:49]
So, like I said, CreateGrudge.
>> Steve Kinney: And it's gonna take some arguments. The arguments are not going to be surprising to you at all. They're going to be literally the stuff that you need to go ahead and create a grudge. The variables start with a dollar sign and so, we're basically saying the types that it's expecting.

[00:02:06]
This way it will blow up, if we get a data that's not gonna really work for us. So let's say person, say String, we'll say deed, string, avenged, looks very exciting. Like Boolean! Like with an exclamation point. So now, we'll take that, and then that's the one we'll actually call the mutation.

[00:02:32]
So we'll say create grudge and if you look previously, we're saying input and we're handing out object this is where we start to hard code it and all the values. Instead of all the hard coded values we're gonna take the stuff that was past in from above, so feels a little tedious, but it's okay, right?

[00:02:52]
That's when we hard coded in 7, 8, 9, or something along those lines. So this one, we're taking whatever gets passed in from the outside world.
>> Steve Kinney: Deed,
>> Steve Kinney: Avenged: $avenged, and then what do we we want to return? We could just return the ID, we technically have the grudge in memory, and all those kind of things, but let's actually just return everything one more time.

[00:03:26]
It feels a little bit tedious when you're watching someone type it, but if you think about the fact that once you've created this query, and its reusable, you now have this ability to put in all the things that you need. All right, so we've got this in place, let's go ahead and use it.

[00:03:42]
So we'll go back to our application and the api.graphql. We'll do this graphql operation again, and this time we're gonna pass a two arguments, CreateGrudge, which I have not imported yet, someone remind me, and the grudge that got passed, then I'll have an ID, it's gonna have person and a deed and everything along those lines.

[00:04:10]
Cool, and then we'll say then.
>> Steve Kinney: And we'll hit a response..
>> Steve Kinney: And server and this is gonna be,
>> Steve Kinney: Newgrudge, so different object is gonna be response.data which is a very common that you're going to see in each one of them .createGrudge. And if we were to go run it in that playground again, that's exactly the object structure that we got from in the playground as well.

[00:04:41]
And then all we need to do,
>> Steve Kinney: Is save that,
>> Steve Kinney: I just want the record to point out again that we never made a database, I know that we covered that, but it's so very impressive to me.
>> Speaker 2: Multi-imported.
>> Steve Kinney: Thank you. [LAUGH]
>> Steve Kinney: CreateGrudge, perfect. It would have been better than the slightly confused look on my face when I hit submit even though i said like, hey, I'm gonna do this, I haven't imported yet,

[00:05:22]

>> Steve Kinney: Cool. Refresh,
>> Steve Kinney: You go to the assignment never used.
>> Steve Kinney: It should still probably be in the database. We'll take a look at it in a second.
>> Steve Kinney: It would've showed up a little too fast, I was like, that's suspicious.
>> Steve Kinney: All right, cool, so there it is, it's in our database.

