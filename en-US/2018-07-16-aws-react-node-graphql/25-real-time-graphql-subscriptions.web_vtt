WEBVTT

1
00:00:00.120 --> 00:00:02.600
&gt;&gt; Steve Kinney: For our next trick,

2
00:00:02.600 --> 00:00:04.810
I think it makes sense to look
at a subscription, right?

3
00:00:04.810 --> 00:00:08.558
Because it would be cool to see that
happen on multiple clients, and

4
00:00:08.558 --> 00:00:09.489
get pushed out.

5
00:00:09.489 --> 00:00:11.897
And when we think about,
real-time, we think, all right.

6
00:00:11.897 --> 00:00:17.374
So I need to set up a WebSocket server,
and I need it to do all this crazy stuff.

7
00:00:17.374 --> 00:00:24.696
I wanna kinda point out that if we
remember the schema that we had earlier,

8
00:00:24.696 --> 00:00:29.670
the subscriptions are already in place,
right?

9
00:00:29.670 --> 00:00:33.890
So there's onCreateCrudge subscription,
there is an onUpdate.

10
00:00:33.890 --> 00:00:40.383
And really where the magic is,
is this @aws_subscribe mutations.

11
00:00:40.383 --> 00:00:41.620
And it's saying,

12
00:00:41.620 --> 00:00:46.660
what is the mutation that I should push
out a notification on it if it happens?

13
00:00:47.690 --> 00:00:48.360
So here it is.

14
00:00:48.360 --> 00:00:50.266
So we can actually just go ahead and

15
00:00:50.266 --> 00:00:53.950
use it.
&gt;&gt; Steve Kinney: Cool.

16
00:00:53.950 --> 00:00:58.930
So, let's go ahead and write that query.
&gt;&gt; Steve Kinney: We'll go back to our

17
00:00:58.930 --> 00:01:05.404
graphql.
&gt;&gt; Steve Kinney: Call

18
00:01:05.404 --> 00:01:13.539
it SubscribeToNewGrudge.
&gt;&gt; Steve Kinney: Cool.

19
00:01:13.539 --> 00:01:17.973
So before we played around with some,
or we played around with mutations and

20
00:01:17.973 --> 00:01:18.630
queries.

21
00:01:18.630 --> 00:01:24.953
So this is simply a subscription,
&gt;&gt; Steve Kinney: onCreateGrudge, which is

22
00:01:24.953 --> 00:01:30.925
what we saw on our schema earlier and,
&gt;&gt; Steve Kinney: Say,

23
00:01:30.925 --> 00:01:34.990
this is the name of it like before.

24
00:01:34.990 --> 00:01:37.392
I can also call this one
SubscribeToNewGrudges,

25
00:01:37.392 --> 00:01:42.651
just to keep it,
&gt;&gt; Steve Kinney: And

26
00:01:42.651 --> 00:01:51.060
we can see onCreateGrudge.
&gt;&gt; Steve Kinney: Give me the id, person,

27
00:01:51.060 --> 00:01:56.650
deed, and whether or
not they were avenged, right?

28
00:01:56.650 --> 00:02:00.690
So we're saying hey, I want to subscribe
to this and this is what I wanna

29
00:02:00.690 --> 00:02:05.920
hear back about every single time we get
a new notification on this subscription.

30
00:02:05.920 --> 00:02:08.620
So, last thing we need
to do is wire it up.

31
00:02:08.620 --> 00:02:10.220
I'm gonna do it on componentDidMount.

32
00:02:11.624 --> 00:02:15.770
So, I start listening as soon as
the application is up and working.

33
00:02:15.770 --> 00:02:18.715
So, we'll say, API.graphql, and

34
00:02:18.715 --> 00:02:24.059
then we're gonna play a fun game
where we gonna have a small problem.

35
00:02:24.059 --> 00:02:28.443
And we'll all take a lucky guess on what
it's gonna be, other than I'm gonna forget

36
00:02:28.443 --> 00:02:34.327
to import this again.
&gt;&gt; Steve Kinney: Not this time,

37
00:02:34.327 --> 00:02:38.842
All right.
&gt;&gt; Steve Kinney: It's like

38
00:02:38.842 --> 00:02:42.706
a Visual Studio thing
that works half the time.

39
00:02:42.706 --> 00:02:44.547
All right, so we're gonna take this, and

40
00:02:44.547 --> 00:02:46.845
we're actually gonna call
this time .subscribe.

41
00:02:46.845 --> 00:02:49.593
And .subscribe actually
just takes an object,

42
00:02:49.593 --> 00:02:52.340
what we wanna say is the next
thing that comes in,

43
00:02:52.340 --> 00:02:58.100
we'll take the response,
&gt;&gt; Steve Kinney: We'll say, const grudge.

44
00:02:58.100 --> 00:03:00.897
This is very similar to
what we did with the post.

45
00:03:00.897 --> 00:03:08.686
Const grudge =
response.value.data.onCreateGrudge, right?

46
00:03:08.686 --> 00:03:11.604
They're always name space but
the actually name of the mutation, or

47
00:03:11.604 --> 00:03:13.680
the query, or in this case,
the subscription.

48
00:03:15.300 --> 00:03:18.870
Cool, and then we'll just steal this.

49
00:03:18.870 --> 00:03:25.906
This is .setState, also fun to say.
&gt;&gt; Steve Kinney: Anyone

50
00:03:25.906 --> 00:03:29.033
want to take a lucky guess what
the small problem is going to be?

51
00:03:29.033 --> 00:03:30.529
&gt;&gt; Student: The dot value?

52
00:03:30.529 --> 00:03:34.840
&gt;&gt; Steve Kinney: We'll see.

53
00:03:34.840 --> 00:03:36.000
&gt;&gt; Student2: Added twice?

54
00:03:36.000 --> 00:03:37.340
&gt;&gt; Steve Kinney: Well, this one's, yeah.

55
00:03:37.340 --> 00:03:40.000
It's gonna add it twice,
cuz I'm both adding it manually and

56
00:03:40.000 --> 00:03:41.600
subscribing to the change.

57
00:03:41.600 --> 00:03:43.121
So, because you win,

58
00:03:43.121 --> 00:03:48.491
we'll actually just fix it now.
&gt;&gt; Steve Kinney: So,

59
00:03:48.491 --> 00:03:50.720
we'll just say that it happened.

60
00:03:50.720 --> 00:03:52.964
And this isn't fun unless I
open up two browser windows.

61
00:03:59.188 --> 00:04:00.540
&gt;&gt; Steve Kinney: There are a few things in

62
00:04:00.540 --> 00:04:05.142
programming that will always be worth it,
and one is watching anything pushed to

63
00:04:05.142 --> 00:04:11.365
a browser.
&gt;&gt; Steve Kinney: So let that load up.

64
00:04:24.367 --> 00:04:25.700
&gt;&gt; Steve Kinney: Cool, and you can see,

65
00:04:25.700 --> 00:04:27.180
push to both of them.

66
00:04:27.180 --> 00:04:29.787
And we have real time push.
&gt;&gt; Multiple: [APPLAUSE]

67
00:04:29.787 --> 00:04:34.649
&gt;&gt; Steve Kinney: Yeah, that's really it.

68
00:04:34.649 --> 00:04:39.052
And we can do that for updates and
deletes too, which means that our

69
00:04:39.052 --> 00:04:43.546
data effectively stays in sync as
well which is super, super cool.

70
00:04:43.546 --> 00:04:47.305
There's one more thing I wanna
show which is, it's definitely,

71
00:04:47.305 --> 00:04:51.410
you can feel what we're talking about and
there are resolvers, right?

72
00:04:51.410 --> 00:04:54.230
And it's something advanced graphical
courses that talk about like how

73
00:04:54.230 --> 00:04:54.910
resolvers work.

74
00:04:54.910 --> 00:04:58.980
They're like basic of the translation
layer between this great graphql stuff,

75
00:04:58.980 --> 00:05:02.150
and the actual real
databases under the hood.

76
00:05:02.150 --> 00:05:05.613
Now, if you're rolling your own graphql
server you can do it all in Node.

77
00:05:05.613 --> 00:05:11.477
The Amazon ones are not in Node,
which can feel intimidating.

78
00:05:11.477 --> 00:05:13.244
So let's actually just take a look at one.

79
00:05:18.052 --> 00:05:19.204
&gt;&gt; [MUSIC]

80
00:05:19.204 --> 00:05:24.984
&gt;&gt; Steve Kinney: So actually,
&gt;&gt; Steve Kinney: We'll

81
00:05:24.984 --> 00:05:27.240
go to our Mutations.

82
00:05:27.240 --> 00:05:29.840
So you can all the Mutations
have these Resolvers, so

83
00:05:29.840 --> 00:05:33.210
we'll actually go to create Grudge.

84
00:05:33.210 --> 00:05:36.080
Is this language agnostic
templating language?

85
00:05:36.080 --> 00:05:40.220
Called Velocity, which is,
I believe, an Apache project.

86
00:05:40.220 --> 00:05:44.263
And this is effectively taken into
something that DynamoDB can understand.

87
00:05:44.263 --> 00:05:46.330
So it's saying,
what version of the API do you use?

88
00:05:46.330 --> 00:05:47.920
In this case we're doing a put item.

89
00:05:47.920 --> 00:05:54.310
And the key is going to be
whatever key Sctx.orgs,

90
00:05:54.310 --> 00:05:58.770
so this is whatever from all
the arguments passed in, that input,

91
00:05:58.770 --> 00:06:04.180
which is what the mutations took,
to it's id property, right?

92
00:06:04.180 --> 00:06:07.080
So it's basically saying whatever
you passed in, as the arguments,

93
00:06:07.080 --> 00:06:11.590
the input object, it's id property,
use that for the id.

94
00:06:11.590 --> 00:06:15.004
So that's part of the template
of the Dynamo put request.

95
00:06:15.004 --> 00:06:19.844
And this is for all the attributes
basically get it in a format that

96
00:06:19.844 --> 00:06:24.010
dynamo understands, but
this all of the args.input.

97
00:06:24.010 --> 00:06:29.390
So if we go back to the queries,
oops gone.

98
00:06:31.190 --> 00:06:35.240
We can say that all of
the mutations taken an input,

99
00:06:35.240 --> 00:06:38.510
says where the input comes from and then
there were a bunch of properties on those.

100
00:06:38.510 --> 00:06:43.180
An id, person IDI, and so it's just
basically a schema for going ahead and

101
00:06:43.180 --> 00:06:46.130
figuring out that stuff and
how to like translate it.

102
00:06:46.130 --> 00:06:50.470
These are created for you, but you could
stuff really interesting if you wanted to.

103
00:06:50.470 --> 00:06:55.390
Which is I have like been like for
this entire workshop belaboring that I

104
00:06:55.390 --> 00:06:57.560
don't coming up with ids on the client,
like I don't trust it.

105
00:06:57.560 --> 00:07:01.050
I would like the server to come up
with the ids for me, that is in my,

106
00:07:01.050 --> 00:07:04.680
I think I'm getting old, but it's just
how I believe databases should work.

107
00:07:05.710 --> 00:07:09.010
So we could, for instance,
it's a very powerful templating language.

108
00:07:09.010 --> 00:07:13.256
There's, and to be really honest, I know
about as much to get myself in trouble.

109
00:07:13.256 --> 00:07:18.527
And for the most part like the defaults
have been very good to me.

110
00:07:18.527 --> 00:07:22.711
But there is one we can kinda like
play around with as well which is,

111
00:07:22.711 --> 00:07:26.539
we can say the key instead of
taking the one that we passed in.

112
00:07:26.539 --> 00:07:28.001
What I would like you to do, and

113
00:07:28.001 --> 00:07:31.060
some of this requires a little
bit of dynamo knowledge.

114
00:07:31.060 --> 00:07:33.390
Which is, for dynamo,
you say what type it's gonna be.

115
00:07:33.390 --> 00:07:36.348
In this case, we're saying a string,
that's what that S means.

116
00:07:36.348 --> 00:07:43.043
And we'll actually say,
&gt;&gt; Steve Kinney: Util.autoId,

117
00:07:43.043 --> 00:07:48.702
and this will actually now instead of
taking an id, we can remove the fact that

118
00:07:48.702 --> 00:07:54.035
the client has to pass in an id,
because we are going to ignore it anyway.

119
00:07:54.035 --> 00:07:57.709
In this case, we are gonna actually
create our own automatic id.

120
00:07:57.709 --> 00:07:59.907
There are a whole bunch of helpers, and

121
00:07:59.907 --> 00:08:04.590
you can begin to modify these in the same
way that I showed you in the cloud API.

122
00:08:04.590 --> 00:08:07.280
That you can change anything you
don't like that comes out of the box.

123
00:08:07.280 --> 00:08:08.350
These are generated for

124
00:08:08.350 --> 00:08:13.110
you, but like the point that I really
want to make is you're never locked in.

125
00:08:13.110 --> 00:08:14.750
It's not this was magic.

126
00:08:14.750 --> 00:08:16.373
I got a bunch of databases.

127
00:08:16.373 --> 00:08:20.755
I'm stuck with the abstractions
that apps and gave me.

128
00:08:20.755 --> 00:08:21.971
No, you're not.

129
00:08:21.971 --> 00:08:27.152
Everything is super configurable, and
it's all, again, based on real DynamoDB

130
00:08:27.152 --> 00:08:31.825
databases, real S3 buckets,
real CloudFront distributions, right?

131
00:08:31.825 --> 00:08:34.445
So you can like start with any
of the stuff you're aware like

132
00:08:34.445 --> 00:08:36.345
what happens if I outgrow it?

133
00:08:36.345 --> 00:08:38.532
Great, you still have like
world-class infrastructure.

134
00:08:38.532 --> 00:08:43.268
[LAUGH] You can now customize it
either in the infinitely customizable.

135
00:08:43.268 --> 00:08:44.566
Or you can just take your,

136
00:08:44.566 --> 00:08:47.642
you can basically take the DynamoDB
database under the hood.

137
00:08:47.642 --> 00:08:50.458
And walk away with it,
away from everything else if you want to.

138
00:08:50.458 --> 00:08:54.830
Which for me is where I'd be starting to
come in really excited about this stuff.

139
00:08:54.830 --> 00:08:57.590
This idea that I could
get applications up and

140
00:08:57.590 --> 00:08:59.660
running, know that I don't
have to worry about scale.

141
00:08:59.660 --> 00:09:03.570
I know that they're effectively
secure out of the box, right?

142
00:09:03.570 --> 00:09:07.224
Knowing that I'm getting all of
this infrastructure in place, and

143
00:09:07.224 --> 00:09:10.957
then also that I'm not locked in
to any proprietary system, right?

144
00:09:10.957 --> 00:09:18.800
It is still like I'm technically locked
into AWS, but I'm okay with that.

145
00:09:18.800 --> 00:09:23.620
We write custom code for a lot of this
stuff that's in grid on AWS on purpose.

146
00:09:23.620 --> 00:09:26.260
So it's really cool to be
able to do it here as well.

