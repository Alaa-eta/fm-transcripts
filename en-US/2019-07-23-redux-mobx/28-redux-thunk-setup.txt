[00:00:00]
>> Steve Kinney: So talking about thunks is fun, but what do you say we implement one? All right, cool.
>> Steve Kinney: So we'll kinda go in here and so tweet-stream ideally should get us a, basically I have a very simple API, we need to actually check it out.
>> Steve Kinney: So we do need to kick it off, right?

[00:00:38]
And so this tweet stream here will basically, I have a little Node server that is listening to the Twitter livestream for anything with the word JavaScript. Apparently, it is all, do you like a desktop or a notebook computer, and some jobs. There is nothing more terrifying than revolving around a Twitter livestream, but here we are.

[00:00:56]
That way we could have some new data along the way. And so the tweet-stream will basically have an API that we can hit up and we can do stuff with. Let's actually fire it up.
>> Steve Kinney: With npm start, and as we do that we'll kinda take a tour of the code.

[00:01:21]

>> Steve Kinney: All right, so index isn't anything really all that special, some basic Redux boilerplate. We are gonna need to modify this to use the Redux thunk middleware at some point. An empty actions file, a reducer that we're gonna need to put some stuff in. We're using the function here and combining it immediately.

[00:01:44]
And we've got some react components that we can use. So first thing we need to do is we need to pull in the middleware. And then we saw earlier that that applyMiddleware function that comes with Redux, that will give us the ability to pop that piece of middleware into the middle of our flow that we saw earlier.

[00:02:06]
So we'll go in and we'll go into index.js, and we'll kinda pull in. So createStore, we need createStore we're gonna need applyMiddleware. And then okay, what middleware do you wanna apply? So we'll import thunk from redux-thunk. Great. Now, the other thing is when we create the store, we're gonna say applyMiddleware.

[00:02:34]

>> Steve Kinney: And we'll give it that thunk.
>> Steve Kinney: Cool, so now we've effectively installed Redux thunk. Now what we need to do is create a action creator. I used air quotes there. An action creator that's gonna return a function that is eventually going to dispatch an action. Redux wants no business in your Async.

[00:02:58]
It's trying to stay in a world of pure functions. All that stuff should be isolated out to middleware. It should not happen in your reducer, it should ideally not happen in your map dispatch to props or anything along those lines. So actions, we'll go ahead and we'll say export const fetchTweets.

[00:03:22]

>> Steve Kinney: And this [INAUDIBLE] needs to return a function.
>> Steve Kinney: Which will go ahead and it will fetch.
>> Steve Kinney: And I will go back over here. We'll deal with that momentarily.
>> Steve Kinney: We got this Tweet Stream and if we go to,
>> Steve Kinney: Api/tweets there, it's a giant JSON mess of all the data you get back from the Twitter API.

[00:03:57]

>> Steve Kinney: So we can just paste that in there. So it's just tweet.stream.glitch.me/api/tweets. So we'll fetch that and we're just using the fetch API, right. You can use anything you want. You don't have to use a fetch API. If you wanna use XiOS, use XiOS, you wanna use jQuery.

[00:04:15]
Ajax, use jQuery.Ajax, right, use whatever way you like to hit APIs. I'm just gonna go with the built in one mostly, I don't wanna play favorites here. So the fetch API, you basically have to say whatever it is, how do you wanna parse it. Right, and so we know it as JSON, cuz the fetch API is super flexible.

[00:04:35]
It can fetch you images, it can fetch you blobs, so on and so forth. We're saying this is JSON. And then we'll just say, turn to the JSON, we'll say response.
>> Steve Kinney: We'll just console log it for now. We'll console log this dispatch, right, which is just gonna be a function.

[00:04:53]
It won't be anything truly surprising. But this is it. This is how you're gonna add asynchronous code to your Redux store. Now, if you're like, I think it's generally a good idea to have a belief system that if something seems easy, it is probably a foot gun right [LAUGH].

[00:05:13]
Anything that's easy means, let's say you had hit multiple APIs, there's no difference from, it's again, it's just Java Script. And you're gonna end up in call back hell, right? And coordinate a bunch of stuff, because there's no obstruction. When we saw editing objects immutably was hard, we made an obstruction and made it easier.

[00:05:36]
Right, with that kind of add entity and stuff along those lines. Because this is so transparent and simple, it means that you are on the hook for dealing with, okay, what if something happened? Or what if a user hit cancel and we don't actually want to do the thing when this promise resolves?

[00:05:51]
We'll deal with that in a little bit. So, it is simple, but simple means that all the stuff that it doesn't do, you're on the hook for. So, I, if I'm doing a small project, I will absolutely reach for this. Cuz it's a very easy way to do it.

[00:06:05]
But if things get more complicated you will be on the hook to deal with that. So let's go into this fetchTweets. It has, it basically go ahead and we have this, we're going ahead, it's calling this function that doesn't exist on click. FetchTweets is going to get us into the tweets.

[00:06:26]
It's gonna put it into Redux, but then the tweets component still needs to read that state and be able to map it out. So we'll go in there. Right now it's just a dumb component, we'll do something very similar to what we did before, which is we'll import connect from react-redux.

[00:06:48]
Great, and then we'll just export default that as well. We'll give ourselves a mapStateToProps, it's a pretty easy one.
>> Steve Kinney: That'll take the state. In fact really we just wanna pull the tweets off that object. I don't, I can just hand this as the first argument to connect.

[00:07:14]
I don't need to put it in a variable
>> Steve Kinney: He says as he decides to put it in a variable. So mapStateToProps around the tweets component.
>> Steve Kinney: Great.

