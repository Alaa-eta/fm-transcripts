WEBVTT

1
00:00:00.160 --> 00:00:01.070
&gt;&gt; Sean Larkin: And so,

2
00:00:01.070 --> 00:00:05.290
now we can actually just continue
to add modules to our graph here.

3
00:00:05.290 --> 00:00:08.430
We're creating this graph with
relationships between what is used in your

4
00:00:08.430 --> 00:00:10.610
app and what is actually compiled.

5
00:00:10.610 --> 00:00:15.370
So, let's create what's a good,
so we gotta nav.

6
00:00:15.370 --> 00:00:15.970
What do we have?

7
00:00:15.970 --> 00:00:17.180
We could say footer.

8
00:00:17.180 --> 00:00:19.580
We could say footer.js.

9
00:00:19.580 --> 00:00:20.360
All right, okay.

10
00:00:21.750 --> 00:00:27.620
And we can start out simple again.

11
00:00:27.620 --> 00:00:33.910
But let's just say, our footer is gonna
have two parts, like a top and a bottom.

12
00:00:35.380 --> 00:00:38.479
And for now we can just use top and
bottom as strings.

13
00:00:42.803 --> 00:00:47.040
&gt;&gt; Sean Larkin: And so you can't really
default export multiple values like this.

14
00:00:47.040 --> 00:00:50.260
I mean sure you could put it in
an object but that doesn't mix,

15
00:00:50.260 --> 00:00:55.640
I mean that doesn't thrill me too much.

16
00:00:55.640 --> 00:00:59.300
Like what if I only wanna reuse
the top part of the footer?

17
00:00:59.300 --> 00:01:03.698
Like that doesn't seem likely but
then we've all come across that scenario

18
00:01:03.698 --> 00:01:07.818
when you're like, I don't need to
really encapsulate these two, and

19
00:01:07.818 --> 00:01:10.094
then you end up pulling it our anyways.

20
00:01:10.094 --> 00:01:11.753
So we have these two pieces and so

21
00:01:11.753 --> 00:01:15.740
we wanna provide both of them
individually to other files, right?

22
00:01:15.740 --> 00:01:21.210
So, there's two ways that you can define
this, the syntax is really flexible.

23
00:01:21.210 --> 00:01:27.610
So since this is already an expression
right here, you could one,

24
00:01:27.610 --> 00:01:31.830
my gosh, I could learn to type,
export in front of them both.

25
00:01:33.540 --> 00:01:35.663
Okay so that's cool.

26
00:01:35.663 --> 00:01:40.359
So we go ahead and add export to
the front of them, the expressions.

27
00:01:43.467 --> 00:01:45.540
&gt;&gt; Sean Larkin: Now you'll notice
webpack didn't rebuild, right?

28
00:01:45.540 --> 00:01:47.320
Because we haven't added
anything to the graph.

29
00:01:47.320 --> 00:01:49.362
It's not connected to our entry point.

30
00:01:52.942 --> 00:01:55.640
&gt;&gt; Sean Larkin: So
we wanna actually access this behavior.

31
00:01:57.350 --> 00:01:59.320
So the syntax is just slightly different.

32
00:01:59.320 --> 00:02:05.670
Now we can use this object
destructuring syntax and pull in.

33
00:02:05.670 --> 00:02:09.580
And you'll even see, actually if you
just have an empty object there, and

34
00:02:09.580 --> 00:02:14.770
you do from, and
then you provide let's say the path.

35
00:02:14.770 --> 00:02:18.386
When you go back, so
webpack actually consumes it that time.

36
00:02:18.386 --> 00:02:23.313
And you'll see a rebuild, and
you'll actually see a footer there.

37
00:02:23.313 --> 00:02:27.498
But you'll get, if you're using VS code,

38
00:02:27.498 --> 00:02:32.830
you'll actually get the names
of the exports there.

39
00:02:32.830 --> 00:02:34.720
That's super valuable.

40
00:02:34.720 --> 00:02:37.450
I know the Angular community was
super huge on showing people that,

41
00:02:37.450 --> 00:02:44.110
because Angular basically super re-exports
from a billion packages into a top level.

42
00:02:44.110 --> 00:02:46.960
And so it's like you have a billion
things that you could choose to pull from

43
00:02:46.960 --> 00:02:48.460
a single package.

44
00:02:48.460 --> 00:02:52.219
And that's kind of the same
thing with lodash, right?

45
00:02:54.220 --> 00:02:55.180
So awesome.

46
00:02:55.180 --> 00:02:57.640
Now we probably wanna log it also.

47
00:02:57.640 --> 00:02:58.690
So cool.
Top bottom.

48
00:03:00.420 --> 00:03:00.920
Great.

49
00:03:02.190 --> 00:03:03.190
Exciting.

50
00:03:03.190 --> 00:03:07.670
Let's go through and
finish building this in production.

51
00:03:07.670 --> 00:03:10.080
So open up your terminal again.

52
00:03:10.080 --> 00:03:15.418
We'll cancel our watch mode,
I use Ctrl+C on here.

53
00:03:15.418 --> 00:03:22.119
And so this npm run prod,
&gt;&gt; Sean Larkin: Great.

54
00:03:25.232 --> 00:03:29.008
&gt;&gt; Sean Larkin: So now and you can always
see in the feedback that we generate at

55
00:03:29.008 --> 00:03:33.157
least, I think we stop it like 20
modules or something like that.

56
00:03:33.157 --> 00:03:37.270
You can see a very clear graph of,
here's your entry point.

57
00:03:39.930 --> 00:03:42.765
&gt;&gt; Sean Larkin: It has
a dependency on index.js,

58
00:03:42.765 --> 00:03:46.200
which is your entry point itself.

59
00:03:46.200 --> 00:03:49.310
And it depends on nav.js and footer.js.

60
00:03:49.310 --> 00:03:52.290
And so, you're kinda seeing there's
a graph that's being built here.

61
00:03:52.290 --> 00:03:54.400
We call this the dependency
graph in Webpack.

62
00:03:56.550 --> 00:04:01.660
So if we go and just run this code in
Node again, the same script we could run.

63
00:04:01.660 --> 00:04:07.544
So node ./dist/main.js.

64
00:04:07.544 --> 00:04:09.570
There we go.

65
00:04:09.570 --> 00:04:11.580
We get all the strings there, right?

66
00:04:15.290 --> 00:04:17.950
And so I do wanna talk about,
like, how do you write, like,

67
00:04:17.950 --> 00:04:20.610
declarative browser code in modules?

68
00:04:20.610 --> 00:04:23.860
Like, one of the things that early on
at first, like, I kinda struggled with,

69
00:04:23.860 --> 00:04:27.922
because it's like, in modules,
you don't wanna have side effects, right?

70
00:04:27.922 --> 00:04:32.729
You wanna have everything that's, like
anything that you access from another file

71
00:04:32.729 --> 00:04:35.853
should just be through exports,
or a default export.

72
00:04:35.853 --> 00:04:38.256
Instead of just running a script and

73
00:04:38.256 --> 00:04:42.880
evaluating what kind of things
are happening inside of it.

74
00:04:42.880 --> 00:04:46.680
And so we're gonna slowly, maybe
transition this over to something that is

75
00:04:46.680 --> 00:04:50.370
a &lt;nav&gt; element that we're
gonna attach to the DOM, and

76
00:04:50.370 --> 00:04:53.702
then we'll have a dev-server
that we'll spin up.

