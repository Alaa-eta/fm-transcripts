[00:00:02]
>> Sean Larkin: What I really wanna do is just start diving into, using Webpack. Let's use it for the first time,
>> Sean Larkin: From scratch. A lot of the code we're gonna work on today is gonna be coding along with me. And you'll [LAUGH], I love to preface this and say, I'm probably one of the least creative people as possible when it comes to building the web app.

[00:00:34]
And we're just gonna talk about the core pieces. So it may not be the most visual. It's not gonna be Sara Drasner doing these beautiful page transitions with SVG animations, not at all. Although, those are really great. We're gonna be just doing barebones. Because the whole point is that you, every single one of your workflows are completely different.

[00:00:57]
And so trying to pull up something that's already created and walk through is not going to provide as much value as it is being able to just start from scratch, build as you go, and then understanding that you had the flexibility to do anything any way that you want.

[00:01:13]
And especially like, I think some people would say, Shawn, there is no, actually. There was a Twitter thread yesterday, somebody who is from the rails community was ripping on Webpack and like his first response was, I guess the problem is that there isn't one right way to do things.

[00:01:31]
I'm like, yeah, it's the web. There is no one solution for what you're trying to create. If every web application was made the exact same way, Webpack wouldn't exist. We wouldn't need it. But that's not the case. We all have unique challenges. We either work for finance or e-commerce, completely different domains of things that you're trying to solve, and things are going to be completely More or not important to you.

[00:01:57]
So if you haven't cloned this repo already go ahead and do so. And I actually want you to check out. So there's a lot of branches that are there and we'll probably jump back and forth. If you feel like you're lost at any time please speak up. Because this is the most important part is you experiencing how to do it and having the confidence of doing it.

[00:02:24]
So there is a branch you can check out. And so, let's see. Let's just pretend I'm on master, okay. All right, so our master you'll look and eat Sean there is nothing here. That's the point I mean, we're starting from scratch. So you can. We're gonna jump to Get Checkout feature, feature.

[00:02:46]
Can't spell. 01 FEM per script.
>> Sean Larkin: All right. So you're going to see that there are like a billion dependencies in here but that's intentional. I wanna make it as easy for you to. So the first thing I want to have you do is just run. So I use yarn myself, who uses mpm?

[00:03:14]
Okay, so the commands are gonna be the exact same if I run, the only difference is if I'm running a script or if I am installing anything. I'd probably use yarn. I will just type yarn instead of mpm install. So if you want to go ahead right now, you can run mpm install.

[00:03:33]
And it's going to pull down a whole bunch of dependencies. Because of course the Webpack ecosystem is huge and so you have a lot of different integrations and things to choose from. And we may not cover every single one of these but we are gonna touch on the fundamentals.

[00:03:51]
And how to include these features into your application or as you're building it, and so, let's just, I'll run it myself. Run yarn or mpm install, either is fine. You might see some dependency warnings, that's okay, that's mpm. Now, while you're doing that and I hear like the multicore fans kicking in on your Macs and your PCs.

[00:04:19]
So while this is happening, I'm gonna give kind of like a high level overview or we're just gonna look and work through understanding like how scripts work, right? So if you've never been familiar with the mpm ecosystem you'll probably wonder how that run anything right? You're using Node that's a prerequisite, and you need to actually run Webpack.

[00:04:43]
So when you install packages, or you might notice like if you do mpm install, you could do --savedev. Like I usually recommend if it's mpm, you do mpm.install -dev. If you don't, that's okay too. But regardless, what Webpack or what mpm does it takes and adds a bin folder inside your node modules.

[00:05:09]
And these are the executables for all of the modules that have been downloaded. And so each of these have some sort of CLI, or binary executable including Webpack itself. And so to actually run these, if was to try to just do Webpack in here, it doesn't work it fails see.

[00:05:33]
It says Webpack not found, so what mpm does is allows you to run scripts that hoist that binary package within it's scope So this gives you the opportunity. So the first thing we'll literally do here, now I know that there is a script field already. But if you wanted to have that from scratch experience, you can literally just add a scripts key or a scripts key and then the object is the value.

[00:06:05]
And then, now, basically how this works is, you can have anything in here. It could be like seanlarkin. And then what mpm will allow you to do, is you can run any sort of command from here. It can be any sort of even bash command. But the difference is now you have those binary those binary executables in this scope.

[00:06:27]
So for example, if I wanted to run Webpack all I have to do is type Webpack here, right? So now to run it, it's either mpm run and name of that script, right?
>> Sean Larkin: So in this case but why don't we just for the sake of following along we just rename it to build or we can even call it Webpack.

[00:06:50]
I like that because then I know exactly what that's running. So if I just said mpm run Webpack and I save this. There we go, that's the feedback I'm used to seeing. That's the default console output for Webpack.

