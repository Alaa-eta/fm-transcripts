[00:00:00]
>> Sean Larkin: And so, now we can actually just continue to add modules to our graph here. We're creating this graph with relationships between what is used in your app and what is actually compiled. So, let's create what's a good, so we gotta nav. What do we have? We could say footer.

[00:00:17]
We could say footer.js. All right, okay. And we can start out simple again. But let's just say, our footer is gonna have two parts, like a top and a bottom. And for now we can just use top and bottom as strings.
>> Sean Larkin: And so you can't really default export multiple values like this.

[00:00:47]
I mean sure you could put it in an object but that doesn't mix, I mean that doesn't thrill me too much. Like what if I only wanna reuse the top part of the footer? Like that doesn't seem likely but then we've all come across that scenario when you're like, I don't need to really encapsulate these two, and then you end up pulling it our anyways.

[00:01:10]
So we have these two pieces and so we wanna provide both of them individually to other files, right? So, there's two ways that you can define this, the syntax is really flexible. So since this is already an expression right here, you could one, my gosh, I could learn to type, export in front of them both.

[00:01:33]
Okay so that's cool. So we go ahead and add export to the front of them, the expressions.
>> Sean Larkin: Now you'll notice webpack didn't rebuild, right? Because we haven't added anything to the graph. It's not connected to our entry point.
>> Sean Larkin: So we wanna actually access this behavior. So the syntax is just slightly different.

[00:01:59]
Now we can use this object destructuring syntax and pull in. And you'll even see, actually if you just have an empty object there, and you do from, and then you provide let's say the path. When you go back, so webpack actually consumes it that time. And you'll see a rebuild, and you'll actually see a footer there.

[00:02:23]
But you'll get, if you're using VS code, you'll actually get the names of the exports there. That's super valuable. I know the Angular community was super huge on showing people that, because Angular basically super re-exports from a billion packages into a top level. And so it's like you have a billion things that you could choose to pull from a single package.

[00:02:48]
And that's kind of the same thing with lodash, right? So awesome. Now we probably wanna log it also. So cool. Top bottom. Great. Exciting. Let's go through and finish building this in production. So open up your terminal again. We'll cancel our watch mode, I use Ctrl+C on here.

[00:03:15]
And so this npm run prod,
>> Sean Larkin: Great.
>> Sean Larkin: So now and you can always see in the feedback that we generate at least, I think we stop it like 20 modules or something like that. You can see a very clear graph of, here's your entry point.
>> Sean Larkin: It has a dependency on index.js, which is your entry point itself.

[00:03:46]
And it depends on nav.js and footer.js. And so, you're kinda seeing there's a graph that's being built here. We call this the dependency graph in Webpack. So if we go and just run this code in Node again, the same script we could run. So node ./dist/main.js. There we go.

[00:04:09]
We get all the strings there, right? And so I do wanna talk about, like, how do you write, like, declarative browser code in modules? Like, one of the things that early on at first, like, I kinda struggled with, because it's like, in modules, you don't wanna have side effects, right?

[00:04:27]
You wanna have everything that's, like anything that you access from another file should just be through exports, or a default export. Instead of just running a script and evaluating what kind of things are happening inside of it. And so we're gonna slowly, maybe transition this over to something that is a <nav> element that we're gonna attach to the DOM, and then we'll have a dev-server that we'll spin up.

