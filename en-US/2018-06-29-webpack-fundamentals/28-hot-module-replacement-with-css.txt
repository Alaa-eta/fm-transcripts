[00:00:00]
>> Sean Larkin: Now what's really cool is that, by default, if we were to look at this generated code,
>> Sean Larkin: You're gonna see some special annotations wrapped around this JavaScript module. And the reason why is, is because the loaders are really useful for helping support a unique webpack feature called Hot Module Replacement.

[00:00:25]
And, I think it's easier to show you or free to experience what it is instead of trying to explain how it works. So, to experience it, all I want you to do is jump into your package.json. And where you have your dev script, I want you to add another flag at the end that says, --hot.

[00:00:48]

>> Sean Larkin: Let me zoom out on that just a little bit.
>> Sean Larkin: And I'm not really gonna dive into what hot module replace is beyond what it provides you.
>> Sean Larkin: So, if we look now and we restart our build,
>> Sean Larkin: So everything looks the same, except now we have a couple little pieces of feedback here.

[00:01:09]
Why don't we take that import that we imported into footer, I know what, then let's move this into the entry point.
>> Sean Larkin: Now let's see.
>> Sean Larkin: So jump to index, add it right here
>> Sean Larkin: Let's see.
>> Sean Larkin: This should still work. Yeah, it does, okay. If you wanted to even use like import.css from whatever, it still works.

[00:01:49]

>> Sean Larkin: But really that code is just declarative side effects. So, let's try and see if we get that feature again. If not, well, I'll leave it alone, and we can keep going and talk about how we're gonna change this for production mode.
>> Sean Larkin: There we go, now did you notice that?

[00:02:11]
So, if you change a property now,
>> Sean Larkin: Instantly, you're seeing changes before your eyes, and we're not reloading the browser.
>> Sean Larkin: We're doing nothing, so this is what Hot Module Replacement is. Webpack has this capability of being able to patch changes that are made incrementally, and apply them without you ever having to reload the browser.

[00:02:40]
So this is just super valuable when you have capabilities like you have something that has a lot of complex state, then refreshing your browser would be a real pain to debug, right. And it's also just a really cool development experience, that you can essentially like this, I think, it's really cool for designers to go through.

[00:02:58]
And they could get live feedback without having to mess with anything. So, now, let's also go ahead. Now this wouldn't be something that we would wanna do. So, the CSS that we have now, it's just adding a module and it's blocking the main thread, right, because you're relying on JavaScript to attach a style tag.

[00:03:22]
And so instead, what we would want to do is we would wanna extract it out and have it in a separate tag, right? So, we can do this by adding the mini CSS extract plug in, but we're gonna apply it to our, so Close Others. Let's see, we're gonna apply this to our production config.

[00:03:45]

>> Sean Larkin: Now, I always forget the order, so I'm just gonna pull it up, and this is kinda the same thing. If there's a plugin that you want to use, we stress, really importantly, the ability to have these options documented, but there's two pieces that you're gonna add for this.

[00:04:06]
The first one is going to be the plugin itself, and then we're also gonna add kinda the module rules. And we're gonna leverage that plugin a special loader that extracts these pieces out.
>> Sean Larkin: So, why don't we go ahead and just add that information. So first things first is that we'll go ahead and we'll require that plugin, so const MiniCssExtractPlugin = require, I'll hide the window, we don't need it right now

[00:04:41]

>> Sean Larkin: Here we go. And then, we can just add that plugin,
>> Sean Larkin: And a plugins array, [COUGH] just as we see here. Now these are just options that you can use, and they use the same name helpers like you're used to seeing for the output property. But by default, these are all set, so you can just pass a new reference, I think that's really nice.

[00:05:04]
Good defaults are really important.
>> Sean Larkin: So now, we also wanna add the module property.
>> Sean Larkin: So yeah, module and rules.
>> Sean Larkin: And in the same way, we have to basically create a array of, or we're defining like when we wanna apply these capabilities. So I'm pretty comfortable with copy pasta, only appropriate place number two to do it.

[00:05:40]

>> Sean Larkin: So we'll just add this inside of the rules array, right? Now there's a little difference that's gonna happen now. Instead of using style loader, we're actually gonna use this MiniCssExtractPlugin.loader. So it'll be whatever name you give it here .loader, instead of style loader.
>> Sean Larkin: There we go.

[00:06:03]
So why don't we go ahead and actually run our production config and see what happens? So, yarn prod or npm run prod,
>> Sean Larkin: We get a build.
>> Sean Larkin: And if we look in the feedback, hey, we have now completely separate CSS file that has been omitted to our dist folder.

[00:06:29]

>> Sean Larkin: Now, maybe for the ease of seeing what's in your dist, well, let's make one change here, and that is in your production. Just so that you don't get a new hash every time. Just go ahead and change this back to bundle. That way, just this folder doesn't keep piling up.

[00:06:46]
[COUGH]
I just like deleting it. You can always get it back, webpack creates it.
>> Sean Larkin: There we go, nice and clean. So there is the styles that we wrote, in addition to the CSS is actually put in the right location inside of the HTML
>> Sean Larkin: So this is really the best practice for how you're trying to load CSS.

[00:07:19]
Now, when we talk about code splitting tomorrow, I'm gonna go over kind of like, how many MiniCssExtractPlugin is really valuable to us. We just added this plugin, and it's only webpack four compatible. But we added it because it has support for lazy loading CSS. And I think that's really cool because, it's nothing that any build tools have been able to generate so far for us.

[00:07:45]

>> Sean Larkin: It's a really mixed performance possible especially in the forms of CSS.
>> Sean Larkin: Does anybody have any questions so far about this? If you wanted to preview, you could, like an HTTP server, but the behavior will be identical in terms of what will show on the page, yeah?

[00:08:06]

>> Speaker 2: If you import multiple CSS files will it inject multiple link tags?
>> Sean Larkin: I don't believe multiple link, well let's find out. I don't believe it's multiple link tags, it will be kind of in the same CSS file.
>> Speaker 2: So concatenated.
>> Sean Larkin: Yep, and you can actually, I think there's even, through the CSS loader you can minify and do other capabilities.

[00:08:29]
As long as it's in the loader chain, you can really apply any changes you want. And yeah, let's do that. We wanna add another CSS file. We should, it makes sense. Let's just do one for the old button, right?
>> Sean Larkin: So let's create,
>> Sean Larkin: button.css. What's a good button attribute?

[00:08:56]

>> Sean Larkin: Background attachment, button image outset. I'm not even sure what a great one is.
>> Speaker 3: Font family fantasy.
>> Sean Larkin: Ooh, I like it, font family fantasy. Is it just like fantasy, like that? Cool, ship it, [LAUGH] let's run our production build.
>> Speaker 3: Actually, I think it's a named value, you don't have to put it in quotes.

[00:09:23]

>> Speaker 4: And its limitations is just-
>> Sean Larkin: Nice, in lowercase?
>> Speaker 3: Yeah.
>> Sean Larkin: See, this is why I rely on you all. [LAUGH]
>> Sean Larkin: Awesome, so let's take a look. Yeah, and it looks like it's just one. Or unless we rebuild and we see multiples.
>> Sean Larkin: Of course, we haven't actually imported this anywhere, so we don't see the extra one created.

[00:09:46]
Let's jump to our entry point and actually import it. I always jump ahead of myself.
>> Sean Larkin: button from button.css, here we go.
>> Sean Larkin: Uh-oh, what happened?
>> Speaker 3: [INAUDIBLE]
>> Sean Larkin: Thank you very much.
>> Sean Larkin: I love it.
>> Sean Larkin: That wasn't a very friendly error message, though. It was, okay, there we go.

[00:10:26]
That's pretty helpful, though, for identifying that. Okay, so let's look at what the output is. So it's still a single, and we have both our styles in.
>> Sean Larkin: Now what would be cool in a perfect world is if it like optimized it in the right way. We're hoping to work with the LinkedIn team who kind of created this new tool called CSS Blocks.

[00:10:49]
And that optimizer and compiler really does things like that, how cool would that be? That seems like a core tenet that would make sense for Webpack.
>> Speaker 5: So if you're importing those into the top level module there, and then, it's just gonna be putting those all on the same scope there.

[00:11:08]
So the CSS wouldn't be scoped to the module.
>> Sean Larkin: So that is a caveat to think about. And that's why when we talk about let's say, code splitting CSS, it becomes valuable to then separate those into asynchronous applications. So you can, in real time, dynamically force a scope change by applying a new style sheet.

[00:11:27]
And so, but this is like a very vanilla way of doing it. Like a lot of people will end up using CSS modules, to have the scope capabilities, or they'll use their framework's recommended way that Webpack powers behind the scenes.
>> Sean Larkin: But just from it's primitive, yeah, exactly from the simplest use case that's what it will do.

[00:11:57]

>> Sean Larkin: So I'm just gonna check this out really quick. So if you want to play with the styles or launch the dev server see how everything looks, feel free to go ahead and do so, I'm just gonna create a branch.

