WEBVTT

1
00:00:00.030 --> 00:00:03.393
&gt;&gt; Sean Larkin: Now what's
really cool is that, by default,

2
00:00:03.393 --> 00:00:08.656
if we were to look at this generated code,
&gt;&gt; Sean Larkin: You're

3
00:00:08.656 --> 00:00:14.491
gonna see some special annotations
wrapped around this JavaScript module.

4
00:00:14.491 --> 00:00:19.587
And the reason why is, is because
the loaders are really useful for

5
00:00:19.587 --> 00:00:25.331
helping support a unique webpack
feature called Hot Module Replacement.

6
00:00:25.331 --> 00:00:27.792
And, I think it's easier to show you or

7
00:00:27.792 --> 00:00:33.070
free to experience what it is instead
of trying to explain how it works.

8
00:00:33.070 --> 00:00:39.284
So, to experience it, all I want you
to do is jump into your package.json.

9
00:00:39.284 --> 00:00:41.976
And where you have your dev script,

10
00:00:41.976 --> 00:00:46.569
I want you to add another flag
at the end that says, --hot.

11
00:00:48.983 --> 00:00:50.615
&gt;&gt; Sean Larkin: Let me zoom
out on that just a little bit.

12
00:00:54.135 --> 00:00:56.823
&gt;&gt; Sean Larkin: And I'm not really
gonna dive into what hot module

13
00:00:56.823 --> 00:00:58.999
replace is beyond what it provides you.

14
00:01:00.368 --> 00:01:02.279
&gt;&gt; Sean Larkin: So, if we look now and

15
00:01:02.279 --> 00:01:06.504
we restart our build,
&gt;&gt; Sean Larkin: So everything looks

16
00:01:06.504 --> 00:01:09.416
the same, except now we have a couple
little pieces of feedback here.

17
00:01:09.416 --> 00:01:13.934
Why don't we take that import
that we imported into footer,

18
00:01:13.934 --> 00:01:18.197
I know what,
then let's move this into the entry point.

19
00:01:25.622 --> 00:01:26.764
&gt;&gt; Sean Larkin: Now let's see.

20
00:01:30.573 --> 00:01:33.848
&gt;&gt; Sean Larkin: So
jump to index, add it right

21
00:01:33.848 --> 00:01:39.762
here
&gt;&gt; Sean Larkin: Let's see.

22
00:01:41.280 --> 00:01:42.160
&gt;&gt; Sean Larkin: This should still work.

23
00:01:42.160 --> 00:01:42.780
Yeah, it does, okay.

24
00:01:43.818 --> 00:01:47.592
If you wanted to even use like import.css
from whatever, it still works.

25
00:01:49.466 --> 00:01:53.845
&gt;&gt; Sean Larkin: But really that code
is just declarative side effects.

26
00:01:53.845 --> 00:01:58.068
So, let's try and
see if we get that feature again.

27
00:01:58.068 --> 00:02:00.496
If not, well, I'll leave it alone,
and we can keep going and

28
00:02:00.496 --> 00:02:02.940
talk about how we're gonna change this for
production mode.

29
00:02:09.092 --> 00:02:11.903
&gt;&gt; Sean Larkin: There we go,
now did you notice that?

30
00:02:11.903 --> 00:02:18.369
So, if you change a property now,
&gt;&gt; Sean Larkin: Instantly,

31
00:02:18.369 --> 00:02:23.236
you're seeing changes before your eyes,
and we're not reloading the browser.

32
00:02:27.302 --> 00:02:31.130
&gt;&gt; Sean Larkin: We're doing nothing, so
this is what Hot Module Replacement is.

33
00:02:31.130 --> 00:02:35.357
Webpack has this capability of being
able to patch changes that are made

34
00:02:35.357 --> 00:02:40.085
incrementally, and apply them without
you ever having to reload the browser.

35
00:02:40.085 --> 00:02:44.211
So this is just super valuable when you
have capabilities like you have something

36
00:02:44.211 --> 00:02:45.898
that has a lot of complex state,

37
00:02:45.898 --> 00:02:50.130
then refreshing your browser would
be a real pain to debug, right.

38
00:02:50.130 --> 00:02:53.981
And it's also just a really cool
development experience, that you can

39
00:02:53.981 --> 00:02:58.424
essentially like this, I think, it's
really cool for designers to go through.

40
00:02:58.424 --> 00:03:02.709
And they could get live feedback
without having to mess with anything.

41
00:03:02.709 --> 00:03:07.090
So, now, let's also go ahead.

42
00:03:07.090 --> 00:03:09.650
Now this wouldn't be something
that we would wanna do.

43
00:03:10.990 --> 00:03:16.780
So, the CSS that we have now, it's just
adding a module and it's blocking the main

44
00:03:16.780 --> 00:03:20.970
thread, right, because you're relying
on JavaScript to attach a style tag.

45
00:03:22.070 --> 00:03:26.670
And so instead, what we would want to
do is we would wanna extract it out and

46
00:03:26.670 --> 00:03:28.836
have it in a separate tag, right?

47
00:03:28.836 --> 00:03:34.138
So, we can do this by adding
the mini CSS extract plug in,

48
00:03:34.138 --> 00:03:38.895
but we're gonna apply it to our,
so Close Others.

49
00:03:38.895 --> 00:03:42.981
Let's see, we're gonna apply
this to our production config.

50
00:03:45.981 --> 00:03:48.605
&gt;&gt; Sean Larkin: Now,
I always forget the order, so

51
00:03:48.605 --> 00:03:53.080
I'm just gonna pull it up, and
this is kinda the same thing.

52
00:03:53.080 --> 00:03:57.060
If there's a plugin that you want to use,
we stress, really importantly,

53
00:03:57.060 --> 00:04:02.220
the ability to have these
options documented,

54
00:04:02.220 --> 00:04:06.140
but there's two pieces that
you're gonna add for this.

55
00:04:06.140 --> 00:04:09.060
The first one is going
to be the plugin itself,

56
00:04:09.060 --> 00:04:12.390
and then we're also gonna
add kinda the module rules.

57
00:04:12.390 --> 00:04:15.049
And we're gonna leverage that
plugin a special loader that

58
00:04:15.049 --> 00:04:16.332
extracts these pieces out.

59
00:04:18.513 --> 00:04:21.448
&gt;&gt; Sean Larkin: So, why don't we go
ahead and just add that information.

60
00:04:21.448 --> 00:04:25.140
So first things first is
that we'll go ahead and

61
00:04:25.140 --> 00:04:30.955
we'll require that plugin, so
const MiniCssExtractPlugin = require,

62
00:04:30.955 --> 00:04:34.850
I'll hide the window,
we don't need it right now

63
00:04:41.309 --> 00:04:43.661
&gt;&gt; Sean Larkin: Here we go.

64
00:04:43.661 --> 00:04:47.577
And then, we can just add that plugin,
&gt;&gt; Sean Larkin: And

65
00:04:47.577 --> 00:04:51.800
a plugins array,
[COUGH] just as we see here.

66
00:04:51.800 --> 00:04:54.429
Now these are just options
that you can use, and

67
00:04:54.429 --> 00:04:59.055
they use the same name helpers like you're
used to seeing for the output property.

68
00:04:59.055 --> 00:05:03.107
But by default, these are all set, so
you can just pass a new reference,

69
00:05:03.107 --> 00:05:04.890
I think that's really nice.

70
00:05:04.890 --> 00:05:06.200
Good defaults are really important.

71
00:05:07.801 --> 00:05:10.911
&gt;&gt; Sean Larkin: So now,
we also wanna add the module property.

72
00:05:13.911 --> 00:05:18.787
&gt;&gt; Sean Larkin: So yeah, module and rules.

73
00:05:20.424 --> 00:05:25.242
&gt;&gt; Sean Larkin: And in the same way,
we have to basically create a array of, or

74
00:05:25.242 --> 00:05:30.750
we're defining like when we
wanna apply these capabilities.

75
00:05:30.750 --> 00:05:34.466
So I'm pretty comfortable with copy pasta,

76
00:05:34.466 --> 00:05:38.097
only appropriate place
number two to do it.

77
00:05:40.930 --> 00:05:44.880
&gt;&gt; Sean Larkin: So we'll just add this
inside of the rules array, right?

78
00:05:44.880 --> 00:05:46.820
Now there's a little difference
that's gonna happen now.

79
00:05:46.820 --> 00:05:49.124
Instead of using style loader,

80
00:05:49.124 --> 00:05:53.914
we're actually gonna use this
MiniCssExtractPlugin.loader.

81
00:05:53.914 --> 00:05:58.806
So it'll be whatever name you give it
here .loader, instead of style loader.

82
00:06:01.920 --> 00:06:03.622
&gt;&gt; Sean Larkin: There we go.

83
00:06:03.622 --> 00:06:07.726
So why don't we go ahead and
actually run our production config and

84
00:06:07.726 --> 00:06:08.905
see what happens?

85
00:06:08.905 --> 00:06:11.614
So, yarn prod or

86
00:06:11.614 --> 00:06:16.958
npm run prod,
&gt;&gt; Sean Larkin: We get a build.

87
00:06:19.381 --> 00:06:21.588
&gt;&gt; Sean Larkin: And
if we look in the feedback, hey,

88
00:06:21.588 --> 00:06:26.515
we have now completely separate CSS file
that has been omitted to our dist folder.

89
00:06:29.731 --> 00:06:34.461
&gt;&gt; Sean Larkin: Now, maybe for the ease
of seeing what's in your dist, well,

90
00:06:34.461 --> 00:06:39.120
let's make one change here, and
that is in your production.

91
00:06:39.120 --> 00:06:42.101
Just so
that you don't get a new hash every time.

92
00:06:42.101 --> 00:06:44.330
Just go ahead and
change this back to bundle.

93
00:06:44.330 --> 00:06:46.858
That way,
just this folder doesn't keep piling up.

94
00:06:46.858 --> 00:06:49.970
[COUGH]
I just like deleting it.

95
00:06:49.970 --> 00:06:51.851
You can always get it back,
webpack creates it.

96
00:06:58.285 --> 00:07:02.104
&gt;&gt; Sean Larkin: There we go,
nice and clean.

97
00:07:02.104 --> 00:07:05.487
So there is the styles that we wrote,

98
00:07:05.487 --> 00:07:10.835
in addition to the CSS is actually
put in the right location

99
00:07:10.835 --> 00:07:15.701
inside of the HTML
&gt;&gt; Sean Larkin: So

100
00:07:15.701 --> 00:07:19.480
this is really the best practice for
how you're trying to load CSS.

101
00:07:19.480 --> 00:07:25.250
Now, when we talk about code splitting
tomorrow, I'm gonna go over kind of like,

102
00:07:26.490 --> 00:07:29.210
how many MiniCssExtractPlugin
is really valuable to us.

103
00:07:29.210 --> 00:07:33.066
We just added this plugin, and
it's only webpack four compatible.

104
00:07:33.066 --> 00:07:37.466
But we added it because it has support for
lazy loading CSS.

105
00:07:37.466 --> 00:07:39.643
And I think that's really cool because,

106
00:07:39.643 --> 00:07:43.572
it's nothing that any build tools have
been able to generate so far for us.

107
00:07:45.084 --> 00:07:47.945
&gt;&gt; Sean Larkin: It's a really mixed
performance possible especially in

108
00:07:47.945 --> 00:07:48.845
the forms of CSS.

109
00:07:51.949 --> 00:07:57.311
&gt;&gt; Sean Larkin: Does anybody have
any questions so far about this?

110
00:07:57.311 --> 00:08:01.324
If you wanted to preview,
you could, like an HTTP server, but

111
00:08:01.324 --> 00:08:06.440
the behavior will be identical in terms
of what will show on the page, yeah?

112
00:08:06.440 --> 00:08:12.951
&gt;&gt; Speaker 2: If you import multiple CSS
files will it inject multiple link tags?

113
00:08:12.951 --> 00:08:14.639
&gt;&gt; Sean Larkin: I don't believe
multiple link, well let's find out.

114
00:08:14.639 --> 00:08:18.519
I don't believe it's multiple link tags,
it will be kind of in the same CSS file.

115
00:08:18.519 --> 00:08:19.665
&gt;&gt; Speaker 2: So concatenated.

116
00:08:19.665 --> 00:08:24.922
&gt;&gt; Sean Larkin: Yep, and
you can actually, I think there's even,

117
00:08:24.922 --> 00:08:29.240
through the CSS loader you can minify and
do other capabilities.

118
00:08:29.240 --> 00:08:32.730
As long as it's in the loader chain,
you can really apply any changes you want.

119
00:08:32.730 --> 00:08:34.030
And yeah, let's do that.

120
00:08:34.030 --> 00:08:36.510
We wanna add another CSS file.

121
00:08:36.510 --> 00:08:38.903
We should, it makes sense.

122
00:08:38.903 --> 00:08:42.016
Let's just do one for
the old button, right?

123
00:08:43.656 --> 00:08:51.822
&gt;&gt; Sean Larkin: So let's create,
&gt;&gt; Sean Larkin: button.css.

124
00:08:51.822 --> 00:08:53.452
What's a good button attribute?

125
00:08:56.411 --> 00:08:58.677
&gt;&gt; Sean Larkin: Background attachment,
button image outset.

126
00:08:58.677 --> 00:09:00.530
I'm not even sure what a great one is.

127
00:09:02.125 --> 00:09:03.199
&gt;&gt; Speaker 3: Font family fantasy.

128
00:09:03.199 --> 00:09:07.607
&gt;&gt; Sean Larkin: Ooh, I like it,
font family fantasy.

129
00:09:07.607 --> 00:09:12.144
Is it just like fantasy, like that?

130
00:09:12.144 --> 00:09:16.968
Cool, ship it,
[LAUGH] let's run our production build.

131
00:09:20.135 --> 00:09:21.819
&gt;&gt; Speaker 3: Actually,
I think it's a named value,

132
00:09:21.819 --> 00:09:23.310
you don't have to put it in quotes.

133
00:09:23.310 --> 00:09:27.369
&gt;&gt; Speaker 4: And its limitations is just-
&gt;&gt; Sean Larkin: Nice, in lowercase?

134
00:09:27.369 --> 00:09:27.869
&gt;&gt; Speaker 3: Yeah.

135
00:09:29.792 --> 00:09:31.745
&gt;&gt; Sean Larkin: See,
this is why I rely on you all.

136
00:09:31.745 --> 00:09:34.759
[LAUGH]
&gt;&gt; Sean Larkin: Awesome, so

137
00:09:34.759 --> 00:09:35.480
let's take a look.

138
00:09:35.480 --> 00:09:37.750
Yeah, and it looks like it's just one.

139
00:09:37.750 --> 00:09:39.854
Or unless we rebuild and we see multiples.

140
00:09:42.087 --> 00:09:44.489
&gt;&gt; Sean Larkin: Of course, we haven't
actually imported this anywhere, so

141
00:09:44.489 --> 00:09:46.640
we don't see the extra one created.

142
00:09:46.640 --> 00:09:49.080
Let's jump to our entry point and
actually import it.

143
00:09:50.110 --> 00:09:51.554
I always jump ahead of myself.

144
00:09:53.349 --> 00:09:59.100
&gt;&gt; Sean Larkin: button from button.css,
here we go.

145
00:10:03.613 --> 00:10:04.689
&gt;&gt; Sean Larkin: Uh-oh, what happened?

146
00:10:10.383 --> 00:10:14.475
&gt;&gt; Speaker 3: [INAUDIBLE]
&gt;&gt; Sean Larkin: Thank you very much.

147
00:10:17.166 --> 00:10:18.244
&gt;&gt; Sean Larkin: I love it.

148
00:10:21.058 --> 00:10:23.710
&gt;&gt; Sean Larkin: That wasn't a very
friendly error message, though.

149
00:10:23.710 --> 00:10:26.450
It was, okay, there we go.

150
00:10:26.450 --> 00:10:29.370
That's pretty helpful,
though, for identifying that.

151
00:10:29.370 --> 00:10:31.120
Okay, so let's look at what the output is.

152
00:10:32.330 --> 00:10:35.568
So it's still a single, and
we have both our styles in.

153
00:10:39.097 --> 00:10:42.957
&gt;&gt; Sean Larkin: Now what would be cool in
a perfect world is if it like optimized it

154
00:10:42.957 --> 00:10:44.037
in the right way.

155
00:10:44.037 --> 00:10:47.826
We're hoping to work with the LinkedIn
team who kind of created this

156
00:10:47.826 --> 00:10:49.427
new tool called CSS Blocks.

157
00:10:49.427 --> 00:10:52.198
And that optimizer and
compiler really does things like that,

158
00:10:52.198 --> 00:10:53.880
how cool would that be?

159
00:10:53.880 --> 00:10:56.340
That seems like a core tenet that
would make sense for Webpack.

160
00:10:57.370 --> 00:11:02.860
&gt;&gt; Speaker 5: So if you're importing those
into the top level module there, and

161
00:11:02.860 --> 00:11:08.300
then, it's just gonna be putting
those all on the same scope there.

162
00:11:08.300 --> 00:11:10.590
So the CSS wouldn't be
scoped to the module.

163
00:11:10.590 --> 00:11:12.448
&gt;&gt; Sean Larkin: So
that is a caveat to think about.

164
00:11:12.448 --> 00:11:16.780
And that's why when we talk about
let's say, code splitting CSS,

165
00:11:16.780 --> 00:11:22.340
it becomes valuable to then separate
those into asynchronous applications.

166
00:11:22.340 --> 00:11:23.340
So you can,

167
00:11:23.340 --> 00:11:27.818
in real time, dynamically force a scope
change by applying a new style sheet.

168
00:11:27.818 --> 00:11:33.685
And so, but this is like a very
vanilla way of doing it.

169
00:11:33.685 --> 00:11:37.325
Like a lot of people will
end up using CSS modules,

170
00:11:37.325 --> 00:11:42.355
to have the scope capabilities,
or they'll use their framework's

171
00:11:42.355 --> 00:11:46.536
recommended way that Webpack
powers behind the scenes.

172
00:11:48.120 --> 00:11:51.091
&gt;&gt; Sean Larkin: But
just from it's primitive, yeah,

173
00:11:51.091 --> 00:11:55.600
exactly from the simplest use
case that's what it will do.

174
00:11:57.681 --> 00:12:00.680
&gt;&gt; Sean Larkin: So I'm just gonna
check this out really quick.

175
00:12:00.680 --> 00:12:03.830
So if you want to play with the styles or
launch the dev server see how everything

176
00:12:03.830 --> 00:12:06.762
looks, feel free to go ahead and
do so, I'm just gonna create a branch.

