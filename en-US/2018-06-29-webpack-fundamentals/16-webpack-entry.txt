[00:00:00]
>> Sean: So if you wanna return kind of safely to where we left off. The branch that you wanna use is the feature, here let's clear the console. So feature/0310. Let's see if I can make that bigger, there we go. Add first config mode none.
>> Sean: Now, really, we're kind of at a point where we've created our first webpack.config.

[00:00:40]
We understand that, by default, Webpack is trying to consume this config if it exists. And it's just a JavaScript module. Like, this is probably one of the standout pieces about Webpack's configuration is that it is code. And so, like any JavaScript that we write, it's gonna be subject to the same symptoms of JavaScript, right?

[00:01:07]
Like can it get out of hand? Absolutely. Can it be really hard to read? Yes, because JavaScript can be out of hand, and can be hard to read, but that's why we have modules, right? That's what modules exist to help us encapsulate behavior and functionality.
>> Sean: Now,
>> Sean: Before I start diving into actually kind of building out our config and adding new features, I'm gonna talk about webpack's core concepts.

[00:01:37]
So I'm gonna share some slides. And you may have even seen me talk about this before if you've seen some of my talks. The webpack, the core concepts was like one of the first talks I ever gave. But to this day, it's still very evergreen. I don't really even try to mess with much of the content because the concepts itself are still evergreen throughout Webpack.

[00:02:05]
And I don't think many of those are gonna change. So, the goal for you is to now understand. So, once we're done with this section. We're gonna dive into actually building up the config, adding features, adding loaders, adding support for things, and maybe talking about, why? And it's gonna be a lot more comfortable once you understand what these things are doing.

[00:02:29]
I find that more useful then just having you arbitrarily code with me a bunch of stuff that you're like what is this? So there's four core concepts. So the first one is called entry. And we kind of have an introduction to this already. The entry point you know really is not like the entry property in the config, we're talking about more as the concept.

[00:02:52]
So, say you have this diagram, and you have some codes and some modules, and you have a toppable file. I think I was writing Angular at the time when I created this, and so there was a bootstrap file. And it imports a component, and that component imports some lib, and also some other components.

[00:03:12]
And like that Lib has a dependency, like this is how JavaScript works. And let's say we get really weird and sometimes your dependencies aren't just JavaScript. Sometimes for a component library you might rely on some SaaS or CSS or whatever. But the point is, is at that top file, that is your entry point.

[00:03:36]
That is the entry. It is the root of what is now kind of a graph here, right? And it's the first JavaScript file to kind of kick off your functionality. And so, we define this using an entry property in the configuration. There's a couple ways or a couple different types of data types that you can pass into the entry property.

[00:04:00]
But the simplest is just a string, which is just a relative path. And you can even see here, you can step through the code. Webpack's gonna trace through each of these imports, and then recursively look for other dependencies in those files until it creates a graph. And that's the entry point, that's what the entry is.

[00:04:24]
It's very simple to, in terms, it's not complex in what is happening behind the scenes either like we just passed that stream to webpack's compiler, and then it goes and resolves it, and tries to create a graph. So like when you think about entry as like the concept.

[00:04:41]
The entry point or the entry property, the entry concept is really about telling webpack what you want to include in the browser. What do you want your code to be bundled and its contents? And it works together with the output property.

