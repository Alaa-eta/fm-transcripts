WEBVTT

1
00:00:00.640 --> 00:00:05.041
&gt;&gt; Mike North: The next thing we're going
to talk about is a little five-minute

2
00:00:05.041 --> 00:00:07.129
description of type systems.

3
00:00:07.129 --> 00:00:12.115
And how you can tell the difference and
take advantage of the difference

4
00:00:12.115 --> 00:00:16.450
between something like typescript and
something like Java.

5
00:00:16.450 --> 00:00:21.466
So, type systems come down to this
question of type equivalents.

6
00:00:21.466 --> 00:00:25.854
And that is the same thing we were
looking at when we were trying,

7
00:00:25.854 --> 00:00:30.327
when we saw some error messages
that related to the left-hand and

8
00:00:30.327 --> 00:00:33.360
the right-hand of an assignment, right?

9
00:00:33.360 --> 00:00:38.477
That's TypeScript trying to figure out,
is this value you're trying to

10
00:00:38.477 --> 00:00:43.521
assign equivalent to this type of
the variable you're assigning it to.

11
00:00:43.521 --> 00:00:49.286
And the same thing happens when you're
trying to pass an argument to a function.

12
00:00:49.286 --> 00:00:53.754
Just think of it like an object
trying to pass through a hole.

13
00:00:53.754 --> 00:00:58.294
Like a square peg passing through
a square hole as appropriate.

14
00:00:58.294 --> 00:01:02.690
So really, it's about can we
regard x as an HTMLInputElement?

15
00:01:02.690 --> 00:01:07.495
Nominal type systems like Java and
almost every typed language out

16
00:01:07.495 --> 00:01:12.470
there they would answer the question
based on whether x is an instance

17
00:01:12.470 --> 00:01:16.526
of a class named whatever
the type you're looking for.

18
00:01:16.526 --> 00:01:20.920
So, this would require you to
have all of your code set up in

19
00:01:20.920 --> 00:01:25.601
a fairly object-oriented way
where you have constructors.

20
00:01:25.601 --> 00:01:29.482
And you're dealing primarily
with instances of classes and

21
00:01:29.482 --> 00:01:31.618
you're passing things around.

22
00:01:31.618 --> 00:01:34.993
This isn't necessarily how
JavaScript is written.

23
00:01:34.993 --> 00:01:39.035
And this would require us to
do a lot of rewriting and

24
00:01:39.035 --> 00:01:41.949
to make almost everything a class and

25
00:01:41.949 --> 00:01:46.748
an instance in order to have
factories with specific names.

26
00:01:46.748 --> 00:01:49.958
So that we could take advantage of types.

27
00:01:49.958 --> 00:01:53.014
&gt;&gt; Mike North: TypeScript is
a structural type system,

28
00:01:53.014 --> 00:01:58.252
they only care about the shape of
an object, which is property names and

29
00:01:58.252 --> 00:02:02.120
types that are allowed for
those properties right.

30
00:02:02.120 --> 00:02:05.240
So it only cares about
the structure of an object.

31
00:02:05.240 --> 00:02:10.219
So, if we had like a data structure for
a car, we could call it car.

32
00:02:10.219 --> 00:02:15.835
But really all we care about is the fact
that it has properties called make,

33
00:02:15.835 --> 00:02:21.377
model and year that are of the appropriate
types same goes for functions.

34
00:02:21.377 --> 00:02:25.340
We really only care about
the arguments and the return type.

35
00:02:25.340 --> 00:02:26.002
And if you create a totally
different function that meets

36
00:02:26.002 --> 00:02:26.688
those criteria,
that will end up being type equivalent.

37
00:02:26.688 --> 00:02:31.230
That will be usable where you
need that type to be used.

38
00:02:31.230 --> 00:02:35.389
And I should point out that this is
an important concept to understand in

39
00:02:35.389 --> 00:02:36.233
TypeScript.

40
00:02:36.233 --> 00:02:42.792
But also if you have consistent

41
00:02:42.792 --> 00:02:47.842
shapes in JavaScript.

42
00:02:47.842 --> 00:02:52.706
And you avoid like introducing new
properties to objects that have been

43
00:02:52.706 --> 00:02:57.570
heavily used, you end up having
a better shot at JavaScript run times,

44
00:02:57.570 --> 00:02:59.777
like V8 optimizing your code.

45
00:03:01.155 --> 00:03:03.389
&gt;&gt; Mike North: TypeScript
uses the term Wider and

46
00:03:03.389 --> 00:03:06.404
Narrower to describe
a level of specificity.

47
00:03:06.404 --> 00:03:10.976
And no doubt come across someone
who uses wider narrower and

48
00:03:10.976 --> 00:03:13.910
I want start using these terms today.

49
00:03:13.910 --> 00:03:18.408
But here is the diagram to help you
understand what we mean by this.

50
00:03:18.408 --> 00:03:23.134
The widest type is any and
it allows for any possible value.

51
00:03:23.134 --> 00:03:28.278
And just think of it as like a set of
large value for any is infinitely wide.

52
00:03:28.278 --> 00:03:31.347
It can just take absolutely anything,
itâ€™s almost infinity.

53
00:03:31.347 --> 00:03:36.394
Now if I said I want an array,
any array at all.

54
00:03:36.394 --> 00:03:39.703
I don't care what type of
value is in this array,

55
00:03:39.703 --> 00:03:42.385
that would be a narrower type, right?

56
00:03:42.385 --> 00:03:44.705
We're not infinitely wide anymore.

57
00:03:44.705 --> 00:03:49.995
The set of values, if you line them
up end to end it would be narrower,

58
00:03:49.995 --> 00:03:52.103
still pretty wide though.

59
00:03:52.103 --> 00:03:54.685
And we could get even more specific and

60
00:03:54.685 --> 00:03:59.940
say this array can be of arbitrary length,
but it must only contain strings.

61
00:03:59.940 --> 00:04:04.011
And then you could say but
it must be a line three.

62
00:04:04.011 --> 00:04:06.833
But those strings can be anything at all.

63
00:04:06.833 --> 00:04:10.318
And then we could get
narrower still by being very

64
00:04:10.318 --> 00:04:14.579
specific about what certain
string these values might be.

65
00:04:14.579 --> 00:04:20.495
Now if we were asking if we have
a function that could operate in any URL.

66
00:04:20.495 --> 00:04:24.235
We could look at the array type,
and anything below it,

67
00:04:24.235 --> 00:04:29.343
anything narrower than that will be
fine to use, it's just more specific.

68
00:04:29.343 --> 00:04:35.208
We can always regard an array of three
strings that must remain of size three,

69
00:04:35.208 --> 00:04:39.735
we can always regard that as
an arbitrary array of strings.

70
00:04:39.735 --> 00:04:42.930
Or as an array of anything,
or as any value, right?

71
00:04:42.930 --> 00:04:47.517
So narrower values can always
fit through the wider hole.

72
00:04:47.517 --> 00:04:49.922
That's the way I kind of think of this.

73
00:04:49.922 --> 00:04:54.719
But if you wanted to have
specifically an array of strings, and

74
00:04:54.719 --> 00:04:59.983
you had an array of any, you'd have
to find a way to narrow that type.

75
00:04:59.983 --> 00:05:03.730
And to validate that only
the correct thing fits through.

76
00:05:03.730 --> 00:05:07.478
So, this is what we mean by wider and
narrower.

77
00:05:07.478 --> 00:05:10.831
Wide is very general,
narrow is extremely specific.

78
00:05:10.831 --> 00:05:16.898
We run into this never type when we were
initializing an array with an empty array.

79
00:05:16.898 --> 00:05:21.197
Never is infinitely narrow,
it literally can hold no value.

80
00:05:21.197 --> 00:05:24.026
It can hold a never, but
it is like circular reasoning, right.

81
00:05:24.026 --> 00:05:28.459
You think of it like there is no hole,
nothing can really pass through.

82
00:05:28.459 --> 00:05:35.580
It is nothing and impossible, or
unreachable, think of it that way

