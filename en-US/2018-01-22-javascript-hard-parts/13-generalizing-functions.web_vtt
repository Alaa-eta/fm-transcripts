WEBVTT

1
00:00:00.060 --> 00:00:01.632
&gt;&gt; Speaker 1: So
if you loved that function,

2
00:00:01.632 --> 00:00:03.635
you'll love this function even more.

3
00:00:03.635 --> 00:00:08.242
Copy array and divide by 2,
copy array multiply by 2.

4
00:00:08.242 --> 00:00:11.603
I'm gonna point at my little thing.

5
00:00:11.603 --> 00:00:16.071
There you go, look at that, pointing at,
copy array and multiply by 2,

6
00:00:16.071 --> 00:00:18.241
copy array and divide by 2.

7
00:00:18.241 --> 00:00:21.784
Such a unique and different function.

8
00:00:21.784 --> 00:00:22.795
Look.

9
00:00:25.313 --> 00:00:29.681
&gt;&gt; Speaker 1: Exactly,
look at this unique function.

10
00:00:29.681 --> 00:00:33.582
Okay, we're gonna walk through it
line by line to feel the pain.

11
00:00:33.582 --> 00:00:38.126
To feel why we might have
an alternative approach to this,

12
00:00:38.126 --> 00:00:42.408
can people already spot which
principal we're breaking?

13
00:00:42.408 --> 00:00:44.621
Don't say it, just think it.

14
00:00:44.621 --> 00:00:48.041
I was trying to be funny, but okay, we're
gonna go through this code line by line.

15
00:00:48.041 --> 00:00:49.487
Lindsey, line one.

16
00:00:49.487 --> 00:00:52.592
And the nice thing is that for us,
even though it's gonna be frustrating,

17
00:00:52.592 --> 00:00:56.061
we're also getting plenty of practice to
talk through our code really precisely.

18
00:00:56.061 --> 00:01:00.847
So Lindsey, line one, actually I wanna
switch out the bits that change.

19
00:01:00.847 --> 00:01:02.764
Line one what are we doing?

20
00:01:02.764 --> 00:01:06.720
&gt;&gt; Speaker 2: Declaring a function,
copy array and divide by 2?

21
00:01:06.720 --> 00:01:10.194
&gt;&gt; Speaker 1: Divide by 2, so
I'm just gonna switch out our words here.

22
00:01:10.194 --> 00:01:13.821
I'm actually gonna use a different
color pen so we can really appreciate

23
00:01:13.821 --> 00:01:16.511
just how redundant so
much of what we're doing here.

24
00:01:16.511 --> 00:01:19.995
So this function here takes in an array,
empty output array,

25
00:01:19.995 --> 00:01:24.216
iterates through the input array,
takes each element, divides it by 2,

26
00:01:24.216 --> 00:01:27.097
pushes the divided element
into the output array,

27
00:01:27.097 --> 00:01:30.319
returns out that new array
full of the divided elements.

28
00:01:30.319 --> 00:01:31.466
It feels very similar.

29
00:01:31.466 --> 00:01:33.184
Okay, declared.

30
00:01:33.184 --> 00:01:35.423
Next line, Lindsey.

31
00:01:35.423 --> 00:01:40.104
&gt;&gt; Speaker 2: Declares variable my array.

32
00:01:40.104 --> 00:01:42.793
&gt;&gt; Speaker 1: Good, as the array [1,2,3].

33
00:01:42.793 --> 00:01:43.360
&gt;&gt; Speaker 2: [1,2,3].

34
00:01:43.360 --> 00:01:44.875
&gt;&gt; Speaker 1: Okay, good.

35
00:01:44.875 --> 00:01:47.519
Bob, next line, we got that already,
nothing to change.

36
00:01:47.519 --> 00:01:50.970
Call the next line, Bob.

37
00:01:50.970 --> 00:01:54.134
&gt;&gt; Speaker 2: Declare result and
call the function.

38
00:01:54.134 --> 00:01:56.142
&gt;&gt; Speaker 1: Uh-huh,
so we declare result.

39
00:01:56.142 --> 00:02:00.366
What do we initially assign
to the variable result, Bob?

40
00:02:01.740 --> 00:02:04.347
&gt;&gt; Speaker 1: Do we know yet
what we're gonna store there?

41
00:02:04.347 --> 00:02:06.737
You might think we sort of assign
copy array and divide by, no,

42
00:02:06.737 --> 00:02:08.555
we don't even know what
we're gonna store there.

43
00:02:08.555 --> 00:02:10.184
It's only temporarily assigned there.

44
00:02:12.359 --> 00:02:15.462
&gt;&gt; Speaker 1: Undefined, Java should
default, you think it'd be null.

45
00:02:15.462 --> 00:02:17.434
Java should default undefined for

46
00:02:17.434 --> 00:02:21.181
anything that doesn't have
an actual value associated with it.

47
00:02:21.181 --> 00:02:25.689
So we've now got to go do the work
of cooling that copy array

48
00:02:25.689 --> 00:02:27.533
divide by 2 function.

49
00:02:27.533 --> 00:02:29.689
Do all the code inside it,
whatever gets returned out,

50
00:02:29.689 --> 00:02:32.048
that's what is gonna be stored and
the result in the end.

51
00:02:32.048 --> 00:02:36.004
So everyone together,
recalling a function.

52
00:02:36.004 --> 00:02:38.799
We're executing a function copy array and
divide by 2.

53
00:02:38.799 --> 00:02:40.631
Bob, how do I know we're
executing the function?

54
00:02:40.631 --> 00:02:41.438
Remind me.

55
00:02:41.438 --> 00:02:41.970
&gt;&gt; Speaker 2: Parenthesis.

56
00:02:41.970 --> 00:02:45.226
&gt;&gt; Speaker 1: Parenthesis, there
are certain things I'm gonna drum into us,

57
00:02:45.226 --> 00:02:48.615
because by the way, seasoned
developers get thrown by this stuff.

58
00:02:48.615 --> 00:02:53.048
And when we get to closures, knowing
what calls a function, what refers to

59
00:02:53.048 --> 00:02:57.568
a function, and what defines a function
are vital distinctions to know.

60
00:02:57.568 --> 00:03:02.235
So calling a function, we are therefore
invoking or executing a function.

61
00:03:02.235 --> 00:03:06.062
If we execute a function, we create,
everyone together, a brand new?

62
00:03:06.062 --> 00:03:07.574
&gt;&gt; Speaker 2: Execution context.

63
00:03:07.574 --> 00:03:11.319
&gt;&gt; Speaker 1: Clara,
we create a brand new.

64
00:03:11.319 --> 00:03:12.367
&gt;&gt; Speaker 2: Execution context.

65
00:03:12.367 --> 00:03:13.729
&gt;&gt; Speaker 1: Excellent Clara.

66
00:03:13.729 --> 00:03:16.992
No, everyone else is right,
Clara just looked disappointed.

67
00:03:16.992 --> 00:03:20.800
All right, there we go, exactly
an execution context, we don't know yet

68
00:03:20.800 --> 00:03:22.623
what's gonna be stored in result.

69
00:03:22.623 --> 00:03:25.468
And so we create a new
execution context to find out,

70
00:03:25.468 --> 00:03:27.743
to go run the functionality and find out.

71
00:03:27.743 --> 00:03:31.319
There it is, copy array,
divide by 2, pass in [1, 2,

72
00:03:31.319 --> 00:03:34.334
3] which is the value
associated with my array.

73
00:03:34.334 --> 00:03:38.629
We just sort of skipped a step there, we
can actually pass in my array directly but

74
00:03:38.629 --> 00:03:43.065
I just sort of live turned it into the [1,
2, 3] that actually gets passed in.

75
00:03:43.065 --> 00:03:48.235
In we go, we declare, what do we do first?

76
00:03:48.235 --> 00:03:52.596
Art, what do we do first when we
start copy array and divide by 2?

77
00:03:52.596 --> 00:03:56.627
What do we do before we do
our output declaration?

78
00:03:56.627 --> 00:03:57.475
&gt;&gt; Speaker 2: Output parameters.

79
00:03:57.475 --> 00:03:59.685
&gt;&gt; Speaker 1: Uh-huh, talk me through it.

80
00:03:59.685 --> 00:04:02.784
&gt;&gt; Speaker 2: So we would go for
the array length and go for

81
00:04:02.784 --> 00:04:05.731
each one and then take the array value.

82
00:04:05.731 --> 00:04:07.140
&gt;&gt; Speaker 1: No,
what's the first thing we do?

83
00:04:07.140 --> 00:04:11.453
We do output between this empty array,
before that we do something else.

84
00:04:11.453 --> 00:04:13.803
What's the first thing we do when
we start calling a function?

85
00:04:13.803 --> 00:04:15.641
We fill in our placeholders don't we?

86
00:04:15.641 --> 00:04:16.398
&gt;&gt; Speaker 2: Yep.

87
00:04:16.398 --> 00:04:17.303
&gt;&gt; Speaker 1: So what,
talk me through that.

88
00:04:17.303 --> 00:04:19.534
&gt;&gt; Speaker 2: So
the array would be [1, 2, 3].

89
00:04:19.534 --> 00:04:20.937
&gt;&gt; Speaker 1: Array would be [1, 2, 3].

90
00:04:20.937 --> 00:04:29.544
Got it, so our parameter array
takes the argument [1, 2, 3], okay?

91
00:04:29.544 --> 00:04:32.923
Well, myArray, which is [1, 2, 3].

92
00:04:32.923 --> 00:04:35.859
Now, everywhere inside that function,
array is [1, 2, 3].

93
00:04:35.859 --> 00:04:39.941
Okay, Clara,
next we declare output's an empty array.

94
00:04:39.941 --> 00:04:43.073
What do we do now when we hit
the body of this for loop, Clara?

95
00:04:43.073 --> 00:04:44.466
Try and be as precise as possible.

96
00:04:44.466 --> 00:04:47.942
&gt;&gt; Speaker 2: So you declare i.

97
00:04:47.942 --> 00:04:48.756
&gt;&gt; Speaker 1: Yep.

98
00:04:48.756 --> 00:04:51.994
&gt;&gt; Speaker 2: 0, your loop starts running.

99
00:04:51.994 --> 00:04:55.092
&gt;&gt; Speaker 1: Yep,
we take a array sub 0, which is what?

100
00:04:55.092 --> 00:04:56.441
&gt;&gt; Speaker 2: Which is 1.

101
00:04:56.441 --> 00:04:58.905
&gt;&gt; Speaker 1: 1, and we do what with it?

102
00:04:58.905 --> 00:05:00.095
&gt;&gt; Speaker 2: You divide it by 2.

103
00:05:00.095 --> 00:05:01.121
&gt;&gt; Speaker 1: And get?

104
00:05:01.121 --> 00:05:05.757
&gt;&gt; Speaker 2: And get half and then you-
&gt;&gt; Speaker 1: Also known as 0.5 in

105
00:05:05.757 --> 00:05:07.571
British English.

106
00:05:07.571 --> 00:05:08.109
&gt;&gt; Speaker 2: In America.

107
00:05:08.109 --> 00:05:10.270
[LAUGH]
&gt;&gt; Speaker 1: Which caused, once, and

108
00:05:10.270 --> 00:05:14.022
incredibly tough conversation
about equity in a company

109
00:05:14.022 --> 00:05:18.671
after telling someone they got,
man man, it was so embarrassing.

110
00:05:18.671 --> 00:05:20.027
Cuz they didn't know what nought meant,

111
00:05:20.027 --> 00:05:22.075
they thought it meant like five or
something.

112
00:05:22.075 --> 00:05:24.977
It was really, tough day.

113
00:05:24.977 --> 00:05:30.271
All right, okay, so and then what do we
do with that 0.5 with that, 0.5, Clara?

114
00:05:30.271 --> 00:05:32.305
&gt;&gt; Speaker 2: That's pushed on to outputs.

115
00:05:32.305 --> 00:05:33.239
&gt;&gt; Speaker 1: Good, there it is.

116
00:05:33.239 --> 00:05:34.410
And we do that a few more times.

117
00:05:34.410 --> 00:05:39.021
We take sub 1 we get the 2,
we divide 2 by 2, and we get 1.

118
00:05:39.021 --> 00:05:44.838
0.5, 1, 1.5 and then Clara, we hit
the all important return expression.

119
00:05:44.838 --> 00:05:48.501
&gt;&gt; Speaker 2: Yep, return statements and

120
00:05:48.501 --> 00:05:52.472
your data is returned global.

121
00:05:52.472 --> 00:05:53.764
&gt;&gt; Speaker 1: Execution?

122
00:05:53.764 --> 00:05:55.984
Context, where it is assigned to result.

123
00:05:55.984 --> 00:06:00.472
We didn't do our call stack, forgot to,
but copy array divide by 2 is added,

124
00:06:00.472 --> 00:06:02.250
pushed, and then popped off.

