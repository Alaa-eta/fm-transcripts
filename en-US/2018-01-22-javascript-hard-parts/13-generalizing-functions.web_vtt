WEBVTT

1
00:00:00.150 --> 00:00:01.472
&gt;&gt; Will Sentance: So,
you love that function,

2
00:00:01.472 --> 00:00:03.016
you will love this function even more.

3
00:00:03.016 --> 00:00:07.306
CopyArrayAndDivideBy2,
copyArrayAndMultiplyBy2,

4
00:00:07.306 --> 00:00:11.120
pointing at,
I'm gonna point at my little thing.

5
00:00:11.120 --> 00:00:12.110
There you go, look at that.

6
00:00:12.110 --> 00:00:17.242
Pointing at copyArrayAndMultiplyBy2,
copyArrayAndDivideBy2.

7
00:00:17.242 --> 00:00:18.902
It's actually unique and

8
00:00:18.902 --> 00:00:20.365
different function.

9
00:00:20.365 --> 00:00:21.731
&gt;&gt; Group: [LAUGH]

10
00:00:21.731 --> 00:00:22.633
&gt;&gt; Will Sentance: Look.

11
00:00:22.633 --> 00:00:25.229
&gt;&gt; Group: [LAUGH]

12
00:00:25.229 --> 00:00:26.306
&gt;&gt; Will Sentance: Exactly.

13
00:00:26.306 --> 00:00:27.925
&gt;&gt; Group: [LAUGH]
&gt;&gt; Will Sentance: Look at this,

14
00:00:27.925 --> 00:00:28.500
unique and different function.

15
00:00:28.500 --> 00:00:34.048
Okay, but we're going to walk through
it line by line to feel the pain,

16
00:00:34.048 --> 00:00:38.920
to feel why we might have
an alternative approach to this.

17
00:00:38.920 --> 00:00:42.410
Mm-hm, can people already spot
which principle we're breaking?

18
00:00:42.410 --> 00:00:43.830
Don't say it, just think it.

19
00:00:43.830 --> 00:00:45.540
I'm not trying to be funny,

20
00:00:45.540 --> 00:00:48.170
but okay, we're gonna go
through this code line by line.

21
00:00:48.170 --> 00:00:49.410
Lindsay, line one?

22
00:00:49.410 --> 00:00:52.880
And the nice thing about this is, for us,
even though it's gonna be frustrating,

23
00:00:52.880 --> 00:00:56.250
we're also getting a practice to talk
through our code really precisely.

24
00:00:56.250 --> 00:01:01.116
So Lindsay, line one, actually I wanna
switch out the bits that change,

25
00:01:01.116 --> 00:01:04.647
line one what are we doing?
&gt;&gt; Lindsay: Declaring a function,

26
00:01:04.647 --> 00:01:07.667
copyArrayAndDivideBy2.
&gt;&gt; Will Sentance: DivideBy2, so

27
00:01:07.667 --> 00:01:10.065
I'm just gonna switch out our word here.

28
00:01:10.065 --> 00:01:13.127
I'm actually gonna use a different
color pen so we can really

29
00:01:13.127 --> 00:01:16.440
appreciate just how redundant so
much of what we're doing here.

30
00:01:16.440 --> 00:01:20.006
So this function here takes in an array,
empty output array,

31
00:01:20.006 --> 00:01:24.696
iterates through the input array,
takes each element, divides it by two.

32
00:01:24.696 --> 00:01:26.745
Pushes the divided element
into the output array,

33
00:01:26.745 --> 00:01:30.400
returns out that new array
full of the divided elements.

34
00:01:30.400 --> 00:01:31.720
Feels very similar.

35
00:01:31.720 --> 00:01:37.961
Okay, declared, next line, Lindsay?
&gt;&gt; Lindsay: Declares

36
00:01:37.961 --> 00:01:42.948
variable myArray?
&gt;&gt; Will Sentance: As the array 1, 2,

37
00:01:42.948 --> 00:01:44.807
3, okay, good.

38
00:01:44.807 --> 00:01:47.520
Barb, next line, we've got that already,
nothing to change.

39
00:01:47.520 --> 00:01:52.443
Go to the next line, Barb.
&gt;&gt; Barb: You declare result and

40
00:01:52.443 --> 00:01:54.657
call the function.
&gt;&gt; Will Sentance: Ha, so

41
00:01:54.657 --> 00:01:56.050
we declare result.

42
00:01:56.050 --> 00:02:01.830
What do we initially assign
to the variable result, Barb?

43
00:02:01.830 --> 00:02:03.160
Do we know yet
what we're gonna store there?

44
00:02:04.520 --> 00:02:07.238
You might think we sort of
assigned copyArrayAndDivideBy, no.

45
00:02:07.238 --> 00:02:08.300
We don't even know what
we're gonna store there.

46
00:02:08.300 --> 00:02:09.990
So what do we temporarily assign there?

47
00:02:12.500 --> 00:02:14.219
Undefined, JavaScript's default.

48
00:02:14.219 --> 00:02:17.386
You could think it would be null,
JavaScript defaults to undefined for

49
00:02:17.386 --> 00:02:21.160
anything where it doesn't yet
have an actual value associated with it.

50
00:02:21.160 --> 00:02:26.872
So we've now got to go do the work of
calling that copyArrayDivideBy2 function,

51
00:02:26.872 --> 00:02:28.709
do all the code inside it.

52
00:02:28.709 --> 00:02:31.838
Whatever gets returned out, that's what's
gonna be stored in result on the end.

53
00:02:31.838 --> 00:02:35.125
So everyone together,
we're calling a function,

54
00:02:35.125 --> 00:02:38.723
we're executing a function
copyArrayAndDivideBy2.

55
00:02:38.723 --> 00:02:41.115
Barb, how do I know we're
executing the function, remind me?

56
00:02:41.115 --> 00:02:41.809
&gt;&gt; Barb: Parentheses.

57
00:02:41.809 --> 00:02:42.907
&gt;&gt; Will Sentance: Parentheses.

58
00:02:42.907 --> 00:02:45.380
There are certain things
I'm gonna drum into us.

59
00:02:45.380 --> 00:02:48.240
Because by the way, seasoned
developers get thrown by this stuff.

60
00:02:48.240 --> 00:02:52.480
And when we get to closures, knowing
what calls a function, what refers to

61
00:02:52.480 --> 00:02:57.490
a function, and what defines a function
are vital distinctions to know.

62
00:02:57.490 --> 00:03:02.220
So, calling a function, we are therefore
invoking or executing a function.

63
00:03:02.220 --> 00:03:03.774
If we execute a function,

64
00:03:03.774 --> 00:03:06.905
we create, everyone together, a brand new?
&gt;&gt; Group: Execution

65
00:03:06.905 --> 00:03:09.880
context.
&gt;&gt; Will Sentance: Clara,

66
00:03:09.880 --> 00:03:12.290
we create a brand new.
&gt;&gt; Clara: Execution context.

67
00:03:12.290 --> 00:03:13.810
&gt;&gt; Will Sentance: Excellent, Clara.

68
00:03:13.810 --> 00:03:14.840
Now, everyone else is right.

69
00:03:14.840 --> 00:03:17.070
Clara just looked disappointed.

70
00:03:17.070 --> 00:03:18.800
All right, there you go.

71
00:03:18.800 --> 00:03:20.910
Exactly, our new execution context,
we don't know yet

72
00:03:20.910 --> 00:03:22.480
what's gonna be stored in results.

73
00:03:22.480 --> 00:03:25.550
And so, we create a new
execution context to find out,

74
00:03:25.550 --> 00:03:27.740
to go run the functionality and find out.

75
00:03:27.740 --> 00:03:31.452
There it is, copyArrayAndDivideBy2,
pass in 1, 2, 3,

76
00:03:31.452 --> 00:03:34.300
which is the value
associated with my array.

77
00:03:34.300 --> 00:03:36.300
We just took a sort of
skipped a step there.

78
00:03:36.300 --> 00:03:38.140
We could actually pass
in myArray directly.

79
00:03:38.140 --> 00:03:43.420
But I just sort of live turned it into
the 1, 2, 3 that actually gets passed in.

80
00:03:43.420 --> 00:03:48.490
And we go, we declare,
what do we do first, Art?

81
00:03:48.490 --> 00:03:52.474
What do we do first when we start
calling copyArrayAndDivideBy2?

82
00:03:52.474 --> 00:03:54.940
What do we do before we do
our output declaration?

83
00:03:54.940 --> 00:03:57.159
&gt;&gt; Speaker 6: [INAUDIBLE]

84
00:03:57.159 --> 00:03:57.673
&gt;&gt; Will Sentance: Ah-ha,

85
00:03:57.673 --> 00:03:59.930
talk me through it.
&gt;&gt; Speaker 6: So

86
00:03:59.930 --> 00:04:03.430
we would go for
the array length and go for

87
00:04:03.430 --> 00:04:05.870
each one and then take the array value.
&gt;&gt; Will Sentance: No,

88
00:04:05.870 --> 00:04:07.130
what's the first thing we do, dude?

89
00:04:07.130 --> 00:04:08.150
We do output.

90
00:04:08.150 --> 00:04:09.774
We do the current outer
per call the array, but

91
00:04:09.774 --> 00:04:11.510
before that we do something else.

92
00:04:11.510 --> 00:04:13.860
What's the first thing we do when
we start calling a function?

93
00:04:13.860 --> 00:04:17.340
We fill in our placeholders,
don't we, so talk me through that.

94
00:04:17.340 --> 00:04:18.588
&gt;&gt; Speaker 6: So that array would be 1, 2,

95
00:04:18.588 --> 00:04:20.527
3.
&gt;&gt; Will Sentance: Array would be 1,

96
00:04:20.527 --> 00:04:21.860
2, 3, got it.

97
00:04:21.860 --> 00:04:28.360
So our parameter array takes
the argument 1, 2, 3, okay.

98
00:04:29.600 --> 00:04:32.858
Well myArray which is 1, 2, 3.

99
00:04:32.858 --> 00:04:36.143
Now everywhere inside that
function array is 1, 2, 3.

100
00:04:36.143 --> 00:04:37.760
Okay, Clara?

101
00:04:37.760 --> 00:04:39.680
Next we declare outputs of the array,

102
00:04:39.680 --> 00:04:42.749
what do we do now when we hit
the body of this for loop, Clara?

103
00:04:42.749 --> 00:04:45.045
Try and be as precise as possible.
&gt;&gt; Clara: So

104
00:04:45.045 --> 00:04:48.974
you declare i.
&gt;&gt; Will Sentance: Yep.

105
00:04:48.974 --> 00:04:50.024
&gt;&gt; Clara: Zero,

106
00:04:50.024 --> 00:04:53.000
starts running.
&gt;&gt; Will Sentance: Yeah,

107
00:04:53.000 --> 00:04:56.049
we take array sub zero, which is what?
&gt;&gt; Clara: Which is

108
00:04:56.049 --> 00:04:57.045
1.
&gt;&gt; Will Sentance: 1, and

109
00:04:57.045 --> 00:05:00.350
we do what with it?
&gt;&gt; Clara: You divide it by two.

110
00:05:00.350 --> 00:05:01.357
&gt;&gt; Will Sentance: And get?

111
00:05:01.357 --> 00:05:01.881
&gt;&gt; Clara: And

112
00:05:01.881 --> 00:05:05.231
get a half.
&gt;&gt; Will Sentance: Also known as naught

113
00:05:05.231 --> 00:05:10.511
point five in British English,
of course once an incredibly tough

114
00:05:10.511 --> 00:05:16.468
conversation about equity in the company
after telling someone they got.

115
00:05:16.468 --> 00:05:19.740
It was so embarrassing because they
didn't know what nought meant.

116
00:05:19.740 --> 00:05:22.280
They thought it meant five or something.

117
00:05:22.280 --> 00:05:25.130
It was really a tough day.

118
00:05:25.130 --> 00:05:26.250
All right, okay.

119
00:05:26.250 --> 00:05:30.330
So what do we do with that 0.5,
with that 0.5, Clara?

120
00:05:30.330 --> 00:05:32.563
&gt;&gt; Clara: That's pushed onto outputs.

121
00:05:32.563 --> 00:05:33.360
&gt;&gt; Will Sentance: Good, there it is.

122
00:05:33.360 --> 00:05:34.418
And we do that a few more times.

123
00:05:34.418 --> 00:05:36.459
We take sub 1, we get the 2.

124
00:05:36.459 --> 00:05:37.418
We divide 2 by 2.

125
00:05:37.418 --> 00:05:43.197
We get 1, 0.5, 1, 1.5, and then,
Clara, we hit the all-important

126
00:05:43.197 --> 00:05:47.800
return expression.
&gt;&gt; Clara: Yep, return statements and

127
00:05:47.800 --> 00:05:53.219
your data is returned to global.
&gt;&gt; Will Sentance: Execution context,

128
00:05:53.219 --> 00:05:56.000
where it is assigned to result.

129
00:05:56.000 --> 00:06:00.472
We didn't do our call stack, forgot to,
but copyArrayDivideBy2 is added,

130
00:06:00.472 --> 00:06:02.250
pushed, and then popped off.

