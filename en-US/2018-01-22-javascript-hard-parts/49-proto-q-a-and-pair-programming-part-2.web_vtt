WEBVTT

1
00:00:00.390 --> 00:00:01.710
&gt;&gt; Will Sentance: All right,
let's have fun.

2
00:00:01.710 --> 00:00:04.510
This is solution two, and
by the way, solution three and

3
00:00:04.510 --> 00:00:07.050
four, they are only gonna do this stuff.

4
00:00:07.050 --> 00:00:10.150
We're gonna see some fancy
keywords you all have heard of and

5
00:00:10.150 --> 00:00:13.320
probably tried to use, and
used effectively maybe.

6
00:00:13.320 --> 00:00:18.570
Those fancy keywords, they're all just
gonna take some of these lines that we've

7
00:00:18.570 --> 00:00:21.380
handwritten here and automate them for us.

8
00:00:22.910 --> 00:00:23.960
That's all they're gonna do.

9
00:00:23.960 --> 00:00:29.520
We have seen here the essence of how
OOP is implemented in JavaScript,

10
00:00:29.520 --> 00:00:36.040
using this special prototype,
_proto_ bond to an object above.

11
00:00:36.040 --> 00:00:41.320
That JavaScript knows to go and
look at, when it hits an object

12
00:00:41.320 --> 00:00:45.610
property that ain't there
on the object directly.

13
00:00:45.610 --> 00:00:48.600
It knows to go check through
it's prototypal feature,

14
00:00:48.600 --> 00:00:50.050
it's prototypal nature.

15
00:00:50.050 --> 00:00:51.260
All right, let's have thumbs on this.

16
00:00:51.260 --> 00:00:54.670
I don't know what happened,
clarification question, clear to go on.

17
00:00:54.670 --> 00:00:57.410
Dave has one, excellent.

18
00:00:57.410 --> 00:01:00.400
Andrew has one,
Katie has one, Art has one.

19
00:01:00.400 --> 00:01:01.460
Art, can we start with you?

20
00:01:01.460 --> 00:01:06.170
&gt;&gt; Art: I was kind of wondering if
you can have multiple prototypes?

21
00:01:06.170 --> 00:01:07.439
&gt;&gt; Will Sentance: Great question.

22
00:01:07.439 --> 00:01:11.186
So you cannot have, so
you're sort of saying, could I pass and

23
00:01:11.186 --> 00:01:14.665
use the function store, and
then Art's function store?

24
00:01:14.665 --> 00:01:16.363
No, you can not.

25
00:01:16.363 --> 00:01:19.716
You can only have one direct parent, but

26
00:01:19.716 --> 00:01:25.090
of course you could then have
another paired to that object.

27
00:01:25.090 --> 00:01:26.840
And another paired into that object.

28
00:01:26.840 --> 00:01:31.900
And you can have multiple different
children of different types

29
00:01:31.900 --> 00:01:33.470
coming from the same parent.

30
00:01:33.470 --> 00:01:35.710
That is known as sub-classing.

31
00:01:35.710 --> 00:01:40.490
We're not gonna cover that today,
there is a talk I have on that.

32
00:01:40.490 --> 00:01:42.763
Maybe one day we'll do
it in front of masters,

33
00:01:42.763 --> 00:01:44.526
it does sub-classing in all of OP.

34
00:01:44.526 --> 00:01:46.330
It is a brutal talk.

35
00:01:46.330 --> 00:01:49.580
There is no way we're gonna
do it right now because

36
00:01:49.580 --> 00:01:52.510
we are more than doing
enough with pure OP here.

37
00:01:52.510 --> 00:01:56.888
But yes, you cannot have multiple but you
can have multiple hierarchically up and

38
00:01:56.888 --> 00:01:59.290
they can have multiple descendants out.

39
00:01:59.290 --> 00:02:03.673
You just,
one can only have one parent, okay.

40
00:02:03.673 --> 00:02:05.090
Andrew?

41
00:02:05.090 --> 00:02:08.440
&gt;&gt; Andrew: So does it only
create the prototype like that

42
00:02:08.440 --> 00:02:09.910
if you use the object create?

43
00:02:11.720 --> 00:02:14.270
&gt;&gt; Will Sentance: That's not
the only way we can make that bond.

44
00:02:14.270 --> 00:02:18.390
Actually all objects
have some automatic bond.

45
00:02:18.390 --> 00:02:22.670
At the top of the chain, so above user
function store, user function store also

46
00:02:22.670 --> 00:02:26.450
has, I don't want to get into this too
much, Andrew, but it's a little preview.

47
00:02:26.450 --> 00:02:32.720
Also has a protobond on it which points
up to JavaScript's, for this one,

48
00:02:32.720 --> 00:02:38.670
default object, which has a whole
bunch of shared functions of its own.

49
00:02:38.670 --> 00:02:43.144
Things like getPrototypeOf, all the
functions you can ever call on an object,

50
00:02:43.144 --> 00:02:45.778
JavaScript dog foods
its own functionality.

51
00:02:45.778 --> 00:02:51.954
It uses its own built in prototype chain
to let, when you do an array.push,

52
00:02:51.954 --> 00:02:58.360
that push is actually stored on the array,
on any array that gets created.

53
00:02:58.360 --> 00:03:02.820
It has it's own parent which is all
the bonus functionality that we

54
00:03:02.820 --> 00:03:04.220
can use on arrays.

55
00:03:04.220 --> 00:03:10.090
So when you do, I don't know,
array.push, array is an array.

56
00:03:10.090 --> 00:03:15.191
Well that guy here has its own because
really an array is just actually

57
00:03:15.191 --> 00:03:20.110
on object,
has its own protobond to the array

58
00:03:21.510 --> 00:03:26.950
object that has all of the shared
functionality that all arrays have,

59
00:03:26.950 --> 00:03:28.740
push, pop, all of these.

60
00:03:28.740 --> 00:03:31.850
I won't go into that too much,
but Andrew, as a preview there,

61
00:03:31.850 --> 00:03:35.610
all of these objects have
a protobond by default.

62
00:03:35.610 --> 00:03:39.070
What we're really doing here is
inserting our own in the way.

63
00:03:39.070 --> 00:03:45.313
So there's a default one here which is
all objects proto is just the overall

64
00:03:45.313 --> 00:03:51.272
object which has on its own a bunch
of properties like get prototype of.

65
00:03:51.272 --> 00:03:54.636
All of these functions can be used
on all objects because they're all

66
00:03:54.636 --> 00:03:56.860
available up the prototype chain.

67
00:03:56.860 --> 00:04:02.240
But we're just inserting ourselves
in the way here to set our own

68
00:04:03.350 --> 00:04:07.050
user function store in the sort of in
the interim, so we check there first.

69
00:04:07.050 --> 00:04:08.710
Does that make sense?

70
00:04:08.710 --> 00:04:10.693
And I don't wanna go into that too much,
if you don't mind.

71
00:04:10.693 --> 00:04:14.694
I don't wanna go into that too much,
if you don't mind, but

72
00:04:14.694 --> 00:04:18.240
just know that every
object has an _proto_.

73
00:04:18.240 --> 00:04:23.010
It's just that we're overriding
the standard one here with our

74
00:04:23.010 --> 00:04:24.875
set to share functions.

75
00:04:24.875 --> 00:04:30.070
So all about objects that were created by
user creator have access to, okay Andrew.

76
00:04:31.500 --> 00:04:33.060
There's more clarifications.
Katie?

77
00:04:33.060 --> 00:04:34.182
&gt;&gt; Katie: I'm clarified now.

78
00:04:34.182 --> 00:04:34.682
&gt;&gt; Will Sentance: You are?
&gt;&gt; Katie: Yes.

79
00:04:34.682 --> 00:04:36.006
&gt;&gt; Will Sentance: There we go.

80
00:04:36.006 --> 00:04:37.876
Norman, Griffin first, Griffin first.

81
00:04:37.876 --> 00:04:40.900
&gt;&gt; Griffin: You said it's like
overrating the object one,

82
00:04:40.900 --> 00:04:42.670
you can still get to the object, right?

83
00:04:42.670 --> 00:04:45.295
&gt;&gt; Will Sentance: Because we're
overriding it with an object,

84
00:04:45.295 --> 00:04:47.390
which, whose object prototype is?

85
00:04:47.390 --> 00:04:48.850
&gt;&gt; Griffin: Is object, okay.

86
00:04:48.850 --> 00:04:49.510
&gt;&gt; Will Sentance: Yes, exactly.

87
00:04:49.510 --> 00:04:51.430
So there's a chain all the way up.

88
00:04:51.430 --> 00:04:52.780
Great clarification, Griffin.

89
00:04:52.780 --> 00:04:53.450
Dave?

90
00:04:53.450 --> 00:04:54.950
&gt;&gt; Dave: That second line up there,

91
00:04:54.950 --> 00:04:59.202
the let new user equal object dot create
user, how do you say that in English?

92
00:04:59.202 --> 00:05:00.870
&gt;&gt; Will Sentance: Well it's
the right technical communication.

93
00:05:00.870 --> 00:05:02.194
We all declare it.

94
00:05:02.194 --> 00:05:05.740
Okay, very nice, I like that question,
Dave, very thoughtful question.

95
00:05:05.740 --> 00:05:11.715
We are declaring an object,
or we're declaring new user,

96
00:05:11.715 --> 00:05:17.740
and assigning to it an empty object with,
&gt;&gt; Will Sentance: With

97
00:05:17.740 --> 00:05:22.880
the prototype of it being
user function store.

98
00:05:22.880 --> 00:05:25.010
Now again,
I hate this with the prototype of it.

99
00:05:25.010 --> 00:05:28.965
I wish we said with
the _proto_ of it being, but

100
00:05:28.965 --> 00:05:32.820
_proto_ is the label we
give to the prototype.

101
00:05:32.820 --> 00:05:36.985
What we call whatever's here,
the prototype of this object, but it's not

102
00:05:36.985 --> 00:05:41.950
stored in a property called the prototype,
it's stored in a property called _proto_.

103
00:05:43.260 --> 00:05:46.522
It is what it is, but it causes
a humongous amount of confusion, and

104
00:05:46.522 --> 00:05:50.415
you're going to see why in a moment cuz
there is a property called prototype, and

105
00:05:50.415 --> 00:05:54.158
it ain't this one, and it ain't behaving
the way that this one is behaving.

106
00:05:54.158 --> 00:05:58.245
That's why I don't like the fact we
call this guy the prototype of this

107
00:05:58.245 --> 00:06:02.137
object because it's stored in _proto_,
it's the _proto_.

108
00:06:02.137 --> 00:06:06.180
So I have to say it's the object that's
one step up the prototype chain.

109
00:06:06.180 --> 00:06:07.210
Not exactly a catchy phrase.

110
00:06:07.210 --> 00:06:08.190
So if you wanted to say that,

111
00:06:08.190 --> 00:06:11.150
you could say declare new user,
assign to an empty object

112
00:06:11.150 --> 00:06:14.670
with user function store set as the object
that's one step up the prototype chain.

113
00:06:14.670 --> 00:06:16.950
If you wanna be super intuitive, but

114
00:06:16.950 --> 00:06:22.630
the typical way is with user function
store as new users prototype, okay.

115
00:06:22.630 --> 00:06:23.340
Ask the question, Dave.

116
00:06:24.510 --> 00:06:26.430
&gt;&gt; Dave: Yeah.
&gt;&gt; Will Sentance: You want to try again?

117
00:06:26.430 --> 00:06:29.350
&gt;&gt; Dave: Just the distinction
between prototype and

118
00:06:29.350 --> 00:06:34.330
inherit from-
&gt;&gt; Will Sentance: In JavaScript, by

119
00:06:34.330 --> 00:06:37.910
the way, I actually wrote a little note to
myself when I first was giving this talk,

120
00:06:37.910 --> 00:06:41.010
I hate the word inherit
describing what we're doing here.

121
00:06:42.250 --> 00:06:46.020
Doesn't inherit make it feel like you've
actually copied down the functionality

122
00:06:46.020 --> 00:06:46.990
onto the object?

123
00:06:46.990 --> 00:06:47.770
It does to me a bit.

124
00:06:49.710 --> 00:06:56.620
This here, increment, sorry, user one,
inherits from user function store.

125
00:06:56.620 --> 00:07:00.140
When we say inherit in JavaScript,
that is all we mean.

126
00:07:00.140 --> 00:07:02.880
Now are we copying those
functions down to user one?

127
00:07:02.880 --> 00:07:07.860
No, inherent is a weird ass
word to use for this process.

128
00:07:07.860 --> 00:07:11.070
What actually happens
is when we run user one

129
00:07:11.070 --> 00:07:15.162
with a function reference on it that
isn't in user one, we check its

130
00:07:15.162 --> 00:07:19.710
proto_proto_ where we find this other
object and you just want to store.

131
00:07:19.710 --> 00:07:23.820
And we look up to it and go,
there's an increment function there.

132
00:07:23.820 --> 00:07:28.600
Now does that mean, in a sense,
that user one inherits increment function?

133
00:07:30.500 --> 00:07:35.050
I guess it feels like it does, but
that is not being copied down, it's not.

134
00:07:35.050 --> 00:07:38.980
JavaScript at the runtime, is going to
look up at that stuff and finds it there.

135
00:07:38.980 --> 00:07:42.470
But when you hear people saying
user one inherited increment,

136
00:07:42.470 --> 00:07:43.780
that's exactly what it's saying.

137
00:07:43.780 --> 00:07:46.220
Okay, great question man.

138
00:07:46.220 --> 00:07:47.740
Really glad you brought up that word.

139
00:07:47.740 --> 00:07:54.373
Okay, all right, at this point,
do we do pairing now or do we push on?

140
00:07:54.373 --> 00:07:57.470
We're still quite early, so
I think we do another block of pairing.

141
00:07:57.470 --> 00:08:00.330
Then we'll come back to this after
another block of 20 minutes of pairing.

142
00:08:00.330 --> 00:08:04.770
So we'll going to finish out 4:00
I reckon today, 4:00 to 4:15, so

143
00:08:04.770 --> 00:08:09.290
we're gonna do another block of pairing
just to cement some of this stuff.

144
00:08:09.290 --> 00:08:12.076
And in a moment after that we're gonna
come back and say, you know what,

145
00:08:12.076 --> 00:08:18.060
all this writing, object.create,
new user, return new user,

146
00:08:18.060 --> 00:08:23.550
we're gonna automate it all away with
the insertion of a magic keyword.

147
00:08:23.550 --> 00:08:25.300
What's that magic keyword do we think?

148
00:08:25.300 --> 00:08:26.450
&gt;&gt; class: Prototype.
&gt;&gt; Will Sentance: Prototype.

149
00:08:26.450 --> 00:08:29.850
[LAUGH] Gives you three letters.

150
00:08:29.850 --> 00:08:31.230
New, exactly.

151
00:08:31.230 --> 00:08:34.990
That's gonna automate a ton
of all this work for us.

152
00:08:34.990 --> 00:08:40.020
That work of creating an object, that when
it gets returned out, give it a label,

153
00:08:40.020 --> 00:08:48.310
get somehow a special secret bond
to the shared store of functions.

154
00:08:48.310 --> 00:08:52.260
We're gonna automate so
much of this with the keyword new.

155
00:08:52.260 --> 00:08:55.130
But for now folks back to the challenges.

