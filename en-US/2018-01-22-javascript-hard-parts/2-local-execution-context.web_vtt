WEBVTT

1
00:00:00.230 --> 00:00:04.750
&gt;&gt; Will Sentance: Now we
introduce executing or running or

2
00:00:04.750 --> 00:00:06.840
invoking or calling a function.

3
00:00:08.040 --> 00:00:10.420
So what happens when we do this?

4
00:00:10.420 --> 00:00:14.310
This is not the same as
defining a function, but

5
00:00:14.310 --> 00:00:18.050
how do we tell JavaScript
to define a function?

6
00:00:18.050 --> 00:00:19.960
Keyword function.

7
00:00:19.960 --> 00:00:23.270
How do I tell JavaScript
to call a function?

8
00:00:23.270 --> 00:00:26.590
Art, how do I tell JavaScript
to call a function?

9
00:00:26.590 --> 00:00:30.480
&gt;&gt; Will Sentance: All I have to
do is add parentheses, that's it.

10
00:00:30.480 --> 00:00:32.210
I take the name of the function and
add parentheses.

11
00:00:32.210 --> 00:00:34.330
No input, adding parentheses is enough.

12
00:00:34.330 --> 00:00:36.770
It just says go run
the code of that function.

13
00:00:36.770 --> 00:00:40.960
It may not have an actually there for
an argument pass a actual value, but

14
00:00:40.960 --> 00:00:42.750
it's still running the function.

15
00:00:42.750 --> 00:00:50.000
So let's keep going line 1, num is 3,
line 2, multiply by 2 as a function.

16
00:00:50.000 --> 00:00:52.900
We may be thinking man, yeah,
I know how this working.

17
00:00:52.900 --> 00:00:55.290
I can look at this right away and
figure it out.

18
00:00:55.290 --> 00:01:00.080
Getting this level of precision
down now is what makes closure,

19
00:01:00.080 --> 00:01:04.310
higher order functions all
flow much more naturally.

20
00:01:04.310 --> 00:01:11.420
So, what's our next line of code
after declaring multiply by 2, Clara?

21
00:01:11.420 --> 00:01:14.633
&gt;&gt; off screen female: After declaring
the function then you're declaring

22
00:01:14.633 --> 00:01:16.350
your outputs, constants.

23
00:01:16.350 --> 00:01:17.550
&gt;&gt; Will Sentance: Okay, there it is.

24
00:01:18.820 --> 00:01:21.909
And what are we going to assign to it,
Clara?

25
00:01:21.909 --> 00:01:25.370
&gt;&gt; off screen female: So, eventually it
would be the return value in the function.

26
00:01:25.370 --> 00:01:26.210
&gt;&gt; Will Sentance: Correct.

27
00:01:27.460 --> 00:01:31.610
Eventually will be the return value of
calling the multiply by two function with

28
00:01:31.610 --> 00:01:35.730
the input of four, but we haven't done
that yet, we've gotta go do that work.

29
00:01:35.730 --> 00:01:38.250
But JavaScript likes to have
everything have a value,

30
00:01:38.250 --> 00:01:39.700
even when it's in the waiting game.

31
00:01:39.700 --> 00:01:41.549
So what's this default waiting value.

32
00:01:41.549 --> 00:01:42.212
&gt;&gt; off screen female: Undefined?

33
00:01:42.212 --> 00:01:45.100
&gt;&gt; Will Sentance: Undefined,
I'll draw this as a little dotted line,

34
00:01:45.100 --> 00:01:47.931
we just don't know what
it's going to be there yet.

35
00:01:47.931 --> 00:01:51.874
So just to be really clear, what's
definitely not there, is multiply by two.

36
00:01:51.874 --> 00:01:54.319
Output has no interest in multiply by two.

37
00:01:54.319 --> 00:01:59.196
It only gets interested in multiply by
2 in the sense of its run multiply by 2

38
00:01:59.196 --> 00:02:02.530
in the values come back as a return value.

39
00:02:02.530 --> 00:02:05.144
The result, whatever is in the return, or

40
00:02:05.144 --> 00:02:09.220
whatever is after the return keyword,
inside the function.

41
00:02:09.220 --> 00:02:11.440
That is what's gonna be stored in output.

42
00:02:11.440 --> 00:02:13.930
So, we gotta go do some work.

43
00:02:13.930 --> 00:02:15.572
So let's do that work.

44
00:02:15.572 --> 00:02:21.590
We've gotta see what happens when I run,
multiplied by 2.

45
00:02:21.590 --> 00:02:27.210
And assign the result of
calling it with the input of 4,

46
00:02:27.210 --> 00:02:30.210
assign the result to output.

47
00:02:30.210 --> 00:02:32.130
So, who knows what we do?

48
00:02:32.130 --> 00:02:36.880
When we start running our code we
create a global execution context.

49
00:02:36.880 --> 00:02:38.780
What about when we start
running a function?

50
00:02:38.780 --> 00:02:41.410
What do we create, Lindsay?

51
00:02:41.410 --> 00:02:42.980
Can we start running a function?

52
00:02:42.980 --> 00:02:46.000
&gt;&gt; off screen female: A local execution.

53
00:02:46.000 --> 00:02:49.968
&gt;&gt; Will Sentance: Everyone together,
we create a local.

54
00:02:49.968 --> 00:02:52.841
&gt;&gt; [INAUDIBLE]
&gt;&gt; Will Sentance: Excellent.

55
00:02:52.841 --> 00:02:54.330
Perfect.

56
00:02:54.330 --> 00:02:56.730
Good job Lindsay and team.

57
00:02:56.730 --> 00:02:58.020
There we are.

58
00:02:58.020 --> 00:03:00.240
What's in it?
Let's have a look.

59
00:03:00.240 --> 00:03:02.030
Here's our look at execution context.

60
00:03:03.130 --> 00:03:06.280
And it has just like our global one,

61
00:03:07.560 --> 00:03:12.000
had a global memory and a global thread,
in which we are doing all this work.

62
00:03:12.000 --> 00:03:14.500
Right?
We're doing the work line by line.

63
00:03:14.500 --> 00:03:18.030
Now we got a local one, in which
the local memory and a local thread.

64
00:03:18.030 --> 00:03:22.930
And the local thread just means, doing the
code inside the function now line-by-line.

65
00:03:22.930 --> 00:03:24.885
Before we were doing the code globally,

66
00:03:24.885 --> 00:03:28.000
now we're going the code inside
the function line-by-line.

67
00:03:28.000 --> 00:03:29.890
And we've paused doing the code globally.

68
00:03:29.890 --> 00:03:35.050
We're not hitting the line new output,
we just paused before this line here.

69
00:03:35.050 --> 00:03:39.340
We're waiting to go back to this output,
this global execution context.

70
00:03:39.340 --> 00:03:44.125
While we're busy inside running
this local execution context

71
00:03:44.125 --> 00:03:47.383
when multiplied by two with input of four.

72
00:03:47.383 --> 00:03:48.195
So Andrea,

73
00:03:48.195 --> 00:03:53.491
what's the first thing we do inside of
multiply by two with the input of four.

74
00:03:53.491 --> 00:03:54.695
&gt;&gt; off screen female: So then we pass-
&gt;&gt; Will Sentance: Andrea,

75
00:03:54.695 --> 00:03:58.811
you're gonna say a phenominal
answer I can already tell so

76
00:03:58.811 --> 00:04:01.008
I turn the volume up very high.

77
00:04:01.008 --> 00:04:02.936
&gt;&gt; off screen female: [LAUGH] So we-
&gt;&gt; Will Sentance: Andrea,

78
00:04:02.936 --> 00:04:04.550
that was the same volume.

79
00:04:04.550 --> 00:04:06.110
&gt;&gt; off screen female: [LAUGH]
You're getting close there.

80
00:04:08.120 --> 00:04:13.860
We take four and we put it in input
number and then we times it by two.

81
00:04:13.860 --> 00:04:16.000
&gt;&gt; Will Sentance: Andrea, yes, very good.

82
00:04:16.000 --> 00:04:17.910
Well yes, we take four and
put in an input number.

83
00:04:17.910 --> 00:04:21.180
What's the posh way of saying we take
four and put in an input number?

84
00:04:21.180 --> 00:04:22.089
Andrew, you wanna give it a shot?

85
00:04:23.460 --> 00:04:25.750
&gt;&gt; off screen male: We assign it to the.

86
00:04:25.750 --> 00:04:29.010
&gt;&gt; Will Sentance: What's the partial
word for the input, the case order?

87
00:04:29.010 --> 00:04:30.380
&gt;&gt; off screen male: Parameter?
&gt;&gt; Will Sentance: Parameter, exactly.

88
00:04:30.380 --> 00:04:38.380
So we take the parameter, input number,
assign it an argument value which is 4.

89
00:04:38.380 --> 00:04:42.230
Hooray, okay, next line, Andrew.

90
00:04:42.230 --> 00:04:43.964
&gt;&gt; off screen male: Would
be the constant result.

91
00:04:43.964 --> 00:04:48.093
&gt;&gt; Will Sentance: Good, there it is,
also stored in our local memory.

92
00:04:48.093 --> 00:04:49.554
And what do we assign to it?

93
00:04:49.554 --> 00:04:50.512
&gt;&gt; off screen male: 4 x 2?

94
00:04:50.512 --> 00:04:53.901
&gt;&gt; Will Sentance: Yeah, and the posh word,
by the way, for saying that,

95
00:04:53.901 --> 00:04:55.502
is the evaluated result.

96
00:04:55.502 --> 00:05:00.096
Evaluate means they did the work,
did the calculation.

97
00:05:00.096 --> 00:05:03.198
The evaluated result of input number,

98
00:05:03.198 --> 00:05:07.810
which is you look at our memory,
4 by 2 which gives us 8.

99
00:05:07.810 --> 00:05:10.150
Excellent.

100
00:05:10.150 --> 00:05:12.430
Good?
And now what do we do

101
00:05:13.750 --> 00:05:15.560
with that result Andrew?

102
00:05:15.560 --> 00:05:18.274
&gt;&gt; off screen male: Return it [INAUDIBLE]
&gt;&gt; Will Sentance: So we already said

103
00:05:18.274 --> 00:05:23.569
whatever gets returned out
of calling this multiply

104
00:05:23.569 --> 00:05:29.121
by 2 function will be stored
in this output variable.

105
00:05:29.121 --> 00:05:30.640
Look what it turned out but
the variable 8.

106
00:05:30.640 --> 00:05:35.290
And we're gonna store that 8 in output.

107
00:05:36.770 --> 00:05:37.465
There it is.

108
00:05:37.465 --> 00:05:39.970
All right, perfect.

109
00:05:43.295 --> 00:05:44.490
&gt;&gt; Will Sentance: Beautiful.

110
00:05:44.490 --> 00:05:45.917
Very very nice.

111
00:05:45.917 --> 00:05:46.422
Andrew, go ahead.

112
00:05:46.422 --> 00:05:50.182
&gt;&gt; off screen male: Were you saying
that the output when it's officially or

113
00:05:50.182 --> 00:05:54.662
when it's first put out there's
defined as undefined until it's

114
00:05:54.662 --> 00:05:56.823
read that's changed to eight?

115
00:05:56.823 --> 00:05:59.576
&gt;&gt; Will Sentance: Correct.
Until it gets its return value of eight

116
00:05:59.576 --> 00:06:00.766
assigned to it.

117
00:06:00.766 --> 00:06:02.845
All right.
I told you to more product to

118
00:06:02.845 --> 00:06:05.945
has the return value of
eight assigned to it.

119
00:06:05.945 --> 00:06:13.820
Okay so, now, what's happened to
this execution context, Griffin?

120
00:06:13.820 --> 00:06:16.340
We've finished calling multiply by 2,

121
00:06:16.340 --> 00:06:18.620
what do you think happens to
this execution context, Griffin?

122
00:06:18.620 --> 00:06:19.590
&gt;&gt; off screen male: It gets erased.

123
00:06:19.590 --> 00:06:20.570
&gt;&gt; Will Sentance: Get erased.

124
00:06:20.570 --> 00:06:22.520
Gets removed.
Except for the returned value out,

125
00:06:22.520 --> 00:06:23.784
which gets stored in output.

126
00:06:23.784 --> 00:06:25.345
I'm gonna mark.

127
00:06:25.345 --> 00:06:30.796
I've never figured out a way of indicating
that it gets erased but I'm gonna do this.

128
00:06:30.796 --> 00:06:33.298
I'm gonna write done like that.

129
00:06:33.298 --> 00:06:35.717
That execution context is done.

130
00:06:35.717 --> 00:06:37.172
It's not a great, I grant you.

131
00:06:37.172 --> 00:06:41.667
I'll come up with a better way
of doing it but there we go.

132
00:06:41.667 --> 00:06:45.493
So now which execution context
do we go back to, Griffin?

133
00:06:45.493 --> 00:06:47.450
&gt;&gt; off screen male: To the global.
&gt;&gt; Will Sentance: Global.

134
00:06:47.450 --> 00:06:51.140
Now, JavaScript doesn't
know that by default.

135
00:06:51.140 --> 00:06:54.640
It needs to keep track
of that fact somehow.

136
00:06:54.640 --> 00:06:59.150
We're gonna see that bonus thing that it
uses to keep track of which execution

137
00:06:59.150 --> 00:07:03.090
context it's in and
which one to go to next in a moment.

138
00:07:03.090 --> 00:07:04.890
Raise your hand if you think
you know what that's called,

139
00:07:04.890 --> 00:07:07.240
the place that keeps track of that.

140
00:07:07.240 --> 00:07:10.730
Okay we'll come to it in a second,
so now we're back to global and

141
00:07:10.730 --> 00:07:14.570
what's the next line in
global execution context.

142
00:07:17.470 --> 00:07:20.690
Tell us what to do
&gt;&gt; off screen female: New output is

143
00:07:20.690 --> 00:07:23.630
the new variable
&gt;&gt; Will Sentance: New output and

144
00:07:23.630 --> 00:07:24.859
what are we assigning it?

145
00:07:26.240 --> 00:07:30.480
&gt;&gt; off screen female: We're gonna
pass the parameter of ten into input?

146
00:07:30.480 --> 00:07:32.390
&gt;&gt; Will Sentance: Yeah,
because we don't yet know, do we,

147
00:07:32.390 --> 00:07:33.450
what we're gonna assign it.

148
00:07:33.450 --> 00:07:40.560
For now, it's undefined because we've
gotta go cool multiply by two, figure

149
00:07:40.560 --> 00:07:45.400
out what comes out the bottom and that's
what's gonna be stored in new output.

150
00:07:45.400 --> 00:07:52.561
So Clara, pulled me through as in
complete form as you can, Clara,

151
00:07:52.561 --> 00:07:58.710
this final line about
global execution context.

152
00:07:58.710 --> 00:08:03.980
New output is the return value,
of multiplied by 2, when called with 10.

153
00:08:03.980 --> 00:08:06.140
Pull me through this
completely if you can Clara.

154
00:08:06.140 --> 00:08:08.610
&gt;&gt; off screen female: All right,
so once you've started your new

155
00:08:08.610 --> 00:08:10.640
local execution context.

156
00:08:10.640 --> 00:08:12.680
&gt;&gt; Will Sentance: So creating a new
execution context, that's the first thing.

157
00:08:12.680 --> 00:08:15.450
Got it, doing that now, excellent.

158
00:08:15.450 --> 00:08:16.900
What is it comprised?

159
00:08:16.900 --> 00:08:18.620
What sort of an execution
context is comprised?

160
00:08:18.620 --> 00:08:19.790
&gt;&gt; off screen female: Save
your local memory?

161
00:08:19.790 --> 00:08:21.990
&gt;&gt; Will Sentance: Local memory,
which has a posh name.

162
00:08:21.990 --> 00:08:24.430
We'll say what it is in a second.

163
00:08:24.430 --> 00:08:25.370
But local memory and

164
00:08:25.370 --> 00:08:29.220
the thread jumps inside to run
the code inside the function.

165
00:08:29.220 --> 00:08:30.060
Clara go ahead.

166
00:08:30.060 --> 00:08:35.220
&gt;&gt; off screen female: So your parameter,
input number, so the value ten.

167
00:08:37.820 --> 00:08:41.490
And then,
setting up your constant results.

168
00:08:41.490 --> 00:08:42.910
&gt;&gt; Will Sentance: Yep.
And decide what?

169
00:08:42.910 --> 00:08:44.320
&gt;&gt; off screen female: Some maths.

170
00:08:44.320 --> 00:08:45.530
&gt;&gt; Will Sentance: Yeah, good, exactly.

171
00:08:45.530 --> 00:08:46.770
You get 20.
And what's the final

172
00:08:46.770 --> 00:08:48.590
line in the body of
the function tell us to do?

173
00:08:48.590 --> 00:08:49.540
&gt;&gt; off screen female: Returning results.

174
00:08:49.540 --> 00:08:50.520
&gt;&gt; Will Sentance: Returning result.

175
00:08:50.520 --> 00:08:55.200
And I realize already we're reaching
the extremities of the board.

176
00:08:56.550 --> 00:08:57.810
There we go.

177
00:08:57.810 --> 00:09:02.000
So the result value is gonna be returned.

178
00:09:02.000 --> 00:09:04.240
And where did we say that
result value's gonna be stored?

179
00:09:05.320 --> 00:09:07.250
&gt;&gt; off screen female: That's
gonna go to your new outputs.

180
00:09:07.250 --> 00:09:07.940
&gt;&gt; Will Sentance: There it is.

181
00:09:07.940 --> 00:09:08.850
&gt;&gt; off screen female: In
the global context.

182
00:09:08.850 --> 00:09:12.460
&gt;&gt; Will Sentance: In the global execution
context memory, and so out returns 20.

183
00:09:12.460 --> 00:09:15.150
And we store 20 in new output.

184
00:09:15.150 --> 00:09:17.640
And we return, what happens to
this execution context Clara?

185
00:09:17.640 --> 00:09:18.720
&gt;&gt; off screen female: Goes away.
&gt;&gt; Will Sentance: Goes away.

