WEBVTT

1
00:00:00.000 --> 00:00:06.429
Now we introduce executing or running or
invoking or calling a function.

2
00:00:06.429 --> 00:00:09.228
So what happens when we do this.

3
00:00:09.228 --> 00:00:13.064
This is not the same as
defining a function.

4
00:00:13.064 --> 00:00:17.550
But how do we tell JavaScript
to define a function?

5
00:00:17.550 --> 00:00:18.695
Keyword function.

6
00:00:18.695 --> 00:00:21.184
How do I tell JavaScript
to call a function?

7
00:00:21.184 --> 00:00:24.009
Art, how do I tell JavaScript
to call a function?

8
00:00:24.009 --> 00:00:24.749
&gt;&gt; By?

9
00:00:24.749 --> 00:00:27.440
&gt;&gt; All I had to do is add parentheses,
that's it.

10
00:00:27.440 --> 00:00:30.402
I take the name of the function and
add parentheses.

11
00:00:30.402 --> 00:00:31.075
Not input.

12
00:00:31.075 --> 00:00:32.893
Adding parentheses is enough.

13
00:00:32.893 --> 00:00:35.448
It just says go run
the code at that function.

14
00:00:35.448 --> 00:00:39.824
It may not have actually therefore an
argument parsed with an actual value but

15
00:00:39.824 --> 00:00:41.910
it's still running the function.

16
00:00:41.910 --> 00:00:43.791
So, let's keep going.

17
00:00:43.791 --> 00:00:45.134
Line 1 num is 3.

18
00:00:45.134 --> 00:00:46.657
Line 2 [INAUDIBLE].

19
00:00:46.657 --> 00:00:50.866
We may be thinking man,
yeah I know how this is working.

20
00:00:50.866 --> 00:00:54.359
I can look at this right away and
figure it out.

21
00:00:54.359 --> 00:00:59.196
Getting this level of precision
down now is what makes closure.

22
00:00:59.196 --> 00:01:03.790
Higher order functions OOP,
all flow much more naturally.

23
00:01:03.790 --> 00:01:09.792
So, what's our next line of code
after declaring multiply by 2, Clara.

24
00:01:09.792 --> 00:01:16.180
&gt;&gt; After declaring the function then
you're declaring your outputs constants.

25
00:01:16.180 --> 00:01:17.038
&gt;&gt; Perfect.

26
00:01:17.038 --> 00:01:18.085
There it is.

27
00:01:18.085 --> 00:01:21.540
And what are we going
to assign to it Clara?

28
00:01:21.540 --> 00:01:24.546
So eventually it would be the return value
&gt;&gt; Correct.

29
00:01:24.546 --> 00:01:25.570
&gt;&gt; of the function.

30
00:01:25.570 --> 00:01:29.601
&gt;&gt; Eventually it would be the return
value of cooling the multiplied by 2

31
00:01:29.601 --> 00:01:33.015
function with the input of 4 but
we haven't done that yet.

32
00:01:33.015 --> 00:01:37.865
We've gotta go do that work but JavaScript
likes to have everything have a value even

33
00:01:37.865 --> 00:01:41.583
when it's in the waiting so
what's its Default waiting value.

34
00:01:41.583 --> 00:01:42.323
&gt;&gt; Undefined.

35
00:01:42.323 --> 00:01:44.810
&gt;&gt; Undefined,
I will draw it as a dotted line,

36
00:01:44.810 --> 00:01:47.567
we just don't know what
is going to be there yet.

37
00:01:47.567 --> 00:01:49.114
So let's be really clear.

38
00:01:49.114 --> 00:01:52.007
What is definitely not there,
is multiply by two.

39
00:01:52.007 --> 00:01:54.697
Output has no interest
in "multiply by two".

40
00:01:54.697 --> 00:01:57.993
It only gets interested in
multiply by two in the sense of,

41
00:01:57.993 --> 00:02:01.880
its run multiply by two and
the values come back in the return value.

42
00:02:01.880 --> 00:02:02.926
The result.

43
00:02:02.926 --> 00:02:07.781
Whatever's after the return
keyword inside the function,

44
00:02:07.781 --> 00:02:11.207
that is what's gonna be stored in output.

45
00:02:11.207 --> 00:02:13.872
So you've gotta go do some work.

46
00:02:13.872 --> 00:02:15.775
So let's do that work!

47
00:02:15.775 --> 00:02:20.750
We've gotta see what happens when I run,
multiply it by two,

48
00:02:20.750 --> 00:02:25.435
and assign the result of calling
it with the input of four.

49
00:02:25.435 --> 00:02:27.826
Assign the result to output.

50
00:02:27.826 --> 00:02:29.737
So who knows what we do?

51
00:02:29.737 --> 00:02:34.804
When we start out of code we
create a global execution context.

52
00:02:34.804 --> 00:02:38.436
What about when we start
running a function?

53
00:02:38.436 --> 00:02:39.965
What do we create?

54
00:02:39.965 --> 00:02:40.850
Lindsay.

55
00:02:40.850 --> 00:02:43.783
and we start running our function?

56
00:02:43.783 --> 00:02:44.564
&gt;&gt; A local.

57
00:02:44.564 --> 00:02:45.639
&gt;&gt; Local what?

58
00:02:45.639 --> 00:02:46.714
&gt;&gt; Execution.

59
00:02:46.714 --> 00:02:48.475
&gt;&gt; Everyone together.

60
00:02:48.475 --> 00:02:50.038
We create a local.

61
00:02:50.038 --> 00:02:51.798
&gt;&gt; Execution context.

62
00:02:51.798 --> 00:02:55.806
&gt;&gt; Excellent,
perfect good job Lindsey and team.

63
00:02:55.806 --> 00:02:56.978
There we are.

64
00:02:56.978 --> 00:02:58.248
What's in it?

65
00:02:58.248 --> 00:02:59.740
Lets have a look.

66
00:02:59.740 --> 00:03:02.338
Here's our local execution context.

67
00:03:02.338 --> 00:03:06.192
And it has, just like our global
one had a global memory and

68
00:03:06.192 --> 00:03:10.205
a global thread in which we're
doing all this work, right.

69
00:03:10.205 --> 00:03:12.566
We're doing the work line by line,

70
00:03:12.566 --> 00:03:17.522
now we've got a local one in which has
got a local memory and a local thread.

71
00:03:17.522 --> 00:03:22.476
And a local thread just means Doing the
code inside the function now line by line.

72
00:03:22.476 --> 00:03:24.822
Before we were doing the code globally,

73
00:03:24.822 --> 00:03:28.272
now we're doing the code inside
the function line by line.

74
00:03:28.272 --> 00:03:30.825
And we've paused doing the code globally.

75
00:03:30.825 --> 00:03:32.550
We're not hitting the line.

76
00:03:32.550 --> 00:03:34.896
We're not hitting the line newOutput.

77
00:03:34.896 --> 00:03:37.035
We just pause before this line here.

78
00:03:37.035 --> 00:03:41.865
We're waiting to go back to this global
execution context while we're busy inside

79
00:03:41.865 --> 00:03:46.708
running this Local execution context
multiplied by two with an input of four.

80
00:03:46.708 --> 00:03:47.592
So, Andrea.

81
00:03:47.592 --> 00:03:52.679
What's the first thing we do inside
a multiplier by two with an input of four?

82
00:03:52.679 --> 00:03:54.004
&gt;&gt; So then, so we pass.

83
00:03:54.004 --> 00:03:58.132
&gt;&gt; Andrea, you are going to say
a normal answer, I can already tell.

84
00:03:58.132 --> 00:04:01.000
So I'm going to turn
the volume up very high.

85
00:04:22.090 --> 00:04:23.842
We assign it to the.

86
00:04:23.842 --> 00:04:28.586
&gt;&gt; What's the posh word for
the input, the place order?

87
00:04:28.586 --> 00:04:29.721
&gt;&gt; Parameter.

88
00:04:29.721 --> 00:04:31.784
&gt;&gt; Parameter, exactly.

89
00:04:31.784 --> 00:04:39.108
So we take the parameter, input, number,
assign it argument value which is four.

90
00:04:39.108 --> 00:04:39.933
Hurray!

91
00:04:39.933 --> 00:04:42.230
Okay next line, Andrew?

92
00:04:42.230 --> 00:04:43.953
The constant result.

93
00:04:43.953 --> 00:04:44.497
&gt;&gt; Good.

94
00:04:44.497 --> 00:04:45.494
There it is.

95
00:04:45.494 --> 00:04:48.033
Also stored in our local memory.

96
00:04:48.033 --> 00:04:50.117
And what do we assign to it?

97
00:04:50.117 --> 00:04:50.752
&gt;&gt; 4x2.

98
00:04:50.752 --> 00:04:51.296
&gt;&gt; Yeah.

99
00:04:51.296 --> 00:04:55.739
And the proper way of saying
that is the evaluated result.

100
00:04:55.739 --> 00:05:00.184
Evaluated means they did the work,
did the calculation.

101
00:05:00.184 --> 00:05:05.529
The evaluated result of input number
which is You look at our memory,

102
00:05:05.529 --> 00:05:07.774
4 by 2, which gives us 8.

103
00:05:07.774 --> 00:05:11.794
Excellent, good, and
now what do we do with that?

104
00:05:11.794 --> 00:05:14.973
What do we do with that result, Andrew?

105
00:05:14.973 --> 00:05:15.908
&gt;&gt; Return it.

106
00:05:15.908 --> 00:05:19.182
[CROSSTALK]
&gt;&gt; Exactly, so we already said,

107
00:05:19.182 --> 00:05:23.673
whatever gets returned out
of calling this multiplyBy2

108
00:05:23.673 --> 00:05:28.513
function will be stored
In this output variable.

109
00:05:28.513 --> 00:05:34.665
Well look what got returned out,
but the value eight.

110
00:05:34.665 --> 00:05:39.748
And we're gonna store
that eight in output.

111
00:05:39.748 --> 00:05:43.492
There it is, all right perfect.

112
00:05:43.492 --> 00:05:44.990
Beautiful.

113
00:05:44.990 --> 00:05:46.085
Very very nice.

114
00:05:46.085 --> 00:05:47.258
Andrew go ahead.

115
00:05:47.258 --> 00:05:51.015
&gt;&gt; Were you saying that the output,
when it's first put out

116
00:05:51.015 --> 00:05:55.631
there it's defined as undefined
until it's read it's change date?

117
00:05:55.631 --> 00:06:00.088
&gt;&gt; Correct, until it gets it's return
value of eight assigned to it.

118
00:06:00.088 --> 00:06:00.870
All right so

119
00:06:00.870 --> 00:06:05.956
we've got [INAUDIBLE] multiplied by two
return value of eight assigned to it.

120
00:06:05.956 --> 00:06:10.604
Okay So now what's happened to
this execution context, Griffin?

121
00:06:10.604 --> 00:06:13.121
We finished cooling multiply by 2,

122
00:06:13.121 --> 00:06:16.693
what do you think happens
to the execution context?

123
00:06:16.693 --> 00:06:17.829
&gt;&gt; It gets erased.

124
00:06:17.829 --> 00:06:23.050
&gt;&gt; It gets erased, gets removed except for
the returned value out which gets.

125
00:06:23.050 --> 00:06:24.270
Stored in output.

126
00:06:24.270 --> 00:06:29.229
I'm gonna, I've never figured out a way
of indicating that it gets erased.

127
00:06:29.229 --> 00:06:33.042
But I'm gonna do this,
I'm gonna write done, like that.

128
00:06:33.042 --> 00:06:35.177
That execution context is done.

129
00:06:35.177 --> 00:06:40.134
It's not great, I grant you, I will come
up with a better way of doing it but,

130
00:06:40.134 --> 00:06:41.049
there you go.

131
00:06:41.049 --> 00:06:44.936
So now, which execution context
do we go back to, Griffin?

132
00:06:44.936 --> 00:06:46.309
&gt;&gt; The global context.

133
00:06:46.309 --> 00:06:46.970
&gt;&gt; Global.

134
00:06:46.970 --> 00:06:50.045
Now, JavaScript doesn't
know that by default.

135
00:06:50.045 --> 00:06:52.899
It needs to keep track of that fact,
somehow.

136
00:06:52.899 --> 00:06:57.510
We're gonna see that bonus thing that
uses to keep track of which execution

137
00:06:57.510 --> 00:06:58.681
context it's in.

138
00:06:58.681 --> 00:07:01.020
And which one to go to next in a moment.

139
00:07:01.020 --> 00:07:04.606
Raise your hand if you think
you know what that's called,

140
00:07:04.606 --> 00:07:09.145
the place that keeps track of that Okay,
we'll come to it in a second.

141
00:07:09.145 --> 00:07:11.126
So now we're back in global.

142
00:07:11.126 --> 00:07:15.882
And what's the next line, Shelby,
in the global execution context?

143
00:07:15.882 --> 00:07:18.893
Tell us
&gt;&gt; New output is a new variable.

144
00:07:18.893 --> 00:07:22.856
&gt;&gt; You have this new variable,
the new new output.

145
00:07:22.856 --> 00:07:24.860
And what are we assigning it?

146
00:07:24.860 --> 00:07:28.600
We're gonna pass the parameter
of 10 into input.

147
00:07:28.600 --> 00:07:33.955
&gt;&gt; Yeah, because we don't yet know,
do we, what we're going to assign it.

148
00:07:33.955 --> 00:07:39.735
For now, it's undefigned because we've
gotta go call multiply by two, figure

149
00:07:39.735 --> 00:07:45.600
out what comes out the bottom, and that's
what's gonna be stored in new output.

150
00:07:45.600 --> 00:07:50.954
So Clara, talk me through as in
a complete form as you can Clara.

151
00:07:50.954 --> 00:07:55.144
This final line in our
global execution context.

152
00:07:55.144 --> 00:08:01.028
New output is the return value if
multiplied by two when code with ten.

153
00:08:01.028 --> 00:08:05.316
Talk me through tis as
completely as you can Clara.

154
00:08:05.316 --> 00:08:09.040
&gt;&gt; Alright so
once you started your new local.

155
00:08:09.040 --> 00:08:10.231
Execution context?

156
00:08:10.231 --> 00:08:13.670
&gt;&gt; So create a new execution context,
that's the first thing,

157
00:08:13.670 --> 00:08:14.925
got it doing that now.

158
00:08:14.925 --> 00:08:17.504
Excellent, it's got
a what is it comprised?

159
00:08:17.504 --> 00:08:19.951
What sort of execution context comprised?

160
00:08:19.951 --> 00:08:20.811
&gt;&gt; Local memory.

161
00:08:20.811 --> 00:08:22.926
&gt;&gt; Local memory, which has a posh name.

162
00:08:22.926 --> 00:08:24.776
We'll say what it is in a second.

163
00:08:24.776 --> 00:08:27.390
But local memory and
the thread jumps inside.

164
00:08:27.390 --> 00:08:30.628
To run the code inside the function.

165
00:08:30.628 --> 00:08:31.986
Cara go ahead.

166
00:08:31.986 --> 00:08:36.895
&gt;&gt; So your parameter input number,
store the value 10.

167
00:08:36.895 --> 00:08:40.760
And then setting up your constant results.

168
00:08:40.760 --> 00:08:42.536
&gt;&gt; Assigning it what.

169
00:08:42.536 --> 00:08:43.700
&gt;&gt; Some maths.

170
00:08:43.700 --> 00:08:45.300
Yeah, good, exactly.

171
00:08:45.300 --> 00:08:45.986
Get 20.

172
00:08:45.986 --> 00:08:50.027
And what's the final at
the function telling us to do?

173
00:08:50.027 --> 00:08:51.324
&gt;&gt; Returning result.

174
00:08:51.324 --> 00:08:52.850
&gt;&gt; Returning result, and

175
00:08:52.850 --> 00:08:57.046
I realize already we're reaching
the extremities of the board.

176
00:08:57.046 --> 00:08:57.883
There we go.

177
00:08:57.883 --> 00:09:00.780
So the result value is gonna be returned,
and

178
00:09:00.780 --> 00:09:04.250
where did we say that result
value is gonna be stored?

179
00:09:04.250 --> 00:09:06.418
That's gonna go to your new outputs.

180
00:09:06.418 --> 00:09:07.162
&gt;&gt; There it is.

181
00:09:07.162 --> 00:09:08.517
&gt;&gt; In the global context.

182
00:09:08.517 --> 00:09:12.313
&gt;&gt; In the global execution context
memory and to out returned 20 and

183
00:09:12.313 --> 00:09:14.887
we stored 20 in new output and
we returned.

184
00:09:14.887 --> 00:09:17.599
What happens to this
execution context Clara?

185
00:09:17.599 --> 00:09:18.276
&gt;&gt; Goes away.

186
00:09:18.276 --> 00:09:18.997
&gt;&gt; Goes away.

