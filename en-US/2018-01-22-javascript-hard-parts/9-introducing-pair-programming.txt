[00:00:00]
>> Pair programming foot is without question. Code wouldn't work without it. Of the thousands hours you spend at codes with about 400 I'd say are paired. There was laptops four two. Thank you Ameen. Thank you man. A passive aggressive thank you. Never should thank you be less grateful or...

[00:00:20]
More demanding. All right so pair programming is the secret approach to how you grow as an engineer. Let's look at it up here, there are two types of learning out there, always a spectrum. Harder learning, easier learning. Easier learning spoon feeds. But at some point, you're gonna start to plateau in your growth if you follow the spoon fed approach.

[00:01:10]
You're gonna remain a junior developer. An entry level developer. That's not what you want. You wanna grow into an autonomous problem solving mid or senior developer. That how do you do it? You do hard learning, you don't do the easier learning for long. You do hard learning. So hard learning is things like shot out to Clara, I go and try to build projects.

[00:01:37]
Hard learning is doing MIT opening courseware and all the problem sets with it. Hard learning is doing all those mooks And all the problems that's associated with them, like Coursera, edX. Has anyone ever finished one of those? I doubt it. So maybe you have. My god, it's gonna be a life changing moment for me.

[00:01:56]
Which one did you finish all the problem sets on?
>> It was not a programming one. I finished a different one.
>> Okay, there you go. That's confirmed my bias.
>> Coursera for Ruby. You completed a full course.
>> Yeah.
>> All promisets.
>> Yeah.>>Let's give her a round of applause, my god.

[00:02:13]
This is unprecedented. [APPLAUSE]
>> I felt obligated too, becasue my company paid for me to do it.
>> Well I'll tell you this, seriously, commitment device because it's incredbly hard right? The hard learning, what happens? You hit a block and that's what hard learning is. At that moment you give up.

[00:02:30]
So you grow as a problem solver and you grow as a communicator when you hit a block. When you cannot make this thing work and everything is screaming at you go do something else. Make a cup of tea. Just run. You want to get away from the struggle.

[00:02:47]
But that's when you grow. That moment where you keep pushing is when you grow. If it takes a commitment device that your company pay for you to do it, okay, that helps. But most of the time we do tend to slip into the give up approach when we do hard learning.

[00:03:03]
But hard learning is where we grow. It's where you become an actual engineer. No one ever became an engineer Unfortunately by doing code school. I love code school, man. Childhood road trip. I hear that theme tune one more time. But instead we fall into the trap of doing the easier learning, and thinking we're growing, but we hit a plateau.

[00:03:25]
What do I do next? Or we do hard learning, but we risk giving up. Now. If we push through the hard learning. Suppose we're doing Java sub 30 and now we're pushing through. Suppose we're doing, I don't know, call Sarah or add Ex course. And we're pushing through.

[00:03:44]
Great. Now we're moving to this camp here. This bit here. Even here, we're not safe yet. There's two, there's a spectrum here of how we do the hard learning. One one end, is the researcher. So you're saying I'm gonna go, I've heard Will say I should be doing hard learning.

[00:04:01]
I've heard him say it, I'm gonna go do a project. I'm gonna build a project or I'm gonna go and do some hard cord rules problems or I'm gonna do some exorcism io problems. They're gonna be hard. But I'm going to do it. Okay great. And then you see 10 words in the question that you don't know.

[00:04:19]
Then you go crap, okay. You go look them up. In their documentation you see another 10 words you don't know. That's halfway through. Now it's lunchtime so you take a quick break and you come back and you go okay, I've got. And by the end of the day, you have read everything there is to know about object oriented programming in JavaScript.

[00:04:39]
But you have not put your hands on the keyboard once. You've fallen into the researcher trap, that's one extreme. You're doing hard learning, but you're not actually doing it. You're doing hard work, but you're not doing it. Hard problems but you're not actually doing it. Other end The stack overflow approach.

[00:04:55]
This is the I'm doing a project, I'm doing real hard. This is real problem solving. Okay, this isn't working. There's a snip on it. Man, someone's had. Snip it from stack overflow, take snippet, copy and paste. Still not quite working. Take another snippet, copy and paste Okay, [INAUDIBLE].

[00:05:14]
Okay, they're not working together. Post those three snippets and ask someone how to make them work. It's working! Stack [INAUDIBLE] approach. You're doing hard learning. You're doing a hard problem. But you're doing the just make it work and you have no idea of how it's working. So it might seem we're stuck in catch 22 with all of this stuff.

[00:05:35]
No. Are my arrows to, that's funny, it doesn't show up on here. Everyone can see, there's my arrow. where programming lands us perfectly in the middle. Clearly it just sits there separately here. But that little arrow about that pointing a the green area. Pair programming lands us perfectly in the middle, hopefully, if you do it right, between the I must understand what I'm doing in the hard learning and the other end, the make it work.

[00:06:11]
Pair programming says because you have to never Problem solve that is never come up with a solution, never come up with an approach to solving the problem and type it. If you come up with the approach your hands are behind your back. You're having your partner interpret your pseudo code, the sort of way we talk to our code up here which we're gonna do a lot more of in the next two days You have your partner talk through, your partner turn your pseudo code, your spoken verbalized problem solving approach into actual code.

[00:06:43]
All that means is that as you explain your approach to solving the problem, and then have them actually interpret your approach into actual code You have to understand it just enough that you can explain it. Like this is why we are going to do it, this is how we're going to do it.

[00:06:59]
But, you don't have to understand it so much because you can't leave your pair programming partner waiting there while you research all of objective programming. You got to at least get your hands dirty, because their sitting there waiting for you. But nor can you just plug and play, because you've got to talk through the code line by line to them, and have them actually turn it into code.

[00:07:19]
So you're forced to land in the green area between on the one end the must understand everything, never get my hands dirty. And the don't understand anything, but hey, I've put my hands on the keyboard. This is an incredibly powerful approach. Let's see it in action. Let's imagine we have Bob and Lindsay.

[00:07:38]
Okay. So Bob and Lindsay, they see a problem presented they got to work on. It says okay, Bob, Lindsay, display 10 Tweets from Twitter's API on the webpage. Ten tweets from Twitter's API on the webpage. All right, so Bob says, Lindsey, do you know Twitter's API? And he's like, no.

[00:07:59]
Let's go look at Twitter's API docs. Let's go look at the docs, the documentation, see what it says about how the API works. And then they get there and Bob sees Lindsay, it says that it's going to give us very conveniently an array of ten strings. Which are the ten tweets directly from this address, and he's like, that's not likely, but Bob said, yes it is, there it is, look, that's what it says.

[00:08:24]
Its just an array of ten strings, effortless. Easiest API in the world. No authentication Nothing, just there they are. And Barb is really happy. Barb, look happier. Barb is really happy, she's grinning she's so happy with how easy this API is. Then Lindsay says, hey actually let's look again, I think there's a J query method.

[00:08:47]
That we can use to append strings to a DOM element, to a bit of the page, to a DOM element, like an element with a class name tweet container, okay. So now they've done their research, that was the research stage. They did that together, kinda hustling, figuring out.

[00:09:04]
Now they move into the driver, navigator stage. So here we have, let's say Bob says, hey Lindsay I've actually got an idea how we can approach this, do you mind if I navigate? So Bob's job is now gonna be to talk through an approach to solving this problem and her hands are never gonna touch the keyboard.

[00:09:27]
If she feels man, Lindsey, I know what I want you to do, that's the moment where her technical communication gets to level up, cuz she needs to be able to explicate how to solve the problem to Lindsey, such that Lindsey can actually type it out on the keyboard.

[00:09:44]
So, for example says All right Lenzy, let's start by declaring a function. Let's call it appendTweets. Let's have it be past the parameters, let's call it tweetsArray, that's the placeholder. And the body of the function. Let's iterate through that tweetsArray, loop through it, take each string Each tweet, and pass the tweet string to jQuery's built in append method.

[00:10:13]
And it's called that append method on the dorm element with the class name, let's call it tweets container. Let's call it that. And now, at this point, so they've used the research, and Barb has I've spoken in pseudo code, and she's never put her hands on the keyboard.

[00:10:32]
And now Lindsey, she's our driver. So she's actually at the keyboard. She's going okay, to clear a function, append tweets. All right, function, append tweets. Prints tweets array is the parameter, tweets array, close parenths, open the curly braces, iterate through the input array, for in parenths let I equal 0, and at no point did bob say Lindsay function append tweets Open paren though she was saying all this precise pseudo code which we'll be working on today as Amin said we're declaring the function multiplied by two we are declaring output and assigning it to the return value of the core to multiply by two with the argument four.

[00:11:24]
That pseudocode is what Lindsey's turning into actual code on the keyboard, okay? What this does is ensures that has enough understanding to be able to talk through it, but not too much that she stopped and and that Lindsey has the ability To interpret that precise CO code. After about 10, 15 minutes, they can swap over.

[00:11:49]
Now, you might hear a like damn, we have no idea how to solve this. So yeah, as always, try figuring stuff out. But if you have an idea, force yourself, actually, Bob, I have an idea. Do you mind driving? And so, Lindsey's gonna explain her idea. Not a moment where you're like, let me try this, or can we just console log that?

[00:12:11]
Force yourself to have the other person be navigated through it by you. And by the way, Bob thinks that Lindsey is making a horrible mistake. Or Lindsey thinks that Bob is making a horrible mistake. She does not say stop, stop, stop, stop. Let me show you how to do it.

[00:12:28]
She doesn't do that. She lets, she quietly sits there, smugly. No, not smugly. She quietly sits there, goes mhmm, mhmm, yeah, keep going. No, no, no. And by the way, half the time, the smugness is wiped off her face. Bob, I know your not actually like this, I think you're charming.

[00:12:47]
Half the time. Actually it turns out Lindsey was, had a different approach to what bob thought, and it kind of worked. And it worked anyway, but half the time Actually you know what Bob's approach was totally wrong. So Lindsey's typing Bob's approach but Bob's really wrong, but now.

[00:13:04]
Lindsey, even though she thinks she knew a better approach, they press Run in the console. They see the error appear, it says an undefined is not a function. And now they get to debug as a pair together as well. All right, this is gonna be a long introduction to pair programming.

[00:13:20]
But anyone got questions on how to pair program effectively? We're gonna be doing it for two days. So you want to really know, what if this happens? What if I feel this? How do I know? Don't be a driver that your navigating. In other words, don't be typing and explaining.

[00:13:35]
I don't want to be wandering around. I want to be clear who's driver navigator at any point. Try to hold yourself accountable. But also let me tell you, it's an aspiration. And the best execution of pair programming is just, if I have an idea of how to solve it, I am not gonna have my hands on the keyboard, the other person is, I'm gonna communicate them through and explain how to solve it.

[00:13:57]
Any questions on how to pair?

