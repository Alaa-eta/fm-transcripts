[00:00:00]
>> Will: Pair Programming [INAUDIBLE] is, without question, CodeSmith wouldn't work without it. Of the 1,000 hours you spend at CodeSmith, about 400, I'd say, are paired. Everyone's laptops [INAUDIBLE]? Thank you, Ameen. Thank you, man. My passive aggressive thank you.
>> [LAUGH]
>> Will: Never has a thank you been less grateful [LAUGH], and more demanding.

[00:00:23]
All right, so pair programming is the secret approach to how you grow as an engineer. Let's look at it up here. There are two types of learning out there, or there's a spectrum. Harder learning, easier learning. Easier learning spoon feeds. How many diagrams there? He is going to need spoon feeds, that is fine.

[00:00:44]
So people mention Codeacademy, Code School, wonderful. For your first 30, 50, even 100, even 200 hours, great. You have to just keep going, just keep pushing. If it spoonfeeds that keeps you going, and repeating and rewriting a function a hundred times, that is worth it. But at some point you're gonna start a plateau in your growth if you follow the spoonfed approach.

[00:01:12]
You're gonna remain a junior developer, an entry-level developer, that's not what you want. You wanna grow into an autonomous problem-solving mid- or senior developer. So how do you do it? You do hard learning. You don't do the easier learning for long, you do hard learning. So hard learning is things like, shout out to Clara, I go and try and build projects.

[00:01:38]
Hard learning is doing MIT open courseware and all the problem sets of it. Hard learning is doing all those MOOCs and all the problems sets associated with them, like Coursera, edX. Has anyone ever finished one of those? I doubt it. So, maybe you have, my, this is gonna be a life changing moment for me.

[00:01:58]
Which one did you finish all the problem sets on?
>> Speaker 2: It was not a programming one, I finished a different one.
>> Will: Okay, there you go, that's confirmed my bias. And?
>> Speaker 3: Coursera, for Ruby.
>> Will: You completed a full Coursera course.
>> Speaker 3: Yeah, it was [INAUDIBLE].
>> Will: All problem sets?

[00:02:10]

>> Speaker 3: Yeah.
>> Will: Let's give her a round of applause. My God! This is unprecedented.
>> Speaker 3: I felt obligated to because my company paid for me to do it.
>> Will: So I'll tell you this, commitment device is very, because it's incredibly hard, right? The hard learning, what happens? You hit a block, and that's what hard learning is.

[00:02:29]
At that moment, you give up. So you grow as a problem solver, and you grow as a communicator when you hit a block. When you cannot make this thing work and everything is screaming at you, go do something up, make a cup of tea. Just run, you wanna get away from the struggle.

[00:02:48]
That's, but that's when you grow. That moment when you keep pushing through is when you grow. If it takes a commitment device like your company paying for you to do it, okay that helps, but most of the time, we do tend to slip into the give up approach when we do hard learning.

[00:03:04]
But hard learning is where we grow, it's where we become an actual engineer. No one ever became an engineer, unfortunately, by doing Code School. I love Code School I hear that theme tune one more time. But, instead, we fall into the trap of doing the easier learning and thinking we're growing, but we hit a plateau and we think, what do I do next, or we do hard learning, but we risk giving up.

[00:03:29]
Now, if we push through the hard learning, suppose we're doing JavaScript 30, we're pushing through. Suppose we're doing, I don't know, Coursera, or edX course, and we're pushing through. Great. Now we move into this camp here. This bit here. Even here, we're not safe yet. There's a spectrum here of how we do the hard learning.

[00:03:56]
On one end is the researcher. So you'll say, I've heard Will say, I should be doing hard learning. I've heard him say it, I'm gonna go do a project, I'm gonna build a project, or I'm gonna go and do some hard problems, or I'm gonna do some exorcism IO problems, they're gonna be hard.

[00:04:13]
But I wanna do it. Okay, great. And then you see ten words, you see ten words in the question that you don't know. And you go, crap, okay, you go look them up. And in their documentation, you see another ten words you don't know. Okay, now it's halfway through, now it's lunchtime.

[00:04:31]
So you take a quick break, and then you come back. And you go, okay, I've got, and by the end of the day, you've read everything these is to know about object oriented programming in JavaScript. But you have not put your hands on the keyboard once. You fall into the researcher trap, that's one extreme.

[00:04:46]
You're doing hard learning, you're not actually doing it, you're doing hard work, but you're not doing it. Hard problems, but you're not actually doing it. Other end, the StackOverflow approach. This is the, I'm doing a project, I'm doing hard learning, this is real problem-solving. Okay, this isn't working.

[00:05:03]
Let me, there's a snippet. Man, someone's had this error before. Snip it from StackOverflow. Take snippet, copy and paste. Still not quite working. Take another snippet, copy and paste. Okay, another snippet, copy and paste. Okay, they're not working together. Post those three snippets, and ask someone how to make them work.

[00:05:21]
It's working, Stack Overflow approach. You're doing hard learning, you're doing a hard problem. But, you're doing the, just make it work, you have no idea how it's working. So, it might seem we're stuck in a catch-22 with all this stuff. No. Are my arrows too, that's funny, it doesn't show up on here.

[00:05:43]
Everyone can see, there's my arrow, pair programming lands us perfectly in the middle, clearly. It just sits there separately here. That's a little arrow pointing at the green area. Pair programming lands us perfectly in the middle. Hopefully, if we do it right, between the, I must understand what I'm doing in the hard learning, and the other end, the make it work.

[00:06:10]
Pair programming says, because you have to never problem solve, that is, never come up with a solution, never come up with an approach to solving the problem and type it. If you come up with the approach, your hands are behind your back, you're having your partner interpret your pseudo-code.

[00:06:29]
The sort of way we talk through our code up here is gonna be a lot more over the next two days. You have your partner turning your pseudocode, your spoken verbalized problem-solving approach, into actual code. What that means is that, as you explain your approaches over the problem, and then have them actually interpret your approach into actual code, you have to understand it just enough that you can explain it, this is why we're gonna do it, and this is how we're gonna do it.

[00:07:00]
But you don't have to understand it so much because you can't leave your pair programming partner waiting there while you research all of object-oriented programming. You've got to at least get your hands dirty, because they're sitting there waiting for you. But nor can you just plug and play because you gotta talk through the code line by line to them and have them actually turn them it into code.

[00:07:20]
So you're forced to land in the green area between on the one end, the, must understand everything, never get my hands dirty and the, don't understand anything but hey I'll put my hands on the keyboard. This is an incredibly powerful approach. So let's see it in action, let's imagine we have Bob and Lindsey.

[00:07:35]
So Bob and Lindsey, they see a problem presented they're gonna work on. It says, okay Bob and Lindsey, display 10 tweets from Twitter's API on the webpage. Ten tweets from Twitter's API on the webpage. All right. So, Bob says, Lindsey, do you know Twitter's API? And it's like, no.

[00:07:58]
Let's go look at Twitter's API. Let's look at the docs, let's go looks at the docs and see, the documentation, see what it says about how the API works. And then they get there and Bob sees, Lindsay, it says it's gonna give us very conveniently, an array of ten strings, which are the ten tweets, directly from this address.

[00:08:21]
And then she's like, that's not likely. But Bob says, yes it is. There it is. Look, that's what it says. Just an array of ten strings. Effortless, easiest API in the world. No authentication. Nothing. Just effort, there they are. And Bob's really happy. Bob, look happier. Bob really happy.

[00:08:38]
She's grinning, she's so happy with how easy this API is. And then Lindsey says hey, actually, let's look again. I think there's a jQuery method that we can use to append strings to web, to a dom element. To the bit of the page, to the dom element, element with a class called Tweet container.

[00:08:56]
Okay? So, now they've done their research. That was the research stage, we did that together kind of hustling, figuring out. Now they move into the driver, navigator stage. So here we have, let's say, Bob says, hey Lindsay I actually got an idea how we can approach this, do you mind if I navigate.

[00:09:18]
So Bob's job is now going to be to talk through an approach to solving this problem and her hands are never going to touch the keyboard. If she feels, man, Lindsay, just I know what I want you to do, that's the moment where her technical communication gets to level up.

[00:09:36]
Because she needs to be able to explicate how to solve the problem to Lindsay such that Lindsay can actually type it out on the keyboard. So for example, Bob says, all right, Lindsay, let's start by declaring a function. Let's call it append tweets. Let's have it be passed the parameter.

[00:09:57]
Let's call it tweets array. That's a placeholder. And the body of the function, let's iterate through that tweets array, loop through it. Take each string, each tweet and pass the tweet string to jQuery's built-in append method. And let's call that append method on the DOM element with the class name, let's call it tweetscontainer, let's call it that.

[00:10:24]
And now, at this point, so you've used their research, and Bob has spoken in pseudo code. And she's never put her hands on the keyboard. And now Lindsey, she is our driver. So, she is actually at the keyboard. She is going, okay, declare a function, append tweets. All right, function, append tweets.

[00:10:43]
Parens, tweetsarray is the parameter, tweetsarray, close parens, open curly braces, iterate through the input. For open parens, let i equal zero semicolon, and at no point did Barb say, Lindsay, function, append tweets. Open paren. No, she was saying all this precise pseudo code which we'll all be working on today, as Ameen said, we're declaring the function multiplied by two.

[00:11:14]
We are declaring output and assigning it to the return value of the call two multiplied by two with the argument four. That pseudo code is what Lindsay's turning into actual code on the keyboard. Okay, what this does is it ensures that Bob has enough understanding to be able to talk through it but not too much that she's stopped and not coded and that Lindsay has the ability to interpret that precise pseudo code.

[00:11:48]
After about ten to 15 minutes they can swap over. Now, you may hit a block and be like, damn, we've no idea how to solve this. So yeah, as always, try figuring stuff out. But if you have an idea, force yourself, actually, Bob I have an idea. Do you mind driving?

[00:12:03]
And so Lindsay's going to explain her idea. In that moment where you're like, let me just try this. Or, can we just cancel all that. Force yourself to have the other person be navigated through it by you. And, by the way, Bob thinks that Lindsay is making a horrible mistake.

[00:12:20]
Or, Lindsay thinks Bob is making a horrible mistake. Let's be equal. Lindsay thinks Bob is making a horrible mistake. She does not say stop, stop, stop, stop. Let me show you how to do it. She does not do that. She let's the, she just quietly sits there, smugly [INAUDIBLE].

[00:12:34]
[LAUGH] She quietly sits there, goes um-hmm, um-hmm, yeah, keep going. No, no, no. By the way, half the time, the smugness is wiped off her face. Bob, I don't think you're actually like this. I think you're charming. Half the time, actually it turns out Lindsey had a different approach to what Bob thought, and it kinda worked.

[00:12:53]
It worked anyway, but half of the time actually you know what Bob's approach was totally wrong. So Lindsey is typing to Bob's approach, and Bob is really wrong, but now Lindsay, even though she thinks she knew a better approach, they press run in the console. They see the error appear, it says, you know, undefined is not a function.

[00:13:13]
And now they get to debug as a pair together as well. All right, this has been a long introduction to pair programming. Anyone got questions on how to pair program effectively, we're going to be doing it for two days. So we want to really know like, what if this happens?

[00:13:29]
What if I feel this? How do people know? Don't be a driver, a dual driver-navigator, in other words, don't be typing and explaining. I'm going to be wandering around, if I wanna be clear who's driving navigator any point. But also let me tell you, it's an aspiration. And the best execution of pair programming is just, if I have an idea of how to solve it, I am not going to have my hands on the keyboard, the other person is, and it will communicate them through and explain how to solve it.

[00:13:57]
Are there any questions on how to pair?

