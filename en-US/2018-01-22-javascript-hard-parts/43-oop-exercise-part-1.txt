[00:00:00]
>> Speaker 1: We are gonna map through this folk, line by line, as we begin to go through OOP. Andrew, what are we doing?
>> Speaker 2: Defining user1 as that object?
>> Speaker 1: As that object, excellent. There it is.
>> Speaker 1: Okay, now, what properties are we storing on it, Andrew?
>> Speaker 2: Name, score and increment.

[00:00:25]

>> Speaker 1: Yeah, and what's the value in each? I'm really just dragging this out right now, Andrew, so help me out.
>> Speaker 2: Will, 3 and that function.
>> Speaker 1: Yeah. Notice I give myself a lower score than my friend because it would be pretty terrible if I gave myself a higher score than the other self-aggrandizing score 100.

[00:00:45]

>> [LAUGH]
>> Speaker 2: I do that, but then I change it just before I come in here.
>> Speaker 1: When I'm reading through I see 100 exactly, score 100, all right. Katie, focus. Okay, what do we say, Andrew you're right, yes, we've declared the user1 object, there it is. Draw objects like this with name Will, score 3 and increment is what, Andrew?

[00:01:26]

>> Speaker 2: That function.
>> Speaker 1: That function definition. And we call them methods, don't we, when they're on objects. Is it being called at this point? No, we just defined it, associated with the anonymous function value, the function value with the property increment. And now we hit the next line of code.

[00:01:44]
Andrew, what's the next line of code in the global execution context tell us to do? Increment user1 [CROSSTALK] function? Yeah, let's be really precise here. I want us to be really precise here. Firstly, when it sees this line, what's the first thing JavaScript has to work out, Andrew?

[00:02:01]

>> Speaker 2: Get that object-
>> Speaker 1: User1 object, exactly, it's gotta go look for it and see, does this guy exist? Yep, there it is. And then, does this increment property exist? There it is. And does the function code? It's a function, great. So I can start creating, everyone together a new-

[00:02:19]

>> Speaker 2: Execution context.
>> Speaker 1: Beautiful, such rich, mellifluous tones. Okay, indeed, so in we go.
>> Speaker 1: Call stack gets user1.increment on the top of it, global just below. And we had our local memory. Okay, now, we know we got the increment code from the user1 function, and in here it says user1.score++.

[00:02:57]
So there's nothing being declared in local, says user1.score++. Is user1 here in local? No, it's not. So where do we look for user1? In global, cuz it's next on the call stack, and what do we find? We find score, and we increment it to 4, perfect. Our fundamental goal of running a method directly on our data encapsulated in an object, so it's all bundled together in one place, which makes our lives so easy.

[00:03:29]
Because I can move this object, user1, anywhere in my code, and know the functionality is going to be available right on it. This is wonderful for writing code at scale. We've achieved it here.

