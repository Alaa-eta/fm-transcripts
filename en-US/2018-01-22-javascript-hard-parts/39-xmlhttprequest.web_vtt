WEBVTT

1
00:00:00.160 --> 00:00:03.380
&gt;&gt; Will: We're gonna go through it line
by line and see it play out in action.

2
00:00:03.380 --> 00:00:06.690
This is our final function for
asynchronous JavaScript.

3
00:00:06.690 --> 00:00:10.340
Line one, what are we creating?

4
00:00:10.340 --> 00:00:12.040
&gt;&gt; Arthur: We're declaring
the display function.

5
00:00:13.200 --> 00:00:20.350
&gt;&gt; Will: Exactly, we're declaring,
we're defining the display function.

6
00:00:20.350 --> 00:00:22.325
There it is.

7
00:00:22.325 --> 00:00:23.320
&gt;&gt; Will: Good.

8
00:00:24.360 --> 00:00:30.456
Line two, so
this line here is using jQuery's library,

9
00:00:30.456 --> 00:00:35.028
but we are really, inside this function,

10
00:00:35.028 --> 00:00:38.721
we are going to do something else.

11
00:00:38.721 --> 00:00:42.097
That this function does actually
create an execution context in

12
00:00:42.097 --> 00:00:43.730
the conventional sense.

13
00:00:43.730 --> 00:00:45.644
Unlike setTimeout,
which is built into JavaScript,

14
00:00:45.644 --> 00:00:51.600
$.get is not building to JavaScript, but
it wraps up some built-in functionality.

15
00:00:51.600 --> 00:00:58.410
So we're not going to look into how $.get
works, it's just a jQuery function.

16
00:00:58.410 --> 00:01:04.546
But what it does do inside of it, which we
can do ourselves manually in JavaScript,

17
00:01:04.546 --> 00:01:08.570
is spin up and
speak to a web browser feature, API.

18
00:01:08.570 --> 00:01:13.070
Web browser feature, the one that
does web requests, data requests.

19
00:01:13.070 --> 00:01:14.453
That's what happens inside this $.get.

20
00:01:14.453 --> 00:01:18.743
So we're gonna treat it like it's
a built-in function, so it's not going to

21
00:01:18.743 --> 00:01:23.350
create an execution constant on the call
stack in the conventional sense.

22
00:01:23.350 --> 00:01:25.280
It is,
because it's not a built-in function,

23
00:01:25.280 --> 00:01:28.480
it's gonna inside itself,
use a built-in function.

24
00:01:28.480 --> 00:01:31.750
But unlike the setTimeout,
which is very simple single line,

25
00:01:31.750 --> 00:01:36.990
the setting up the built-in function that
makes a web request is four or five lines.

26
00:01:36.990 --> 00:01:40.290
So we've wrapped it in this $.get.

27
00:01:41.500 --> 00:01:42.130
Just think of it,

28
00:01:42.130 --> 00:01:46.910
just like setTimeout, it's not gonna do
anything interesting in JavaScript land,

29
00:01:46.910 --> 00:01:51.780
it's going to speak to web browser
feature land, just like setTimeout does.

30
00:01:51.780 --> 00:01:54.580
Actually, it does a few things but
they're not relevant to what we,

31
00:01:54.580 --> 00:01:56.010
they're not important.

32
00:01:56.010 --> 00:02:01.770
All it does is spin up something in web
browser feature land, not JavaScript land.

33
00:02:01.770 --> 00:02:06.781
So on that note, let's see that happen.

34
00:02:06.781 --> 00:02:10.410
$.get, just like setTimeout,
we're gonna invoke it.

35
00:02:10.410 --> 00:02:15.514
We're gonna parse to it,
this string, which is a URL,

36
00:02:15.514 --> 00:02:21.750
to somewhere on the Internet,
this is a pretend API address.

37
00:02:21.750 --> 00:02:27.220
Somewhere on the Internet
where we have supposedly,

38
00:02:27.220 --> 00:02:31.280
a single tweet,
which we can access from our API.

39
00:02:31.280 --> 00:02:34.260
How wonderfully convenient and
unlikely that is.

40
00:02:35.480 --> 00:02:41.300
And we're gonna parse to it,
this whole function definition,

41
00:02:41.300 --> 00:02:46.599
not calling this function,
just its definition, okay?

42
00:02:46.599 --> 00:02:48.960
Now, how do I know what
this is gonna look like?

43
00:02:48.960 --> 00:02:53.766
Well, I go and look at the documentation
for JavaScript, or in this case, jQuery,

44
00:02:53.766 --> 00:02:57.236
and look and see, what do I
expect to parse to this function?

45
00:02:57.236 --> 00:03:03.210
If it says parse a URL, an API address
that I can go and get data from, and

46
00:03:03.210 --> 00:03:10.530
a function that will be run when this API
request, is request the data is complete.

47
00:03:10.530 --> 00:03:15.249
So even though this does actually create
an execution context because inside of

48
00:03:15.249 --> 00:03:18.410
$.get is not a built-in function
to JavaScript, inside of it,

49
00:03:18.410 --> 00:03:21.760
it's using built-in functions
that speak to APIs.

50
00:03:21.760 --> 00:03:26.160
So it's going to treat it the same way,
and rather than say,

51
00:03:26.160 --> 00:03:29.701
creates execution context,
we're gonna say,

52
00:03:29.701 --> 00:03:33.800
it speaks to web browser feature,
which feature?

53
00:03:33.800 --> 00:03:35.300
Well, it speaks to another one,
we can go and

54
00:03:35.300 --> 00:03:36.610
see a list of all these features on MDN.

55
00:03:36.610 --> 00:03:39.814
We've seen timer,

56
00:03:39.814 --> 00:03:45.661
this one is called XHR HttpRequest.

57
00:03:47.620 --> 00:03:49.320
&gt;&gt; Will: And what's it's taking in?

58
00:03:49.320 --> 00:03:52.100
Well, and remember this is
not a JavaScript function in

59
00:03:52.100 --> 00:03:56.888
the conventional sense,
this is a browser feature, a browser API.

60
00:03:56.888 --> 00:04:00.334
That term is a bit confusing because
it itself is going to make a request to

61
00:04:00.334 --> 00:04:02.150
an API, but it's a browser feature.

62
00:04:02.150 --> 00:04:05.011
And it takes in our functionality and
our, or

63
00:04:05.011 --> 00:04:09.540
reference to our functionality and
our URL that we're gonna speak to.

64
00:04:10.860 --> 00:04:15.621
And down here in web browser API land, we,

65
00:04:15.621 --> 00:04:18.941
yes, create, look at this.

66
00:04:21.927 --> 00:04:26.054
&gt;&gt; Will: XHR HttpRequest
before we create a timer,

67
00:04:26.054 --> 00:04:31.070
now we're gonna create an XHR HttpRequest.

68
00:04:31.070 --> 00:04:39.990
And associated with it, is our
functionality which we call display.

69
00:04:39.990 --> 00:04:42.976
And we really clear, it doesn't care
who display, that's all in JavaScript.

70
00:04:42.976 --> 00:04:47.670
That's just down here, and is it complete?

71
00:04:47.670 --> 00:04:50.321
Now before our timer completed instantly,

72
00:04:50.321 --> 00:04:55.900
this one ain't gonna complete instantly,
this one's gonna go and do some work.

73
00:04:55.900 --> 00:04:59.610
So firstly, it's got to figure out
what is it going to be sending?

74
00:04:59.610 --> 00:05:00.550
Where is it even going?

75
00:05:00.550 --> 00:05:01.920
Where is it even sending out information?

76
00:05:01.920 --> 00:05:05.930
Well, it's sending out to twitter.com.

77
00:05:05.930 --> 00:05:10.690
And I'm not gonna get into exactly
how that API request works, but

78
00:05:10.690 --> 00:05:16.560
just know that this is a feature of the
browser, Chrome or Firefox, or whatever.

79
00:05:16.560 --> 00:05:22.188
It's a feature of the browser that allows
our web browser to speak to the Internet

80
00:05:22.188 --> 00:05:27.258
and therefore, to Twitter's server
where this data is gonna be found.

81
00:05:27.258 --> 00:05:31.370
So it's gonna bundle up
a message to send off,

82
00:05:31.370 --> 00:05:35.730
known as an HTTP request,
to get this data.

83
00:05:35.730 --> 00:05:39.119
It has a URL, it has a method,

84
00:05:39.119 --> 00:05:43.910
a method which is, I'm getting data.

85
00:05:43.910 --> 00:05:47.390
Server, expect me to be
wanting to receive some data.

86
00:05:47.390 --> 00:05:49.130
We know that because we used this get,

87
00:05:49.130 --> 00:05:54.700
so in a way this get also makes its
way in to access our HTTP request.

88
00:05:54.700 --> 00:05:58.450
And we want to know
exactly what data we need.

89
00:05:58.450 --> 00:06:02.162
Well, it's /willsend/tweet/1.

90
00:06:02.162 --> 00:06:04.147
There we go.

91
00:06:04.147 --> 00:06:10.102
Those are the things,
and this becomes a big,

92
00:06:10.102 --> 00:06:17.915
old message that gets sent off to,
&gt;&gt; Will: Twitters,

93
00:06:17.915 --> 00:06:23.110
Twitter LLC, so to speak, service, and

94
00:06:23.110 --> 00:06:28.460
at this point, $.get has done its work.

95
00:06:29.940 --> 00:06:31.880
It's done its work, and we are now back.

96
00:06:34.420 --> 00:06:35.780
It's done its work in web browser.

97
00:06:35.780 --> 00:06:40.374
It's done its job of setting
up this web browser feature,

98
00:06:40.374 --> 00:06:44.480
web browser API features
in the background.

99
00:06:44.480 --> 00:06:49.690
And it's done its work, and it's gonna
go back to the global execution context.

100
00:06:49.690 --> 00:06:51.555
Where what do we encounter?

101
00:06:51.555 --> 00:06:54.967
Mohammad, what's the next line
in our global execution context?

102
00:06:54.967 --> 00:06:56.096
&gt;&gt; Mohammad: Log me first.

103
00:06:56.096 --> 00:06:59.230
&gt;&gt; Will: Good, from Manny's eyes,
were slowly falling shut,

104
00:06:59.230 --> 00:07:02.040
that was truly amazing,
stepping up there, well done.

105
00:07:02.040 --> 00:07:05.370
Me first, there it is.

106
00:07:05.370 --> 00:07:08.415
And so, me first happens in
maybe one millisecond, perfect.

107
00:07:08.415 --> 00:07:11.320
In one millisecond, this occurs over here.

108
00:07:11.320 --> 00:07:17.060
Now, what's on our call stack at
this point, where we're in global?

109
00:07:18.490 --> 00:07:24.637
We're in global,
&gt;&gt; Will: We are always in global,

110
00:07:24.637 --> 00:07:29.328
we have done our console log me first.

111
00:07:29.328 --> 00:07:38.010
Me first, we've done that console
log me first, there it is, me first.

112
00:07:38.010 --> 00:07:42.250
But in the background,
is our XHR HttpRequest complete.

113
00:07:42.250 --> 00:07:44.150
Arthur, is it complete yet?

114
00:07:45.670 --> 00:07:46.480
&gt;&gt; Arthur: Should be.

115
00:07:46.480 --> 00:07:47.262
&gt;&gt; Will: Would it be complete immediately?

116
00:07:47.262 --> 00:07:47.811
&gt;&gt; Arthur: No.
&gt;&gt; Will: Yeah,

117
00:07:47.811 --> 00:07:50.399
how long is it gonna take typically?

118
00:07:50.399 --> 00:07:56.401
Maybe a 100 milliseconds,
200 milliseconds to go and

119
00:07:56.401 --> 00:08:01.826
get our data from Twitter's server and
bring it back.

120
00:08:01.826 --> 00:08:08.910
So let's just say, at 200 milliseconds, we
get our data back from Twitter's servers.

121
00:08:08.910 --> 00:08:14.765
And it comes back, and it's parsed
into the form of an object with,

122
00:08:14.765 --> 00:08:17.744
this is a little bit approximate,

123
00:08:17.744 --> 00:08:21.970
an object with a property post,
that says, hi.

124
00:08:23.134 --> 00:08:26.430
Perfect, we've got our data
back at about 200 milliseconds.

125
00:08:26.430 --> 00:08:31.830
Now at this point, Katie,
what do you think is going to happen,

126
00:08:31.830 --> 00:08:38.550
now that we've complete, we have now
completed this background API request.

127
00:08:39.630 --> 00:08:44.206
This background XHR HttpRequest is
completed, we've got back our data,

128
00:08:44.206 --> 00:08:48.420
we said, go off to Twitter,
try and get this data, this tweet.

129
00:08:48.420 --> 00:08:49.960
We did, back in the data.

130
00:08:49.960 --> 00:08:53.230
What do we think's going to happen now,
Katie, at this point?

131
00:08:53.230 --> 00:08:54.740
We have completed the function.

132
00:08:54.740 --> 00:08:56.148
&gt;&gt; Shelby: Shelby.
&gt;&gt; Will: Shelb, sorry, my.

133
00:08:56.148 --> 00:08:58.360
&gt;&gt; Shelby: [LAUGH]
&gt;&gt; Will: Where's Katie?

134
00:08:58.360 --> 00:09:01.848
See, I never really had a problem
with confusing redheads before.

135
00:09:01.848 --> 00:09:03.340
&gt;&gt; Shelby: The hair color?

136
00:09:03.340 --> 00:09:04.530
&gt;&gt; Will: But
this has been an ongoing issue.

137
00:09:04.530 --> 00:09:05.400
Sorry, Shelby.

138
00:09:05.400 --> 00:09:07.180
Go ahead, Shelby.

139
00:09:07.180 --> 00:09:08.183
&gt;&gt; Shelby: Push it to the call stack?

140
00:09:08.183 --> 00:09:09.221
&gt;&gt; Will: Push it, meaning?

141
00:09:09.221 --> 00:09:11.222
&gt;&gt; Shelby: The-
&gt;&gt; Will: What functionality?

142
00:09:11.222 --> 00:09:12.598
&gt;&gt; Shelby: Display.
&gt;&gt; Will: Display function,

143
00:09:12.598 --> 00:09:16.450
exactly the code, and
do we have anything left to run in global?

144
00:09:16.450 --> 00:09:19.200
No we don't, so no problem, exactly.

145
00:09:19.200 --> 00:09:23.672
I already said you're my favorite
person in the class, Shelby,

146
00:09:23.672 --> 00:09:28.730
right on top we call our display function,
we call our display function.

147
00:09:29.970 --> 00:09:32.580
Now, we were waiting to run display.

148
00:09:32.580 --> 00:09:35.220
We wanted to defer, why did we want to
defer the display in the first place?

149
00:09:36.670 --> 00:09:38.830
&gt;&gt; Shelby: We were waiting for the data
&gt;&gt; Will: For the data to come back,

150
00:09:38.830 --> 00:09:39.986
yeah, so.

151
00:09:39.986 --> 00:09:41.255
Yes, Shelby.

152
00:09:41.255 --> 00:09:47.250
So, [LAUGH] Exactly, exactly as you say.

153
00:09:47.250 --> 00:09:51.090
We were waiting for the display,
we'ere waiting for the data to come back.

154
00:09:51.090 --> 00:09:56.150
So this display functionality,
the way this XHR HttpRquest

155
00:09:56.150 --> 00:10:02.080
feature of JavaScript works is that,
this display functionality when

156
00:10:03.860 --> 00:10:08.870
the post, when the data comes back,

157
00:10:08.870 --> 00:10:13.490
it's going to bond itself to
this display functionality.

158
00:10:13.490 --> 00:10:16.870
So when we push display to the call stack,

159
00:10:16.870 --> 00:10:21.340
its first parameter is gonna be filled
in with what, do you think, Katie?

160
00:10:23.680 --> 00:10:25.900
&gt;&gt; Katie: The data that is retained.

161
00:10:25.900 --> 00:10:28.107
&gt;&gt; Will: The data, exactly.

162
00:10:28.107 --> 00:10:29.210
&gt;&gt; Katie: The post.

163
00:10:29.210 --> 00:10:34.840
&gt;&gt; Will: This object here is going to fill
in, I'm gonna be calling the display.

164
00:10:34.840 --> 00:10:38.810
Right now, it's just definition, I'm gonna
call it, this definition has a, now, this

165
00:10:38.810 --> 00:10:45.360
is not exactly how the function works,
but it has a first argument called data,

166
00:10:45.360 --> 00:10:50.430
something like that, that data will be
filled in with the data that came back.

167
00:10:50.430 --> 00:10:53.870
Now, how do we know whether it's
the first argument, the second argument?

168
00:10:53.870 --> 00:10:55.420
The first argument is actually
typically an error argument.

169
00:10:55.420 --> 00:10:57.500
How do we even know?

170
00:10:57.500 --> 00:10:58.530
Documentation.

171
00:10:58.530 --> 00:11:02.877
Documentation of XHR HttpRequest or
documentation of a $.get will say,

172
00:11:02.877 --> 00:11:07.293
the first argument of the call back
function that gets executed when the data

173
00:11:07.293 --> 00:11:11.990
returns, will be populated on execution
with the data from the Twitter server.

174
00:11:11.990 --> 00:11:16.250
Or it will say the first argument
actually is an error parameter,

175
00:11:16.250 --> 00:11:21.129
which will be filled in with any error
if an error comes back when the display

176
00:11:21.129 --> 00:11:26.397
function ends up being executed, the first
argument will be filled with error,

177
00:11:26.397 --> 00:11:30.360
the second argument will
be our data from the API.

178
00:11:30.360 --> 00:11:35.660
Different functionality, different
features will work in different ways.

179
00:11:35.660 --> 00:11:38.980
And that's not magic, it's just,
it's out there ready for us to go find.

180
00:11:38.980 --> 00:11:40.940
We have to go look at the documentation.

181
00:11:40.940 --> 00:11:44.501
So, Bob, at this point.

182
00:11:44.501 --> 00:11:45.390
Bob.

183
00:11:45.390 --> 00:11:50.590
We have completed our web
browser API browser feature,

184
00:11:50.590 --> 00:11:52.990
XHR HttpRequest has been completed.

185
00:11:52.990 --> 00:11:54.990
We've got our data back
from Twitter's server.

186
00:11:54.990 --> 00:11:59.500
We've therefore now gonna pass our
call to display to our call stack.

187
00:11:59.500 --> 00:12:01.890
When we start executing a function Bob,
executing a function,

188
00:12:01.890 --> 00:12:03.950
we get a brand new Bob.

189
00:12:03.950 --> 00:12:05.080
&gt;&gt; Bob: Execution contact.

190
00:12:05.080 --> 00:12:06.940
&gt;&gt; Will: Excellent Bob, correct.

191
00:12:06.940 --> 00:12:11.980
And what is that execution contact for,
but a call to display.

192
00:12:11.980 --> 00:12:13.970
There it is, and what's being passed,

193
00:12:13.970 --> 00:12:17.210
what exact thing is being passed,
Katie, to display?

194
00:12:17.210 --> 00:12:18.210
&gt;&gt; Katie: The objects.

195
00:12:18.210 --> 00:12:22.960
&gt;&gt; Will: Exactly, there it is,
with post if high.

196
00:12:24.240 --> 00:12:30.190
And we are creating context with
the functionality of display.

197
00:12:30.190 --> 00:12:32.360
Note, where are we calling display?

198
00:12:32.360 --> 00:12:34.970
Are we calling it inside $.get?

199
00:12:34.970 --> 00:12:36.000
No, we are definitely not.

200
00:12:36.000 --> 00:12:39.210
Easy confusion to think that
somehow displays being run inside.

201
00:12:39.210 --> 00:12:44.144
No, we did $.get, we moved just like
setTimeout, we moved straight on

202
00:12:44.144 --> 00:12:48.123
all that $.get was spin up and
[INAUDIBLE] to be a request and

203
00:12:48.123 --> 00:12:51.964
pass a reference of the function
that we pass to $.get.

204
00:12:51.964 --> 00:12:55.760
Now again,
$.get is actually a JavaScript function.

205
00:12:55.760 --> 00:12:59.505
But inside of it, it's behaving
just like a setTimeout would, and

206
00:12:59.505 --> 00:13:02.855
that it's spinning as to any job
is to spin up to reference and

207
00:13:02.855 --> 00:13:06.430
create using the web browser
feature XHR HttpRequest.

208
00:13:06.430 --> 00:13:13.080
A request off to the Twitter API and
that's all happening here separately and

209
00:13:13.080 --> 00:13:18.620
in JavaScript land, we moved straight on,
we did not wait for that day to come back.

210
00:13:18.620 --> 00:13:22.460
When we run console log,
we're at about one millisecond.

211
00:13:22.460 --> 00:13:27.670
We are not 200 milliseconds later,
but now, our data's come back,

212
00:13:27.670 --> 00:13:34.230
we're at about 201 milliseconds
when we start calling the display.

213
00:13:34.230 --> 00:13:37.770
We're at about 201 milliseconds, when
we start calling the display function.

214
00:13:37.770 --> 00:13:39.120
And we're executing it.

215
00:13:39.120 --> 00:13:39.770
So Griffin,

216
00:13:39.770 --> 00:13:45.710
what's the first thing inside our local
memory of our display function, Griffin?

217
00:13:45.710 --> 00:13:46.800
&gt;&gt; Griffin: That would be the data.

218
00:13:46.800 --> 00:13:51.063
&gt;&gt; Will: That would be the data
parameter which now has what associate,

219
00:13:51.063 --> 00:13:53.530
what value associated with it?

220
00:13:53.530 --> 00:13:55.270
&gt;&gt; Griffin: B, the post and I.

221
00:13:55.270 --> 00:13:56.240
&gt;&gt; Will: So the whole object, right?

222
00:13:56.240 --> 00:14:01.030
Yeah, with post Is high.

223
00:14:01.030 --> 00:14:05.740
So when I hit the line, console of
data.post, I do console look for

224
00:14:05.740 --> 00:14:07.250
data, post.

225
00:14:07.250 --> 00:14:08.460
What do I console log?

226
00:14:08.460 --> 00:14:11.026
&gt;&gt; Griffin: High?
&gt;&gt; Will: High, there it is,

227
00:14:11.026 --> 00:14:15.029
at about 201 milliseconds.

228
00:14:17.190 --> 00:14:19.930
Me first was done at
about one millisecond.

229
00:14:19.930 --> 00:14:24.625
So again, we've now used
a different background browser API.

230
00:14:24.625 --> 00:14:28.765
Now I'm gonna give you all of them,
your job is to go and

231
00:14:28.765 --> 00:14:31.377
figure out that all listed in MDN,

232
00:14:31.377 --> 00:14:37.230
will they all work this same way as
when you use a built-in function $.get,

233
00:14:37.230 --> 00:14:41.950
inside of it, uses a built-in
function that creates this.

234
00:14:41.950 --> 00:14:48.760
Makes a reference or makes a spins
up a background web browser feature.

235
00:14:48.760 --> 00:14:53.910
In this case, it's the data request
feature, the HttpRequest feature.

236
00:14:53.910 --> 00:14:57.510
It could be a timer, it could be
with a old bunch of them, in node,

237
00:14:57.510 --> 00:14:59.220
there is a whole bunch of them as well.

238
00:14:59.220 --> 00:15:02.210
They are all speaking to
a non-JavaScript land,

239
00:15:02.210 --> 00:15:05.040
this is not JavaScript,
this is not JavaScript.

240
00:15:07.350 --> 00:15:11.440
Let's make sure we add in our
two other pieces of this puzzle.

241
00:15:11.440 --> 00:15:17.892
Actually, what happens between,
&gt;&gt; Will: Actually,

242
00:15:17.892 --> 00:15:24.316
what happens between our completion and
getting back on the course at,

243
00:15:24.316 --> 00:15:30.100
well, it's the display
functionality is queued up.

244
00:15:30.100 --> 00:15:37.430
Display is queued up with its
associated data that came back.

245
00:15:37.430 --> 00:15:39.130
There's our associated data.

246
00:15:41.630 --> 00:15:43.690
&gt;&gt; Will: With this associated data.

247
00:15:43.690 --> 00:15:47.850
And then we checked,
was the call stack clear?

248
00:15:48.910 --> 00:15:50.490
Let's just go back a second.

249
00:15:50.490 --> 00:15:52.470
We checked, was the call stack clear.

250
00:15:52.470 --> 00:15:55.690
We said, hold on,
is there something in the call back queue?

251
00:15:55.690 --> 00:15:57.370
Is the call stack that clear?

252
00:15:57.370 --> 00:16:00.380
That's known as the event loop.

253
00:16:00.380 --> 00:16:02.470
That is not literally.

254
00:16:02.470 --> 00:16:04.990
I try to like desperately
call an event loop,

255
00:16:04.990 --> 00:16:06.850
because it's not literally looping and
checking.

256
00:16:06.850 --> 00:16:10.130
But we can think of it in under deep
down the hood, it's not looping, but

257
00:16:10.130 --> 00:16:12.980
it's basically checking,
is the call stack clear.

258
00:16:12.980 --> 00:16:13.670
Is it clear,

259
00:16:13.670 --> 00:16:18.140
every millisecond is it checking, is it
clear, is it clear, is it clear, is it.

260
00:16:18.140 --> 00:16:19.100
It's clear?
Well of course,

261
00:16:19.100 --> 00:16:20.715
it's clear because it's
200 milliseconds later and

262
00:16:20.715 --> 00:16:21.910
there's nothing else in our code.

263
00:16:21.910 --> 00:16:24.130
Console log, finish at one millisecond.

264
00:16:24.130 --> 00:16:28.880
So were done, so it's definitely clear and
instantly we can de-queue

265
00:16:28.880 --> 00:16:33.460
display and push it to the call stack.

266
00:16:33.460 --> 00:16:34.250
There it is.

267
00:16:34.250 --> 00:16:42.011
Display push to the call stack
at about 201 milliseconds.

268
00:16:42.011 --> 00:16:44.590
At about 201 milliseconds.

269
00:16:44.590 --> 00:16:53.420
201 milliseconds with our data
that came back from the API.

270
00:16:53.420 --> 00:16:55.276
Those are all our parts.

271
00:16:55.276 --> 00:16:59.507
And look,
we took this display functionality,

272
00:16:59.507 --> 00:17:05.594
passed to the call back queue and
then it once the event loop said good,

273
00:17:05.594 --> 00:17:10.237
we're good to go,
de-queued display and added it,

274
00:17:10.237 --> 00:17:17.280
pushed it to the call stack where it then
got executed just as we thought through.

275
00:17:18.440 --> 00:17:23.050
You can see how, in these simple examples,
this portion here doesn't really have any

276
00:17:23.050 --> 00:17:27.460
consequence, but for more complex
examples, where we have things blocking in

277
00:17:27.460 --> 00:17:32.200
the main thread or where we have multiple
requests, then this becomes very relevant.

278
00:17:32.200 --> 00:17:37.270
And as each request completes,
it's gonna queue up the relevant

279
00:17:37.270 --> 00:17:42.270
call back function that's been associated
with the particular web browser API.

280
00:17:42.270 --> 00:17:44.250
So we can spin up as many as we want.

281
00:17:44.250 --> 00:17:46.460
We can have 30 XHR HttpRequests.

282
00:17:46.460 --> 00:17:47.120
All going here.

283
00:17:47.120 --> 00:17:51.360
As each one of them completes their
function in order of the completion,

284
00:17:51.360 --> 00:17:54.195
it's going to be par for
the call back queue, queued up.

285
00:17:54.195 --> 00:17:56.336
Now, in order of when these
requests were made, but

286
00:17:56.336 --> 00:17:57.756
just in order of that completion.

