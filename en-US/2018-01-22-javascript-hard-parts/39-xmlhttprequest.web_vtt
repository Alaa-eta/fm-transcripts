WEBVTT

1
00:00:00.044 --> 00:00:01.969
&gt;&gt; Will Sentance: We're gonna
go through it line by line and

2
00:00:01.969 --> 00:00:03.240
see it play out in actions.

3
00:00:03.240 --> 00:00:06.536
This is our final function for
Asynchronous JavaScript.

4
00:00:06.536 --> 00:00:10.288
Line 1, Art, what are we creating?

5
00:00:10.288 --> 00:00:13.057
&gt;&gt; Art: We're declaring
the display function.

6
00:00:13.057 --> 00:00:15.983
&gt;&gt; Will Sentance: Exactly,
we're declaring,

7
00:00:15.983 --> 00:00:21.053
we're defining the display function,
there it is.

8
00:00:22.892 --> 00:00:31.128
&gt;&gt; Will Sentance: Good, line 2, so
this line here is using jQuery's library.

9
00:00:31.128 --> 00:00:38.686
But we are really inside this function,
we're going to do something else.

10
00:00:38.686 --> 00:00:42.726
Like this function does actually create
an execution context in the conventional

11
00:00:42.726 --> 00:00:45.839
sense, unlike set timeout,
which is built into JavaScript.

12
00:00:45.839 --> 00:00:51.410
$.get is not built into javascript, but
it wraps up some built in functionality.

13
00:00:51.410 --> 00:00:58.190
So we're not going to look into how $.get
works, it's just a jQuery function.

14
00:00:58.190 --> 00:01:03.207
But what it does do inside of it,
which we can do ourselves manually

15
00:01:03.207 --> 00:01:07.880
in JavaScript, is spin up and
speak to a web browser feature.

16
00:01:07.880 --> 00:01:12.936
API, web browser feature, the one that
does web requests, data requests.

17
00:01:12.936 --> 00:01:15.304
That's what happens inside this $.get.

18
00:01:15.304 --> 00:01:18.936
So we're gonna treat it like
it's a built in function.

19
00:01:18.936 --> 00:01:21.852
So it's not going to create an execution
console in the course like in

20
00:01:21.852 --> 00:01:25.035
the conventional sense, it is,
because it's not a built-in function.

21
00:01:25.035 --> 00:01:28.257
It's got inside itself,
use a built in function.

22
00:01:28.257 --> 00:01:31.749
But unlike the set timer which
is very simple single line,

23
00:01:31.749 --> 00:01:36.817
the setting up the built-in function that
makes a web request is four or five lines.

24
00:01:36.817 --> 00:01:41.296
So we've wrapped it in this $.get.

25
00:01:41.296 --> 00:01:43.423
Just think of it just like set time out,

26
00:01:43.423 --> 00:01:46.718
it's not gonna do anything
interesting in JavaScript LAN.

27
00:01:46.718 --> 00:01:49.971
It's going to speak to
web browser feature LAN.

28
00:01:49.971 --> 00:01:51.578
Just like set timeout does.

29
00:01:51.578 --> 00:01:54.622
Actually, it does a few things, but
they're not relevant to what we,

30
00:01:54.622 --> 00:01:55.750
they're not important.

31
00:01:55.750 --> 00:02:01.578
All it does is spin up some thing in web
browser feature LAN, not JavaScript LAN.

32
00:02:01.578 --> 00:02:05.891
So on that note, let's see that happen.

33
00:02:05.891 --> 00:02:11.575
$.get, just like set timeout,
we're gonna invoke it.

34
00:02:11.575 --> 00:02:16.374
We're gonna pass to it this
string which is a URL,

35
00:02:16.374 --> 00:02:21.649
to somewhere on the Internet
as a pretend API address.

36
00:02:21.649 --> 00:02:29.191
Somewhere on the Internet where we
have supposedly a single Tweet.

37
00:02:29.191 --> 00:02:34.003
Which we can access from our API
how wonderfully convenient, and

38
00:02:34.003 --> 00:02:35.412
unlikely that is.

39
00:02:35.412 --> 00:02:40.828
And we're gonna pass to it this
whole function definition,

40
00:02:40.828 --> 00:02:46.042
not calling this function,
just its definition, okay?

41
00:02:46.042 --> 00:02:48.716
Now, how do I know what
this is gonna look like?

42
00:02:48.716 --> 00:02:53.506
Well, I go and look at the documentation
for JavaScript, or in this case, jQuery.

43
00:02:53.506 --> 00:02:57.419
And look and see, what do I
expect to pass for this function?

44
00:02:57.419 --> 00:03:03.558
Or, it says pass a URL, an API address
that I can go and get data from, and

45
00:03:03.558 --> 00:03:10.318
a function that will be run when this API
request is request to data is complete.

46
00:03:10.318 --> 00:03:12.860
So even though this does
actually create and

47
00:03:12.860 --> 00:03:17.255
execution context because inside
the $.get is not a built-in function to

48
00:03:17.255 --> 00:03:21.597
JavaScript inside of it it's using
built-in functions to speak to APIs.

49
00:03:21.597 --> 00:03:26.696
So it's gonna treat it the same way and
rather than say create and

50
00:03:26.696 --> 00:03:32.471
execution context we're gonna say,
it speaks to web browser feature.

51
00:03:32.471 --> 00:03:33.613
Which feature?

52
00:03:33.613 --> 00:03:35.294
Well, it speaks to another one.

53
00:03:35.294 --> 00:03:37.843
We can go and
see a list of all these features on MDN.

54
00:03:37.843 --> 00:03:43.170
We've seen timer, this one is called

55
00:03:43.170 --> 00:03:49.167
xhrHttpRequest, and what's it take in?

56
00:03:49.167 --> 00:03:54.324
Well, remember this is not a JavaScript
function in the conventional,

57
00:03:54.324 --> 00:03:57.379
this is a browser feature, a browser API.

58
00:03:57.379 --> 00:04:01.342
That sounds a bit confusing because it
itself going to make a request to an API,

59
00:04:01.342 --> 00:04:02.852
but it's a browser feature.

60
00:04:02.852 --> 00:04:06.523
And it takes in our functionality or
reference or

61
00:04:06.523 --> 00:04:10.652
functionality and
our URL that we're gonna speak to.

62
00:04:10.652 --> 00:04:16.326
And down here in Web Browser API LAN,

63
00:04:16.326 --> 00:04:21.268
we yes, create, look at this,

64
00:04:21.268 --> 00:04:28.058
xhrHttpRequest before we created a timer.

65
00:04:28.058 --> 00:04:31.017
Now, we're gonna create a xhrHttpRequest.

66
00:04:31.017 --> 00:04:39.794
And associated with it is our
functionality which we call display.

67
00:04:39.794 --> 00:04:42.770
And to be really clear it doesn't care
it's all display that's all in JavaScript.

68
00:04:42.770 --> 00:04:45.764
That's just down here.

69
00:04:45.764 --> 00:04:47.736
And, is it complete?

70
00:04:47.736 --> 00:04:52.423
Now, before our timer completed instantly.

71
00:04:52.423 --> 00:04:53.766
This one ain't gonna complete instantly.

72
00:04:53.766 --> 00:04:55.654
This one is gonna go and do some work.

73
00:04:55.654 --> 00:04:59.706
So firstly, it's got to figure out
what is it going to be sending.

74
00:04:59.706 --> 00:05:00.386
Where's it even going?

75
00:05:00.386 --> 00:05:01.799
Where's it even sending out information?

76
00:05:01.799 --> 00:05:06.408
Well, it's sending out to Twitter.com.

77
00:05:06.408 --> 00:05:10.130
And we're not gonna get into
exactly how that API request works.

78
00:05:10.130 --> 00:05:13.711
But just know that this is a feature of
JavaScript, not JavaScript, I'm sorry.

79
00:05:13.711 --> 00:05:17.761
It's a feature of the browser,
Chrome or Firefox, whatever,

80
00:05:17.761 --> 00:05:23.011
it's a feature of the browser that allows
our web browser to speak to the Internet,

81
00:05:23.011 --> 00:05:27.589
and therefore, to Twitter's server
where this data is gonna be found.

82
00:05:27.589 --> 00:05:35.766
So it's gonna bundle up a message to
send off known as an HTTP request,

83
00:05:35.766 --> 00:05:41.323
to get this data,
it has a URL, it has a method.

84
00:05:41.323 --> 00:05:44.296
A method which is I'm getting data,
server,

85
00:05:44.296 --> 00:05:47.205
expect me to be wanting
to receive some data.

86
00:05:47.205 --> 00:05:50.064
We know that because we use this get,

87
00:05:50.064 --> 00:05:54.685
the way this get also makes
it's way in to xhrHttpRequest.

88
00:05:54.685 --> 00:05:58.340
And we want to know
exactly what data we need.

89
00:05:58.340 --> 00:06:04.736
Well, it's /willsen/tweet/1.

90
00:06:04.736 --> 00:06:06.472
There we go, those are the things.

91
00:06:06.472 --> 00:06:10.756
And this becomes a big old
message that gets sent off.

92
00:06:12.386 --> 00:06:17.758
&gt;&gt; Will Sentance: That gets
sent off to Twitter's.

93
00:06:19.553 --> 00:06:24.175
&gt;&gt; Will Sentance: Twitter LLC,
so to speak servers.

94
00:06:24.175 --> 00:06:28.890
And at this point,
$.get has done its work.

95
00:06:28.890 --> 00:06:32.074
It's done its work and we are now back.

96
00:06:34.200 --> 00:06:36.048
&gt;&gt; Will Sentance: It's done
it's work in web browser,

97
00:06:36.048 --> 00:06:38.888
it's done its job of setting
up this web browser feature.

98
00:06:38.888 --> 00:06:44.694
Web Browser API features in
the background, and it's done its work and

99
00:06:44.694 --> 00:06:51.390
it's gonna go back to the global execution
context, where what do we encounter?

100
00:06:51.390 --> 00:06:54.950
Mohamed, what's the next line
in our global execution context?

101
00:06:54.950 --> 00:06:56.072
&gt;&gt; Art: Log me first.

102
00:06:56.072 --> 00:06:59.315
&gt;&gt; Will Sentance: Good, for a man who's
eyes were slowly falling slots that

103
00:06:59.315 --> 00:07:01.974
was truly amazing stepping
up there well done.

104
00:07:01.974 --> 00:07:05.152
Me first, there it is.

105
00:07:05.152 --> 00:07:08.836
And so me first happens at
maybe one millisecond, perfect,

106
00:07:08.836 --> 00:07:11.159
at one millisecond occurs over here.

107
00:07:11.159 --> 00:07:14.019
Now,
&gt;&gt; Will Sentance: What's

108
00:07:14.019 --> 00:07:15.686
on our Call Stack at this point?

109
00:07:15.686 --> 00:07:18.349
Well, we're in global.

110
00:07:18.349 --> 00:07:19.623
We're in global.

111
00:07:21.828 --> 00:07:24.080
&gt;&gt; Will Sentance: We're always in global.

112
00:07:24.080 --> 00:07:31.824
We've done our console log (Me First).

113
00:07:31.824 --> 00:07:35.869
&gt;&gt; Will Sentance: Me First,
we've our console log (Me First),

114
00:07:35.869 --> 00:07:37.848
there it is, Me First.

115
00:07:37.848 --> 00:07:42.891
But in the background is our
xhrHttpRequest complete?

116
00:07:42.891 --> 00:07:45.440
Arthur, is it compete yet?

117
00:07:45.440 --> 00:07:46.367
&gt;&gt; Art: It should be.

118
00:07:46.367 --> 00:07:47.473
&gt;&gt; Will Sentance: Would it
be complete immediately?

119
00:07:47.473 --> 00:07:48.092
&gt;&gt; Art: No.

120
00:07:48.092 --> 00:07:50.093
&gt;&gt; Will Sentance: Yeah,
how long is it gonna take typically?

121
00:07:50.093 --> 00:07:53.425
Maybe 100 milliseconds,
200 milliseconds to go and

122
00:07:53.425 --> 00:07:56.500
get our data from Twitter's server and
bring it back.

123
00:07:56.500 --> 00:08:02.930
So let's just say,
I don't know, 200 milliseconds,

124
00:08:02.930 --> 00:08:07.954
we get our data back
from Twitter's servers.

125
00:08:07.954 --> 00:08:12.927
And it comes back and
it's passed into the form of

126
00:08:12.927 --> 00:08:18.141
an object with,
this is a little bit approximate,

127
00:08:18.141 --> 00:08:22.889
an object with a property post that says,
hi.

128
00:08:22.889 --> 00:08:26.189
Perfect, we've got our data
back at about 200 milliseconds.

129
00:08:26.189 --> 00:08:28.925
Now, at this point, Katie,

130
00:08:28.925 --> 00:08:34.726
what do you think is going to
happen now that we've completed,

131
00:08:34.726 --> 00:08:39.550
we have now completed this
background API request.

132
00:08:39.550 --> 00:08:43.752
This background xhrHttpRequest is
completed, we've got back our data.

133
00:08:43.752 --> 00:08:48.242
We said go off to Twitter, try and
get this data, this tweet.

134
00:08:48.242 --> 00:08:50.108
We did, back in the data.

135
00:08:50.108 --> 00:08:53.706
What do we think is gonna happen now,
Katie, at this point?

136
00:08:53.706 --> 00:08:54.563
We've completed the function?

137
00:08:54.563 --> 00:08:55.073
&gt;&gt; Shelby: I'm Shelby.

138
00:08:55.073 --> 00:08:56.119
&gt;&gt; Will Sentance: Shelby, sorry, man.

139
00:08:56.119 --> 00:08:58.152
&gt;&gt; Shelby: [LAUGH]
&gt;&gt; Will Sentance: What is the worst case.

140
00:08:58.152 --> 00:09:02.116
See, I never really had a problem
with confusing redheads before.

141
00:09:02.116 --> 00:09:02.805
&gt;&gt; Shelby: It's the hair color?

142
00:09:02.805 --> 00:09:04.989
&gt;&gt; Will Sentance: But
this has been an on going issue.

143
00:09:04.989 --> 00:09:07.138
Sorry Shelby, go ahead Shelby.

144
00:09:07.138 --> 00:09:08.062
&gt;&gt; Shelby: Push it to the call stack?

145
00:09:08.062 --> 00:09:11.113
&gt;&gt; Will Sentance: Push it being?

146
00:09:11.113 --> 00:09:12.132
What function now do we pass?

147
00:09:12.132 --> 00:09:12.699
&gt;&gt; Shelby: Display?

148
00:09:12.699 --> 00:09:14.448
&gt;&gt; Will Sentance: Display function,
exactly, the call.

149
00:09:14.448 --> 00:09:16.290
And do we have anything
left to run in global?

150
00:09:16.290 --> 00:09:16.882
No, we don't.

151
00:09:16.882 --> 00:09:19.382
So no problem, exactly.

152
00:09:19.382 --> 00:09:21.932
Right on top, Shelby.

153
00:09:21.932 --> 00:09:24.177
I already said you're my favorite
person in the class, Shelby.

154
00:09:24.177 --> 00:09:27.044
Right on top,
we call our display function.

155
00:09:27.044 --> 00:09:29.711
We call our display function.

156
00:09:29.711 --> 00:09:32.319
Now, we were waiting to run display.

157
00:09:32.319 --> 00:09:36.534
We wanted to defer, why did we want
to defer display in the first place?

158
00:09:36.534 --> 00:09:38.034
&gt;&gt; Shelby: We were waiting to-
&gt;&gt; Will Sentance: It's gonna take a while.

159
00:09:38.034 --> 00:09:39.268
For the data to come back, yeah.

160
00:09:39.268 --> 00:09:43.165
So, yeah, Shelby, so?

161
00:09:43.165 --> 00:09:45.467
&gt;&gt; Shelby: [LAUGH]
&gt;&gt; Will Sentance: Exactly,

162
00:09:45.467 --> 00:09:47.159
exactly as you say.

163
00:09:47.159 --> 00:09:50.853
We were waiting for the display,
we were waiting for the data to come back.

164
00:09:50.853 --> 00:09:53.390
So this display functionality.

165
00:09:53.390 --> 00:09:59.012
The way this xhrHttpRequest
feature of JavaScript

166
00:09:59.012 --> 00:10:03.849
works is that this display functionality,

167
00:10:03.849 --> 00:10:08.817
when the data comes back,
it's going to bond

168
00:10:08.817 --> 00:10:13.277
itself to this display functionality.

169
00:10:13.277 --> 00:10:17.500
So when we push display to the Call Stack,

170
00:10:17.500 --> 00:10:24.871
its first parameter is gonna be filled
in with what do you think, Katie?

171
00:10:24.871 --> 00:10:25.833
&gt;&gt; Katie: The data of display.

172
00:10:25.833 --> 00:10:27.661
&gt;&gt; Will Sentance: The data exactly.

173
00:10:27.661 --> 00:10:28.993
&gt;&gt; Katie: So post.

174
00:10:28.993 --> 00:10:32.907
&gt;&gt; Will Sentance: This object
here is going to fill in.

175
00:10:32.907 --> 00:10:37.996
I'm gonna be calling the display, right
now this is definition, I'm gonna call it,

176
00:10:37.996 --> 00:10:42.665
this definition, has a, now, this is
not exactly how the function works, but

177
00:10:42.665 --> 00:10:46.040
has a first argument called data,
something like that.

178
00:10:46.040 --> 00:10:50.494
That data will be filled in
with the data that came back.

179
00:10:50.494 --> 00:10:53.809
Now, how do we know whether it's
the first argument or second argument.

180
00:10:53.809 --> 00:10:55.983
The first argument is actually
typically an error argument.

181
00:10:55.983 --> 00:10:57.252
How do we even know?

182
00:10:57.252 --> 00:10:58.286
Documentation.

183
00:10:58.286 --> 00:11:03.540
Documentation of xhrHttpRequest, or
documentation for $.get will say the first

184
00:11:03.540 --> 00:11:08.350
argument of the callback function that
gets executed when the data returns,

185
00:11:08.350 --> 00:11:12.727
will be populated on execution with
the data from the Twitter server.

186
00:11:12.727 --> 00:11:17.182
Or it will say the first argument
actually is an error parameter,

187
00:11:17.182 --> 00:11:20.422
which will be filled in
with any error if an error

188
00:11:20.422 --> 00:11:24.634
comes back when the display
function ends up being executed.

189
00:11:24.634 --> 00:11:26.334
The first argument will
be filled an error.

190
00:11:26.334 --> 00:11:30.150
The second argument will
be our data from the API.

191
00:11:30.150 --> 00:11:35.523
Different functionality, different
features will work in different ways.

192
00:11:35.523 --> 00:11:38.755
And that's not magic, it's just out
there ready for us to go and find.

193
00:11:38.755 --> 00:11:40.689
We have to go and do the documentation.

194
00:11:40.689 --> 00:11:45.717
So Bob, at this point,
Bob, we have completed

195
00:11:45.717 --> 00:11:50.390
our web browser API of
the browser feature.

196
00:11:50.390 --> 00:11:54.718
XhrHttpRequest is completed, we've got
our data back from Twitter's server.

197
00:11:54.718 --> 00:11:59.472
We're therefore now gonna pass our
call to display to our call stack.

198
00:11:59.472 --> 00:12:02.344
When we start executing a function Bob,
executing a function,

199
00:12:02.344 --> 00:12:03.466
we get a brand new, Bob?

200
00:12:03.466 --> 00:12:04.848
&gt;&gt; Bob: Execution context?

201
00:12:04.848 --> 00:12:06.756
&gt;&gt; Will Sentance: Excellent Bob, correct.

202
00:12:06.756 --> 00:12:11.798
And what is that execution context for
but the call to display?

203
00:12:11.798 --> 00:12:17.176
There it is, and what's being passed, what
exact thing is being passed the display?

204
00:12:17.176 --> 00:12:17.915
&gt;&gt; Bob: The object.

205
00:12:17.915 --> 00:12:19.651
&gt;&gt; Will Sentance: Exactly, there it is.

206
00:12:19.651 --> 00:12:24.985
With post is high and
we are creating new execution

207
00:12:24.985 --> 00:12:29.943
context with this
functionality of display.

208
00:12:29.943 --> 00:12:32.100
Note, where are we calling display?

209
00:12:32.100 --> 00:12:34.797
Are we calling it inside the $.get?

210
00:12:34.797 --> 00:12:35.753
No, we are definitely not.

211
00:12:35.753 --> 00:12:39.414
Easy confusion to think that somehow
display is being run inside, no,

212
00:12:39.414 --> 00:12:43.090
we did $.get, we moved,
just like set timer, we moved straight on.

213
00:12:43.090 --> 00:12:47.392
All that $.get did was spin
up an xhrHttpRequest and

214
00:12:47.392 --> 00:12:52.181
pass a reference to the function
that we passed to $.get.

215
00:12:52.181 --> 00:12:56.035
Now, again, $.get is actually
a JavaScript function but inside of it,

216
00:12:56.035 --> 00:12:59.477
it's behaving just like a set
timer would in that it's spinning.

217
00:12:59.477 --> 00:13:04.817
It's only job is to spin up to
reference to create using the web

218
00:13:04.817 --> 00:13:10.787
browser feature xhrHttpRequest,
a request off to the Twitter API.

219
00:13:10.787 --> 00:13:12.749
And that's all happening here separately.

220
00:13:12.749 --> 00:13:16.865
And in JavaScript land,
we moved straight on We did not wait for

221
00:13:16.865 --> 00:13:18.425
that data to come back.

222
00:13:18.425 --> 00:13:22.412
When we run console.log,
we're at about 1 millisecond,

223
00:13:22.412 --> 00:13:24.924
we are not 200 millisecond later.

224
00:13:24.924 --> 00:13:28.580
But now, our data has come back,

225
00:13:28.580 --> 00:13:33.413
we're at about 201 milliseconds when we

226
00:13:33.413 --> 00:13:37.601
start calling it a display function.

227
00:13:37.601 --> 00:13:40.233
And we're executing it so, Griffin,

228
00:13:40.233 --> 00:13:45.914
what's the first thing inside our local
memory of our display function, Griffin?

229
00:13:45.914 --> 00:13:46.924
&gt;&gt; Griffin: That would be the data.

230
00:13:46.924 --> 00:13:51.332
&gt;&gt; Will Sentance: That would be
the data parameter which now has what?

231
00:13:51.332 --> 00:13:53.366
What value associated with it?

232
00:13:53.366 --> 00:13:55.100
&gt;&gt; Griffin: It would be the post and
the high.

233
00:13:55.100 --> 00:13:56.489
&gt;&gt; Will Sentance: So
the whole object, right?

234
00:13:56.489 --> 00:14:00.817
Yeah, with post is high.

235
00:14:00.817 --> 00:14:04.732
So, when I hit the line
console.log.data.post,

236
00:14:04.732 --> 00:14:07.082
I do console look for data post.

237
00:14:07.082 --> 00:14:08.350
What do I console log?

238
00:14:08.350 --> 00:14:08.989
&gt;&gt; Griffin: Height.

239
00:14:08.989 --> 00:14:11.078
&gt;&gt; Will Sentance: Height, there it is.

240
00:14:11.078 --> 00:14:15.208
At about 201 milliseconds.

241
00:14:16.954 --> 00:14:19.703
&gt;&gt; Will Sentance: Me first was
done at about 1 millisecond.

242
00:14:19.703 --> 00:14:25.357
So again, we've now used
a different background browser API.

243
00:14:25.357 --> 00:14:26.859
Now, I'm not gonna give you all of them.

244
00:14:26.859 --> 00:14:28.763
Your job is to go and figure out.

245
00:14:28.763 --> 00:14:33.798
They're all listed in MDN, but
they all work this same way,

246
00:14:33.798 --> 00:14:37.451
as when you use a built in function $.get,

247
00:14:37.451 --> 00:14:42.784
inside of it uses the built in
function that creates this mixer,

248
00:14:42.784 --> 00:14:48.541
a reference or let's say spins up
a background web browser feature.

249
00:14:48.541 --> 00:14:53.711
In this case it's the data request
feature, the xhrHttpRequest feature.

250
00:14:53.711 --> 00:14:56.933
It could be a timer,
it could be with a whole bunch of them.

251
00:14:56.933 --> 00:14:59.039
In node there's a whole
bunch of them as well.

252
00:14:59.039 --> 00:15:01.995
They're all speaking to
a non-JavaScript LAN.

253
00:15:01.995 --> 00:15:06.144
This is not JavaScript,
this is not JavaScript.

254
00:15:06.144 --> 00:15:11.190
Let's make sure we add in our
two other pieces of this puzzle.

255
00:15:11.190 --> 00:15:18.834
Actually what happens
between our completion and

256
00:15:18.834 --> 00:15:23.751
getting back on the call stack.

257
00:15:23.751 --> 00:15:29.912
Well, it's the display
functionality is queued up.

258
00:15:29.912 --> 00:15:34.462
Display is queued up
with its associated data

259
00:15:34.462 --> 00:15:39.379
that came back,
there's our associated data.

260
00:15:41.957 --> 00:15:44.662
&gt;&gt; Will Sentance: With
its associated data, and

261
00:15:44.662 --> 00:15:48.729
then we checked what's
the call stack clear.

262
00:15:48.729 --> 00:15:52.228
Let's just go back a second,
we check what's the call stack clear.

263
00:15:52.228 --> 00:15:55.415
We said hold on,
is there something in the call back que?

264
00:15:55.415 --> 00:15:57.167
Is the call stack clear?

265
00:15:57.167 --> 00:16:00.203
That's known as the event
loop that is not literally,

266
00:16:00.203 --> 00:16:03.701
that's why I don't like desperately
calling the event loop,

267
00:16:03.701 --> 00:16:06.605
because it's not literally looping and
checking.

268
00:16:06.605 --> 00:16:10.290
But we can think of it, under the deep
down of it, it's not looping it, but

269
00:16:10.290 --> 00:16:12.702
it's basically checking
is the call set clear?

270
00:16:12.702 --> 00:16:14.545
Is it clear every millisecond?

271
00:16:14.545 --> 00:16:15.917
Is it checking, is it clear?

272
00:16:15.917 --> 00:16:16.463
Is it clear?

273
00:16:16.463 --> 00:16:17.374
Is it clear?

274
00:16:17.374 --> 00:16:18.334
It's clear.

275
00:16:18.334 --> 00:16:20.615
Well, of course, it's clear cuz
it's 200 milliseconds later and

276
00:16:20.615 --> 00:16:21.766
there's nothing else in our code.

277
00:16:21.766 --> 00:16:26.033
Console.log finished at 1 millisecond,
so we're done, so it's definitely clear.

278
00:16:26.033 --> 00:16:30.106
And instantly we can dequeue display and

279
00:16:30.106 --> 00:16:34.066
push it to the call stack, there it is.

280
00:16:34.066 --> 00:16:39.547
Display push to the call stack at

281
00:16:39.547 --> 00:16:44.628
about 201 milliseconds.

282
00:16:47.221 --> 00:16:53.179
&gt;&gt; Will Sentance: 201 milliseconds with
our data that came back from the API.

283
00:16:53.179 --> 00:16:55.843
Those are all our parts.

284
00:16:55.843 --> 00:16:59.786
And look,
we took this display functionality,

285
00:16:59.786 --> 00:17:03.439
passed through the callback Q,
and then it,

286
00:17:03.439 --> 00:17:08.536
once the event loop said good,
we're good to go, dequeued and

287
00:17:08.536 --> 00:17:12.861
display, and added it,
pushed it so the call stack,

288
00:17:12.861 --> 00:17:18.177
that where it then got executed,
just as we've talked through.

289
00:17:18.177 --> 00:17:20.642
You can see how, in these simple examples,

290
00:17:20.642 --> 00:17:24.049
these portions here doesn't
really have any consequence.

291
00:17:24.049 --> 00:17:28.183
But for more complex examples where we
have things blocking in the main thread,

292
00:17:28.183 --> 00:17:30.108
or where we have multiple requests.

293
00:17:30.108 --> 00:17:34.490
Then, this becomes very relevant and
as each request completes,

294
00:17:34.490 --> 00:17:38.871
it's gonna queue up the relevant
call back function that's being

295
00:17:38.871 --> 00:17:42.020
associated with a particular
web browser API.

296
00:17:42.020 --> 00:17:46.840
So we can spin out as many as we want, we
can have 30 xhrHttpRequest all going here.

297
00:17:46.840 --> 00:17:51.160
As each one of them completes their
function in order of the completion.

298
00:17:51.160 --> 00:17:54.049
It's going to be part of the core
back here, queued up, not in

299
00:17:54.049 --> 00:17:57.680
order of when these requests were made but
just in order of their completion.

