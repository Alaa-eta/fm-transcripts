WEBVTT

1
00:00:00.140 --> 00:00:02.140
&gt;&gt; Will Sentance: One more thing,
let's just remind ourselves,

2
00:00:02.140 --> 00:00:08.150
we keep track of the functions being
called in JavaScript with a call stack.

3
00:00:08.150 --> 00:00:11.280
It tracks which execution
context we are in.

4
00:00:11.280 --> 00:00:15.980
That is,
what function is currently being run and

5
00:00:15.980 --> 00:00:19.280
when we finish running that function,
where do we return to?

6
00:00:19.280 --> 00:00:24.250
The next thing down the stack, we start
with one global execution context and

7
00:00:24.250 --> 00:00:29.530
then we could have many function
level execution contexts above.

8
00:00:29.530 --> 00:00:33.390
All right, so at this point,
we are gonna use a tried and

9
00:00:33.390 --> 00:00:38.410
tested teaching pedagogical
method known as thumbs.

10
00:00:38.410 --> 00:00:41.930
I have no idea what has happened
here I need to go back to,

11
00:00:41.930 --> 00:00:44.050
what is that place called?

12
00:00:45.310 --> 00:00:46.050
What is it called?

13
00:00:46.050 --> 00:00:47.240
Point something academy?

14
00:00:47.240 --> 00:00:50.860
I need to go back,
I have some clarifications.

15
00:00:50.860 --> 00:00:53.300
I can see where we're going but
I've got some questions.

16
00:00:53.300 --> 00:00:54.940
I can phrase it as a question.

17
00:00:54.940 --> 00:00:59.470
I'm clear on these fundamental,
pivotal pieces.

18
00:00:59.470 --> 00:01:03.200
That are running in
the background as we run our code.

19
00:01:03.200 --> 00:01:04.898
I'm clear on why we have them.

20
00:01:04.898 --> 00:01:10.260
That they're there and we will use these
as our tools for the rest of the two days.

21
00:01:10.260 --> 00:01:12.080
So I need to see clarifications.

22
00:01:12.080 --> 00:01:14.370
Sorry, how does this bit work or
how does this bit work?

23
00:01:14.370 --> 00:01:18.210
I need to understand that before I can
fully understand the rest of stuff.

24
00:01:18.210 --> 00:01:19.540
Everybody's thumbs out.

25
00:01:19.540 --> 00:01:21.360
No idea what happened, clarifications?

26
00:01:21.360 --> 00:01:22.910
And clear to move on.

27
00:01:22.910 --> 00:01:23.600
Everybody's thumbs out.

28
00:01:23.600 --> 00:01:26.770
I want a honest thumb self appraisal.

29
00:01:26.770 --> 00:01:29.450
Matt has a clarification,
if you have your thumb up,

30
00:01:29.450 --> 00:01:32.690
I should be confident to be able ask you
to explain whats just happened here.

31
00:01:32.690 --> 00:01:34.240
Everyone's thumbs out.

32
00:01:34.240 --> 00:01:35.830
Matt has a clarification.

33
00:01:35.830 --> 00:01:37.090
Mohammed has one.

34
00:01:37.090 --> 00:01:39.080
Mohammed's thumb went
from up to clarification.

35
00:01:39.080 --> 00:01:39.820
It's up, it's still up.

36
00:01:40.890 --> 00:01:43.470
Okay, what was your name again?
&gt;&gt; Cara: Cara,

37
00:01:43.470 --> 00:01:44.080
&gt;&gt; Will Sentance: Cara, sorry Cara.

38
00:01:44.080 --> 00:01:47.960
Is that a medium thumb?
&gt;&gt; Cara: I wouldn't say I'm comfortable

39
00:01:47.960 --> 00:01:49.200
explaining things, but

40
00:01:49.200 --> 00:01:50.290
I think I understand.
&gt;&gt; Will Sentance: Okay,

41
00:01:50.290 --> 00:01:52.570
well I would love to see,
if everyone's thumbs up, okay,

42
00:01:52.570 --> 00:01:53.850
I wanna see Matt's clarification.

43
00:01:53.850 --> 00:01:57.611
Can you talk us through, Matt?
&gt;&gt; Matt: Well, I guess I just wonder how

44
00:01:57.611 --> 00:02:03.099
do we get from the function of multiply
two and then we bounce down to

45
00:02:03.099 --> 00:02:08.280
the constant of output multiplied by two.
&gt;&gt; Will Sentance: See this is why

46
00:02:08.280 --> 00:02:13.890
clarifications are so great, what a great
clarification by Matt it shows a,

47
00:02:13.890 --> 00:02:18.860
I don't want to say confusion,
an interpretation.

48
00:02:18.860 --> 00:02:23.390
That many, many people have and
that is based in

49
00:02:23.390 --> 00:02:29.600
a yes misunderstanding I guess
maybe I don't know whatever.

50
00:02:29.600 --> 00:02:31.240
Matt, great question.

51
00:02:31.240 --> 00:02:34.850
We do not jump back up to multiply by two.

52
00:02:34.850 --> 00:02:36.350
When I run my one.

53
00:02:36.350 --> 00:02:37.630
It says store.

54
00:02:37.630 --> 00:02:42.090
Well, what does my one say in the code?
&gt;&gt; Matt: Store the function.

55
00:02:42.090 --> 00:02:43.676
&gt;&gt; Will Sentance: No, what's line one say?

56
00:02:43.676 --> 00:02:45.525
&gt;&gt; Matt: [INAUDIBLE]

57
00:02:45.525 --> 00:02:46.490
&gt;&gt; Will Sentance: Yep, what's line two

58
00:02:46.490 --> 00:02:49.290
say?
&gt;&gt; Matt: Function is multiplied by 2.

59
00:02:49.290 --> 00:02:50.560
&gt;&gt; Will Sentance: It says, exactly,

60
00:02:50.560 --> 00:02:58.109
it says go store, it says go
store all the exact function text

61
00:02:59.560 --> 00:03:05.520
In that function definition go store
it in the label multiplied by two.

62
00:03:05.520 --> 00:03:08.850
After I've declared the function
multiplied by two Matt.

63
00:03:08.850 --> 00:03:13.534
What if I were to write this, console

64
00:03:13.534 --> 00:03:19.140
dot log,
to log into my console multiplyBy2.

65
00:03:20.370 --> 00:03:24.260
What would I see in my console,

66
00:03:24.260 --> 00:03:28.970
Matt?
&gt;&gt; Matt: I don't know.

67
00:03:28.970 --> 00:03:29.710
&gt;&gt; Will Sentance: Have a think about it,

68
00:03:29.710 --> 00:03:30.560
give it a shot.

69
00:03:30.560 --> 00:03:32.385
What would make sense?

70
00:03:32.385 --> 00:03:36.902
Javascript sees the the word multiplBy2,
where's it go looking for

71
00:03:36.902 --> 00:03:38.365
it in the function.

72
00:03:38.365 --> 00:03:40.503
Where is it go looking for
more [INAUDIBLE], Andrea?

73
00:03:40.503 --> 00:03:41.288
&gt;&gt; Andrea: In global memory.

74
00:03:41.288 --> 00:03:42.354
&gt;&gt; Will Sentance: In global memory,

75
00:03:42.354 --> 00:03:47.376
what's it find?
&gt;&gt; Andrea: It finds the function.

76
00:03:47.376 --> 00:03:48.608
&gt;&gt; Will Sentance: The whole function

77
00:03:48.608 --> 00:03:49.534
definition.

78
00:03:49.534 --> 00:03:51.757
So if I were to console.Log(Multiplyby2),
Clara,

79
00:03:51.757 --> 00:03:55.010
what would I see in my console?
&gt;&gt; Cara: Don't remember exactly, but

80
00:03:55.010 --> 00:03:57.010
it say something like this
is a function object.

81
00:03:57.010 --> 00:03:57.730
&gt;&gt; Will Sentance: It will say this

82
00:03:57.730 --> 00:04:00.930
is a functional object, but it will
actually be, it's the whole function.

83
00:04:00.930 --> 00:04:03.090
Depending on your console,
that's a really good point by Clara.

84
00:04:03.090 --> 00:04:07.400
Some basic older consoles
will just say function, but

85
00:04:07.400 --> 00:04:12.210
chrome dev tools will literally say,
if there's that console here,

86
00:04:13.270 --> 00:04:15.584
it'll literally say, function.

87
00:04:15.584 --> 00:04:21.690
Multiply by two num and

88
00:04:21.690 --> 00:04:25.400
then have return,
it would have the whole code inside.

89
00:04:25.400 --> 00:04:30.250
So Matt, when we call multiply by
two there in line two and we invoke,

90
00:04:30.250 --> 00:04:33.940
when we run it with parenthesis,
do you see where it says cons output?

91
00:04:33.940 --> 00:04:36.430
Equal yet,
we are not jumping back into the function.

92
00:04:36.430 --> 00:04:37.060
What are we doing?

93
00:04:37.060 --> 00:04:39.670
We're going to memory and
we're grabbing this definition to use it.

94
00:04:39.670 --> 00:04:41.860
Does that make sense?
&gt;&gt; Matt: So it's already stored?

95
00:04:41.860 --> 00:04:43.300
&gt;&gt; Will Sentance: It's already stored.

96
00:04:43.300 --> 00:04:46.700
The word function, the word count,
all they're doing is saying javascript,

97
00:04:46.700 --> 00:04:49.540
free up some space to store
this stuff that's following.

98
00:04:49.540 --> 00:04:50.520
Does that make sense?
&gt;&gt; Matt: So

99
00:04:50.520 --> 00:04:52.460
that's our state?
&gt;&gt; Will Sentance: That's our state.

100
00:04:52.460 --> 00:04:54.430
That's our live data Docile.

101
00:04:54.430 --> 00:04:58.900
And that life dated can include
actual functionality like that.

102
00:04:58.900 --> 00:05:02.970
Do you see that now Matt that when you
are calling multiply by two you are not

103
00:05:02.970 --> 00:05:07.090
going back in the code back up
to the definition earlier on.

104
00:05:07.090 --> 00:05:08.950
No, that definition is being grabbed.

105
00:05:08.950 --> 00:05:11.260
Stored under a label in memory.
&gt;&gt; Matt: So

106
00:05:11.260 --> 00:05:15.410
that's the definition of
the synchronus line by line.

107
00:05:15.410 --> 00:05:19.090
Reading of, I don't know.
&gt;&gt; Will Sentance: I would say

108
00:05:19.090 --> 00:05:21.970
essentially we have taken
our function definition,

109
00:05:21.970 --> 00:05:26.270
stored the what do I do line by line,
in memory,

110
00:05:26.270 --> 00:05:30.700
under the label multiply by two, when I
run multiplyBy2, I go look in memory.

111
00:05:30.700 --> 00:05:31.860
I find this code and

112
00:05:31.860 --> 00:05:36.690
I say grab this code make some space to
start going through it line by line and

113
00:05:36.690 --> 00:05:40.720
just start doing it line by line,
and storing stuff in memory there.

114
00:05:40.720 --> 00:05:44.830
When I finish running that function,
well, where do I go next?

115
00:05:44.830 --> 00:05:49.320
Well, we have multiplied by 2 on
the call stack, I go back out to global.

116
00:05:49.320 --> 00:05:51.460
Alex, go ahead.
&gt;&gt; Alex: I'm just curious where,

117
00:05:51.460 --> 00:05:54.240
where the call stack is located,
is it also in the memory?

118
00:05:54.240 --> 00:05:56.280
The call stack.
&gt;&gt; Will Sentance: It is also in our memory

119
00:05:56.280 --> 00:06:01.990
but for our purposes, we don't need to
know exactly where it's being stored.

120
00:06:01.990 --> 00:06:04.610
But it's there in our JavaScript run time.

121
00:06:04.610 --> 00:06:07.540
It's part of the JavaScript
engine being run.

122
00:06:07.540 --> 00:06:08.700
Makes sense?
&gt;&gt; Alex: Makes sense.

123
00:06:08.700 --> 00:06:10.920
&gt;&gt; Will Sentance: All right, go ahead,

124
00:06:10.920 --> 00:06:13.326
Griffin.
&gt;&gt; Griffin: Is there a different call

125
00:06:13.326 --> 00:06:15.890
stack for each JavaScript file?

126
00:06:15.890 --> 00:06:18.560
If you're importing stuff
from one file to another.

127
00:06:18.560 --> 00:06:22.760
Does it import it into
that one's call stack?

128
00:06:22.760 --> 00:06:23.380
&gt;&gt; Will Sentance: If we have

129
00:06:23.380 --> 00:06:28.250
one JavaScript application

130
00:06:30.390 --> 00:06:35.200
running it has one call stack.
&gt;&gt; Griffin: Which is

131
00:06:35.200 --> 00:06:38.480
at the highest one?
&gt;&gt; Will Sentance: When that's imported

132
00:06:38.480 --> 00:06:42.670
you're taking code to be run,
when it's being run in this environment,

133
00:06:42.670 --> 00:06:43.880
in a single environment.

134
00:06:43.880 --> 00:06:46.620
But you do raise an interesting question,
which I'm going to go into here.

135
00:06:46.620 --> 00:06:52.460
But you can have multiple separate
JavaScript call stats run to all of this.

136
00:06:52.460 --> 00:06:58.190
And that happens when you use things
like web workers or other child.

137
00:06:58.190 --> 00:07:02.430
Things which allow you to have multiple
background areas in JavaScript.

138
00:07:02.430 --> 00:07:04.480
But we don't need to worry about that for
here, okay?

139
00:07:04.480 --> 00:07:07.361
Yeah Mark?
&gt;&gt; Mark: I don't know how to pronounce his

140
00:07:07.361 --> 00:07:11.215
name, but
he's asking about const num equals 3,

141
00:07:11.215 --> 00:07:14.240
why did you write that?
&gt;&gt; Will Sentance: Good question.

142
00:07:14.240 --> 00:07:16.620
Just to show some basic data being stored.

143
00:07:16.620 --> 00:07:18.550
We did not use as 3,

144
00:07:18.550 --> 00:07:22.810
we just wanted to have some evidence
that we can store data in memory.

145
00:07:22.810 --> 00:07:26.470
That's all, it was just for
a pedagogical technique.

146
00:07:26.470 --> 00:07:29.480
Tell him that, all right.
&gt;&gt; Mark: Is the global threat and

147
00:07:29.480 --> 00:07:34.770
local threat different?
&gt;&gt; Will Sentance: No, they are,

148
00:07:34.770 --> 00:07:36.110
it's the single threat.

149
00:07:36.110 --> 00:07:37.910
The threat is just a posh name,

150
00:07:37.910 --> 00:07:42.110
don't think of the threat as some
fancy mystique driven thing.

151
00:07:42.110 --> 00:07:45.430
All it is is just a posh name for,
we did line one,

152
00:07:45.430 --> 00:07:47.620
then we did line two multiplied by two.

153
00:07:47.620 --> 00:07:49.880
Then we did line three declaring output.

154
00:07:49.880 --> 00:07:52.190
That said,
we don't want to put an output yet,

155
00:07:52.190 --> 00:07:55.110
we've gotta go run the function
multiplied by two.

156
00:07:55.110 --> 00:07:58.930
And so we stopped doing the code line by
line globally and started doing the code

157
00:07:58.930 --> 00:08:03.560
line by line inside the function body but
it's just more code to read and done.

158
00:08:03.560 --> 00:08:06.510
So they are absolutely same thing, okay?

159
00:08:07.710 --> 00:08:09.540
Yes go ahead, Clara.
&gt;&gt; Cara: Is there any reason to

160
00:08:09.540 --> 00:08:14.200
use constants that are like var?
&gt;&gt; Will Sentance: Because as a default,

161
00:08:14.200 --> 00:08:20.050
I personally, there's a default
increasingly through EF2015 for

162
00:08:20.050 --> 00:08:22.440
anything you should default to const,

163
00:08:22.440 --> 00:08:25.750
unless you are actually going
to reassign it in memory.

164
00:08:25.750 --> 00:08:29.720
Because this num is never touched,
we can use const.

165
00:08:29.720 --> 00:08:33.384
Because output is not being outed
any way here, we can use const.

166
00:08:33.384 --> 00:08:37.770
So there's this sort of default rule that
you should always default to const for

167
00:08:37.770 --> 00:08:42.367
declaring what you previously would have
thought of as declaring your variables.

168
00:08:42.367 --> 00:08:48.480
And then use let as a backup, if you're
ever going to do some reassignment.

169
00:08:48.480 --> 00:08:52.280
And say no, no, no, no, right now,
it's four, we're gonna make it five.

170
00:08:52.280 --> 00:08:54.230
Right not it's string will,

171
00:08:54.230 --> 00:08:57.440
we're gonna make it to string Clara,
then you can use let.

172
00:08:57.440 --> 00:09:01.550
But otherwise, you should be declaring
all your stuff with const, okay?

173
00:09:01.550 --> 00:09:04.610
But think of it as just, it's var.

174
00:09:04.610 --> 00:09:08.560
It's var, but just has some special
rules around it which aren't gonna.

175
00:09:08.560 --> 00:09:10.330
Those special rules aren't
gonna affect us here.

176
00:09:10.330 --> 00:09:13.410
Not in any of the stuff we're doing today.

177
00:09:13.410 --> 00:09:17.480
But think of it as var,
just as you know the behavior of var.

178
00:09:17.480 --> 00:09:18.830
Think of it the same way here.

179
00:09:18.830 --> 00:09:20.490
It has some special properties but

180
00:09:20.490 --> 00:09:22.010
we don't need to worry
about those right here.

181
00:09:22.010 --> 00:09:25.760
Those special properties
being you can't change it but

182
00:09:25.760 --> 00:09:28.410
besides that we don't need
to worry about those here.

183
00:09:28.410 --> 00:09:32.490
All right, so here we go.
&gt;&gt; Ahmin: I have a question.

184
00:09:33.800 --> 00:09:34.690
&gt;&gt; Will Sentance: Go ahead Ahmin.

185
00:09:34.690 --> 00:09:35.950
&gt;&gt; Ahmin: What about if the function is

186
00:09:35.950 --> 00:09:40.710
declared after it's being caught?
&gt;&gt; Will Sentance: Yeah,

187
00:09:40.710 --> 00:09:46.020
I wanna hold on that question, Ahmin,
this is a concept known as hoisting.

188
00:09:46.020 --> 00:09:50.050
We don't need to in this,
we're not going to come to it.

189
00:09:50.050 --> 00:09:53.581
Again, it has no implications for
the things we're gonna see today.

190
00:09:53.581 --> 00:09:57.874
So part of the challenge we are to face,
when we're doing the hard parts over

191
00:09:57.874 --> 00:10:01.313
language is figuring out which
bits do we wanna dive deep on.

192
00:10:01.313 --> 00:10:03.569
And which ones are we gonna
say you know what, actually,

193
00:10:03.569 --> 00:10:07.060
that's not gonna have any implications for
how we're gonna solve these challenges.

194
00:10:07.060 --> 00:10:08.830
So on that one, we'll hold on that.

