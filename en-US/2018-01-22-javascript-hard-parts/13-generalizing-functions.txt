[00:00:00]
>> Speaker 1: So if you loved that function, you'll love this function even more. Copy array and divide by 2, copy array multiply by 2. I'm gonna point at my little thing. There you go, look at that, pointing at, copy array and multiply by 2, copy array and divide by 2.

[00:00:18]
Such a unique and different function. Look.
>> Speaker 1: Exactly, look at this unique function. Okay, we're gonna walk through it line by line to feel the pain. To feel why we might have an alternative approach to this, can people already spot which principal we're breaking? Don't say it, just think it.

[00:00:44]
I was trying to be funny, but okay, we're gonna go through this code line by line. Lindsey, line one. And the nice thing is that for us, even though it's gonna be frustrating, we're also getting plenty of practice to talk through our code really precisely. So Lindsey, line one, actually I wanna switch out the bits that change.

[00:01:00]
Line one what are we doing?
>> Speaker 2: Declaring a function, copy array and divide by 2?
>> Speaker 1: Divide by 2, so I'm just gonna switch out our words here. I'm actually gonna use a different color pen so we can really appreciate just how redundant so much of what we're doing here.

[00:01:16]
So this function here takes in an array, empty output array, iterates through the input array, takes each element, divides it by 2, pushes the divided element into the output array, returns out that new array full of the divided elements. It feels very similar. Okay, declared. Next line, Lindsey.

[00:01:35]

>> Speaker 2: Declares variable my array.
>> Speaker 1: Good, as the array [1,2,3].
>> Speaker 2: [1,2,3].
>> Speaker 1: Okay, good. Bob, next line, we got that already, nothing to change. Call the next line, Bob.
>> Speaker 2: Declare result and call the function.
>> Speaker 1: Uh-huh, so we declare result. What do we initially assign to the variable result, Bob?

[00:02:01]

>> Speaker 1: Do we know yet what we're gonna store there? You might think we sort of assign copy array and divide by, no, we don't even know what we're gonna store there. It's only temporarily assigned there.
>> Speaker 1: Undefined, Java should default, you think it'd be null. Java should default undefined for anything that doesn't have an actual value associated with it.

[00:02:21]
So we've now got to go do the work of cooling that copy array divide by 2 function. Do all the code inside it, whatever gets returned out, that's what is gonna be stored and the result in the end. So everyone together, recalling a function. We're executing a function copy array and divide by 2.

[00:02:38]
Bob, how do I know we're executing the function? Remind me.
>> Speaker 2: Parenthesis.
>> Speaker 1: Parenthesis, there are certain things I'm gonna drum into us, because by the way, seasoned developers get thrown by this stuff. And when we get to closures, knowing what calls a function, what refers to a function, and what defines a function are vital distinctions to know.

[00:02:57]
So calling a function, we are therefore invoking or executing a function. If we execute a function, we create, everyone together, a brand new?
>> Speaker 2: Execution context.
>> Speaker 1: Clara, we create a brand new.
>> Speaker 2: Execution context.
>> Speaker 1: Excellent Clara. No, everyone else is right, Clara just looked disappointed. All right, there we go, exactly an execution context, we don't know yet what's gonna be stored in result.

[00:03:22]
And so we create a new execution context to find out, to go run the functionality and find out. There it is, copy array, divide by 2, pass in [1, 2, 3] which is the value associated with my array. We just sort of skipped a step there, we can actually pass in my array directly but I just sort of live turned it into the [1, 2, 3] that actually gets passed in.

[00:03:43]
In we go, we declare, what do we do first? Art, what do we do first when we start copy array and divide by 2? What do we do before we do our output declaration?
>> Speaker 2: Output parameters.
>> Speaker 1: Uh-huh, talk me through it.
>> Speaker 2: So we would go for the array length and go for each one and then take the array value.

[00:04:05]

>> Speaker 1: No, what's the first thing we do? We do output between this empty array, before that we do something else. What's the first thing we do when we start calling a function? We fill in our placeholders don't we?
>> Speaker 2: Yep.
>> Speaker 1: So what, talk me through that.
>> Speaker 2: So the array would be [1, 2, 3].

[00:04:19]

>> Speaker 1: Array would be [1, 2, 3]. Got it, so our parameter array takes the argument [1, 2, 3], okay? Well, myArray, which is [1, 2, 3]. Now, everywhere inside that function, array is [1, 2, 3]. Okay, Clara, next we declare output's an empty array. What do we do now when we hit the body of this for loop, Clara?

[00:04:43]
Try and be as precise as possible.
>> Speaker 2: So you declare i.
>> Speaker 1: Yep.
>> Speaker 2: 0, your loop starts running.
>> Speaker 1: Yep, we take a array sub 0, which is what?
>> Speaker 2: Which is 1.
>> Speaker 1: 1, and we do what with it?
>> Speaker 2: You divide it by 2.
>> Speaker 1: And get?

[00:05:01]

>> Speaker 2: And get half and then you-
>> Speaker 1: Also known as 0.5 in British English.
>> Speaker 2: In America. [LAUGH]
>> Speaker 1: Which caused, once, and incredibly tough conversation about equity in a company after telling someone they got, man man, it was so embarrassing. Cuz they didn't know what nought meant, they thought it meant like five or something.

[00:05:22]
It was really, tough day. All right, okay, so and then what do we do with that 0.5 with that, 0.5, Clara?
>> Speaker 2: That's pushed on to outputs.
>> Speaker 1: Good, there it is. And we do that a few more times. We take sub 1 we get the 2, we divide 2 by 2, and we get 1.

[00:05:39]
0.5, 1, 1.5 and then Clara, we hit the all important return expression.
>> Speaker 2: Yep, return statements and your data is returned global.
>> Speaker 1: Execution? Context, where it is assigned to result. We didn't do our call stack, forgot to, but copy array divide by 2 is added, pushed, and then popped off.

