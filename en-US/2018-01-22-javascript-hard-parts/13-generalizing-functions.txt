[00:00:00]
>> Will Sentance: So, you love that function, you will love this function even more. CopyArrayAndDivideBy2, copyArrayAndMultiplyBy2, pointing at, I'm gonna point at my little thing. There you go, look at that. Pointing at copyArrayAndMultiplyBy2, copyArrayAndDivideBy2. It's actually unique and different function.
>> Group: [LAUGH]
>> Will Sentance: Look.
>> Group: [LAUGH]
>> Will Sentance: Exactly.
>> Group: [LAUGH]

[00:00:27]

>> Will Sentance: Look at this, unique and different function. Okay, but we're going to walk through it line by line to feel the pain, to feel why we might have an alternative approach to this. Mm-hm, can people already spot which principle we're breaking? Don't say it, just think it. I'm not trying to be funny, but okay, we're gonna go through this code line by line.

[00:00:48]
Lindsay, line one? And the nice thing about this is, for us, even though it's gonna be frustrating, we're also getting a practice to talk through our code really precisely. So Lindsay, line one, actually I wanna switch out the bits that change, line one what are we doing?
>> Lindsay: Declaring a function, copyArrayAndDivideBy2.

[00:01:06]

>> Will Sentance: DivideBy2, so I'm just gonna switch out our word here. I'm actually gonna use a different color pen so we can really appreciate just how redundant so much of what we're doing here. So this function here takes in an array, empty output array, iterates through the input array, takes each element, divides it by two.

[00:01:24]
Pushes the divided element into the output array, returns out that new array full of the divided elements. Feels very similar. Okay, declared, next line, Lindsay?
>> Lindsay: Declares variable myArray?
>> Will Sentance: As the array 1, 2, 3, okay, good. Barb, next line, we've got that already, nothing to change. Go to the next line, Barb.

[00:01:50]

>> Barb: You declare result and call the function.
>> Will Sentance: Ha, so we declare result. What do we initially assign to the variable result, Barb? Do we know yet what we're gonna store there? You might think we sort of assigned copyArrayAndDivideBy, no. We don't even know what we're gonna store there.

[00:02:08]
So what do we temporarily assign there? Undefined, JavaScript's default. You could think it would be null, JavaScript defaults to undefined for anything where it doesn't yet have an actual value associated with it. So we've now got to go do the work of calling that copyArrayDivideBy2 function, do all the code inside it.

[00:02:28]
Whatever gets returned out, that's what's gonna be stored in result on the end. So everyone together, we're calling a function, we're executing a function copyArrayAndDivideBy2. Barb, how do I know we're executing the function, remind me?
>> Barb: Parentheses.
>> Will Sentance: Parentheses. There are certain things I'm gonna drum into us.

[00:02:45]
Because by the way, seasoned developers get thrown by this stuff. And when we get to closures, knowing what calls a function, what refers to a function, and what defines a function are vital distinctions to know. So, calling a function, we are therefore invoking or executing a function. If we execute a function, we create, everyone together, a brand new?

[00:03:06]

>> Group: Execution context.
>> Will Sentance: Clara, we create a brand new.
>> Clara: Execution context.
>> Will Sentance: Excellent, Clara. Now, everyone else is right. Clara just looked disappointed. All right, there you go. Exactly, our new execution context, we don't know yet what's gonna be stored in results. And so, we create a new execution context to find out, to go run the functionality and find out.

[00:03:27]
There it is, copyArrayAndDivideBy2, pass in 1, 2, 3, which is the value associated with my array. We just took a sort of skipped a step there. We could actually pass in myArray directly. But I just sort of live turned it into the 1, 2, 3 that actually gets passed in.

[00:03:43]
And we go, we declare, what do we do first, Art? What do we do first when we start calling copyArrayAndDivideBy2? What do we do before we do our output declaration?
>> Speaker 6: [INAUDIBLE]
>> Will Sentance: Ah-ha, talk me through it.
>> Speaker 6: So we would go for the array length and go for each one and then take the array value.

[00:04:05]

>> Will Sentance: No, what's the first thing we do, dude? We do output. We do the current outer per call the array, but before that we do something else. What's the first thing we do when we start calling a function? We fill in our placeholders, don't we, so talk me through that.

[00:04:17]

>> Speaker 6: So that array would be 1, 2, 3.
>> Will Sentance: Array would be 1, 2, 3, got it. So our parameter array takes the argument 1, 2, 3, okay. Well myArray which is 1, 2, 3. Now everywhere inside that function array is 1, 2, 3. Okay, Clara? Next we declare outputs of the array, what do we do now when we hit the body of this for loop, Clara?

[00:04:42]
Try and be as precise as possible.
>> Clara: So you declare i.
>> Will Sentance: Yep.
>> Clara: Zero, starts running.
>> Will Sentance: Yeah, we take array sub zero, which is what?
>> Clara: Which is 1.
>> Will Sentance: 1, and we do what with it?
>> Clara: You divide it by two.
>> Will Sentance: And get?
>> Clara: And get a half.

[00:05:03]

>> Will Sentance: Also known as naught point five in British English, of course once an incredibly tough conversation about equity in the company after telling someone they got. It was so embarrassing because they didn't know what nought meant. They thought it meant five or something. It was really a tough day.

[00:05:25]
All right, okay. So what do we do with that 0.5, with that 0.5, Clara?
>> Clara: That's pushed onto outputs.
>> Will Sentance: Good, there it is. And we do that a few more times. We take sub 1, we get the 2. We divide 2 by 2. We get 1, 0.5, 1, 1.5, and then, Clara, we hit the all-important return expression.

[00:05:44]

>> Clara: Yep, return statements and your data is returned to global.
>> Will Sentance: Execution context, where it is assigned to result. We didn't do our call stack, forgot to, but copyArrayDivideBy2 is added, pushed, and then popped off.

