WEBVTT

1
00:00:00.000 --> 00:00:04.479
&gt;&gt; Will Sentance: In the challenges
we started to encounter this magic

2
00:00:04.479 --> 00:00:05.710
keyword new.

3
00:00:05.710 --> 00:00:10.912
So we're gonna remind ourselves that
we wanted a function that when called,

4
00:00:10.912 --> 00:00:14.753
when run, would return out
little baby objects user1,

5
00:00:14.753 --> 00:00:19.736
the first one user1, next one user2,
user5000, user whatever.

6
00:00:19.736 --> 00:00:24.434
But we wanna have available on each
of those objects our functionality.

7
00:00:24.434 --> 00:00:25.431
Have I mentioned this yet?

8
00:00:25.431 --> 00:00:27.426
I know I mentioned this many times.

9
00:00:27.426 --> 00:00:29.637
This is our fundamental goal.

10
00:00:29.637 --> 00:00:31.377
Can I call this function on the object?

11
00:00:31.377 --> 00:00:34.269
Is it available right there on the object?

12
00:00:34.269 --> 00:00:38.759
That's all I want, but I don't wanna have
multiple copies of this function on user1,

13
00:00:38.759 --> 00:00:40.289
and user2, user5000.

14
00:00:40.289 --> 00:00:45.108
So along comes this special shared store
of the functions that I could ever

15
00:00:45.108 --> 00:00:46.670
want on user1, user.

16
00:00:46.670 --> 00:00:51.381
It wouldn't just be increment, log in,
it would be increment log in, log out,

17
00:00:51.381 --> 00:00:54.240
change avatar, display avatar, etc., etc.

18
00:00:54.240 --> 00:00:58.780
All those functions on user function
store would be available when I

19
00:00:58.780 --> 00:01:01.080
call user1 dot that function.

20
00:01:01.080 --> 00:01:05.365
Because when I don't find that
function on user1, my prototype or

21
00:01:05.365 --> 00:01:09.809
nature of JavaScript means I check
the underscore proto underscore.

22
00:01:09.809 --> 00:01:15.228
Where I find a bond through the prototype
chain to the next object up,

23
00:01:15.228 --> 00:01:17.573
user function store, okay.

24
00:01:17.573 --> 00:01:22.013
But, I'm sure you agree Mohammed,
quite a lot of the space here,

25
00:01:22.013 --> 00:01:27.550
of that typing is being taken up by
creating that new user object in here.

26
00:01:27.550 --> 00:01:31.911
And creating that bond to that
shared function store, and

27
00:01:31.911 --> 00:01:34.050
returning out that object.

28
00:01:34.050 --> 00:01:36.620
Who comes from a true OOP languages?

29
00:01:36.620 --> 00:01:37.495
Do you do all that stuff by hand there?

30
00:01:37.495 --> 00:01:40.470
Uh-uh, no you do not.

31
00:01:40.470 --> 00:01:45.512
And JavaScript increasingly
wants us to feel liberated

32
00:01:45.512 --> 00:01:51.746
from all this manual work of making
our prototype bonds, Mohammed?

33
00:01:51.746 --> 00:01:54.410
All these prototype bonds?

34
00:01:54.410 --> 00:01:56.798
Once I,
I hate pulling away from the pairing.

35
00:01:56.798 --> 00:01:59.020
I'm sorry, I feel very bad.

36
00:01:59.020 --> 00:02:02.488
The pairing is where the real value is at,
it really is.

37
00:02:02.488 --> 00:02:06.410
But we, right now, we're gonna see
our solution three in a moment.

38
00:02:06.410 --> 00:02:08.740
We're gonna get, man,
let's see our review of this approach.

39
00:02:08.740 --> 00:02:10.650
Problems, no problems?

40
00:02:10.650 --> 00:02:14.771
This is a beautiful approach, I love this
approach, maybe a little long winded.

41
00:02:14.771 --> 00:02:18.442
We declared a new variable with
an object associated with it,

42
00:02:18.442 --> 00:02:22.480
with the bond to function store,
we've returned out that object.

43
00:02:23.650 --> 00:02:27.014
Six words, that's not that bad,
but I will say this,

44
00:02:27.014 --> 00:02:30.540
this is super sophisticated,
but it is non-standard.

45
00:02:30.540 --> 00:02:35.310
This is a non-standard way of creating
our objects with shared functionality.

46
00:02:35.310 --> 00:02:38.670
This is a non-standard way,
we have a standardized way.

47
00:02:38.670 --> 00:02:41.132
In the downside of this approach,
yes, six words.

48
00:02:41.132 --> 00:02:45.690
But also, once you start creating
objects in which you have your data and

49
00:02:45.690 --> 00:02:49.216
functionality, you start doing this for
everything.

50
00:02:49.216 --> 00:02:50.502
Creating a quiz game,

51
00:02:50.502 --> 00:02:54.704
you generate a quiz board as an object
with functionality attached to it.

52
00:02:54.704 --> 00:02:58.063
It's a single instance of the quiz bowl,
you're not gonna create more of them.

53
00:02:58.063 --> 00:03:00.980
You just start thinking OOP for
everything.

54
00:03:00.980 --> 00:03:04.805
And therefore, you're manually doing this
inside each time, yeah maybe it's not as,

55
00:03:04.805 --> 00:03:06.086
maybe there's a better way.

56
00:03:06.086 --> 00:03:10.554
Another language is not doing this
if you're trying to achieve OOB.

57
00:03:10.554 --> 00:03:15.086
But I'll say of this way sophisticated,
we get to see every precise bit.

58
00:03:15.086 --> 00:03:17.751
We get to manually set our bond.

59
00:03:17.751 --> 00:03:22.636
Hey we now know what's actually going on,
but a lot of this stuff gets automated.

60
00:03:22.636 --> 00:03:27.228
Still happening under the hood but
it's getting typed in for

61
00:03:27.228 --> 00:03:32.192
us essentially by JavaScript when
we use this magic key word new.

62
00:03:32.192 --> 00:03:37.321
Not magic, there is no magic there,
this key word new.

63
00:03:37.321 --> 00:03:40.368
When we run this userCreator function,

64
00:03:40.368 --> 00:03:46.012
with the new key word in front of it,
it behaves in a totally under the hood,

65
00:03:46.012 --> 00:03:49.974
similar way to this,
not identical, but similar.

66
00:03:49.974 --> 00:03:54.040
But it's gonna automate so
much of the hard work we did here,

67
00:03:54.040 --> 00:03:56.606
declaring and so forth, let's see.

68
00:03:56.606 --> 00:03:58.870
When we call the constructor function,

69
00:03:58.870 --> 00:04:01.808
this guy here is known as
our constructor function.

70
00:04:01.808 --> 00:04:04.750
With new in front, we automate two things,

71
00:04:04.750 --> 00:04:07.862
we automatically create
the new user object.

72
00:04:07.862 --> 00:04:12.089
We automatically return out that
user object when complete and

73
00:04:12.089 --> 00:04:14.089
store in user1 for example.

74
00:04:14.089 --> 00:04:20.030
Who can see, why we might, we have to
rethink how we write this code then?

75
00:04:20.030 --> 00:04:25.677
Cuz right now I declare and object
called new user, it's an empty object.

76
00:04:25.677 --> 00:04:30.050
And then to fill in the property's name,
how do I refer to that object, Katie?

77
00:04:30.050 --> 00:04:33.700
What label do I use to refer to
the object to fill in the name property?

78
00:04:33.700 --> 00:04:34.202
&gt;&gt; off screen female: New user [CROSSTALK]

79
00:04:34.202 --> 00:04:35.315
[INAUDIBLE].
&gt;&gt; Will Sentance: New user,

80
00:04:35.315 --> 00:04:38.888
if I'm automatically
creating under this line,

81
00:04:38.888 --> 00:04:42.470
JavaScript is going to
automate this line for us.

82
00:04:42.470 --> 00:04:44.940
What's the label for my object?

83
00:04:44.940 --> 00:04:47.706
That label's gone,
that's automatically done for me.

84
00:04:47.706 --> 00:04:50.075
The object is created for me by Java.

85
00:04:50.075 --> 00:04:52.996
Everything in red is stuff
that the new keyword,

86
00:04:52.996 --> 00:04:56.916
when I run the user-created function,
instead of but

87
00:04:56.916 --> 00:05:01.852
instead with a new keyword in front of it,
I get an object automatically created.

88
00:05:01.852 --> 00:05:04.535
And that object gets automatically, again,

89
00:05:04.535 --> 00:05:08.540
everything in red is automatically
done for us, gets returned out.

90
00:05:08.540 --> 00:05:12.933
But how do I fill in properly to
something that's been auto-created?

91
00:05:12.933 --> 00:05:16.101
Anyone got an idea how JavaScript
might allow me to point to,

92
00:05:16.101 --> 00:05:17.290
refer to that object?

93
00:05:17.290 --> 00:05:20.985
Anyone, what might be useful
placeholder keyword or

94
00:05:20.985 --> 00:05:24.770
word that we could use to
point to that object, Katie?

95
00:05:24.770 --> 00:05:26.912
What do you think might be a useful word,

96
00:05:26.912 --> 00:05:28.040
Griffin?
&gt;&gt; off screen male: This?

97
00:05:28.040 --> 00:05:28.827
&gt;&gt; Will Sentance: It's thiis,

98
00:05:28.827 --> 00:05:32.710
it's a different use of the word this,
totally different use.

99
00:05:32.710 --> 00:05:36.390
But it still, JavaScript when we use view,

100
00:05:36.390 --> 00:05:41.965
it creates a new object by default,
and gives it the label of this.

101
00:05:41.965 --> 00:05:46.981
So behind the scenes we're sort of going,
not new user but behind the scenes we're

102
00:05:46.981 --> 00:05:51.800
sort of going this is equal to object to
print empty object but it's automatic.

103
00:05:51.800 --> 00:05:53.890
We're gonna see which
bits get cut in a second.

104
00:05:53.890 --> 00:05:57.186
We're not writing this,
JavaScript inserts this for

105
00:05:57.186 --> 00:06:00.800
us because we used the new
keyword in front of userCreator.

106
00:06:00.800 --> 00:06:02.240
So, who can now see another problem?

107
00:06:02.240 --> 00:06:04.568
We now know how you can
refer to our object, but

108
00:06:04.568 --> 00:06:07.030
who can see another problem
by this automation?

109
00:06:07.030 --> 00:06:10.770
By automating this line,
by automatically creating the object.

110
00:06:10.770 --> 00:06:12.555
What's another problem
here that someone can see?

111
00:06:12.555 --> 00:06:15.305
Andrea can you see?
&gt;&gt; Will Sentance: Without existing

112
00:06:15.305 --> 00:06:16.130
structure.

113
00:06:17.310 --> 00:06:20.194
Your eyes moved in the way of.
&gt;&gt; off screen female: [LAUGH] I don't

114
00:06:20.194 --> 00:06:24.234
know.
&gt;&gt; Will Sentance: What do you think?

115
00:06:24.234 --> 00:06:24.874
&gt;&gt; off screen female: Is there still

116
00:06:24.874 --> 00:06:26.422
a bond?
&gt;&gt; Will Sentance: How did we

117
00:06:26.422 --> 00:06:27.190
get that bond?

118
00:06:27.190 --> 00:06:29.897
Cause before we manually
made that bond we said,

119
00:06:29.897 --> 00:06:32.880
object dot create parenthesis
user function store.

120
00:06:34.840 --> 00:06:36.750
Now we don't get a chance
to make that bond.

121
00:06:36.750 --> 00:06:39.940
That's gonna be automatically done for us.

122
00:06:39.940 --> 00:06:43.186
The bond here is also
going to be automated.

123
00:06:43.186 --> 00:06:44.851
But if it's all gonna be automated,

124
00:06:44.851 --> 00:06:48.750
what's it going to refer to?
&gt;&gt; off screen male: This?

125
00:06:48.750 --> 00:06:50.016
&gt;&gt; Will Sentance: No, cuz this is this

126
00:06:50.016 --> 00:06:55.090
object here, we want something up here
that is gonna be a shared function store.

127
00:06:57.180 --> 00:07:05.078
Hm, something like, where do we end up
actually storing our shared functions?

128
00:07:05.078 --> 00:07:08.641
Well Java needs a default place,
it need default place and

129
00:07:08.641 --> 00:07:12.360
it chooses the default place for
the userCreator function.

130
00:07:12.360 --> 00:07:16.284
There could be other functions quiz
question creator, game board creator.

131
00:07:16.284 --> 00:07:19.404
Any function which will
return all the data and

132
00:07:19.404 --> 00:07:23.164
functionality associated,
it needs a default place.

133
00:07:23.164 --> 00:07:28.160
Before I tell you what the default
place is, you need to know something.

134
00:07:28.160 --> 00:07:32.186
Many of you already know,
we've said is many times,

135
00:07:32.186 --> 00:07:35.771
functions in JavaScript
are really just what?

136
00:07:35.771 --> 00:07:37.837
Anyone remember?
&gt;&gt; off screen male: Objects?

137
00:07:37.837 --> 00:07:39.503
&gt;&gt; Will Sentance: Objects, okay, so

138
00:07:39.503 --> 00:07:43.623
if that's the case,
userCreator is a function.

139
00:07:43.623 --> 00:07:47.690
Yeah, no problem, it's a function.

140
00:07:47.690 --> 00:07:50.670
There it is, it's a function.

141
00:07:50.670 --> 00:07:54.122
So if I treat userCreator as a function,
and put parenthesis on the end,

142
00:07:54.122 --> 00:07:55.488
it runs its functionality.

143
00:07:55.488 --> 00:07:56.666
Hooray, but

144
00:07:56.666 --> 00:08:00.650
what is userCreator also Andrew?
&gt;&gt; off screen male: An object.

145
00:08:00.650 --> 00:08:02.331
&gt;&gt; Will Sentance: An object,

146
00:08:02.331 --> 00:08:05.530
it's also an object.

147
00:08:07.610 --> 00:08:11.610
So if I treat userCreator as an object,
it behaves as an object.

148
00:08:11.610 --> 00:08:15.757
If I try and store on userCreator,

149
00:08:15.757 --> 00:08:19.904
userCuserreator.Andrew =3,

150
00:08:19.904 --> 00:08:24.910
that has no consequences to my function.

151
00:08:24.910 --> 00:08:30.680
The next line,
I can still go userCreator( ).

152
00:08:30.680 --> 00:08:34.590
If I treat it like an object,
it does its object stuff.

153
00:08:34.590 --> 00:08:36.918
If I treat it like a function,
it does its function stuff.

154
00:08:36.918 --> 00:08:41.611
Who think, who feels this a bit weird?

155
00:08:41.611 --> 00:08:43.025
Raise all your hand who feels a bit weird.

156
00:08:43.025 --> 00:08:45.380
Who feels that's odd to me.

157
00:08:45.380 --> 00:08:47.730
Okay, good, at least we're being honest.

158
00:08:47.730 --> 00:08:50.861
It is a bit weird, so
if I did this line here,

159
00:08:50.861 --> 00:08:54.930
what would I have in userCreator
in this object version,

160
00:08:54.930 --> 00:08:59.294
Andrew?
&gt;&gt; off screen male: In Andrew?

161
00:08:59.294 --> 00:09:00.659
[CROSSTALK] [INAUDIBLE]
&gt;&gt; Will Sentance: Andrew as the property

162
00:09:00.659 --> 00:09:02.118
and the value would be?
&gt;&gt; off screen male: Three?

163
00:09:02.118 --> 00:09:03.288
&gt;&gt; Will Sentance: Three, yeah,

164
00:09:03.288 --> 00:09:09.590
now there's one way I've heard, I think is
quite a smart way of thinking about it.

165
00:09:09.590 --> 00:09:14.480
In reality, userCreator is a function,
but it really is like an object first.

166
00:09:14.480 --> 00:09:19.700
It's an object first,
with a special property on it called CALL,

167
00:09:19.700 --> 00:09:23.500
which is the running of the functionality.

168
00:09:23.500 --> 00:09:26.080
This is not necessarily respective
of how we actually have it.

169
00:09:26.080 --> 00:09:30.060
But think of JavaScript functions
as really just an object.

170
00:09:30.060 --> 00:09:35.573
And when we do userCreator( ), what we're
really doing is say go run userCreator and

171
00:09:35.573 --> 00:09:38.760
its call property,
which is the functionality.

172
00:09:38.760 --> 00:09:42.047
I know that sounds weird but
that's really what we're doing.

173
00:09:42.047 --> 00:09:47.506
Figure it as being the functionality
is sort of there under a call property,

174
00:09:47.506 --> 00:09:49.240
a run me property.

175
00:09:49.240 --> 00:09:50.960
Otherwise is just an, so
if you're thinking wow,

176
00:09:50.960 --> 00:09:52.360
how can it be both
things at the same time?

177
00:09:52.360 --> 00:09:56.100
Well, really it's just an object with
some functionality that can be run.

178
00:09:56.100 --> 00:09:57.800
Even though we think it
was a function first.

179
00:09:57.800 --> 00:10:03.873
It's really an object first, but we
obviously use this functionality far more.

180
00:10:03.873 --> 00:10:07.900
But it really is an object first
with functionality attached.

181
00:10:07.900 --> 00:10:11.844
But we always, when we do ( ),
we speak to its functionality bit.

182
00:10:11.844 --> 00:10:16.625
Okay, let's have fun on that cuz it
really is important for us to understand.

183
00:10:16.625 --> 00:10:20.277
It's our final piece of knowledge
we need to understand for

184
00:10:20.277 --> 00:10:23.285
us to be able to use the new
key word effectively.

185
00:10:23.285 --> 00:10:24.135
Let's have fun.

