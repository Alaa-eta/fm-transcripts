WEBVTT

1
00:00:00.390 --> 00:00:04.090
&gt;&gt; Will Sentance: In the challenges
we started to encounter,

2
00:00:04.090 --> 00:00:06.180
this magic keyword new.

3
00:00:06.180 --> 00:00:11.590
So we can remind ourselves
that we wanted a function

4
00:00:11.590 --> 00:00:17.160
that when called, when run, would return
out little baby objects, user one.

5
00:00:17.160 --> 00:00:20.810
Call the first one, user 1, next one
user 2, user 5,000, user whatever.

6
00:00:20.810 --> 00:00:24.710
But we wanna have available on each
of those objects our functionality.

7
00:00:24.710 --> 00:00:26.430
Have I mentioned this yet?

8
00:00:26.430 --> 00:00:27.790
I know I've mentioned this many times.

9
00:00:27.790 --> 00:00:29.210
This is our fundamental goal.

10
00:00:29.210 --> 00:00:31.350
Can I call this function on the object?

11
00:00:31.350 --> 00:00:33.610
Is it available right there on the object?

12
00:00:33.610 --> 00:00:34.980
That's all I want!

13
00:00:34.980 --> 00:00:38.110
But I don't wanna have multiple
copies of this function on user 1,

14
00:00:38.110 --> 00:00:39.880
and user 2, user 5,000.

15
00:00:39.880 --> 00:00:42.430
So along comes this special

16
00:00:42.430 --> 00:00:46.730
shared store of the functions that I
could ever want on user one, user.

17
00:00:46.730 --> 00:00:48.030
It wouldn't just be increment login.

18
00:00:48.030 --> 00:00:54.740
It would be increment login, logout,
change avatar, display avatar, etc, etc.

19
00:00:54.740 --> 00:00:58.840
All those functions on user functions
store would be available when I call user

20
00:00:58.840 --> 00:01:01.140
one dot that function.

21
00:01:01.140 --> 00:01:05.300
Cuz when I don't find that
function on user one,

22
00:01:05.300 --> 00:01:10.660
my prototypal nature of JavaScript
means I check the _proto_, where I find

23
00:01:10.660 --> 00:01:16.250
a bond through the prototype chain to
the next object up, user function store.

24
00:01:16.250 --> 00:01:21.750
Okay, but I'm sure you agree Muhammad,
quite a lot of space here

25
00:01:21.750 --> 00:01:27.960
of our typing is being taken up by
creating that new user object in here, and

26
00:01:29.330 --> 00:01:34.550
creating that bond to that shared function
store, and returning the other object.

27
00:01:34.550 --> 00:01:36.620
Who comes from a true OOP language?

28
00:01:36.620 --> 00:01:38.964
Do you do all that stuff by hand there?

29
00:01:38.964 --> 00:01:40.470
I know you do not.

30
00:01:40.470 --> 00:01:45.354
And JavaScript increasingly wants us to
feel liberated from all of this manual

31
00:01:45.354 --> 00:01:47.652
work of making our prototype bonds.

32
00:01:49.081 --> 00:01:49.644
&gt;&gt; Will Sentance: Muhammad.

33
00:01:51.875 --> 00:01:54.430
&gt;&gt; Will Sentance: All
these prototype bonds?

34
00:01:54.430 --> 00:01:57.170
I hate putting you away from the pairing.

35
00:01:57.170 --> 00:01:59.020
I'm sorry, I feel very bad.

36
00:01:59.020 --> 00:02:01.530
The pairing is where the real value's at,
it really is.

37
00:02:02.860 --> 00:02:07.190
But right now, we're gonna see
our solution three in a moment.

38
00:02:07.190 --> 00:02:09.240
Man, let's see our
review of this approach.

39
00:02:09.240 --> 00:02:12.140
Problems?
No problems, this is a beautiful approach.

40
00:02:12.140 --> 00:02:14.930
I love this approach,
maybe a little long winded.

41
00:02:14.930 --> 00:02:20.690
We declared a new variable with an object
associated with a bond to function store.

42
00:02:20.690 --> 00:02:22.480
We've returned out that object.

43
00:02:23.650 --> 00:02:25.480
Six words, that's not bad.

44
00:02:25.480 --> 00:02:31.040
But I will say this, this is super
sophisticated, but it is non-standard.

45
00:02:31.040 --> 00:02:36.280
This is a non-standard way of creating
our objects with shared functionality.

46
00:02:36.280 --> 00:02:39.350
It's a non-standard way,
we have a standardized way.

47
00:02:39.350 --> 00:02:41.790
The downside of this approach,
yes six words, but

48
00:02:41.790 --> 00:02:46.800
also once you start creating objects
in which you have your data and

49
00:02:46.800 --> 00:02:49.930
functionality, you start doing this for
everything.

50
00:02:49.930 --> 00:02:51.510
You're creating a quiz game,

51
00:02:51.510 --> 00:02:56.390
you generate a quiz board as an object
with functionality attached to it.

52
00:02:56.390 --> 00:02:57.725
It's a single instance of the quiz board.

53
00:02:57.725 --> 00:02:59.060
You're not going to create more of them.

54
00:02:59.060 --> 00:03:01.110
You just start thinking OOP for
everything.

55
00:03:01.110 --> 00:03:05.671
And therefore, if you are manually
doing this shit inside each time, yeah,

56
00:03:05.671 --> 00:03:07.368
maybe there is a better way.

57
00:03:07.368 --> 00:03:09.825
Another language is you're not doing
this if you are trying to achieve OOP.

58
00:03:09.825 --> 00:03:13.170
But, I'll say it this way, sophisticated.

59
00:03:13.170 --> 00:03:15.784
We get to see every precise bit.

60
00:03:15.784 --> 00:03:20.630
We get to manually set our bond to the,
hey, we now know what's actually going on.

61
00:03:20.630 --> 00:03:22.780
But a lot of this stuff gets automated.

62
00:03:22.780 --> 00:03:24.795
It's still happening under the hood.

63
00:03:24.795 --> 00:03:29.038
But it's getting typed in for
us, essentially,

64
00:03:29.038 --> 00:03:33.289
by JavaScript when we use
this magic keyword new.

65
00:03:33.289 --> 00:03:36.390
It's not magic, there's not a lot
of magic there, this keyword new.

66
00:03:37.430 --> 00:03:44.170
When we run this userCreator function
with the new keyword in front of it,

67
00:03:44.170 --> 00:03:50.070
it behaves in a totally under
the hood similar way to this.

68
00:03:50.070 --> 00:03:53.340
Not identical, but similar,
but it's gonna automate so

69
00:03:53.340 --> 00:03:56.470
much of the hard work we did
here declaring the and so forth.

70
00:03:56.470 --> 00:04:00.550
Let's see, when we call the constructor
function, this guy here is known

71
00:04:00.550 --> 00:04:05.410
as our constructor function,
with new in front, we automate two things.

72
00:04:05.410 --> 00:04:08.180
We automatically create
the new user object.

73
00:04:09.550 --> 00:04:13.060
We automatically return out that user
object when complete and store in user1,

74
00:04:13.060 --> 00:04:13.800
for example.

75
00:04:16.960 --> 00:04:19.750
We have to rethink how
we write this code then.

76
00:04:19.750 --> 00:04:23.780
Cuz right now,
I declare an object called new user.

77
00:04:24.860 --> 00:04:25.880
It's an empty object.

78
00:04:25.880 --> 00:04:30.190
And then to fill in the property's name,
how do I refer to that object, Katie?

79
00:04:30.190 --> 00:04:34.200
What label do I use to refer to
the object, to fill in the name property?

80
00:04:34.200 --> 00:04:35.220
&gt;&gt; Katie: New user.
&gt;&gt; Will Sentance: New user,

81
00:04:35.220 --> 00:04:37.420
if I'm automatically creating
that out of this line,

82
00:04:37.420 --> 00:04:42.970
JavaScript is going to
automate this line for us.

83
00:04:42.970 --> 00:04:45.890
What's the label for my object?

84
00:04:45.890 --> 00:04:49.090
That label's gone, and
that's automatically done for me.

85
00:04:49.090 --> 00:04:52.970
The object is created for me by Java.

86
00:04:52.970 --> 00:04:55.489
Everything in red is stuff
that the new keyword.

87
00:04:55.489 --> 00:04:58.651
When I run the userCreator
function instead of but

88
00:04:58.651 --> 00:05:00.945
instead with the new
keyword in front of it,

89
00:05:00.945 --> 00:05:04.913
I get an object automatically created and
that object gets automatically,

90
00:05:04.913 --> 00:05:08.819
again everything in red is automatically
done for us, gets returned out.

91
00:05:08.819 --> 00:05:13.034
But how do I fill in properly
something that's been auto created?

92
00:05:13.034 --> 00:05:15.934
Anyone got an idea of how JavaScript
might allow me to point to,

93
00:05:15.934 --> 00:05:16.986
refer to that object?

94
00:05:16.986 --> 00:05:20.491
Anyone, what might be a useful
placeholder keyword, or

95
00:05:20.491 --> 00:05:23.493
word, that we could use
to point to that object?

96
00:05:23.493 --> 00:05:27.190
Katie, what do you think
might be a useful word?

97
00:05:27.190 --> 00:05:27.900
Griffin?

98
00:05:27.900 --> 00:05:28.540
&gt;&gt; Griffin: This?

99
00:05:28.540 --> 00:05:29.740
&gt;&gt; Will Sentance: It's this.

100
00:05:29.740 --> 00:05:32.710
It's a different use of the word,
this, totally different use.

101
00:05:32.710 --> 00:05:35.770
But it's still refer,
JavaScript, when we use new,

102
00:05:35.770 --> 00:05:42.460
create an empty object by default,
and gives it the label of this.

103
00:05:42.460 --> 00:05:46.666
So behind the scenes, we're sort of going,
not new user, but behind the scenes,

104
00:05:46.666 --> 00:05:51.090
we're sort of going, this is equal
to object.create, empty object.

105
00:05:51.090 --> 00:05:54.390
But it's automatic, we're gonna see
which bits get cut in a second.

106
00:05:54.390 --> 00:05:57.440
We're not writing this,
JavaScript inserts this for us.

107
00:05:57.440 --> 00:06:00.800
Because we use the new keyword
in front of user creator.

108
00:06:00.800 --> 00:06:02.740
So who can now see another problem?

109
00:06:02.740 --> 00:06:04.540
We now know how we can
refer to our object.

110
00:06:04.540 --> 00:06:08.910
But who can see another problem that this
automation, by automating this line,

111
00:06:08.910 --> 00:06:10.710
by automatically creating another object,

112
00:06:10.710 --> 00:06:12.950
what's another problem
here that someone can see?

113
00:06:12.950 --> 00:06:14.680
Andrea, can you see?

114
00:06:14.680 --> 00:06:16.130
With our existing structure.

115
00:06:17.280 --> 00:06:20.200
Yeah, your eyes moved in the way of.

116
00:06:20.200 --> 00:06:21.200
&gt;&gt; Andrea: [LAUGH] I don't know, sorry.

117
00:06:21.200 --> 00:06:22.280
&gt;&gt; Will Sentance: What do you think,
Shelby?

118
00:06:24.340 --> 00:06:25.950
&gt;&gt; Shelby: Is there still a bond?

119
00:06:25.950 --> 00:06:26.889
&gt;&gt; Will Sentance: How do we get that bond?

120
00:06:26.889 --> 00:06:29.560
Cuz before,
we manually made that bond, didn't we?

121
00:06:29.560 --> 00:06:34.840
We said user
object.create(userfunctionstore).

122
00:06:34.840 --> 00:06:37.250
Now, we don't get a chance
to make that bond.

123
00:06:37.250 --> 00:06:39.940
That's going to be automatically done for
us.

124
00:06:39.940 --> 00:06:43.520
The bond here is also gonna be automated.

125
00:06:43.520 --> 00:06:47.097
But if it's automated,
what's it gonna refer to?

126
00:06:47.097 --> 00:06:47.840
&gt;&gt; Speaker 6: This.

127
00:06:49.610 --> 00:06:50.900
&gt;&gt; Will Sentance: Yeah,
cuz this is this object here.

128
00:06:50.900 --> 00:06:55.268
We want something up here that's
gonna be a shared function store.

129
00:06:59.858 --> 00:07:01.328
&gt;&gt; Will Sentance: Something like,

130
00:07:01.328 --> 00:07:06.136
where do we end up actually
storing our shared functions?

131
00:07:06.136 --> 00:07:07.870
Well, Java needs a default place.

132
00:07:08.890 --> 00:07:11.980
It needs a default place, and
it chooses the default place for

133
00:07:11.980 --> 00:07:13.320
the user creator function.

134
00:07:13.320 --> 00:07:18.050
If the other functions like quiz question
creator, or game board creator, anything

135
00:07:18.050 --> 00:07:21.610
that's going to return on an object with
all the data functionality associated.

136
00:07:21.610 --> 00:07:23.470
You need a default place.

137
00:07:23.470 --> 00:07:27.540
Before I tell you what a default place is,
you need to know something.

138
00:07:27.540 --> 00:07:29.630
Many of you already know,
we've said it many times,

139
00:07:29.630 --> 00:07:34.026
functions in JavaScript
are really just what?

140
00:07:34.026 --> 00:07:36.840
Anyone remember?

141
00:07:36.840 --> 00:07:37.352
&gt;&gt; Speaker 7: Objects.

142
00:07:37.352 --> 00:07:41.465
&gt;&gt; Will Sentance: Objects,
okay, so if that's the case,

143
00:07:41.465 --> 00:07:44.940
userCreator is a function.

144
00:07:44.940 --> 00:07:46.420
Yeah, no problem, it's a function.

145
00:07:48.190 --> 00:07:50.670
There it is, it's a function.

146
00:07:50.670 --> 00:07:52.990
So if I treat userCreator as a function,

147
00:07:52.990 --> 00:07:57.130
and put parens on the end,
it runs its functionality, hurray.

148
00:07:57.130 --> 00:08:00.410
But what is userCreator also, Andrew?

149
00:08:00.410 --> 00:08:01.150
&gt;&gt; Andrew: An object.

150
00:08:01.150 --> 00:08:05.530
&gt;&gt; Will Sentance: An object,
it's also an object.

151
00:08:07.610 --> 00:08:12.110
So if I treat userCreator as an object,
it behaves as an object.

152
00:08:12.110 --> 00:08:16.211
If I try and store on userCreator,

153
00:08:16.211 --> 00:08:19.749
usercreator.andrew = 3,

154
00:08:19.749 --> 00:08:24.707
that has no consequences on my function.

155
00:08:24.707 --> 00:08:30.953
The next line I can
still go userCreator ().

156
00:08:30.953 --> 00:08:34.590
If I treat it like an object,
it does its object stuff.

157
00:08:34.590 --> 00:08:38.198
If I treat it like a function,
it does its function stuff.

158
00:08:38.198 --> 00:08:41.182
Who feels that it's a bit weird?

159
00:08:41.182 --> 00:08:43.500
Raise your hand if you
think that's a bit weird.

160
00:08:43.500 --> 00:08:45.380
Feels a bit like, that's odd to me.

161
00:08:45.380 --> 00:08:48.230
Okay, good, I mean,
at least we're being honest.

162
00:08:48.230 --> 00:08:50.861
It is a bit weird.

163
00:08:50.861 --> 00:08:52.185
So if I did this line here,

164
00:08:52.185 --> 00:08:55.633
what would I have in userCreator
as in its object version, Andrew?

165
00:08:59.018 --> 00:08:59.593
&gt;&gt; Andrew: Andrew.

166
00:08:59.593 --> 00:09:02.105
&gt;&gt; Will Sentance: Andrew, that's
the property and the value would be?

167
00:09:02.105 --> 00:09:03.847
&gt;&gt; Andrew: 3.
&gt;&gt; Will Sentance: 3, yeah, now,

168
00:09:03.847 --> 00:09:09.606
there's one way I've heard I think it's
quite a smart way of thinking about it.

169
00:09:09.606 --> 00:09:14.980
In reality, userCreator, it's a function,
but it really is like an object first.

170
00:09:14.980 --> 00:09:20.600
It's an object first with a special
property on it called call,

171
00:09:20.600 --> 00:09:23.500
which is the running of the functionality.

172
00:09:23.500 --> 00:09:26.580
This not necessarily respective
of how we actually have it.

173
00:09:26.580 --> 00:09:30.060
But think of JavaScript functions
as really just an object.

174
00:09:30.060 --> 00:09:34.540
And when we do userCreator (), what
we're really doing is say, go run user

175
00:09:34.540 --> 00:09:39.260
creator and its call property,
which is the functionality.

176
00:09:39.260 --> 00:09:42.340
I know that sounds weird, but
that's really what we're doing.

177
00:09:42.340 --> 00:09:47.840
Think of it as being the functionality
is sort of there under a call property,

178
00:09:47.840 --> 00:09:49.240
a run me property.

179
00:09:49.240 --> 00:09:50.280
Otherwise, it's just.

180
00:09:50.280 --> 00:09:52.860
So if you're thinking wow, how can
it be both things at the same time?

181
00:09:52.860 --> 00:09:56.100
Well, really it's just an object with
some functionality that can be run.

182
00:09:56.100 --> 00:10:00.680
Even though we think of it as a function
first, it's really an object first.

183
00:10:00.680 --> 00:10:04.040
But we, obviously,
use its functionality far more.

184
00:10:04.040 --> 00:10:07.900
But it really is an object first
with functionality attached.

185
00:10:07.900 --> 00:10:12.030
But we always, when we do (),
we speak to its functionality bit.

186
00:10:12.030 --> 00:10:16.000
Okay, let's have thumbs on that,
because it really is important for

187
00:10:16.000 --> 00:10:16.684
us to understand.

188
00:10:16.684 --> 00:10:19.730
This is our final piece of
knowledge we need to understand for

189
00:10:19.730 --> 00:10:23.560
us to be able to use the new
keyword effectively.

190
00:10:23.560 --> 00:10:24.160
Let's have thumbs.

