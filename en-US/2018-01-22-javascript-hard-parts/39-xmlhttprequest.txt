[00:00:00]
>> Will Sentance: We're gonna go through it line by line and see it play out in actions. This is our final function for Asynchronous JavaScript. Line 1, Art, what are we creating?
>> Art: We're declaring the display function.
>> Will Sentance: Exactly, we're declaring, we're defining the display function, there it is.
>> Will Sentance: Good, line 2, so this line here is using jQuery's library.

[00:00:31]
But we are really inside this function, we're going to do something else. Like this function does actually create an execution context in the conventional sense, unlike set timeout, which is built into JavaScript. $.get is not built into javascript, but it wraps up some built in functionality. So we're not going to look into how $.get works, it's just a jQuery function.

[00:00:58]
But what it does do inside of it, which we can do ourselves manually in JavaScript, is spin up and speak to a web browser feature. API, web browser feature, the one that does web requests, data requests. That's what happens inside this $.get. So we're gonna treat it like it's a built in function.

[00:01:18]
So it's not going to create an execution console in the course like in the conventional sense, it is, because it's not a built-in function. It's got inside itself, use a built in function. But unlike the set timer which is very simple single line, the setting up the built-in function that makes a web request is four or five lines.

[00:01:36]
So we've wrapped it in this $.get. Just think of it just like set time out, it's not gonna do anything interesting in JavaScript LAN. It's going to speak to web browser feature LAN. Just like set timeout does. Actually, it does a few things, but they're not relevant to what we, they're not important.

[00:01:55]
All it does is spin up some thing in web browser feature LAN, not JavaScript LAN. So on that note, let's see that happen. $.get, just like set timeout, we're gonna invoke it. We're gonna pass to it this string which is a URL, to somewhere on the Internet as a pretend API address.

[00:02:21]
Somewhere on the Internet where we have supposedly a single Tweet. Which we can access from our API how wonderfully convenient, and unlikely that is. And we're gonna pass to it this whole function definition, not calling this function, just its definition, okay? Now, how do I know what this is gonna look like?

[00:02:48]
Well, I go and look at the documentation for JavaScript, or in this case, jQuery. And look and see, what do I expect to pass for this function? Or, it says pass a URL, an API address that I can go and get data from, and a function that will be run when this API request is request to data is complete.

[00:03:10]
So even though this does actually create and execution context because inside the $.get is not a built-in function to JavaScript inside of it it's using built-in functions to speak to APIs. So it's gonna treat it the same way and rather than say create and execution context we're gonna say, it speaks to web browser feature.

[00:03:32]
Which feature? Well, it speaks to another one. We can go and see a list of all these features on MDN. We've seen timer, this one is called xhrHttpRequest, and what's it take in? Well, remember this is not a JavaScript function in the conventional, this is a browser feature, a browser API.

[00:03:57]
That sounds a bit confusing because it itself going to make a request to an API, but it's a browser feature. And it takes in our functionality or reference or functionality and our URL that we're gonna speak to. And down here in Web Browser API LAN, we yes, create, look at this, xhrHttpRequest before we created a timer.

[00:04:28]
Now, we're gonna create a xhrHttpRequest. And associated with it is our functionality which we call display. And to be really clear it doesn't care it's all display that's all in JavaScript. That's just down here. And, is it complete? Now, before our timer completed instantly. This one ain't gonna complete instantly.

[00:04:53]
This one is gonna go and do some work. So firstly, it's got to figure out what is it going to be sending. Where's it even going? Where's it even sending out information? Well, it's sending out to Twitter.com. And we're not gonna get into exactly how that API request works.

[00:05:10]
But just know that this is a feature of JavaScript, not JavaScript, I'm sorry. It's a feature of the browser, Chrome or Firefox, whatever, it's a feature of the browser that allows our web browser to speak to the Internet, and therefore, to Twitter's server where this data is gonna be found.

[00:05:27]
So it's gonna bundle up a message to send off known as an HTTP request, to get this data, it has a URL, it has a method. A method which is I'm getting data, server, expect me to be wanting to receive some data. We know that because we use this get, the way this get also makes it's way in to xhrHttpRequest.

[00:05:54]
And we want to know exactly what data we need. Well, it's /willsen/tweet/1. There we go, those are the things. And this becomes a big old message that gets sent off.
>> Will Sentance: That gets sent off to Twitter's.
>> Will Sentance: Twitter LLC, so to speak servers. And at this point, $.get has done its work.

[00:06:28]
It's done its work and we are now back.
>> Will Sentance: It's done it's work in web browser, it's done its job of setting up this web browser feature. Web Browser API features in the background, and it's done its work and it's gonna go back to the global execution context, where what do we encounter?

[00:06:51]
Mohamed, what's the next line in our global execution context?
>> Art: Log me first.
>> Will Sentance: Good, for a man who's eyes were slowly falling slots that was truly amazing stepping up there well done. Me first, there it is. And so me first happens at maybe one millisecond, perfect, at one millisecond occurs over here.

[00:07:11]
Now,
>> Will Sentance: What's on our Call Stack at this point? Well, we're in global. We're in global.
>> Will Sentance: We're always in global. We've done our console log (Me First).
>> Will Sentance: Me First, we've our console log (Me First), there it is, Me First. But in the background is our xhrHttpRequest complete?

[00:07:42]
Arthur, is it compete yet?
>> Art: It should be.
>> Will Sentance: Would it be complete immediately?
>> Art: No.
>> Will Sentance: Yeah, how long is it gonna take typically? Maybe 100 milliseconds, 200 milliseconds to go and get our data from Twitter's server and bring it back. So let's just say, I don't know, 200 milliseconds, we get our data back from Twitter's servers.

[00:08:07]
And it comes back and it's passed into the form of an object with, this is a little bit approximate, an object with a property post that says, hi. Perfect, we've got our data back at about 200 milliseconds. Now, at this point, Katie, what do you think is going to happen now that we've completed, we have now completed this background API request.

[00:08:39]
This background xhrHttpRequest is completed, we've got back our data. We said go off to Twitter, try and get this data, this tweet. We did, back in the data. What do we think is gonna happen now, Katie, at this point? We've completed the function?
>> Shelby: I'm Shelby.
>> Will Sentance: Shelby, sorry, man.

[00:08:56]

>> Shelby: [LAUGH]
>> Will Sentance: What is the worst case. See, I never really had a problem with confusing redheads before.
>> Shelby: It's the hair color?
>> Will Sentance: But this has been an on going issue. Sorry Shelby, go ahead Shelby.
>> Shelby: Push it to the call stack?
>> Will Sentance: Push it being? What function now do we pass?

[00:09:12]

>> Shelby: Display?
>> Will Sentance: Display function, exactly, the call. And do we have anything left to run in global? No, we don't. So no problem, exactly. Right on top, Shelby. I already said you're my favorite person in the class, Shelby. Right on top, we call our display function. We call our display function.

[00:09:29]
Now, we were waiting to run display. We wanted to defer, why did we want to defer display in the first place?
>> Shelby: We were waiting to-
>> Will Sentance: It's gonna take a while. For the data to come back, yeah. So, yeah, Shelby, so?
>> Shelby: [LAUGH]
>> Will Sentance: Exactly, exactly as you say.

[00:09:47]
We were waiting for the display, we were waiting for the data to come back. So this display functionality. The way this xhrHttpRequest feature of JavaScript works is that this display functionality, when the data comes back, it's going to bond itself to this display functionality. So when we push display to the Call Stack, its first parameter is gonna be filled in with what do you think, Katie?

[00:10:24]

>> Katie: The data of display.
>> Will Sentance: The data exactly.
>> Katie: So post.
>> Will Sentance: This object here is going to fill in. I'm gonna be calling the display, right now this is definition, I'm gonna call it, this definition, has a, now, this is not exactly how the function works, but has a first argument called data, something like that.

[00:10:46]
That data will be filled in with the data that came back. Now, how do we know whether it's the first argument or second argument. The first argument is actually typically an error argument. How do we even know? Documentation. Documentation of xhrHttpRequest, or documentation for $.get will say the first argument of the callback function that gets executed when the data returns, will be populated on execution with the data from the Twitter server.

[00:11:12]
Or it will say the first argument actually is an error parameter, which will be filled in with any error if an error comes back when the display function ends up being executed. The first argument will be filled an error. The second argument will be our data from the API.

[00:11:30]
Different functionality, different features will work in different ways. And that's not magic, it's just out there ready for us to go and find. We have to go and do the documentation. So Bob, at this point, Bob, we have completed our web browser API of the browser feature. XhrHttpRequest is completed, we've got our data back from Twitter's server.

[00:11:54]
We're therefore now gonna pass our call to display to our call stack. When we start executing a function Bob, executing a function, we get a brand new, Bob?
>> Bob: Execution context?
>> Will Sentance: Excellent Bob, correct. And what is that execution context for but the call to display? There it is, and what's being passed, what exact thing is being passed the display?

[00:12:17]

>> Bob: The object.
>> Will Sentance: Exactly, there it is. With post is high and we are creating new execution context with this functionality of display. Note, where are we calling display? Are we calling it inside the $.get? No, we are definitely not. Easy confusion to think that somehow display is being run inside, no, we did $.get, we moved, just like set timer, we moved straight on.

[00:12:43]
All that $.get did was spin up an xhrHttpRequest and pass a reference to the function that we passed to $.get. Now, again, $.get is actually a JavaScript function but inside of it, it's behaving just like a set timer would in that it's spinning. It's only job is to spin up to reference to create using the web browser feature xhrHttpRequest, a request off to the Twitter API.

[00:13:10]
And that's all happening here separately. And in JavaScript land, we moved straight on We did not wait for that data to come back. When we run console.log, we're at about 1 millisecond, we are not 200 millisecond later. But now, our data has come back, we're at about 201 milliseconds when we start calling it a display function.

[00:13:37]
And we're executing it so, Griffin, what's the first thing inside our local memory of our display function, Griffin?
>> Griffin: That would be the data.
>> Will Sentance: That would be the data parameter which now has what? What value associated with it?
>> Griffin: It would be the post and the high.

[00:13:55]

>> Will Sentance: So the whole object, right? Yeah, with post is high. So, when I hit the line console.log.data.post, I do console look for data post. What do I console log?
>> Griffin: Height.
>> Will Sentance: Height, there it is. At about 201 milliseconds.
>> Will Sentance: Me first was done at about 1 millisecond.

[00:14:19]
So again, we've now used a different background browser API. Now, I'm not gonna give you all of them. Your job is to go and figure out. They're all listed in MDN, but they all work this same way, as when you use a built in function $.get, inside of it uses the built in function that creates this mixer, a reference or let's say spins up a background web browser feature.

[00:14:48]
In this case it's the data request feature, the xhrHttpRequest feature. It could be a timer, it could be with a whole bunch of them. In node there's a whole bunch of them as well. They're all speaking to a non-JavaScript LAN. This is not JavaScript, this is not JavaScript.

[00:15:06]
Let's make sure we add in our two other pieces of this puzzle. Actually what happens between our completion and getting back on the call stack. Well, it's the display functionality is queued up. Display is queued up with its associated data that came back, there's our associated data.
>> Will Sentance: With its associated data, and then we checked what's the call stack clear.

[00:15:48]
Let's just go back a second, we check what's the call stack clear. We said hold on, is there something in the call back que? Is the call stack clear? That's known as the event loop that is not literally, that's why I don't like desperately calling the event loop, because it's not literally looping and checking.

[00:16:06]
But we can think of it, under the deep down of it, it's not looping it, but it's basically checking is the call set clear? Is it clear every millisecond? Is it checking, is it clear? Is it clear? Is it clear? It's clear. Well, of course, it's clear cuz it's 200 milliseconds later and there's nothing else in our code.

[00:16:21]
Console.log finished at 1 millisecond, so we're done, so it's definitely clear. And instantly we can dequeue display and push it to the call stack, there it is. Display push to the call stack at about 201 milliseconds.
>> Will Sentance: 201 milliseconds with our data that came back from the API.

[00:16:53]
Those are all our parts. And look, we took this display functionality, passed through the callback Q, and then it, once the event loop said good, we're good to go, dequeued and display, and added it, pushed it so the call stack, that where it then got executed, just as we've talked through.

[00:17:18]
You can see how, in these simple examples, these portions here doesn't really have any consequence. But for more complex examples where we have things blocking in the main thread, or where we have multiple requests. Then, this becomes very relevant and as each request completes, it's gonna queue up the relevant call back function that's being associated with a particular web browser API.

[00:17:42]
So we can spin out as many as we want, we can have 30 xhrHttpRequest all going here. As each one of them completes their function in order of the completion. It's going to be part of the core back here, queued up, not in order of when these requests were made but just in order of their completion.

