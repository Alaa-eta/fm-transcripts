[00:00:00]
>> Will Sentance: In the challenges we started to encounter this magic keyword new. So we're gonna remind ourselves that we wanted a function that when called, when run, would return out little baby objects user1, the first one user1, next one user2, user5000, user whatever. But we wanna have available on each of those objects our functionality.

[00:00:24]
Have I mentioned this yet? I know I mentioned this many times. This is our fundamental goal. Can I call this function on the object? Is it available right there on the object? That's all I want, but I don't wanna have multiple copies of this function on user1, and user2, user5000.

[00:00:40]
So along comes this special shared store of the functions that I could ever want on user1, user. It wouldn't just be increment, log in, it would be increment log in, log out, change avatar, display avatar, etc., etc. All those functions on user function store would be available when I call user1 dot that function.

[00:01:01]
Because when I don't find that function on user1, my prototype or nature of JavaScript means I check the underscore proto underscore. Where I find a bond through the prototype chain to the next object up, user function store, okay. But, I'm sure you agree Mohammed, quite a lot of the space here, of that typing is being taken up by creating that new user object in here.

[00:01:27]
And creating that bond to that shared function store, and returning out that object. Who comes from a true OOP languages? Do you do all that stuff by hand there? Uh-uh, no you do not. And JavaScript increasingly wants us to feel liberated from all this manual work of making our prototype bonds, Mohammed?

[00:01:51]
All these prototype bonds? Once I, I hate pulling away from the pairing. I'm sorry, I feel very bad. The pairing is where the real value is at, it really is. But we, right now, we're gonna see our solution three in a moment. We're gonna get, man, let's see our review of this approach.

[00:02:08]
Problems, no problems? This is a beautiful approach, I love this approach, maybe a little long winded. We declared a new variable with an object associated with it, with the bond to function store, we've returned out that object. Six words, that's not that bad, but I will say this, this is super sophisticated, but it is non-standard.

[00:02:30]
This is a non-standard way of creating our objects with shared functionality. This is a non-standard way, we have a standardized way. In the downside of this approach, yes, six words. But also, once you start creating objects in which you have your data and functionality, you start doing this for everything.

[00:02:49]
Creating a quiz game, you generate a quiz board as an object with functionality attached to it. It's a single instance of the quiz bowl, you're not gonna create more of them. You just start thinking OOP for everything. And therefore, you're manually doing this inside each time, yeah maybe it's not as, maybe there's a better way.

[00:03:06]
Another language is not doing this if you're trying to achieve OOB. But I'll say of this way sophisticated, we get to see every precise bit. We get to manually set our bond. Hey we now know what's actually going on, but a lot of this stuff gets automated. Still happening under the hood but it's getting typed in for us essentially by JavaScript when we use this magic key word new.

[00:03:32]
Not magic, there is no magic there, this key word new. When we run this userCreator function, with the new key word in front of it, it behaves in a totally under the hood, similar way to this, not identical, but similar. But it's gonna automate so much of the hard work we did here, declaring and so forth, let's see.

[00:03:56]
When we call the constructor function, this guy here is known as our constructor function. With new in front, we automate two things, we automatically create the new user object. We automatically return out that user object when complete and store in user1 for example. Who can see, why we might, we have to rethink how we write this code then?

[00:04:20]
Cuz right now I declare and object called new user, it's an empty object. And then to fill in the property's name, how do I refer to that object, Katie? What label do I use to refer to the object to fill in the name property?
>> off screen female: New user [CROSSTALK] [INAUDIBLE].

[00:04:34]

>> Will Sentance: New user, if I'm automatically creating under this line, JavaScript is going to automate this line for us. What's the label for my object? That label's gone, that's automatically done for me. The object is created for me by Java. Everything in red is stuff that the new keyword, when I run the user-created function, instead of but instead with a new keyword in front of it, I get an object automatically created.

[00:05:01]
And that object gets automatically, again, everything in red is automatically done for us, gets returned out. But how do I fill in properly to something that's been auto-created? Anyone got an idea how JavaScript might allow me to point to, refer to that object? Anyone, what might be useful placeholder keyword or word that we could use to point to that object, Katie?

[00:05:24]
What do you think might be a useful word, Griffin?
>> off screen male: This?
>> Will Sentance: It's thiis, it's a different use of the word this, totally different use. But it still, JavaScript when we use view, it creates a new object by default, and gives it the label of this. So behind the scenes we're sort of going, not new user but behind the scenes we're sort of going this is equal to object to print empty object but it's automatic.

[00:05:51]
We're gonna see which bits get cut in a second. We're not writing this, JavaScript inserts this for us because we used the new keyword in front of userCreator. So, who can now see another problem? We now know how you can refer to our object, but who can see another problem by this automation?

[00:06:07]
By automating this line, by automatically creating the object. What's another problem here that someone can see? Andrea can you see?
>> Will Sentance: Without existing structure. Your eyes moved in the way of.
>> off screen female: [LAUGH] I don't know.
>> Will Sentance: What do you think?
>> off screen female: Is there still a bond?
>> Will Sentance: How did we get that bond?

[00:06:27]
Cause before we manually made that bond we said, object dot create parenthesis user function store. Now we don't get a chance to make that bond. That's gonna be automatically done for us. The bond here is also going to be automated. But if it's all gonna be automated, what's it going to refer to?

[00:06:47]

>> off screen male: This?
>> Will Sentance: No, cuz this is this object here, we want something up here that is gonna be a shared function store. Hm, something like, where do we end up actually storing our shared functions? Well Java needs a default place, it need default place and it chooses the default place for the userCreator function.

[00:07:12]
There could be other functions quiz question creator, game board creator. Any function which will return all the data and functionality associated, it needs a default place. Before I tell you what the default place is, you need to know something. Many of you already know, we've said is many times, functions in JavaScript are really just what?

[00:07:35]
Anyone remember?
>> off screen male: Objects?
>> Will Sentance: Objects, okay, so if that's the case, userCreator is a function. Yeah, no problem, it's a function. There it is, it's a function. So if I treat userCreator as a function, and put parenthesis on the end, it runs its functionality. Hooray, but what is userCreator also Andrew?

[00:08:00]

>> off screen male: An object.
>> Will Sentance: An object, it's also an object. So if I treat userCreator as an object, it behaves as an object. If I try and store on userCreator, userCuserreator.Andrew =3, that has no consequences to my function. The next line, I can still go userCreator( ). If I treat it like an object, it does its object stuff.

[00:08:34]
If I treat it like a function, it does its function stuff. Who think, who feels this a bit weird? Raise all your hand who feels a bit weird. Who feels that's odd to me. Okay, good, at least we're being honest. It is a bit weird, so if I did this line here, what would I have in userCreator in this object version, Andrew?

[00:08:58]

>> off screen male: In Andrew? [CROSSTALK] [INAUDIBLE]
>> Will Sentance: Andrew as the property and the value would be?
>> off screen male: Three?
>> Will Sentance: Three, yeah, now there's one way I've heard, I think is quite a smart way of thinking about it. In reality, userCreator is a function, but it really is like an object first.

[00:09:14]
It's an object first, with a special property on it called CALL, which is the running of the functionality. This is not necessarily respective of how we actually have it. But think of JavaScript functions as really just an object. And when we do userCreator( ), what we're really doing is say go run userCreator and its call property, which is the functionality.

[00:09:38]
I know that sounds weird but that's really what we're doing. Figure it as being the functionality is sort of there under a call property, a run me property. Otherwise is just an, so if you're thinking wow, how can it be both things at the same time? Well, really it's just an object with some functionality that can be run.

[00:09:56]
Even though we think it was a function first. It's really an object first, but we obviously use this functionality far more. But it really is an object first with functionality attached. But we always, when we do ( ), we speak to its functionality bit. Okay, let's have fun on that cuz it really is important for us to understand.

[00:10:16]
It's our final piece of knowledge we need to understand for us to be able to use the new key word effectively. Let's have fun.

