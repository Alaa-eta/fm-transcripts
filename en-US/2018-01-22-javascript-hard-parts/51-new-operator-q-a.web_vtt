WEBVTT

1
00:00:00.390 --> 00:00:02.550
&gt;&gt; Will Sentance: All right,
let's have thumbs.

2
00:00:02.550 --> 00:00:05.310
I'm not accepting this,
I have clarifications.

3
00:00:05.310 --> 00:00:09.490
I'm clear that our functions,
when treated like functions by adding

4
00:00:09.490 --> 00:00:11.740
parens on the end of them,
behave as functions.

5
00:00:11.740 --> 00:00:17.756
If they're treated like an object,
userCreator.andrew.

6
00:00:17.756 --> 00:00:20.510
What would this return for,
what would this evaluate to, Andrea?

7
00:00:21.570 --> 00:00:25.890
&gt;&gt; Andrea: It's gonna be
an object with Andrew.

8
00:00:25.890 --> 00:00:28.274
&gt;&gt; Will Sentance: Well, but
what would me retrieving this.

9
00:00:28.274 --> 00:00:32.445
So here we've already got the Andrew
property, so userCreator.andrew,

10
00:00:32.445 --> 00:00:34.606
I'll be retrieving three, exactly.

11
00:00:34.606 --> 00:00:37.434
Okay, so let's have thumbs on that notion.

12
00:00:37.434 --> 00:00:41.225
It's weird, if part of it's just
I need more time to embrace it.

13
00:00:41.225 --> 00:00:42.960
So Andrew's got a thumb.

14
00:00:42.960 --> 00:00:46.958
Katie's got a thumb, a medium thumb.

15
00:00:46.958 --> 00:00:49.274
Art is good to go.

16
00:00:49.274 --> 00:00:51.138
Lindsay has a medium Thumb.

17
00:00:51.138 --> 00:00:53.438
Griffin has one, Griffin,
will you kick us off?

18
00:00:53.438 --> 00:00:56.950
&gt;&gt; Griffin: So if you were to use that
userCreator as a callback function,

19
00:00:56.950 --> 00:01:01.407
can you use that userCreator object data
in that function that you're using to

20
00:01:01.407 --> 00:01:02.166
call it for?

21
00:01:02.166 --> 00:01:04.219
&gt;&gt; Will Sentance: You certainly can,
but I'll just make this point.

22
00:01:04.219 --> 00:01:06.042
That wouldn't be standard practice, right?

23
00:01:06.042 --> 00:01:06.682
&gt;&gt; Griffin: Yeah.
&gt;&gt; Will Sentance: Just

24
00:01:06.682 --> 00:01:08.451
cuz it's there doesn't mean we use it.

25
00:01:08.451 --> 00:01:10.590
We use it for
this one thing we're gonna talk about.

26
00:01:10.590 --> 00:01:15.326
It isn't standard practice to bundle
them in that sense, they're functions.

27
00:01:15.326 --> 00:01:20.230
It is all fundamentally objects,
but they're user's functions, okay?

28
00:01:20.230 --> 00:01:21.495
But we can store stuff here.

29
00:01:21.495 --> 00:01:28.802
We're gonna see in a moment we're gonna
store something here, something here.

30
00:01:28.802 --> 00:01:31.114
We are gonna store something here.

31
00:01:31.114 --> 00:01:32.386
All right, anyone got that?

32
00:01:32.386 --> 00:01:34.332
Okay, Griffin go ahead.

33
00:01:34.332 --> 00:01:39.446
&gt;&gt; Griffin: Again, with the memory,
could you kind of instead of using

34
00:01:39.446 --> 00:01:46.520
the backpack or the lexicon thing could
you store it into the function's object?

35
00:01:46.520 --> 00:01:49.948
&gt;&gt; Will Sentance: This is where it
gets a bit hard with hard parts,

36
00:01:49.948 --> 00:01:55.277
is we're seeing all of the underlying
things, features of JavaScript.

37
00:01:55.277 --> 00:01:58.037
Some of them you can cross use.

38
00:01:58.037 --> 00:02:00.682
This one, the lexical scoper is a special,

39
00:02:00.682 --> 00:02:05.630
magical property that is not involved in
conventional sort of objects like this.

40
00:02:05.630 --> 00:02:07.150
It's hidden off.

41
00:02:07.150 --> 00:02:10.063
Cuz you're right, we said functions
have a hidden square bracket scope.

42
00:02:10.063 --> 00:02:11.282
That's not this guy here.

43
00:02:11.282 --> 00:02:14.120
That's a really nice
clarification by Griffin.

44
00:02:14.120 --> 00:02:17.382
This object definitely is
not that scope property.

45
00:02:17.382 --> 00:02:21.186
You remember that guy which held
on to state, live, end date, okay?

46
00:02:21.186 --> 00:02:22.681
That's an interesting one, man.

47
00:02:22.681 --> 00:02:29.766
Definitely not, no, stop it,
that's not allowed and doesn't, okay.

48
00:02:29.766 --> 00:02:31.238
Lindsay?

49
00:02:31.238 --> 00:02:32.770
&gt;&gt; Lindsay: I know I think
I got lost somewhere.

50
00:02:32.770 --> 00:02:36.602
But what's the function, what's
the function in userCreator right now?

51
00:02:38.413 --> 00:02:41.255
&gt;&gt; Will Sentance: UserCeator was declared.

52
00:02:41.255 --> 00:02:43.422
&gt;&gt; Lindsay: EVC must have helped in that.

53
00:02:43.422 --> 00:02:44.416
&gt;&gt; Will Sentance: Be with you in a second,
but

54
00:02:44.416 --> 00:02:47.530
userCreator was declared as
a function at the top, right?

55
00:02:47.530 --> 00:02:51.880
Whenever you declare a function by
default just by it's very nature,

56
00:02:51.880 --> 00:02:55.500
it's also an object, okay.

57
00:02:55.500 --> 00:02:59.307
Just declaring that, talk me through
what we did in line one there, Lindsay.

58
00:02:59.307 --> 00:03:01.358
&gt;&gt; Lindsay: We declared the function,
userCreator.

59
00:03:01.358 --> 00:03:02.611
&gt;&gt; Will Sentance: UserCreator.

60
00:03:02.611 --> 00:03:03.507
Remember how I drew my functions?

61
00:03:03.507 --> 00:03:04.507
There's a box like that.

62
00:03:04.507 --> 00:03:05.427
&gt;&gt; Lindsay: Mh-hm.

63
00:03:05.427 --> 00:03:11.308
&gt;&gt; Will Sentance: What do we do in a few
lines down and let user one equal?

64
00:03:11.308 --> 00:03:13.774
&gt;&gt; Lindsay: We declared a variable and

65
00:03:13.774 --> 00:03:18.715
assigned it whatever
the userCreator will return.

66
00:03:18.715 --> 00:03:20.411
&gt;&gt; Will Sentance: Great,
go run that functionality.

67
00:03:20.411 --> 00:03:23.077
And I know I've got to go
run the functionality, why?

68
00:03:23.077 --> 00:03:23.645
&gt;&gt; Lindsay: Because of Parens.

69
00:03:23.645 --> 00:03:24.928
&gt;&gt; Will Sentance: Parens, good.

70
00:03:24.928 --> 00:03:32.112
But let's just not forget if in the next
line I were to write userCreator.Andrew.

71
00:03:32.112 --> 00:03:36.836
In other words, treating userCreator as an
object, JavaScript's not gonna complain.

72
00:03:36.836 --> 00:03:40.710
It's gonna go yep, sure, yes,
I'm a function, but I'm also an object.

73
00:03:40.710 --> 00:03:43.520
You treat me like a function,
I run like a function.

74
00:03:43.520 --> 00:03:49.060
You put something in me like an object,
man it starts to come wierd things to say.

75
00:03:49.060 --> 00:03:51.596
You put something in me like an object,
I behave as an object.

76
00:03:51.596 --> 00:03:55.422
That is just how it is, okay Lindsay?

77
00:03:55.422 --> 00:03:58.243
So it is a function, nothing has changed.

78
00:03:58.243 --> 00:04:02.450
But if I were to treat it like an object,
userCreator and

79
00:04:02.450 --> 00:04:06.770
said I don't know,
userCreator.Andrew equal three.

80
00:04:06.770 --> 00:04:09.200
Then now if I had a console log,
if I had a console log,

81
00:04:09.200 --> 00:04:11.780
my userCreator,
I'd still see the function.

82
00:04:11.780 --> 00:04:14.980
But if I were to console log my
userCreator with this special

83
00:04:14.980 --> 00:04:19.890
Chrome dev tool, down arrow I would see
the function, but also in the properties,

84
00:04:19.890 --> 00:04:24.720
I would see some other properties and
our Andrew three, okay.

85
00:04:24.720 --> 00:04:27.720
So it's like he's not,
this is not surface level really,

86
00:04:27.720 --> 00:04:30.730
we're not gonna be doing this day to day,
but it's there.

87
00:04:30.730 --> 00:04:32.430
This is our day to day.

88
00:04:32.430 --> 00:04:33.740
This is what the function really is.

89
00:04:33.740 --> 00:04:37.590
But we can store some stuff here, but
we're not gonna be storing it ourselves.

90
00:04:37.590 --> 00:04:40.150
JavaScript stores stuff here for us.

91
00:04:40.150 --> 00:04:42.596
That's really what the real story is here.

92
00:04:42.596 --> 00:04:46.876
We treat userCreator as a function, but
JavaScript can store some stuff here for.

93
00:04:46.876 --> 00:04:50.680
We are definitely never storing Andrew
three ever, ever, ever on this object.

94
00:04:50.680 --> 00:04:53.825
Let's be really clear on that,
we're not doing that ever.

95
00:04:53.825 --> 00:05:00.066
But JavaScript can store stuff there for
us, because it has special goals and

96
00:05:00.066 --> 00:05:06.030
things it wants to achieve that we
want to make available to userCreator.

97
00:05:06.030 --> 00:05:09.977
So now we know,
anyone still want to try and clarify?

98
00:05:09.977 --> 00:05:11.669
Yeah, Katie.

99
00:05:11.669 --> 00:05:16.530
&gt;&gt; Katie: I have a question on the new,
adding new to the [CROSSTALK].

100
00:05:16.530 --> 00:05:18.185
&gt;&gt; Will Sentance: Okay,
we may come to that in a second.

101
00:05:18.185 --> 00:05:19.418
But go ahead, throw it out now.

102
00:05:19.418 --> 00:05:20.827
&gt;&gt; Katie: Okay, well-
&gt;&gt; Will Sentance: So throw it out now.

103
00:05:20.827 --> 00:05:22.473
We're gonna go through it line by line,
believe me.

104
00:05:22.473 --> 00:05:23.969
&gt;&gt; Katie: Okay, maybe I'll wait.

105
00:05:23.969 --> 00:05:25.476
It's, well-
&gt;&gt; Will Sentance: If it's about new this

106
00:05:25.476 --> 00:05:26.579
was more about do we get this idea.

107
00:05:26.579 --> 00:05:28.099
So are you good with that function?

108
00:05:28.099 --> 00:05:28.770
&gt;&gt; Katie: An idea, yeah.

109
00:05:28.770 --> 00:05:30.049
I think I just need to keep-
&gt;&gt; Will Sentance: Okay,

110
00:05:30.049 --> 00:05:32.410
let's see our new in action then.

