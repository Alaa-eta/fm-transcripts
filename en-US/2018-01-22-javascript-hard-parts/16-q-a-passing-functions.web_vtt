WEBVTT

1
00:00:00.270 --> 00:00:01.350
&gt;&gt; Will Sentance: Okay,
we're gonna have thumbs.

2
00:00:01.350 --> 00:00:04.400
Then we're gonna go and test this out
in pairing through the challenges.

3
00:00:04.400 --> 00:00:07.930
And then, we're gonna talk about why
is this even possibly in JavaScript?

4
00:00:07.930 --> 00:00:11.260
If you come from a language where
you do not pass functions around,

5
00:00:11.260 --> 00:00:14.366
this is gonna feel very,
very uncomfortable.

6
00:00:14.366 --> 00:00:19.089
If [INAUDIBLE] language where
the idea of passing a function into

7
00:00:19.089 --> 00:00:23.118
another function is gonna
feel very uncomfortable.

8
00:00:23.118 --> 00:00:27.540
In JavaScript, a core part of the job
is we're gonna see why of the pairing.

9
00:00:27.540 --> 00:00:31.780
But first thumbs,
I do not know what happened.

10
00:00:31.780 --> 00:00:33.360
I have some clarifications.

11
00:00:33.360 --> 00:00:37.440
I'm clear on this core
fundamental principle

12
00:00:37.440 --> 00:00:40.470
of creating a function where
I can take in an array and

13
00:00:40.470 --> 00:00:45.010
a placeholder that will then
only when I call the function

14
00:00:45.010 --> 00:00:49.680
determine what functionality I applied
to each specific element of the array.

15
00:00:49.680 --> 00:00:50.750
Okay, thumbs on this.

16
00:00:50.750 --> 00:00:52.770
No I don't have clarification, clear.

17
00:00:52.770 --> 00:00:54.360
It's good to have clarifications.

18
00:00:56.350 --> 00:00:57.863
Okay, a lot of thumbs up.

19
00:00:57.863 --> 00:00:59.757
Do you want to phrase that as a question?

20
00:00:59.757 --> 00:01:02.332
&gt;&gt; Speaker 2: I don't
understand why instructions

21
00:01:02.332 --> 00:01:04.750
becomes function multiply by two.

22
00:01:04.750 --> 00:01:08.110
Is it just because it's the second
parameter that's passed?

23
00:01:08.110 --> 00:01:09.880
&gt;&gt; Will Sentance: It's exactly that,
damn right.

24
00:01:09.880 --> 00:01:11.466
So why does array become one, two, three?

25
00:01:16.272 --> 00:01:18.700
&gt;&gt; Will Sentance: So
when we define the function.

26
00:01:18.700 --> 00:01:20.340
So, with functions it's two stages, right?

27
00:01:20.340 --> 00:01:24.610
There's the this is what it will do,
if you use me.

28
00:01:24.610 --> 00:01:25.313
This is the definition.

29
00:01:25.313 --> 00:01:29.676
It's like if you ever use me,
this is what I will do.

30
00:01:29.676 --> 00:01:31.650
And then there's the running it.

31
00:01:31.650 --> 00:01:36.830
Can you gesture which
bit's the definition?

32
00:01:37.940 --> 00:01:40.900
Which bit of the copyArrayAndManipulate,
which version is the definition?

33
00:01:42.788 --> 00:01:44.950
&gt;&gt; Speaker 3: I don't think
I understand the question.

34
00:01:44.950 --> 00:01:46.860
&gt;&gt; Will Sentance: Lindsey,
which of these is a definition?

35
00:01:46.860 --> 00:01:47.550
&gt;&gt; Lindsey: The top one.

36
00:01:47.550 --> 00:01:49.150
&gt;&gt; Will Sentance: The top one,
exactly, copyArrayAndManipulate.

37
00:01:49.150 --> 00:01:52.280
That's the,
this is what I will do if you ever run me.

38
00:01:52.280 --> 00:01:53.300
This is my description.

39
00:01:53.300 --> 00:01:56.030
This is what my functionality is.

40
00:01:56.030 --> 00:01:57.800
That's general, it's generic.

41
00:01:57.800 --> 00:02:02.400
It says, ultimately, I'm gonna run
this functionality on some data,

42
00:02:02.400 --> 00:02:05.290
some numbers, or some strings,
or some words or whatever.

43
00:02:05.290 --> 00:02:07.510
I'm gonna run it on some data.

44
00:02:07.510 --> 00:02:09.950
But I don't yet
know what that data's gonna be, right?

45
00:02:09.950 --> 00:02:12.070
Because that's the whole
point of having a function,

46
00:02:12.070 --> 00:02:14.790
is I wanna be able to use it on
lots of different types of data.

47
00:02:14.790 --> 00:02:19.610
So leave instead some blanks,
some place holders for that data.

48
00:02:19.610 --> 00:02:26.060
And then, when you do run me and where am
I running copyArrayAndManipulate, Lindsey?

49
00:02:26.060 --> 00:02:26.770
&gt;&gt; Lindsey: The bottom line?

50
00:02:26.770 --> 00:02:28.150
&gt;&gt; Will Sentance: And
how do I know I'm running it?

51
00:02:28.150 --> 00:02:28.680
&gt;&gt; Lindsey: With a parentheses.

52
00:02:28.680 --> 00:02:30.000
&gt;&gt; Will Sentance: With a parens.

53
00:02:30.000 --> 00:02:34.000
That's where I fill in my placeholders,
so my blanks, so array is a blank.

54
00:02:34.000 --> 00:02:35.440
I fill it in with what?

55
00:02:35.440 --> 00:02:36.030
&gt;&gt; Lindsey: One, two, three.

56
00:02:36.030 --> 00:02:37.985
&gt;&gt; Will Sentance: And
instructions are blank, I fill it in with?

57
00:02:37.985 --> 00:02:38.780
&gt;&gt; [INAUDIBLE].

58
00:02:38.780 --> 00:02:40.020
&gt;&gt; Will Sentance: And
the reason is just the ordering.

59
00:02:40.020 --> 00:02:41.510
You're spot on.
It's just the ordering.

60
00:02:41.510 --> 00:02:43.390
Okay, does that answer the question?

61
00:02:43.390 --> 00:02:44.930
Excellent, good clarification.

62
00:02:44.930 --> 00:02:47.450
All right, folk, at this point,
we're gonna go back to the pairing.

63
00:02:47.450 --> 00:02:49.960
Work through the challenges.

64
00:02:49.960 --> 00:02:54.100
Map with, and for each,
make sure you try and do them.

65
00:02:54.100 --> 00:02:55.960
I'm gonna have a look at
how you're each doing them.

66
00:02:55.960 --> 00:02:58.850
And then, we will talk about
how is this even possible.

