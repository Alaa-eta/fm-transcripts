[00:00:00]
>> Will Sentance: Lets have thumbs at this point. You lost me a long time ago. I still have a clarification. I'm clear, on the, I think, most esoteric, most profound concept in JavaScript. And it is okay to have clarifications. Andrew, clarification, throw it out there. Dave has one. Andrew, do you wanna go?

[00:00:19]

>> Andrew: So if I were to take, after you say let my new function = header, and then I say, let my new function 2 = my new function, would that be like-
>> Will Sentance: They're both labels to the same function.
>> Andrew: The same thing?
>> Will Sentance: With the same backpack, yeah.

[00:00:34]
And by the way, what about this cool one? What if I were to return out, not a function, but an object full of methods? They all share the same reference to the same persistent local memory from when they were born. Very, very cool. Okay, all right, I'm gonna leave it at that for now.

[00:00:51]
We're gonna come back together in about 10 minutes after you've done some pairing through these challenges, and talk about what this empowers us to do. This allows us to have functions that remember the previous time they were run. Functions aren't just functions with some static text in them now.

[00:01:11]
They're functions with some static instructions to be run and a persistent store of data on their back. Before we do that, you'll wanna add one more thing. What if I defined counter, not here, nor here, but instead counter = 0, globally? And I ran MyNewFunction, MyNewFunction, other function, other function, but I assign it globally?

[00:01:32]
What would I see at the end, Andrea?
>> Andrea: It would be 4.
>> Will Sentance: 4, 1,2,3,4, spot on. What if I defined counter inside of increment counter? So when I run MyNewFunction before I counter + +, I do counter = 0, counter is 0. What would I seen then, Katie, if I ran MyNewFunction, MyNewFunction, MyNewFunction, MyNewFunction?

[00:01:54]

>> Katie: It would be 1.
>> Will Sentance: 1, 1, 1, 1, exactly. I'd never even reach my back. Even if I define my backpack version I'd never even reach it. As soon as JavaScript hits, it's found a variable with that name. Done, as you go up the chain. All right, I wanna add that point.

[00:02:08]
For now, folk, back to your pairing. And in about ten minutes we'll talk about what this empowers us to do.

