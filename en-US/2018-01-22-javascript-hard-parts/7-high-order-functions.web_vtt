WEBVTT

1
00:00:00.170 --> 00:00:03.790
&gt;&gt; Will Sentance: So before we get
into how high order functions work,

2
00:00:03.790 --> 00:00:07.690
we are going to see a metaphor.

3
00:00:07.690 --> 00:00:11.480
A metaphor for why we have our high
order functions in the first place.

4
00:00:11.480 --> 00:00:13.550
So function 10 squared,
no input, returns 10x10.

5
00:00:13.550 --> 00:00:17.860
Sounds like a very useful functions,
I'm sure you can already agree.

6
00:00:17.860 --> 00:00:20.560
What is the syntax of this function, Cara?

7
00:00:22.240 --> 00:00:23.890
What is the wording of this function?

8
00:00:23.890 --> 00:00:27.300
It's a function 10 squared,
no input, and returns 10x10.

9
00:00:27.300 --> 00:00:30.470
How do we declare the function?

10
00:00:30.470 --> 00:00:32.550
What's the first word to
declare a function Cara?

11
00:00:34.620 --> 00:00:35.230
Function.

12
00:00:35.230 --> 00:00:35.990
Great.

13
00:00:35.990 --> 00:00:37.770
There it is, function.

14
00:00:37.770 --> 00:00:39.879
And what should we call it Cara?

15
00:00:39.879 --> 00:00:40.881
&gt;&gt; Cara: Squared?

16
00:00:40.881 --> 00:00:42.750
&gt;&gt; Will Sentance: Nice, Clara.

17
00:00:42.750 --> 00:00:43.830
And video's name, 10 squared.

18
00:00:43.830 --> 00:00:47.950
Does it take any parameters?

19
00:00:49.560 --> 00:00:50.810
Cree, any parameters for it?

20
00:00:52.240 --> 00:00:53.910
&gt;&gt; Cree: No.
&gt;&gt; Will Sentance: No, correct.

21
00:00:53.910 --> 00:00:56.320
And then in the body of
the function what do we add?

22
00:00:57.830 --> 00:01:01.634
Whatever return, 10x10.

23
00:01:02.950 --> 00:01:04.780
Such a useful function.

24
00:01:04.780 --> 00:01:05.780
Do you agree?

25
00:01:06.840 --> 00:01:07.420
No.

26
00:01:07.420 --> 00:01:08.870
Terribly useless function.

27
00:01:08.870 --> 00:01:10.380
It's a useless function.

28
00:01:10.380 --> 00:01:11.170
Come on.

29
00:01:11.170 --> 00:01:12.750
The useless function.

30
00:01:12.750 --> 00:01:15.200
10 squared evaluates to 100.

31
00:01:15.200 --> 00:01:16.270
Perfect.

32
00:01:16.270 --> 00:01:18.720
Now, what if though,
here's a more useful function.

33
00:01:18.720 --> 00:01:21.660
9 squared, Griffin,
how would I make 9 squared.

34
00:01:21.660 --> 00:01:24.640
&gt;&gt; Griffin: Same thing,
you just change the numbers.

35
00:01:25.840 --> 00:01:26.950
&gt;&gt; Will Sentance: Yeah.

36
00:01:26.950 --> 00:01:28.640
What about 100 square, Lindsey.

37
00:01:28.640 --> 00:01:32.130
&gt;&gt; Lindsey: Same thing,
you just change the numbers.

38
00:01:32.130 --> 00:01:36.820
&gt;&gt; Will Sentance: Yeah, I know you already
drag this out but what about 2,000 square?

39
00:01:36.820 --> 00:01:37.650
&gt;&gt; Lindsey: Same thing.

40
00:01:37.650 --> 00:01:39.350
&gt;&gt; Will Sentance: How much
will it gonna drive us out?

41
00:01:39.350 --> 00:01:43.008
We could go a little while, we're
breaking some sort of principle here,

42
00:01:43.008 --> 00:01:46.441
what principle are we breaking as I
come up with all these functions?

43
00:01:46.441 --> 00:01:48.939
What principle are we breaking here?

44
00:01:48.939 --> 00:01:50.086
&gt;&gt; Speaker 6: Don't repeat yourself.

45
00:01:50.086 --> 00:01:51.613
&gt;&gt; Will Sentance: Don't repeat yourself,
right.

46
00:01:51.613 --> 00:01:56.205
As developers the reason we have functions
is to wrap up some functionality that

47
00:01:56.205 --> 00:01:58.960
we use and
we can just refer to it by it's label.

48
00:01:58.960 --> 00:02:01.896
And only refer to it,
only write out the functionality once.

49
00:02:01.896 --> 00:02:05.391
So we constantly try to
avoid repeating ourselves.

50
00:02:05.391 --> 00:02:09.199
Not because we're lazy, but
merely because we're, because it makes for

51
00:02:09.199 --> 00:02:10.535
a far more readable code.

52
00:02:10.535 --> 00:02:12.393
Far more reusable code.

53
00:02:12.393 --> 00:02:15.538
We don't wanna be re-writing
stuff because it makes it hard.

54
00:02:15.538 --> 00:02:18.737
Well, this functionality's
the same as here, but

55
00:02:18.737 --> 00:02:21.580
I'm not gonna change in both places.

56
00:02:21.580 --> 00:02:26.590
This is problematic, so
instead I write a, what do I do here?

57
00:02:26.590 --> 00:02:29.190
Right now, 9 squared, 8 squared.

58
00:02:29.190 --> 00:02:32.040
We've got a problem,
we're breaking this dry principle.

59
00:02:32.040 --> 00:02:34.010
What could we do instead here?

60
00:02:34.010 --> 00:02:34.640
Griffin?

61
00:02:34.640 --> 00:02:38.930
&gt;&gt; Griffin: You could do
function N squared input of N.

62
00:02:38.930 --> 00:02:40.650
&gt;&gt; Will Sentance: So
tell me more abstractly.

63
00:02:40.650 --> 00:02:42.648
What am I, There we go.

64
00:02:42.648 --> 00:02:44.890
[LAUGH] No, nobody get that pun?

65
00:02:44.890 --> 00:02:48.910
All right, tell me more abstractly,
no, tell me more,

66
00:02:48.910 --> 00:02:53.640
what are we doing,
what are we doing here in a sense?

67
00:02:53.640 --> 00:02:57.730
&gt;&gt; Griffin: Well you'd be,
I guess modulizing it and

68
00:02:57.730 --> 00:02:58.810
being able to-
&gt;&gt; Will Sentance: I like that.

69
00:02:58.810 --> 00:03:01.024
You're making your clone more useable.

70
00:03:01.024 --> 00:03:03.700
&gt;&gt; Griffin: Yeah you're
able to call that function,

71
00:03:03.700 --> 00:03:05.690
any time you want a number squared.

72
00:03:05.690 --> 00:03:06.210
&gt;&gt; Will Sentance: Very nice.

73
00:03:06.210 --> 00:03:07.090
That's exactly right.

74
00:03:07.090 --> 00:03:10.010
We are, we can generalize the function.

75
00:03:10.010 --> 00:03:12.190
We can create a function,
we all look at it like yeah,

76
00:03:12.190 --> 00:03:15.110
yeah obviously we're not going to
create 10 squared, 100 squared, 9.

77
00:03:15.110 --> 00:03:17.330
This is the very essence of why
we have higher order functions.

78
00:03:18.350 --> 00:03:23.390
We're going to see in a second, here,
we've created a function squared num.

79
00:03:23.390 --> 00:03:26.520
I left a place holder,
you see every now and

80
00:03:26.520 --> 00:03:27.860
then I realize I shouldn't
be pointing up here.

81
00:03:27.860 --> 00:03:32.605
Because everyone online is like yeah,
to the edge of my computer.

82
00:03:32.605 --> 00:03:35.085
&gt;&gt; Cara: [LAUGH]
&gt;&gt; Will Sentance: Here square num

83
00:03:35.085 --> 00:03:41.140
function, I really just have to jolt
it around to make it do that thing.

84
00:03:41.140 --> 00:03:41.934
Nope, there we go.

85
00:03:41.934 --> 00:03:45.750
All right, square num function,
I left a place holder.

86
00:03:45.750 --> 00:03:48.360
And then it's only when I invoke, call,

87
00:03:48.360 --> 00:03:53.180
execute, run,
that's when that function with 10, 9, 100,

88
00:03:53.180 --> 00:03:58.520
I get to dynamically at the same
time create the function

89
00:03:58.520 --> 00:04:03.100
effectively 10 squared, 9 squared,
and then call it at the same time.

90
00:04:03.100 --> 00:04:05.040
So at my definition stage of the function.

91
00:04:05.040 --> 00:04:07.410
So functions have two stages,
definition and execution.

92
00:04:07.410 --> 00:04:12.200
And my definition stage where I store
the memory, I leave a place holder like

93
00:04:12.200 --> 00:04:15.480
I don't know yet what dates that
I'm going to apply this to yet.

94
00:04:15.480 --> 00:04:19.200
So just leave it blank for now and I'll
figure out when I run the function what

95
00:04:19.200 --> 00:04:25.560
actual specific number my data I'm
going to apply this functionality 2.

96
00:04:25.560 --> 00:04:28.840
Okay, this is making our function
cleaner and more efficient.

97
00:04:28.840 --> 00:04:32.040
But this is obvious.

98
00:04:32.040 --> 00:04:34.430
It turns out, well, that's obvious.

99
00:04:34.430 --> 00:04:35.590
But it's fairly obvious.

100
00:04:35.590 --> 00:04:40.428
It turns out we may not
only want to leave some of

101
00:04:40.428 --> 00:04:45.157
our data general until
we call the function.

102
00:04:45.157 --> 00:04:50.257
In other words, leave a placeholder for
some of our data in the definition.

103
00:04:50.257 --> 00:04:53.000
And only when we run the function,

104
00:04:53.000 --> 00:04:59.062
determine what data I want to apply my
multiply by itself functionality to.

105
00:04:59.062 --> 00:05:02.575
It turns out I might also
want to leave a placeholder.

106
00:05:02.575 --> 00:05:07.330
I might want to leave for now unknown.

107
00:05:07.330 --> 00:05:14.650
Some of my specific functionality
until I call my function.

108
00:05:14.650 --> 00:05:17.660
I may not just wanna say leave
a placeholder for my data.

109
00:05:17.660 --> 00:05:21.479
I may also wanna leave a placeholder
to be determined later for

110
00:05:21.479 --> 00:05:24.210
some of my actual specific functionality.

111
00:05:24.210 --> 00:05:29.180
And then, only determine what that
functionality is when I actually

112
00:05:29.180 --> 00:05:33.010
go ahead and call, run, the function.

113
00:05:33.010 --> 00:05:38.030
Here I determine my data, 10, 9, 8,
when I run the function, what if I were

114
00:05:38.030 --> 00:05:43.990
to determine so my functionality
only when I run the function.

115
00:05:43.990 --> 00:05:45.380
That's very powerful.

116
00:05:45.380 --> 00:05:49.690
And that is what we're gonna see is
the essence of higher order functions.

