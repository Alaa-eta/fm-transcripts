WEBVTT

1
00:00:00.000 --> 00:00:01.714
Let's have thumbs at this point.

2
00:00:01.714 --> 00:00:04.373
We're gonna go back to
the challenge in a second, and

3
00:00:04.373 --> 00:00:07.033
then we're gonna have
closing thoughts after that.

4
00:00:07.033 --> 00:00:08.393
Everybody's thumbs out.

5
00:00:08.393 --> 00:00:09.338
[PAUSE] Man.

6
00:00:09.338 --> 00:00:11.703
Clarification, let's get into challenges.

7
00:00:11.703 --> 00:00:13.004
Everyone's thumbs out.

8
00:00:13.004 --> 00:00:15.014
Let's see it, Katie has a clarifying.

9
00:00:15.014 --> 00:00:15.604
&gt;&gt; No.
&gt;&gt; Okay.

10
00:00:15.604 --> 00:00:16.491
Katie's clear.

11
00:00:16.491 --> 00:00:19.600
Let's see if our friends online
have anything you wanna ask?

12
00:00:19.600 --> 00:00:23.455
User 2 prototype is user creator.

13
00:00:23.455 --> 00:00:29.960
I see,
Yeah that's a good question from Julian.

14
00:00:29.960 --> 00:00:33.814
Do we in the end actually say user 2 and

15
00:00:33.814 --> 00:00:38.994
user 1's prototype is user,
I really don't like

16
00:00:38.994 --> 00:00:44.352
that vagueness Cuz it's definitely
not you, it's user.prototype.

17
00:00:44.352 --> 00:00:47.502
That's the prototype of user one and
user two.

18
00:00:47.502 --> 00:00:50.337
It's this object here, not this object.

19
00:00:50.337 --> 00:00:54.828
It's the subobject, the one
attached on the property prototype.

20
00:00:54.828 --> 00:00:56.874
So I prefer you said user one and

21
00:00:56.874 --> 00:01:01.560
user two's prototype is user.prototype,
which is this object here

22
00:01:19.270 --> 00:01:23.565
Victor says what about the clause
keyword to define a clause,

23
00:01:23.565 --> 00:01:25.383
is there any difference?

24
00:01:25.383 --> 00:01:28.273
Victor I hope he answered your question.

25
00:01:28.273 --> 00:01:32.073
Items and performance,
I encourage using it Victor.

26
00:01:32.073 --> 00:01:36.614
In terms of performance with this
sort of staff we do end of the hood

27
00:01:36.614 --> 00:01:37.880
similar things.

28
00:01:37.880 --> 00:01:38.724
Alright.

29
00:01:38.724 --> 00:01:43.034
Julian, how should we do if
we want to attach a proton to

30
00:01:43.034 --> 00:01:45.567
an already declared function?

31
00:01:45.567 --> 00:01:48.378
Is there an accepted way to do that?

32
00:01:48.378 --> 00:01:51.565
Attach a new proto is not best practice.

33
00:01:51.565 --> 00:01:54.284
Julian's question is, hold on,

34
00:01:54.284 --> 00:01:59.780
what if I want to set a whole new guy
here as the proto to this function?

35
00:01:59.780 --> 00:02:01.104
These objects.

36
00:02:01.104 --> 00:02:03.656
That's not the best practice.

37
00:02:03.656 --> 00:02:08.286
We can do it by using the built
in method set proto type of but

38
00:02:08.286 --> 00:02:11.785
apparently it's a very poor performance.

39
00:02:11.785 --> 00:02:16.701
Under the hood a whole bunch of
things have to be re-optimized

40
00:02:16.701 --> 00:02:18.540
to make that Successful.

41
00:02:18.540 --> 00:02:21.076
We can do it, but what we tend to instead,

42
00:02:21.076 --> 00:02:25.639
is it better to create a whole new object
and have set a new prototype for it.

43
00:02:25.639 --> 00:02:28.464
But we can reset our
prototype if we wanted to.

44
00:02:28.464 --> 00:02:29.913
But not best practice.

45
00:02:29.913 --> 00:02:30.565
Lindsey.

46
00:02:30.565 --> 00:02:33.027
&gt;&gt; What if you wanna
add a new method later.

47
00:02:33.027 --> 00:02:34.692
Would you use the frst set?

48
00:02:34.692 --> 00:02:36.310
&gt;&gt; Do we have access to them?

49
00:02:36.310 --> 00:02:37.322
Can we do it?

50
00:02:37.322 --> 00:02:40.267
&gt;&gt; We just do it the old
way like [INAUDIBLE]

51
00:02:40.267 --> 00:02:41.378
&gt;&gt; Absolutely.

