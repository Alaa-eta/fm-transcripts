[00:00:00]
>> Will Sentance: So before we get into how high order functions work, we are going to see a metaphor. A metaphor for why we have our high order function in the first place. So function ten squared, no input return ten by ten. Sounds like a very useful function, I'm sure you can already agree.

[00:00:17]
What is the syntax of this function, Cara? What is the wording of this function? There's a function ten squared, no input, and returns ten by ten. How would we declare the function? What was the first word to declare a function, Cara? Function, great. There it is, function. And what could we call it, Cara?

[00:00:39]

>> Cara: Ten squared.
>> Will Sentance: Nice, Cara, ambiguous name. Ten squared and does it take any parameters, Craig, any parameters for it? No, correct, and then in the body of the function, what do we add? Whatever return, ten by ten. Such a useful function. Do you agree? No, it's a terribly useless function.

[00:01:08]
This is a useless function, come on, it's a useless function. 10 squared evaluates to 100, perfect. Now, what if, though, here's a more useful function, nine squared. Griffin, how I would make nine squared?
>> Griffin: Same thing, you just change the numbers.
>> Will Sentance: Yeah, what about 100 squared, Lindsey?

[00:01:30]

>> Lindsey: Same thing, you just change the numbers.
>> Will Sentance: Yeah, I'm gonna really drag this out. Barb, what about 2,000 squared?
>> Barb: Same thing.
>> Will Sentance: How much longer can I drag this out? We could go a while. Yeah, we're breaking some sort of principle here. What principle are we breaking as I come up with all these functions?

[00:01:47]
What principle are we breaking, everyone?
>> Group: Don't repeat yourself.
>> Will Sentance: Don't repeat yourself dry. As developers, the reason we have functions in the first place is to wrap up some functionality that we wanna reuse, and then we can refer to it just by its label. And only write out a functionality once.

[00:02:03]
So we're constantly trying to avoid repeating ourselves. Not just cuz we're lazy, but mainly cuz we're lazy, but also because it makes for a far more readable code, far more reusable code. We're only rewriting stuff because it makes it hard. Well, this functionality is the same as here, but I've got to change it in both places.

[00:02:21]
This is problematic. So instead I write, what could I do here? Right now, nine squared, eight squared, we've got a problem. We're breaking this dry principal. What could we do here, Griffin?
>> Griffin: You could do function n squared with an input of nine.
>> Will Sentance: So tell me more abstractly, what am I, there we go, [LAUGH] no?

[00:02:44]
No one got that pun? All right, tell me more abstractly, no? Tell me more, what are we doing here in the sentence?
>> Griffin: Well, you'd be, I guess, modulizing it and being able to-
>> Will Sentance: I like that, you're making your code more reusable.
>> Griffin: Yeah, you're able to call that function anytime you want a function squared.

[00:03:05]

>> Will Sentance: Very nice, that's exactly right. We can generalize the function. We can create a function, it's gonna be, look at this, yeah, yeah, yeah, obviously. We're not gonna create 10 squared, 100 squared. This is the very essence of why we have high order functions. We're gonna see in a second here, we've created a function squared num.

[00:03:23]
And left a placeholder, you see every now and then I realize I shouldn't be pointing up here because everyone online's just like, yeah, to the edge of my computer.
>> Group: [LAUGH]
>> Will Sentance: There it is here squareNum function. I have to really just jolt it around to make it do that thing.

[00:03:41]
Nope, there we go. All right, squareNum function. I left a placeholder, and then it's only when I invoke call, execute, run that squareNum function with 10, 9, 100. I get to dynamically, at the same time, create the function effectively 9 squared, nine squared, and then call it at the same time.

[00:04:03]
So at my definition stage of the function, so functions have two stages, definition and execution. And my definition stage, where I store it in memory, I leave a placeholder. Like a kinda, I don't yet know what data I'm gonna apply this to yet. So just leave it blank for now.

[00:04:16]
And I'll figure out when I run the function what actual, specific number my data I'm gonna apply this functionality to. Okay, this is making our function cleaner and more efficient, but this is obvious. Well, it's not obvious but it's fairly obvious. It turns out we may not only want to leave some of our data general until we call the function.

[00:04:45]
In other words, leave a placeholder for some of our data in the definition. And only when we run the function, determine what data I want to apply my multiply by itself functionality to. It turns out I might also want to leave a placeholder. I might want to leave, for now, unknown some of my specific functionality until I call my function.

[00:05:14]
I may not just want to say, leave a placeholder for my data. I may also want to leave a placeholder to be determined later for some of my actual specific functionality. And then only determine what that functionality is when I actually go ahead and call, run, the function.

[00:05:33]
Here, I determine my data, ten, nine, eight, when I run the function. What if I were to determine some of my functionality only when I run the function? That's very powerful, and that is what we're gonna see is the essence of higher order functions.

