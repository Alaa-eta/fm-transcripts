WEBVTT

1
00:00:00.263 --> 00:00:01.540
&gt;&gt; Will Sentance: Lets
have thumbs at this point.

2
00:00:02.650 --> 00:00:04.920
You lost me a long time ago.

3
00:00:04.920 --> 00:00:06.490
I still have a clarification.

4
00:00:06.490 --> 00:00:11.680
I'm clear, on the, I think, most esoteric,
most profound concept in JavaScript.

5
00:00:11.680 --> 00:00:14.200
And it is okay to have clarifications.

6
00:00:14.200 --> 00:00:16.680
Andrew, clarification, throw it out there.

7
00:00:16.680 --> 00:00:17.960
Dave has one.

8
00:00:17.960 --> 00:00:21.771
Andrew, do you wanna go?
&gt;&gt; Andrew: So if I were to take, after you

9
00:00:21.771 --> 00:00:26.694
say let my new function = header, and
then I say, let my new function 2

10
00:00:26.694 --> 00:00:31.332
= my new function, would that be like-
&gt;&gt; Will Sentance: They're both labels to

11
00:00:31.332 --> 00:00:32.980
the same function.
&gt;&gt; Andrew: The

12
00:00:32.980 --> 00:00:33.519
same thing?
&gt;&gt; Will Sentance: With

13
00:00:33.519 --> 00:00:34.090
the same backpack, yeah.

14
00:00:34.090 --> 00:00:37.040
And by the way, what about this cool one?

15
00:00:37.040 --> 00:00:42.000
What if I were to return out, not
a function, but an object full of methods?

16
00:00:42.000 --> 00:00:46.900
They all share the same
reference to the same persistent

17
00:00:46.900 --> 00:00:48.860
local memory from when they were born.

18
00:00:48.860 --> 00:00:49.560
Very, very cool.

19
00:00:49.560 --> 00:00:51.800
Okay, all right,
I'm gonna leave it at that for now.

20
00:00:51.800 --> 00:00:56.724
We're gonna come back together in about
10 minutes after you've done some

21
00:00:56.724 --> 00:01:02.360
pairing through these challenges, and
talk about what this empowers us to do.

22
00:01:02.360 --> 00:01:07.430
This allows us to have functions that
remember the previous time they were run.

23
00:01:07.430 --> 00:01:11.210
Functions aren't just functions
with some static text in them now.

24
00:01:11.210 --> 00:01:15.560
They're functions with some
static instructions to be run and

25
00:01:16.790 --> 00:01:19.680
a persistent store of data on their back.

26
00:01:19.680 --> 00:01:21.510
Before we do that,
you'll wanna add one more thing.

27
00:01:21.510 --> 00:01:28.550
What if I defined counter, not here, nor
here, but instead counter = 0, globally?

28
00:01:28.550 --> 00:01:31.994
And I ran MyNewFunction, MyNewFunction,
other function, other function, but

29
00:01:31.994 --> 00:01:32.940
I assign it globally?

30
00:01:32.940 --> 00:01:37.150
What would I see at the end, Andrea?
&gt;&gt; Andrea: It would be 4.

31
00:01:37.150 --> 00:01:39.590
&gt;&gt; Will Sentance: 4, 1,2,3,4, spot on.

32
00:01:39.590 --> 00:01:43.800
What if I defined counter
inside of increment counter?

33
00:01:43.800 --> 00:01:47.480
So when I run MyNewFunction
before I counter + +,

34
00:01:47.480 --> 00:01:49.970
I do counter = 0, counter is 0.

35
00:01:49.970 --> 00:01:52.268
What would I seen then, Katie,
if I ran MyNewFunction, MyNewFunction,

36
00:01:52.268 --> 00:01:56.208
MyNewFunction, MyNewFunction?
&gt;&gt; Katie: It would be 1.

37
00:01:56.208 --> 00:01:56.760
&gt;&gt; Will Sentance: 1, 1, 1, 1, exactly.

38
00:01:56.760 --> 00:01:58.250
I'd never even reach my back.

39
00:01:58.250 --> 00:02:00.950
Even if I define my backpack
version I'd never even reach it.

40
00:02:00.950 --> 00:02:04.590
As soon as JavaScript hits,
it's found a variable with that name.

41
00:02:04.590 --> 00:02:06.480
Done, as you go up the chain.

42
00:02:06.480 --> 00:02:08.030
All right, I wanna add that point.

43
00:02:08.030 --> 00:02:09.960
For now, folk, back to your pairing.

44
00:02:09.960 --> 00:02:13.440
And in about ten minutes we'll talk
about what this empowers us to do.

