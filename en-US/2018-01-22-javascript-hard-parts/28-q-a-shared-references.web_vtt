WEBVTT

1
00:00:00.320 --> 00:00:01.540
&gt;&gt; Will Sentance: Let's
have fun to this point.

2
00:00:02.650 --> 00:00:06.165
You lost me a long time ago,
I still have a clarification.

3
00:00:06.165 --> 00:00:09.091
I'm clear on the, I think, most esoteric,

4
00:00:09.091 --> 00:00:14.097
most profound concept in JavaScript and
it's okay to have clarifications.

5
00:00:14.097 --> 00:00:17.875
Andrew, clarification,
throw it out there, Dave has one.

6
00:00:17.875 --> 00:00:19.462
Andrew, do you wanna go?

7
00:00:19.462 --> 00:00:24.299
&gt;&gt; Speaker 2: So if I were to take after
you say let my new function equal outer.

8
00:00:24.299 --> 00:00:28.810
And that is let my new function
equal my new function.

9
00:00:28.810 --> 00:00:30.489
Would that be?

10
00:00:30.489 --> 00:00:34.009
&gt;&gt; Will Sentance: They're both labels
of the same function with the same

11
00:00:34.009 --> 00:00:35.242
backpack, yeah.

12
00:00:35.242 --> 00:00:37.109
And by the way, what about this cool one.

13
00:00:37.109 --> 00:00:42.014
What if I were return out not a function,
but an object full of methods.

14
00:00:42.014 --> 00:00:46.083
They all share the same reference,
the same persistant,

15
00:00:46.083 --> 00:00:48.830
local memory from when they were born.

16
00:00:48.830 --> 00:00:51.529
Very, very cool, okay, all right.

17
00:00:51.529 --> 00:00:55.852
I'm gonna leave it at that for now, we're
gonna come back together in about ten

18
00:00:55.852 --> 00:00:59.661
minutes after you've done some
pairing through these challenges and

19
00:00:59.661 --> 00:01:02.360
talk about what this empowers us to do.

20
00:01:02.360 --> 00:01:07.480
This allows us to have functions that
remember the previous time they were run.

21
00:01:07.480 --> 00:01:11.210
Functions aren't just functions
with some static text in them now.

22
00:01:11.210 --> 00:01:16.104
They're functions with some
static instructions to be run,

23
00:01:16.104 --> 00:01:19.690
and a persistent store
of data on their back.

24
00:01:19.690 --> 00:01:21.456
Before we do,
I want to add one more thing.

25
00:01:21.456 --> 00:01:28.550
What if I defined counter, not here, not
here, but instead, counter = 0 globally.

26
00:01:28.550 --> 00:01:32.259
And I ran myNewFunction, myNewFunction,
otherFunction, otherFunction, right?

27
00:01:32.259 --> 00:01:36.210
Assign it globally,
what would I see at the end, Andrea?

28
00:01:36.210 --> 00:01:37.059
&gt;&gt; Speaker 3: It would be 4.

29
00:01:37.059 --> 00:01:39.451
&gt;&gt; Will Sentance: 4, 1, 2, 3, 4, spot on.

30
00:01:39.451 --> 00:01:43.786
What if I define counter
inside of incrementCounter?

31
00:01:43.786 --> 00:01:47.496
So when I run my new function,
before I do counter plus, plus,

32
00:01:47.496 --> 00:01:50.089
I do counter equals zero, Counter is zero.

33
00:01:50.089 --> 00:01:52.966
And what would I see then, Katie,
if I ran my new function, my new function,

34
00:01:52.966 --> 00:01:54.492
another function, another function?

35
00:01:54.492 --> 00:01:55.074
&gt;&gt; Speaker 3: It would be one.

36
00:01:55.074 --> 00:01:56.760
&gt;&gt; Will Sentance: One,
one, one, one, exactly.

37
00:01:56.760 --> 00:01:59.763
I'd never even reached my,
even if I defined my backpack version,

38
00:01:59.763 --> 00:02:00.932
I'd never even reach it.

39
00:02:00.932 --> 00:02:05.251
As soon as hits it found, it's found
a variable with that name, done,

40
00:02:05.251 --> 00:02:06.417
as we go up the chain.

41
00:02:06.417 --> 00:02:07.911
All right, I wanna add that point.

42
00:02:07.911 --> 00:02:09.917
For now folk, back to your pairing and

43
00:02:09.917 --> 00:02:13.440
in about ten minutes we'll talk
about what this empowers us to do.

