WEBVTT

1
00:00:00.260 --> 00:00:03.820
&gt;&gt; Will Sentance: Okay, so
at this point we are already feeling,

2
00:00:03.820 --> 00:00:05.720
yeah, thank you so much.

3
00:00:05.720 --> 00:00:10.114
I could tell straight away that calling
multiplied by 2 is the input of 4 was

4
00:00:10.114 --> 00:00:12.200
going to return 8 into output.

5
00:00:12.200 --> 00:00:15.850
Why have I built all this for that?

6
00:00:15.850 --> 00:00:19.430
Well because there is even more still that
was going on behind the scenes here that

7
00:00:19.430 --> 00:00:20.306
we need to know.

8
00:00:20.306 --> 00:00:22.760
So actually the hard
bits follow more easily.

9
00:00:22.760 --> 00:00:26.290
And it's known as our well, what?

10
00:00:26.290 --> 00:00:27.240
What is the way?

11
00:00:27.240 --> 00:00:30.820
We've got these execution
contexts being created, one here.

12
00:00:30.820 --> 00:00:35.450
This one we said closed or
actually now this one we said closed.

13
00:00:35.450 --> 00:00:37.740
And already I'm kinda
struggling to keep track of it.

14
00:00:37.740 --> 00:00:38.750
Am I in the global one?

15
00:00:38.750 --> 00:00:39.371
Am I in this?

16
00:00:39.371 --> 00:00:44.427
What if I ran another function inside or
multiply by 2.

17
00:00:44.427 --> 00:00:46.670
What if I ran multiply by 2 recursively?

18
00:00:47.790 --> 00:00:50.070
Inside of here I ran multiplied by 2 and
then inside of that,

19
00:00:50.070 --> 00:00:51.070
I ran my multiplied by 2.

20
00:00:51.070 --> 00:00:54.840
How am I gonna keep track of all
these where am I in my execution?

21
00:00:54.840 --> 00:00:57.731
Which function am I
inside of at the moment?

22
00:00:57.731 --> 00:00:58.978
How can I keep track of it?

23
00:00:58.978 --> 00:01:01.200
Christian?
&gt;&gt; off screen male: Is that the state?

24
00:01:01.200 --> 00:01:03.040
&gt;&gt; Will Sentance: The state.

25
00:01:03.040 --> 00:01:03.580
Amin?

26
00:01:03.580 --> 00:01:04.190
&gt;&gt; off screen male: Call Stack.

27
00:01:04.190 --> 00:01:08.840
&gt;&gt; Will Sentance: Call Stack, Amin is
spot on, it's called the Call Stack.

28
00:01:10.010 --> 00:01:13.440
Call Stack, there it is.

29
00:01:15.070 --> 00:01:17.709
And it's a special data structure,

30
00:01:17.709 --> 00:01:22.315
that just means a way of storing
information, of storing data.

31
00:01:22.315 --> 00:01:27.037
Special data structure that
allows us to track where

32
00:01:27.037 --> 00:01:31.543
am I currently,
where is JavaScript currently,

33
00:01:31.543 --> 00:01:36.497
where is the thread of
execution currently in my code?

34
00:01:36.497 --> 00:01:39.450
Am I running through line 1,
line 2, line 3?

35
00:01:39.450 --> 00:01:42.393
Global and global execution context.

36
00:01:42.393 --> 00:01:46.824
Am I running inside of
a call to multiply by 2?

37
00:01:46.824 --> 00:01:48.606
The first one or the second one.

38
00:01:48.606 --> 00:01:50.924
Okay, so he keeps track of it.

39
00:01:50.924 --> 00:01:54.987
What does it add immediately
when it starts running my code?

40
00:01:54.987 --> 00:01:58.956
What's the first execution
context on my Call Stack?

41
00:01:58.956 --> 00:01:59.625
Art.

42
00:02:01.423 --> 00:02:02.720
&gt;&gt; Will Sentance: Dave,
what's the first one in my Call Stack?

43
00:02:02.720 --> 00:02:04.800
Or which one do we start in, Art?

44
00:02:05.890 --> 00:02:07.730
Where do we start in our code, Griffin?

45
00:02:09.310 --> 00:02:09.840
&gt;&gt; off screen male: Global?

46
00:02:09.840 --> 00:02:12.450
&gt;&gt; Will Sentance: Global, so
that's the very first one we add,

47
00:02:12.450 --> 00:02:17.971
is our global execution context.

48
00:02:17.971 --> 00:02:22.677
Okay, now, Shelby,
I hit the line multiplied

49
00:02:22.677 --> 00:02:26.580
by 2 being called with the input of 4.

50
00:02:26.580 --> 00:02:30.675
What happens to my Call Stack do
you think Shelby me at that point?

51
00:02:30.675 --> 00:02:32.831
&gt;&gt; off screen female: It goes to local.

52
00:02:32.831 --> 00:02:33.565
&gt;&gt; Will Sentance: It goes to local.

53
00:02:33.565 --> 00:02:37.050
So what does that mean,
I mean in terms of my actual Call Stack?

54
00:02:37.050 --> 00:02:41.129
So we said when we entered we
added global to the Call Stack.

55
00:02:41.129 --> 00:02:42.799
Let me just tell you what that means.

56
00:02:42.799 --> 00:02:47.846
Whatever is top of the Call Stack
is where JavaScripts thread,

57
00:02:47.846 --> 00:02:50.999
where it currently is running my code.

58
00:02:50.999 --> 00:02:52.238
Whatever is top.

59
00:02:52.238 --> 00:02:55.964
So JavaScript never has
to worry where am I.

60
00:02:55.964 --> 00:02:58.310
Where am I in the code right now?

61
00:02:58.310 --> 00:03:01.140
Whatever is top of the Call Stock,
that's where I am.

62
00:03:01.140 --> 00:03:05.280
And then stock is a very good way of
storing this because when I start calling

63
00:03:05.280 --> 00:03:11.060
multiply by 2 in the input of 4,
I added to the top of the Call Stock.

64
00:03:12.230 --> 00:03:16.750
And this stock is a data
structure of the format

65
00:03:18.110 --> 00:03:23.240
the last thing you put into it is
the first thing you take out of it.

66
00:03:23.240 --> 00:03:27.520
So when I am multiplied
by 2 onto top of global,

67
00:03:27.520 --> 00:03:29.970
that means I've started
running multiply by 2.

68
00:03:29.970 --> 00:03:32.938
When I've finished running multiply by 2,

69
00:03:32.938 --> 00:03:36.462
I close that execution context,
I go back to global.

70
00:03:36.462 --> 00:03:40.710
What happens to my multiply by 2
on top of the Call Stack, Andrea?

71
00:03:40.710 --> 00:03:42.416
&gt;&gt; off screen female: It goes away.
&gt;&gt; Will Sentance: Goes away.

72
00:03:42.416 --> 00:03:45.250
Because it was the last
thing that was put in.

73
00:03:45.250 --> 00:03:46.831
So it's the first thing
that gets taken out.

74
00:03:46.831 --> 00:03:51.396
So this is a great format for tracking our
execution context and where we are in our

75
00:03:51.396 --> 00:03:55.173
code, because as soon as I start
running a function, I go inside.

76
00:03:55.173 --> 00:03:57.707
When I finish it, I close that one out.

77
00:03:57.707 --> 00:03:58.816
So I create it and

78
00:03:58.816 --> 00:04:03.270
then it's inevitably the next one
I take off the next one I remove.

79
00:04:03.270 --> 00:04:05.731
So last in, first out.

80
00:04:05.731 --> 00:04:08.094
It's a stack of calls to functions.

81
00:04:08.094 --> 00:04:12.710
Starts global and then we add
multiply by 2 with the input of 4.

82
00:04:12.710 --> 00:04:16.240
And what's the posh name for
adding to a stack?

83
00:04:16.240 --> 00:04:19.710
Who knows what the fancy, technical
name for adding to a stack is, Andrew?

84
00:04:21.680 --> 00:04:22.560
Anyone know?

85
00:04:22.560 --> 00:04:23.250
&gt;&gt; off screen female: Pushing.

86
00:04:23.250 --> 00:04:24.810
&gt;&gt; Will Sentance: Pushing,
Claire is is right.

87
00:04:24.810 --> 00:04:28.980
We push on to the stack, and
now we're inside, multiply by 2.

88
00:04:28.980 --> 00:04:30.610
When I finish executing multiply by 2, and

89
00:04:30.610 --> 00:04:33.100
I return out, how do I know I
finished executing a function?

90
00:04:34.640 --> 00:04:36.850
Return, what if it doesn't say return?

91
00:04:36.850 --> 00:04:40.150
Just the closing curly brace
means implicit return.

92
00:04:40.150 --> 00:04:43.800
And the implicit return
defaults to returning what?

93
00:04:43.800 --> 00:04:47.070
If I don't write the word return,
what do I default to, Mohammad?

94
00:04:48.710 --> 00:04:49.823
&gt;&gt; off screen male: On the value.

95
00:04:49.823 --> 00:04:51.534
&gt;&gt; Will Sentance: What's the default,
Griffin,

96
00:04:51.534 --> 00:04:55.026
return value of a function if I
don't return something explicity.

97
00:04:55.026 --> 00:04:55.641
Clara?

98
00:04:55.641 --> 00:04:56.298
&gt;&gt; off screen female: Undefined.

99
00:04:56.298 --> 00:04:58.406
&gt;&gt; Will Sentance: Undefined,
correct, exactly.

100
00:04:58.406 --> 00:05:03.320
So out I come and I go back into,
so out of com and

101
00:05:03.320 --> 00:05:09.626
this execution context gets removed,
erased, deleted.

102
00:05:09.626 --> 00:05:13.370
So that gets taken off the Call Stack and
we go back to global.

103
00:05:13.370 --> 00:05:16.460
And what's the posh term for
being taken off of Call Stack?

104
00:05:16.460 --> 00:05:17.420
Remove from a stack.

105
00:05:17.420 --> 00:05:17.960
Clara?

106
00:05:17.960 --> 00:05:18.540
&gt;&gt; off screen female: Popping.

107
00:05:18.540 --> 00:05:19.080
&gt;&gt; Will Sentance: Popping,

108
00:05:19.080 --> 00:05:23.445
I popped the call to mode 102 off
the Call Stack, and where do I go?

109
00:05:23.445 --> 00:05:25.570
Charles goes, where do I go next?

110
00:05:25.570 --> 00:05:29.180
We may think, Griffin, I offered you,
we finished one in mode 102,

111
00:05:29.180 --> 00:05:32.180
we go back into the global, but
Jarvis doesn't know that by default,

112
00:05:32.180 --> 00:05:35.340
it only knows that because, look at that,

113
00:05:35.340 --> 00:05:37.740
it got rid of the quarter multiplied
by 2 and where does it go back to?

114
00:05:37.740 --> 00:05:39.350
What's top of the Call Stack now?

115
00:05:39.350 --> 00:05:40.270
&gt;&gt; off screen male: Global.
&gt;&gt; Will Sentance: Global.

116
00:05:40.270 --> 00:05:41.540
So now it knows to go back there, but

117
00:05:41.540 --> 00:05:46.510
wait, the next slide says spin up a new
exhusion context because the parens.

118
00:05:46.510 --> 00:05:48.880
Parens say make execution context, so

119
00:05:48.880 --> 00:05:52.940
at this point, what's gonna
happen to my Call Stack, Dave?

120
00:05:54.490 --> 00:05:56.620
&gt;&gt; off screen male: Sorry, I was
writing this down and wasn't listening.

121
00:05:56.620 --> 00:05:58.740
&gt;&gt; Will Sentance: So what's gonna happen
when I started calling multiply by 2,

122
00:05:58.740 --> 00:06:02.120
what's gonna happen to my Call Stack,
Dave?

123
00:06:02.120 --> 00:06:04.670
&gt;&gt; off screen male: The local's gonna
go to the top of the Call Stack?

124
00:06:04.670 --> 00:06:09.110
&gt;&gt; Will Sentance: Very good job, Dave Very
nice, I'm gonna add the execution context,

125
00:06:09.110 --> 00:06:15.930
the call to multiply by 2 at
the input of 10 to my Call Stack.

126
00:06:15.930 --> 00:06:18.248
There it is, top of the Call Stack.

127
00:06:18.248 --> 00:06:23.982
All right, then I finish running
The call to most probably two.

128
00:06:23.982 --> 00:06:26.254
Matthew what happens to my Call Stack?

129
00:06:26.254 --> 00:06:28.266
I finished running multiply by 2 and
into 10.

130
00:06:28.266 --> 00:06:30.048
What is my Call Stack?

131
00:06:30.048 --> 00:06:32.872
&gt;&gt; off screen male: Local is removed,
global list.

132
00:06:32.872 --> 00:06:34.129
&gt;&gt; Will Sentance: It's left and

133
00:06:34.129 --> 00:06:36.343
is therefore
&gt;&gt; off screen male: Right.

134
00:06:36.343 --> 00:06:40.579
&gt;&gt; Will Sentance: And therefore we know
that is where our code is now running.

135
00:06:40.579 --> 00:06:46.730
Okay, folks, when you execute a function
you create a new execution context.

136
00:06:46.730 --> 00:06:49.070
It comprises the thread.

137
00:06:49.070 --> 00:06:55.800
We go through the code inside the function
line by line by line by line.

138
00:06:55.800 --> 00:06:59.790
And a local memory where anything defined

139
00:06:59.790 --> 00:07:04.350
inside the function is
stored there not in global.

140
00:07:04.350 --> 00:07:07.060
Anything defined inside the function,
did we store results in global?

141
00:07:07.060 --> 00:07:11.000
No, we stored it in the local memory.

142
00:07:11.000 --> 00:07:14.200
By the way, we store in local memory
because the call to multiply by 2,

143
00:07:14.200 --> 00:07:17.700
that execution context was
top of the Call Stack.

144
00:07:17.700 --> 00:07:18.692
Perfect.

145
00:07:18.692 --> 00:07:21.971
This top of the call stack means
that's where my thread is and

146
00:07:21.971 --> 00:07:24.361
that's why I'm storing myself in memory.

147
00:07:24.361 --> 00:07:26.576
Top of the Call Stack means everything.

148
00:07:26.576 --> 00:07:32.692
And when we finish running multiple by 2,
we put a 4, we jump back out to global,

149
00:07:32.692 --> 00:07:37.323
and we pop off the call to multiple
by 2 from the stack, okay.

150
00:07:37.323 --> 00:07:41.644
This Call Stack lets us keep track
of all these execution contexts.

151
00:07:41.644 --> 00:07:43.206
We have the global one to start.

152
00:07:43.206 --> 00:07:46.115
There's a little baby one here,
for the running of multiply by 2.

153
00:07:46.115 --> 00:07:46.738
Then, we have another.

154
00:07:46.738 --> 00:07:48.075
Then, we go back to global.

155
00:07:48.075 --> 00:07:53.255
Then, we do another baby one here for
running multiply by 2 again.

156
00:07:53.255 --> 00:07:56.659
Okay, this local memory,
by the way, has a very fancy name.

157
00:07:57.770 --> 00:08:00.200
Anyone know what the fancy name for
the local memory is?

158
00:08:01.300 --> 00:08:01.800
Shelby?

159
00:08:05.566 --> 00:08:07.390
&gt;&gt; Will Sentance: I mean it's only
a knowledge question if you know this.

160
00:08:07.390 --> 00:08:09.760
It's called a variable environment.

161
00:08:09.760 --> 00:08:14.570
I like that name I guess because it's
like the environment of available,

162
00:08:14.570 --> 00:08:16.410
sort of the environment
is the stuff around you.

163
00:08:16.410 --> 00:08:19.259
It's the available variables around you.

164
00:08:19.259 --> 00:08:20.968
It's the available data.

165
00:08:20.968 --> 00:08:25.298
This is live data stored in memory,
sitting there, live in memory,

166
00:08:25.298 --> 00:08:28.144
stored inside the running
of multiply by 2.

