WEBVTT

1
00:00:00.210 --> 00:00:03.820
&gt;&gt; Will Sentance: Okay, so
at this point, we are already feeling,

2
00:00:03.820 --> 00:00:05.720
yeah, thank you so much.

3
00:00:05.720 --> 00:00:10.430
I could tell straightaway that
calling multiplyBy2(4) was going to

4
00:00:10.430 --> 00:00:12.200
return 8 into output.

5
00:00:12.200 --> 00:00:15.850
Why have I built all this for that?

6
00:00:15.850 --> 00:00:19.430
Well, because there's even more still that
was going on behind the scenes here that

7
00:00:19.430 --> 00:00:20.740
we need to know.

8
00:00:20.740 --> 00:00:26.290
Such that the hard bits follow more
easily, and it's known as our, well, what?

9
00:00:26.290 --> 00:00:29.350
What is the way we've got these
execution contacts being created?

10
00:00:29.350 --> 00:00:35.450
One here, this one we said, closed,
actually now, this one we said, closed.

11
00:00:35.450 --> 00:00:37.991
And already I'm already kind of
struggling to keep track of it,

12
00:00:37.991 --> 00:00:39.414
am I in the global one, am I in this?

13
00:00:39.414 --> 00:00:44.160
What if I ran another function
inside of multiplyBy2?

14
00:00:44.160 --> 00:00:46.851
What if I ran multiplyBy2 recursively?

15
00:00:46.851 --> 00:00:51.440
Inside of here, I ran multiplyBy2 and
then inside of that I ran multiplyBy2.

16
00:00:51.440 --> 00:00:53.118
How I'm I gonna keep track of all these?

17
00:00:53.118 --> 00:00:54.580
Where I'm I in my execution?

18
00:00:54.580 --> 00:00:57.670
Which function I'm I inside at the moment?

19
00:00:57.670 --> 00:00:59.220
How can I keep track of it?

20
00:00:59.220 --> 00:01:01.476
Griffin?
&gt;&gt; Griffin: Is it the state?

21
00:01:01.476 --> 00:01:03.580
&gt;&gt; Will Sentance: State, Amin?

22
00:01:03.580 --> 00:01:04.190
&gt;&gt; Amin: Call stack.

23
00:01:04.190 --> 00:01:06.330
&gt;&gt; Will Sentance: Call stack,
Amin is spot on.

24
00:01:06.330 --> 00:01:12.740
It's called the call stack, call stack.

25
00:01:12.740 --> 00:01:18.390
There it is, and
it's a special data structure.

26
00:01:18.390 --> 00:01:22.530
That just means a way of storing
information, of storing data.

27
00:01:22.530 --> 00:01:28.750
Special data structure that allows
us to track where am I currently?

28
00:01:28.750 --> 00:01:30.840
Where is JavaScript currently?

29
00:01:30.840 --> 00:01:36.574
Where is the thread of
execution currently in my code?

30
00:01:36.574 --> 00:01:41.370
Am I running through line one,
line two, line three, global land,

31
00:01:41.370 --> 00:01:43.368
global execution context?

32
00:01:43.368 --> 00:01:47.010
Am I running inside of
a code to multiplyBy2?

33
00:01:47.010 --> 00:01:48.740
The first one or the second?

34
00:01:48.740 --> 00:01:51.120
Okay, so it keeps track of it,

35
00:01:51.120 --> 00:01:55.750
what does it add immediately
when it starts running my code?

36
00:01:55.750 --> 00:01:58.995
Whatâ€™s the first execution
context on my call stack, Art?

37
00:02:01.393 --> 00:02:02.720
&gt;&gt; Will Sentance: Dave,
what's the first one on my call stack?

38
00:02:02.720 --> 00:02:04.800
Or which one do we start in, Art?

39
00:02:05.890 --> 00:02:07.730
Where do we start in our code, Griffin?

40
00:02:09.310 --> 00:02:09.840
&gt;&gt; Griffin: Global?

41
00:02:09.840 --> 00:02:14.603
&gt;&gt; Will Sentance: Global, so
that's the very first one we add,

42
00:02:14.603 --> 00:02:19.880
is our global execution context, okay?

43
00:02:19.880 --> 00:02:26.400
Now, Shelby, I hit the line multiplyBy2
being called with the input of 4.

44
00:02:26.400 --> 00:02:29.755
What happens to my call stack,
do you think, Shelby, at that point?

45
00:02:29.755 --> 00:02:30.426
&gt;&gt; Shelby: It goes to local.

46
00:02:30.426 --> 00:02:32.390
&gt;&gt; Will Sentance: It goes to local.

47
00:02:33.750 --> 00:02:37.050
So what does that mean, Amin,
in terms of my actual call stack?

48
00:02:37.050 --> 00:02:41.360
So we said when we entered we
added global to the call sack.

49
00:02:41.360 --> 00:02:42.610
Let me just tell you what that means.

50
00:02:42.610 --> 00:02:47.489
Whatever is top of the call stack,
is where JavaScript's thread,

51
00:02:47.489 --> 00:02:50.580
where it currently is running my code.

52
00:02:50.580 --> 00:02:56.010
Whatever is top, so
JavaScript never has to worry where am I?

53
00:02:56.010 --> 00:02:58.310
Where am I in the code right now?

54
00:02:58.310 --> 00:03:01.500
Whatever is top of the call stack,
that's where I am.

55
00:03:01.500 --> 00:03:05.305
And a stack is a very good way of storing
this, because when I start calling

56
00:03:05.305 --> 00:03:11.060
multiplyBy2(4), I add it to
the top of the call stack.

57
00:03:12.230 --> 00:03:16.750
And the stack is a data
structure of the format

58
00:03:18.110 --> 00:03:23.240
the last thing you put into it is
the first thing you take out of it.

59
00:03:23.240 --> 00:03:27.520
So when I add multiplyBy2
onto top of global,

60
00:03:27.520 --> 00:03:29.970
that means I've started
running multiplyBy2.

61
00:03:29.970 --> 00:03:33.020
When I finish running multiplyBy2,

62
00:03:33.020 --> 00:03:36.640
I close that execution context,
I go back to global.

63
00:03:36.640 --> 00:03:39.010
What happens to my multiplyBy2 on
top of the call stack, Andrea?

64
00:03:39.010 --> 00:03:41.400
&gt;&gt; Andrea: It goes away.

65
00:03:41.400 --> 00:03:42.640
&gt;&gt; Will Sentance: Goes away.

66
00:03:42.640 --> 00:03:45.250
Because it was the last
thing that was put in.

67
00:03:45.250 --> 00:03:47.090
So it's the first thing
that gets taken out.

68
00:03:47.090 --> 00:03:51.540
So this is a great format for
tracking our execution context and

69
00:03:51.540 --> 00:03:53.260
where we are in our code.

70
00:03:53.260 --> 00:03:55.370
Because as soon as I start
writing a function, I go inside.

71
00:03:55.370 --> 00:03:57.890
When I finish it, I close that one out.

72
00:03:57.890 --> 00:04:01.867
So I created and then it's
inevitably the next one I take off,

73
00:04:01.867 --> 00:04:03.330
the next one I remove.

74
00:04:03.330 --> 00:04:05.380
So last in, first out.

75
00:04:05.380 --> 00:04:08.290
It's a stack of calls to functions.

76
00:04:08.290 --> 00:04:12.710
Starts global and
then we add multiplyBy2(4).

77
00:04:12.710 --> 00:04:16.240
And what's the posh name for
adding to a stack?

78
00:04:16.240 --> 00:04:19.410
Who knows what the fancy,
technical name for adding to a stack is?

79
00:04:19.410 --> 00:04:19.910
Andrew?

80
00:04:21.680 --> 00:04:22.560
Anyone know?

81
00:04:22.560 --> 00:04:23.250
&gt;&gt; Clara: Pushing.

82
00:04:23.250 --> 00:04:24.020
&gt;&gt; Will Sentance: Pushing.

83
00:04:24.020 --> 00:04:24.810
Clara is right.

84
00:04:24.810 --> 00:04:28.920
We push onto the stack and
now we're inside multiplyBy2.

85
00:04:28.920 --> 00:04:31.567
When I finish executing multiplyBy2 and
I return out,

86
00:04:31.567 --> 00:04:34.090
how do I know I finished
executing a function?

87
00:04:34.090 --> 00:04:34.820
Return.

88
00:04:34.820 --> 00:04:40.150
What if it doesn't say return, just a
closing curly brace means implicit return.

89
00:04:40.150 --> 00:04:43.800
And the implicit return
defaults to returning what,

90
00:04:43.800 --> 00:04:46.268
if I don't write the word return,
what do I default to?

91
00:04:46.268 --> 00:04:48.130
Muhammad?

92
00:04:48.130 --> 00:04:50.000
&gt;&gt; Muhammed: The value?

93
00:04:50.000 --> 00:04:51.870
&gt;&gt; Will Sentance: What's the default,
Griffin,

94
00:04:51.870 --> 00:04:55.290
return value of a function if I
don't return something explicitly?

95
00:04:55.290 --> 00:04:55.870
Clara?

96
00:04:55.870 --> 00:04:57.680
&gt;&gt; Clara: Undefined.
&gt;&gt; Will Sentance: Undefined, correct,

97
00:04:57.680 --> 00:04:58.650
exactly.

98
00:04:58.650 --> 00:05:03.450
So out I come and I go back into,
so out I come and

99
00:05:03.450 --> 00:05:07.292
this execution context gets removed,
erased, deleted.

100
00:05:07.292 --> 00:05:13.590
Well, so that gets taken off the call
stack and we go back to global.

101
00:05:13.590 --> 00:05:16.460
And what's the posh term for
being taken off of call stack?

102
00:05:16.460 --> 00:05:17.960
Remove from the stack, Clara?

103
00:05:17.960 --> 00:05:18.540
&gt;&gt; Clara: Popping?

104
00:05:18.540 --> 00:05:19.080
&gt;&gt; Will Sentance: Popping.

105
00:05:19.080 --> 00:05:23.550
I popped the call to multiplyBy2 off
the call stack and where do I go?

106
00:05:23.550 --> 00:05:25.850
JavaScript says, where do I go next?

107
00:05:25.850 --> 00:05:28.900
We may think, Griffin, I asked you
if you finished running multiplyBy2,

108
00:05:28.900 --> 00:05:31.680
we go back into global but
JavaScript doesn't know that by default.

109
00:05:31.680 --> 00:05:35.340
It only knows that because look at that.

110
00:05:35.340 --> 00:05:37.610
It got rid of the call to multiplyBy2 and
where did it go back to?

111
00:05:37.610 --> 00:05:38.850
What's top of the call stack now?
&gt;&gt; Griffin: Global.

112
00:05:38.850 --> 00:05:40.270
&gt;&gt; Will Sentance: Global.

113
00:05:40.270 --> 00:05:41.400
So now it knows to go back there.

114
00:05:41.400 --> 00:05:43.226
But wait, the next line says,

115
00:05:43.226 --> 00:05:46.467
spin up a new execution
context because of the parens.

116
00:05:46.467 --> 00:05:49.932
Parens say make a execution context so
at this point,

117
00:05:49.932 --> 00:05:52.940
what's gonna happen to my call stack,
Dave?

118
00:05:54.490 --> 00:05:56.620
&gt;&gt; Dave: Sorry, I was writing
this down and wasn't listening.

119
00:05:56.620 --> 00:05:58.140
&gt;&gt; Will Sentance: So what's gonna happen
when I start calling multiplyBy2?

120
00:05:58.140 --> 00:06:02.120
What's gonna happen to my call stack,
Dave?

121
00:06:02.120 --> 00:06:04.670
&gt;&gt; Dave: The local's gonna go
to the top of the call stack.

122
00:06:04.670 --> 00:06:06.070
&gt;&gt; Will Sentance: Very good job, Dave.

123
00:06:06.070 --> 00:06:06.790
Very nice.

124
00:06:06.790 --> 00:06:10.425
I'm gonna add the execution context,

125
00:06:10.425 --> 00:06:15.930
the call to multiplyBy2(10)
to my call stack.

126
00:06:15.930 --> 00:06:18.248
There it is, top of the call stack.

127
00:06:18.248 --> 00:06:24.090
All right, then I finish running
the call to multiplyBy2,

128
00:06:24.090 --> 00:06:26.220
Mathew, what happens to my call stack?

129
00:06:26.220 --> 00:06:30.338
I've finished running multiplyBy2(10),
what happens to my call stack?

130
00:06:30.338 --> 00:06:33.070
&gt;&gt; Matthew: Local is removed, global is-
&gt;&gt; Will Sentance: Is left.

131
00:06:33.070 --> 00:06:35.500
And therefore is top of the call stack.

132
00:06:35.500 --> 00:06:36.690
&gt;&gt; Matthew: Right.
&gt;&gt; Will Sentance: And therefore we know

133
00:06:36.690 --> 00:06:40.830
that is where our code is now running.

134
00:06:40.830 --> 00:06:46.730
Okay, folk, when you execute a function,
you create a new execution context.

135
00:06:46.730 --> 00:06:49.070
It comprises the thread.

136
00:06:49.070 --> 00:06:55.800
We go through the code inside the
function, line by line, by line, by line.

137
00:06:55.800 --> 00:07:01.868
And a local memory, where anything defined
inside the function is stored there,

138
00:07:01.868 --> 00:07:04.350
not in global.

139
00:07:04.350 --> 00:07:07.060
Anything defined inside the function,
do we store results in global?

140
00:07:07.060 --> 00:07:11.000
No, we store it in the local memory.

141
00:07:11.000 --> 00:07:14.200
By the way, we store in the local
memory because the call to multiplyBy2,

142
00:07:14.200 --> 00:07:18.710
that execution context was top
of the call stack, perfect.

143
00:07:18.710 --> 00:07:21.310
This top of the call stack means
that's where my thread is and

144
00:07:21.310 --> 00:07:24.430
that's where I'm storing myself in memory.

145
00:07:24.430 --> 00:07:26.290
Top of the call stack means everything.

146
00:07:26.290 --> 00:07:31.720
And when we finish running multiplyBy2(4),
we jump back out to global and

147
00:07:31.720 --> 00:07:37.430
we pop off the call to
multiplyBy2 from the stack, okay?

148
00:07:37.430 --> 00:07:41.840
This call stack let's us keep track
of all these execution context.

149
00:07:41.840 --> 00:07:43.410
We have the global one to start.

150
00:07:43.410 --> 00:07:46.052
Now this little baby one here,
for the running and multiplyBy2.

151
00:07:46.052 --> 00:07:50.806
And then we go back to global, and
we do another little baby one here for

152
00:07:50.806 --> 00:07:53.400
running multiplyBy2 again, okay?

153
00:07:53.400 --> 00:07:57.770
This local memory by the way
has a very fancy name.

154
00:07:57.770 --> 00:08:01.175
Anyone know what the fancy name for
the local memory is, Shelby?

155
00:08:04.960 --> 00:08:07.390
&gt;&gt; Will Sentance: I mean, it's only a
knowledge question, you should know this.

156
00:08:07.390 --> 00:08:09.760
It's called a variable environment.

157
00:08:09.760 --> 00:08:14.570
I like that name, I guess, because
it's like the environment of available

158
00:08:14.570 --> 00:08:16.790
variables, sort of,
the environment stuff around you.

159
00:08:16.790 --> 00:08:21.010
It's the available variables around you,
it's the available data.

160
00:08:21.010 --> 00:08:23.500
This is live data stored in memory.

161
00:08:23.500 --> 00:08:27.630
Sitting there, live in memory,
stored inside the running and multiplyBy2.

