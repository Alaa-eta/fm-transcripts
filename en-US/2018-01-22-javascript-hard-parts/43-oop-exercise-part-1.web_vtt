WEBVTT

1
00:00:00.000 --> 00:00:03.094
&gt;&gt; Will Sentance: We are going
to map through this folk,

2
00:00:03.094 --> 00:00:06.489
line by line as we begin
to go through OOP.

3
00:00:06.489 --> 00:00:08.049
Andrew, what are we doing?

4
00:00:08.049 --> 00:00:11.227
&gt;&gt; off screen male: Defining
user1 as that object.

5
00:00:11.227 --> 00:00:13.818
&gt;&gt; Will Sentance: As that object,
excellent, there it is.

6
00:00:15.467 --> 00:00:20.360
&gt;&gt; Will Sentance: Okay,
now what properties are we storing on it?

7
00:00:20.360 --> 00:00:23.150
Andrew
&gt;&gt; off screen male: Theme score and

8
00:00:23.150 --> 00:00:25.330
increment
&gt;&gt; Will Sentance: Yeah, and

9
00:00:25.330 --> 00:00:26.430
what's the value in each?

10
00:00:26.430 --> 00:00:30.660
I'm really just driving this out
right now Andrew, so help me out.

11
00:00:30.660 --> 00:00:31.370
&gt;&gt; off screen male: Will, three and

12
00:00:31.370 --> 00:00:33.450
that function
&gt;&gt; Will Sentance: Yeah,

13
00:00:33.450 --> 00:00:39.030
notice I give myself a lower score, my
friend, cause it would be pretty terrible

14
00:00:39.030 --> 00:00:42.290
If I gave myself a higher score than the
others, that would be lame, wouldn't it?

15
00:00:42.290 --> 00:00:43.485
Like self-aggrandizing score, 100.

16
00:00:43.485 --> 00:00:47.810
[LAUGH]
&gt;&gt; Will Sentance: I'll do that, and then,

17
00:00:47.810 --> 00:00:52.890
I changed it just before I come in.

18
00:00:52.890 --> 00:00:55.932
When I'm reading through I see 100,
exactly.

19
00:00:55.932 --> 00:00:57.316
Score 100.

20
00:00:57.316 --> 00:01:01.820
Eddie focus.

21
00:01:01.820 --> 00:01:05.990
Okay Andrew you are right.

22
00:01:05.990 --> 00:01:11.490
Yes, we have declared the user
one object there it is.

23
00:01:13.460 --> 00:01:18.890
Draw objects like this, with name Will,

24
00:01:18.890 --> 00:01:24.980
School, three and
increment is what Andrew?

25
00:01:26.450 --> 00:01:27.670
&gt;&gt; off screen male: HIgh function.

26
00:01:27.670 --> 00:01:28.610
&gt;&gt; Will Sentance: High
function definition.

27
00:01:28.610 --> 00:01:31.570
And we call them methods,
don't we, when they're on object.

28
00:01:31.570 --> 00:01:33.690
Is it been called at this point?

29
00:01:33.690 --> 00:01:34.500
No, we just defined it.

30
00:01:34.500 --> 00:01:37.060
Associated the anonymous function value.

31
00:01:37.060 --> 00:01:39.570
the function value with
the property increment.

32
00:01:39.570 --> 00:01:41.382
And now, we hit the next line of code.

33
00:01:41.382 --> 00:01:44.060
Andrew, what's the next line of code

34
00:01:44.060 --> 00:01:47.334
in the global execution
context tell us to do?

35
00:01:47.334 --> 00:01:49.125
&gt;&gt; off screen male: Increment
user1- [CROSSTALK]

36
00:01:49.125 --> 00:01:49.647
&gt;&gt; Will Sentance: Yeah,

37
00:01:49.647 --> 00:01:51.997
let's be really precise here.

38
00:01:51.997 --> 00:01:53.785
I want us to be really precise here.

39
00:01:53.785 --> 00:01:55.497
Firstly, what does it,

40
00:01:55.497 --> 00:02:01.046
when it sees this line what's the first
thing Josh would have to work out Andrew?

41
00:02:01.046 --> 00:02:03.200
&gt;&gt; off screen male: Get
that Object [INAUDIBLE].

42
00:02:03.200 --> 00:02:07.660
&gt;&gt; Will Sentance: Exactly, you gotta go
look for it, and see does this guy exist.

43
00:02:07.660 --> 00:02:08.920
Yep, there it is.

44
00:02:08.920 --> 00:02:11.680
And then does this
incremental property exist?

45
00:02:11.680 --> 00:02:12.590
There it is.

46
00:02:12.590 --> 00:02:13.610
And does the function code.

47
00:02:13.610 --> 00:02:14.540
Great, there's the function.

48
00:02:14.540 --> 00:02:15.170
Great.

49
00:02:15.170 --> 00:02:19.000
So I can start creating
a everyone together, a new.

50
00:02:19.000 --> 00:02:20.490
&gt;&gt; Execution context.

51
00:02:20.490 --> 00:02:21.503
&gt;&gt; Will Sentance: Excellent.

52
00:02:21.503 --> 00:02:28.267
Beautiful, such rich tones.

53
00:02:28.267 --> 00:02:30.320
Okay, indeed.

54
00:02:30.320 --> 00:02:31.440
So in we go.

55
00:02:34.160 --> 00:02:38.400
Core stack gets, user one dot increment.

56
00:02:39.820 --> 00:02:42.230
On the top of it, global just below.

57
00:02:44.030 --> 00:02:46.280
And we had our local memory.

58
00:02:46.280 --> 00:02:47.180
Okay.

59
00:02:47.180 --> 00:02:53.100
Now, we know we've got the increment
code from the user1 function,

60
00:02:53.100 --> 00:02:56.480
and in here, it says user1.score++.

61
00:02:56.480 --> 00:02:59.050
So there's nothing being
declared in local.

62
00:02:59.050 --> 00:03:02.452
user1.score++, is user1 at here in local?

63
00:03:02.452 --> 00:03:03.978
No, it's not.

64
00:03:03.978 --> 00:03:05.941
So where do we look for user1 in global?

65
00:03:05.941 --> 00:03:11.882
Because it's next on the call stack,
and what do we find?

66
00:03:11.882 --> 00:03:14.949
We find score, and
we increment it to four.

67
00:03:14.949 --> 00:03:15.988
Perfect.

68
00:03:15.988 --> 00:03:20.331
Our fundamental goal of running
a method directly on our data

69
00:03:20.331 --> 00:03:25.367
Encaptulated in an object that's
all bundled together in one place.

70
00:03:25.367 --> 00:03:30.451
Which makes our lives so easy cause I
can move this object, user one, anywhere

71
00:03:30.451 --> 00:03:35.323
in my code and know the functionality's
going to be available right on it.

72
00:03:35.323 --> 00:03:37.472
This is wonderful writing code to scale.

73
00:03:37.472 --> 00:03:39.497
We've achieved it here.

