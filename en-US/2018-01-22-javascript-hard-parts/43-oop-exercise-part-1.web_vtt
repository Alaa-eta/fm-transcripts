WEBVTT

1
00:00:00.320 --> 00:00:03.437
&gt;&gt; Speaker 1: We are gonna map
through this folk, line by line,

2
00:00:03.437 --> 00:00:05.301
as we begin to go through OOP.

3
00:00:05.301 --> 00:00:08.670
Andrew, what are we doing?
&gt;&gt; Speaker 2: Defining

4
00:00:08.670 --> 00:00:13.050
user1 as that object?
&gt;&gt; Speaker 1: As that object, excellent.

5
00:00:13.050 --> 00:00:18.294
There it is.
&gt;&gt; Speaker 1: Okay, now, what

6
00:00:18.294 --> 00:00:23.140
properties are we storing on it, Andrew?
&gt;&gt; Speaker 2: Name, score and

7
00:00:23.140 --> 00:00:25.240
increment.
&gt;&gt; Speaker 1: Yeah,

8
00:00:25.240 --> 00:00:26.430
and what's the value in each?

9
00:00:26.430 --> 00:00:29.130
I'm really just dragging this
out right now, Andrew, so

10
00:00:29.130 --> 00:00:31.370
help me out.
&gt;&gt; Speaker 2: Will, 3 and

11
00:00:31.370 --> 00:00:33.450
that function.
&gt;&gt; Speaker 1: Yeah.

12
00:00:33.450 --> 00:00:38.365
Notice I give myself a lower score than my
friend because it would be pretty terrible

13
00:00:38.365 --> 00:00:43.217
if I gave myself a higher
score than the other

14
00:00:43.217 --> 00:00:46.630
self-aggrandizing score 100.
&gt;&gt; [LAUGH]

15
00:00:49.397 --> 00:00:50.262
&gt;&gt; Speaker 2: I do that, but

16
00:00:50.262 --> 00:00:52.890
then I change it just
before I come in here.

17
00:00:52.890 --> 00:00:55.478
&gt;&gt; Speaker 1: When I'm reading through I

18
00:00:55.478 --> 00:01:00.096
see 100 exactly, score 100, all right.

19
00:01:00.096 --> 00:01:02.285
Katie, focus.

20
00:01:02.285 --> 00:01:06.750
Okay, what do we say,
Andrew you're right, yes,

21
00:01:06.750 --> 00:01:11.490
we've declared the user1 object,
there it is.

22
00:01:13.460 --> 00:01:18.060
Draw objects like this with name Will,

23
00:01:20.970 --> 00:01:27.750
score 3 and increment is what, Andrew?
&gt;&gt; Speaker 2: That function.

24
00:01:27.750 --> 00:01:28.630
&gt;&gt; Speaker 1: That function definition.

25
00:01:28.630 --> 00:01:31.560
And we call them methods,
don't we, when they're on objects.

26
00:01:31.560 --> 00:01:32.872
Is it being called at this point?

27
00:01:32.872 --> 00:01:36.846
No, we just defined it, associated
with the anonymous function value,

28
00:01:36.846 --> 00:01:40.310
the function value with
the property increment.

29
00:01:40.310 --> 00:01:44.080
And now we hit the next line of code.

30
00:01:44.080 --> 00:01:47.635
Andrew, what's the next
line of code in the global

31
00:01:47.635 --> 00:01:49.959
execution context tell us to do?

32
00:01:49.959 --> 00:01:52.180
Increment user1 [CROSSTALK] function?

33
00:01:52.180 --> 00:01:54.770
Yeah, let's be really precise here.

34
00:01:54.770 --> 00:01:56.185
I want us to be really precise here.

35
00:01:56.185 --> 00:02:00.110
Firstly, when it sees this line, what's
the first thing JavaScript has to work

36
00:02:00.110 --> 00:02:02.267
out, Andrew?
&gt;&gt; Speaker 2: Get that object-

37
00:02:02.267 --> 00:02:03.834
&gt;&gt; Speaker 1: User1 object, exactly,

38
00:02:03.834 --> 00:02:07.660
it's gotta go look for it and
see, does this guy exist?

39
00:02:07.660 --> 00:02:08.920
Yep, there it is.

40
00:02:08.920 --> 00:02:11.680
And then,
does this increment property exist?

41
00:02:11.680 --> 00:02:12.590
There it is.

42
00:02:12.590 --> 00:02:13.880
And does the function code?

43
00:02:13.880 --> 00:02:15.170
It's a function, great.

44
00:02:15.170 --> 00:02:19.004
So I can start creating,
everyone together a new-

45
00:02:19.004 --> 00:02:22.553
&gt;&gt; Speaker 2: Execution context.

46
00:02:22.553 --> 00:02:25.624
&gt;&gt; Speaker 1: Beautiful, such rich,

47
00:02:25.624 --> 00:02:28.267
mellifluous tones.

48
00:02:28.267 --> 00:02:34.724
Okay, indeed, so in we go.
&gt;&gt; Speaker 1: Call

49
00:02:34.724 --> 00:02:42.230
stack gets user1.increment on
the top of it, global just below.

50
00:02:44.030 --> 00:02:46.280
And we had our local memory.

51
00:02:46.280 --> 00:02:53.371
Okay, now, we know we got the increment
code from the user1 function,

52
00:02:53.371 --> 00:02:57.340
and in here it says user1.score++.

53
00:02:57.340 --> 00:03:00.820
So there's nothing being declared
in local, says user1.score++.

54
00:03:00.820 --> 00:03:03.830
Is user1 here in local?

55
00:03:03.830 --> 00:03:05.210
No, it's not.
So where do we look for user1?

56
00:03:05.210 --> 00:03:09.950
In global, cuz it's next on the call
stack, and what do we find?

57
00:03:09.950 --> 00:03:13.830
We find score, and
we increment it to 4, perfect.

58
00:03:13.830 --> 00:03:18.860
Our fundamental goal of running

59
00:03:18.860 --> 00:03:24.360
a method directly on our data
encapsulated in an object,

60
00:03:24.360 --> 00:03:29.060
so it's all bundled together in one place,
which makes our lives so easy.

61
00:03:29.060 --> 00:03:32.550
Because I can move this object,
user1, anywhere in my code, and

62
00:03:32.550 --> 00:03:35.440
know the functionality is going
to be available right on it.

63
00:03:35.440 --> 00:03:38.030
This is wonderful for
writing code at scale.

64
00:03:38.030 --> 00:03:38.850
We've achieved it here.

