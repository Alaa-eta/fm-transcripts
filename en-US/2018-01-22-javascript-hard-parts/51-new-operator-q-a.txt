[00:00:00]
>> Will Sentance: All right, let's have thumbs. I'm not accepting this, I have clarifications. I'm clear that our functions, when treated like functions by adding parens on the end of them, behave as functions. If they're treated like an object, userCreator.andrew. What would this return for, what would this evaluate to, Andrea?

[00:00:21]

>> Andrea: It's gonna be an object with Andrew.
>> Will Sentance: Well, but what would me retrieving this. So here we've already got the Andrew property, so userCreator.andrew, I'll be retrieving three, exactly. Okay, so let's have thumbs on that notion. It's weird, if part of it's just I need more time to embrace it.

[00:00:41]
So Andrew's got a thumb. Katie's got a thumb, a medium thumb. Art is good to go. Lindsay has a medium Thumb. Griffin has one, Griffin, will you kick us off?
>> Griffin: So if you were to use that userCreator as a callback function, can you use that userCreator object data in that function that you're using to call it for?

[00:01:02]

>> Will Sentance: You certainly can, but I'll just make this point. That wouldn't be standard practice, right?
>> Griffin: Yeah.
>> Will Sentance: Just cuz it's there doesn't mean we use it. We use it for this one thing we're gonna talk about. It isn't standard practice to bundle them in that sense, they're functions.

[00:01:15]
It is all fundamentally objects, but they're user's functions, okay? But we can store stuff here. We're gonna see in a moment we're gonna store something here, something here. We are gonna store something here. All right, anyone got that? Okay, Griffin go ahead.
>> Griffin: Again, with the memory, could you kind of instead of using the backpack or the lexicon thing could you store it into the function's object?

[00:01:46]

>> Will Sentance: This is where it gets a bit hard with hard parts, is we're seeing all of the underlying things, features of JavaScript. Some of them you can cross use. This one, the lexical scoper is a special, magical property that is not involved in conventional sort of objects like this.

[00:02:05]
It's hidden off. Cuz you're right, we said functions have a hidden square bracket scope. That's not this guy here. That's a really nice clarification by Griffin. This object definitely is not that scope property. You remember that guy which held on to state, live, end date, okay? That's an interesting one, man.

[00:02:22]
Definitely not, no, stop it, that's not allowed and doesn't, okay. Lindsay?
>> Lindsay: I know I think I got lost somewhere. But what's the function, what's the function in userCreator right now?
>> Will Sentance: UserCeator was declared.
>> Lindsay: EVC must have helped in that.
>> Will Sentance: Be with you in a second, but userCreator was declared as a function at the top, right?

[00:02:47]
Whenever you declare a function by default just by it's very nature, it's also an object, okay. Just declaring that, talk me through what we did in line one there, Lindsay.
>> Lindsay: We declared the function, userCreator.
>> Will Sentance: UserCreator. Remember how I drew my functions? There's a box like that.

[00:03:04]

>> Lindsay: Mh-hm.
>> Will Sentance: What do we do in a few lines down and let user one equal?
>> Lindsay: We declared a variable and assigned it whatever the userCreator will return.
>> Will Sentance: Great, go run that functionality. And I know I've got to go run the functionality, why?
>> Lindsay: Because of Parens.

[00:03:23]

>> Will Sentance: Parens, good. But let's just not forget if in the next line I were to write userCreator.Andrew. In other words, treating userCreator as an object, JavaScript's not gonna complain. It's gonna go yep, sure, yes, I'm a function, but I'm also an object. You treat me like a function, I run like a function.

[00:03:43]
You put something in me like an object, man it starts to come wierd things to say. You put something in me like an object, I behave as an object. That is just how it is, okay Lindsay? So it is a function, nothing has changed. But if I were to treat it like an object, userCreator and said I don't know, userCreator.Andrew equal three.

[00:04:06]
Then now if I had a console log, if I had a console log, my userCreator, I'd still see the function. But if I were to console log my userCreator with this special Chrome dev tool, down arrow I would see the function, but also in the properties, I would see some other properties and our Andrew three, okay.

[00:04:24]
So it's like he's not, this is not surface level really, we're not gonna be doing this day to day, but it's there. This is our day to day. This is what the function really is. But we can store some stuff here, but we're not gonna be storing it ourselves.

[00:04:37]
JavaScript stores stuff here for us. That's really what the real story is here. We treat userCreator as a function, but JavaScript can store some stuff here for. We are definitely never storing Andrew three ever, ever, ever on this object. Let's be really clear on that, we're not doing that ever.

[00:04:53]
But JavaScript can store stuff there for us, because it has special goals and things it wants to achieve that we want to make available to userCreator. So now we know, anyone still want to try and clarify? Yeah, Katie.
>> Katie: I have a question on the new, adding new to the [CROSSTALK].

[00:05:16]

>> Will Sentance: Okay, we may come to that in a second. But go ahead, throw it out now.
>> Katie: Okay, well-
>> Will Sentance: So throw it out now. We're gonna go through it line by line, believe me.
>> Katie: Okay, maybe I'll wait. It's, well-
>> Will Sentance: If it's about new this was more about do we get this idea.

[00:05:26]
So are you good with that function?
>> Katie: An idea, yeah. I think I just need to keep-
>> Will Sentance: Okay, let's see our new in action then.

