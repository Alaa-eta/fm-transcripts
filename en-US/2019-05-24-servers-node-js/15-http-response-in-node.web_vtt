WEBVTT

1
00:00:00.050 --> 00:00:01.814
&gt;&gt; Will Sentance: Okay in it comes.

2
00:00:01.814 --> 00:00:06.355
We have an auto run function but there's
two parts to running a function putting

3
00:00:06.355 --> 00:00:10.108
parenthesis on the end of it,
node does that to execute its code.

4
00:00:10.108 --> 00:00:13.227
And what's the other part Michael?

5
00:00:13.227 --> 00:00:14.670
&gt;&gt; Off screen male: Parameters.

6
00:00:14.670 --> 00:00:16.257
&gt;&gt; Will Sentance: I don't know
wanna call them parameters.

7
00:00:16.257 --> 00:00:20.952
Parameters are what we leave there as
place holders to receive what Matt?

8
00:00:20.952 --> 00:00:21.784
&gt;&gt; Off screen male: Data.

9
00:00:21.784 --> 00:00:23.837
&gt;&gt; Will Sentance: Yeah known as partially?

10
00:00:23.837 --> 00:00:25.083
&gt;&gt; Off screen male: Arguments.
&gt;&gt; Will Sentance: Arguments.

11
00:00:25.083 --> 00:00:28.145
Matt is very attached to the data one,
yeah, exactly.

12
00:00:28.145 --> 00:00:29.513
But yeah, he's right it's data.

13
00:00:29.513 --> 00:00:33.679
Arguments are data, arguments of values,
arguments are actual data.

14
00:00:33.679 --> 00:00:39.031
Parameters are labels that like variable
names without anything stored in them.

15
00:00:39.031 --> 00:00:44.341
So we put those in ready for
node to create data that gets inserted.

16
00:00:44.341 --> 00:00:46.447
Let's create that data.

17
00:00:46.447 --> 00:00:50.479
Auto, created, and

18
00:00:50.479 --> 00:00:57.429
inserted data, known as everyone.

19
00:00:57.429 --> 00:00:59.184
&gt;&gt; Off screen male: Arguments.
&gt;&gt; Will Sentance: Arguments word on

20
00:00:59.184 --> 00:00:59.863
people.

21
00:00:59.863 --> 00:01:02.133
Look at that catchy little subtitle there.

22
00:01:02.133 --> 00:01:03.333
All right, first one,

23
00:01:03.333 --> 00:01:06.638
raise your hand if you can tell me
what the first one is created is.

24
00:01:09.011 --> 00:01:10.139
&gt;&gt; Will Sentance: Yeah Sam thank you.

25
00:01:10.139 --> 00:01:12.955
&gt;&gt; Off screen male: It's
gonna be an object

26
00:01:12.955 --> 00:01:15.286
&gt;&gt; Will Sentance: Yeah.

27
00:01:15.286 --> 00:01:16.245
&gt;&gt; Off screen male: It's
gonna contain the url.

28
00:01:16.245 --> 00:01:19.921
&gt;&gt; Will Sentance: It's gonna add
a property node did this, and

29
00:01:19.921 --> 00:01:24.098
it's gonna look into here and
go what's the path?

30
00:01:24.098 --> 00:01:26.255
Why do they call it the URL
it should be the path?

31
00:01:26.255 --> 00:01:28.312
Cuz the URL is the whole thing, isn't it?

32
00:01:28.312 --> 00:01:31.112
The domain name plus the.

33
00:01:31.112 --> 00:01:35.255
And it's actually just the path which
is just the specific bit you need from

34
00:01:35.255 --> 00:01:36.391
the server itself.

35
00:01:36.391 --> 00:01:36.980
Hm, interesting.

36
00:01:36.980 --> 00:01:41.115
Anyway, the URL, which is?

37
00:01:41.115 --> 00:01:44.753
I'm gonna do it in orange to represent it
literally is grabbed from this message.

38
00:01:44.753 --> 00:01:51.186
Yeah, which is turned
into a string tweets/3.

39
00:01:51.186 --> 00:01:52.365
Everyone see that there?

40
00:01:52.365 --> 00:01:56.948
And then what's the other thing that what
can anyone guess what other property

41
00:01:56.948 --> 00:01:57.509
it gets?

42
00:01:57.509 --> 00:01:59.387
&gt;&gt; Off screen male: Method.
&gt;&gt; Will Sentance: Method, yeah,

43
00:01:59.387 --> 00:02:02.153
I mean it's many properties but

44
00:02:02.153 --> 00:02:07.083
another important one is method,
which is set to, get.

45
00:02:07.083 --> 00:02:10.187
There we go, perfect.

46
00:02:10.187 --> 00:02:13.771
And before we run the function there's
one other object that needs to be

47
00:02:13.771 --> 00:02:14.556
auto created.

48
00:02:14.556 --> 00:02:17.150
In order that we can access and
stick stuff on,

49
00:02:17.150 --> 00:02:19.155
this outbound needs to be message.

50
00:02:19.155 --> 00:02:20.379
Well, it's that other object, isn't it?

51
00:02:20.379 --> 00:02:26.977
So the other object is full
of functions like end and

52
00:02:26.977 --> 00:02:31.274
write that when they're run from

53
00:02:31.274 --> 00:02:36.185
inside of JavaScript will stick stuff

54
00:02:36.185 --> 00:02:40.949
on this important response object.

55
00:02:40.949 --> 00:02:43.722
I know we've done this three or four times
now, but as you see it's complicated.

56
00:02:46.596 --> 00:02:48.733
&gt;&gt; Will Sentance: I always deal
with complex and complicated.

57
00:02:48.733 --> 00:02:50.497
Complicated has lots of moving parts,

58
00:02:50.497 --> 00:02:54.458
complex is it's conceptually abstract in a
way the mind doesn't usually think about.

59
00:02:54.458 --> 00:02:58.718
I would say this is honestly
both complex and complicated.

60
00:02:58.718 --> 00:03:03.056
It's complex, in that it's weird to think
of someone else running our code for us,

61
00:03:03.056 --> 00:03:03.983
as opposed to us.

62
00:03:03.983 --> 00:03:07.631
That's complex,
that's a conceptually unusual thing.

63
00:03:07.631 --> 00:03:10.527
It's complicated,
in that what it runs, and

64
00:03:10.527 --> 00:03:15.072
what it inserts as the argument,
is a bunch of little intricate things.

65
00:03:15.072 --> 00:03:19.345
It's actually unfortunate both complex and
complicated, which is a shame.

66
00:03:19.345 --> 00:03:24.385
All right, so now in the message arrived,
nodes done all

67
00:03:24.385 --> 00:03:29.638
of its nice setup filled in
these very quickly fill them in.

68
00:03:29.638 --> 00:03:34.583
Now, it better start running that
function, because we didn't do all this

69
00:03:34.583 --> 00:03:39.159
setup to try and have to write C++
code to interpret these messages.

70
00:03:39.159 --> 00:03:42.146
We wanna have these messages
available to us up here.

71
00:03:42.146 --> 00:03:43.723
We don't actually get them directly.

72
00:03:43.723 --> 00:03:47.125
We get one of them stored all as data
on an object, and the other one,

73
00:03:47.125 --> 00:03:49.592
a bunch of functions that
will give us access to.

74
00:03:52.140 --> 00:03:55.505
&gt;&gt; Will Sentance: When they're run,
update this data on the response message.

75
00:03:55.505 --> 00:03:57.834
So how do we get access to these?

76
00:03:57.834 --> 00:04:02.367
They're auto inserted into
the auto run function, so

77
00:04:02.367 --> 00:04:05.528
let's get auto run in that function.

78
00:04:05.528 --> 00:04:09.780
We are gonna run the function
which has what name Muhammad?

79
00:04:09.780 --> 00:04:10.375
&gt;&gt; Off screen male: Do on incoming.

80
00:04:10.375 --> 00:04:11.609
&gt;&gt; Will Sentance: Do on incoming.

81
00:04:11.609 --> 00:04:16.321
And I should actually show you my
green pen is gonna represent time,

82
00:04:16.321 --> 00:04:21.129
this is a day later that this request
came in after we set up this code.

83
00:04:21.129 --> 00:04:24.974
It's just been running there for
a day with nothing, just waiting.

84
00:04:24.974 --> 00:04:26.183
This is like a day later.

85
00:04:28.864 --> 00:04:33.474
&gt;&gt; Will Sentance: One day later,
here we go.

86
00:04:33.474 --> 00:04:36.217
Very precise, very precise whatever.

87
00:04:36.217 --> 00:04:40.630
All right, one day later what gets run?

88
00:04:40.630 --> 00:04:43.471
It's do on incoming.

89
00:04:43.471 --> 00:04:48.617
I'm gonna write it's name, I can't decide
whether to do this in black or purple.

90
00:04:48.617 --> 00:04:54.716
I certainly know that the a running
event is purple because that's added,

91
00:04:54.716 --> 00:04:56.992
it's being executed by node.

92
00:04:56.992 --> 00:04:59.931
So everybody we just execute a function?

93
00:04:59.931 --> 00:05:04.304
Actually no, Sarah Rose, instead of
executing a function I create a brand new?

94
00:05:04.304 --> 00:05:04.922
&gt;&gt; Off screen female: Execution context.

95
00:05:04.922 --> 00:05:06.795
&gt;&gt; Will Sentance: Fantastic,
everyone together, a brand new?

96
00:05:06.795 --> 00:05:08.667
&gt;&gt; Off screen male: Execution context.

97
00:05:08.667 --> 00:05:10.555
&gt;&gt; [INAUDIBLE]
&gt;&gt; Will Sentance: That was beautiful.

98
00:05:10.555 --> 00:05:11.357
Everyone online,

99
00:05:11.357 --> 00:05:14.223
they like to shout out backpack
online they think their very funny.

100
00:05:14.223 --> 00:05:18.275
No, it's execution
context online audience.

101
00:05:18.275 --> 00:05:21.211
There's one of the key
word parentheses return.

102
00:05:21.211 --> 00:05:22.885
JavaScript really doesn't do much stuff so

103
00:05:22.885 --> 00:05:24.659
you have to say the same words again and
again.

104
00:05:24.659 --> 00:05:26.848
There it is do on incoming.

105
00:05:26.848 --> 00:05:30.405
It's got a local memory.

106
00:05:30.405 --> 00:05:32.727
Local memory.

107
00:05:32.727 --> 00:05:34.672
Everything in purple it's
all being done by node.

108
00:05:34.672 --> 00:05:38.650
It's a day later we didn't sit there
waiting to run this code for a day.

109
00:05:38.650 --> 00:05:42.416
It's come in, run the code, no, no,
no we're relying on node to do it.

110
00:05:42.416 --> 00:05:46.005
And it's got two parts,
here's our inserted arguments,

111
00:05:46.005 --> 00:05:49.247
the first one is this one,
the second one is this one.

112
00:05:49.247 --> 00:05:54.054
You know what, I'm actually gonna for
once, just because I wanna leave us

113
00:05:54.054 --> 00:05:58.861
a nice record for all of us for
when we're pairing, I'm actually gonna put

114
00:05:58.861 --> 00:06:03.312
them in up here so you can see them
actually stored or being inserted.

115
00:06:03.312 --> 00:06:09.287
I can hear whispering [LAUGHS] Michael for
sure.

116
00:06:09.287 --> 00:06:10.660
I knew it.

117
00:06:10.660 --> 00:06:14.745
And this is a object full of

118
00:06:14.745 --> 00:06:19.585
functions like end and write.

119
00:06:20.866 --> 00:06:22.339
&gt;&gt; Will Sentance: There they are.

120
00:06:22.339 --> 00:06:23.647
And they get inserted.

121
00:06:23.647 --> 00:06:26.041
They don't get any name so
how do we use them?

122
00:06:26.041 --> 00:06:31.010
What word allows us, what thing in
JavaScript allows us prepare like

123
00:06:31.010 --> 00:06:36.508
variable names without data and rely
on when we run code inserting the data?

124
00:06:36.508 --> 00:06:37.572
What are they known as?

125
00:06:37.572 --> 00:06:38.224
&gt;&gt; Off screen male: Parameters.

126
00:06:38.224 --> 00:06:41.223
&gt;&gt; Will Sentance: Parameters, exactly,
place holders, parameters spot on exactly.

127
00:06:41.223 --> 00:06:43.535
I call them place holders but
they call them parameters.

128
00:06:43.535 --> 00:06:46.765
The first one here is everyone together.

129
00:06:46.765 --> 00:06:47.337
&gt;&gt; Off screen male: Incoming data.

130
00:06:47.337 --> 00:06:49.643
&gt;&gt; Will Sentance: Incoming data.

131
00:06:49.643 --> 00:06:51.657
And the second one here is?

132
00:06:51.657 --> 00:06:52.427
&gt;&gt; Off screen male: Option setup.

133
00:06:52.427 --> 00:06:56.292
&gt;&gt; Will Sentance: My very,
my very long semantic which means,

134
00:06:56.292 --> 00:07:00.576
semantic means they have
meaning in their words.

135
00:07:00.576 --> 00:07:05.309
Semantic star parameter names, so we can't
ever lose track of what they're doing.

136
00:07:05.309 --> 00:07:09.127
Okay, I mean, everyone getting
tired of this at this point?

137
00:07:09.127 --> 00:07:12.671
Yes, but Matt, isn't it fun.

138
00:07:12.671 --> 00:07:16.524
There we go, URL and method.

139
00:07:16.524 --> 00:07:21.414
I'm being extra precise this time so
we have a nice record on the whiteboard of

140
00:07:21.414 --> 00:07:24.514
exactly, no confusion,
no hard to read stuff.

141
00:07:24.514 --> 00:07:30.152
End and write, there they are.

142
00:07:30.152 --> 00:07:37.617
And there's a bunch of other
functions in there and

143
00:07:37.617 --> 00:07:43.008
then the data /tweets/3 and get.

144
00:07:43.008 --> 00:07:47.219
Lot of progress made here,
lot of progress.

145
00:07:47.219 --> 00:07:54.412
And so now, we're gonna go into
our function being executed.

146
00:07:54.412 --> 00:07:55.425
Do on incoming.

147
00:07:55.425 --> 00:07:57.784
We're in there, we've inserted our data.

148
00:07:57.784 --> 00:08:03.909
Now we're going to investigate
this object, which has what label?

149
00:08:03.909 --> 00:08:04.420
&gt;&gt; Off screen male: Incoming data.

150
00:08:04.420 --> 00:08:06.473
&gt;&gt; Will Sentance: Incoming data.

151
00:08:06.473 --> 00:08:10.629
And we're gonna use functions on
this object, which has what label?

152
00:08:10.629 --> 00:08:12.736
&gt;&gt; Off screen male: Functions
[CROSSTALK] data.

153
00:08:12.736 --> 00:08:15.597
&gt;&gt; Will Sentance: And runs with those
functions to send the data sent back.

154
00:08:15.597 --> 00:08:20.876
Which we're gonna do depending on
what is in this incoming data object.

155
00:08:20.876 --> 00:08:22.549
So let's see what it says.

156
00:08:22.549 --> 00:08:24.672
Let's get going people, so

157
00:08:24.672 --> 00:08:29.719
what to do on incoming next line
Roman left hand side says to do what?

158
00:08:29.719 --> 00:08:31.086
&gt;&gt; Off screen male: Declare tweet needed.

159
00:08:31.086 --> 00:08:34.603
&gt;&gt; Will Sentance: Yeah exactly,
tweet needed and I'm just gonna expand

160
00:08:34.603 --> 00:08:39.355
this execution context space so
we can really spread ourselves out here.

161
00:08:39.355 --> 00:08:45.331
Okay, tweet needed is going to be whatever

162
00:08:45.331 --> 00:08:51.812
incomingData.url.slice position eight.

163
00:08:51.812 --> 00:08:57.894
Okay, so incomingData.url is what, Sam?

164
00:08:57.894 --> 00:09:00.619
&gt;&gt; Off screen male: /tweets/3.

165
00:09:00.619 --> 00:09:05.142
&gt;&gt; Will Sentance: /tweets /3
fantastic that's that portion here.

166
00:09:05.142 --> 00:09:11.192
Slice is a built in JavaScript method
that allows us in JavaScript to grab,

167
00:09:11.192 --> 00:09:15.525
well whenever we pass it
is the character 0 indexed.

168
00:09:15.525 --> 00:09:20.586
Zero indexed, on words that
we're gonna grab the characters.

169
00:09:20.586 --> 00:09:25.152
So if 3 if it's 35 whatever
we're gonna grab that final

170
00:09:25.152 --> 00:09:27.862
character after position eight.

171
00:09:27.862 --> 00:09:33.391
So slice of tweets/3 gives
us out the number 3.

172
00:09:33.391 --> 00:09:39.077
3- 1 = 2, and so
we're gonna store in tweet needed,

173
00:09:39.077 --> 00:09:41.930
we're gonna need tweet 2.

174
00:09:41.930 --> 00:09:46.530
We took one off it because, 1 2 3,
the 3rd tweet is at position index

175
00:09:46.530 --> 00:09:50.379
2 because JavaScript is 0 indexed,
has 0 index arrays.

176
00:09:50.379 --> 00:09:54.264
That means the first index,
the first position is number 0.

177
00:09:54.264 --> 00:09:54.879
0 1 2.

178
00:09:54.879 --> 00:10:00.734
Okay, now we're going to use that
to get tweet needed number 2,

179
00:10:00.734 --> 00:10:04.679
which is what Michael which string tweets?

180
00:10:04.679 --> 00:10:05.231
&gt;&gt; Off screen male: Hello.

181
00:10:05.231 --> 00:10:06.973
&gt;&gt; Will Sentance: Hello, fantastic.

182
00:10:06.973 --> 00:10:11.653
Okay and so we're gonna do

183
00:10:11.653 --> 00:10:17.833
functionsTosendOutgoingdata.

184
00:10:17.833 --> 00:10:21.504
Which function Sam do we need off
that object in order to access and

185
00:10:21.504 --> 00:10:22.856
set our outbound data?

186
00:10:22.856 --> 00:10:24.306
&gt;&gt; Off screen male: End.
&gt;&gt; Will Sentance: End, and

187
00:10:24.306 --> 00:10:29.197
we're gonna pass to it
tweet position tweet

188
00:10:29.197 --> 00:10:34.097
needed which is 2 which is 0 1 2 is hello.

189
00:10:34.097 --> 00:10:38.384
And end doesn't do anything
in JavaScript really.

190
00:10:38.384 --> 00:10:44.727
Instead it's going to in node set

191
00:10:44.727 --> 00:10:50.394
outbound HTTP message data.

192
00:10:50.394 --> 00:10:57.628
[SOUND] And add to it the tweet,
&gt;&gt; Will Sentance: Hello.

193
00:10:57.628 --> 00:11:02.748
And then we're gonna rely on live NVUB
to grab this message, end says to node

194
00:11:02.748 --> 00:11:07.800
don't worry we're done with the message,
here's the data send it back.

195
00:11:07.800 --> 00:11:08.644
Will it fits in?

196
00:11:08.644 --> 00:11:11.492
That's not a thing [LAUGH] obviously.

197
00:11:11.492 --> 00:11:14.971
Will it fit in and out it comes.

198
00:11:14.971 --> 00:11:19.182
I'm joking, obviously that's not a thing.

199
00:11:19.182 --> 00:11:24.023
[SOUND] Comes back as
the response message to

200
00:11:24.023 --> 00:11:28.872
Michael's Mac and there he gets, hello.

201
00:11:28.872 --> 00:11:30.890
The exact tweet he needed.

202
00:11:30.890 --> 00:11:36.104
We introspected the inbound
messages representation

203
00:11:36.104 --> 00:11:39.737
in a node in a JavaScript object form.

204
00:11:39.737 --> 00:11:44.057
Grabbed the URL specifically, we needed,
discover we needed tweet number 3,

205
00:11:44.057 --> 00:11:45.529
which was index number 2.

206
00:11:45.529 --> 00:11:51.651
Grabbed hello, and attached using
the other auto inserted object,

207
00:11:51.651 --> 00:11:57.876
the one that gives us access to
the response message HTTP message, and

208
00:11:57.876 --> 00:12:04.020
added hello to it automatically sent back,
so this is a full server.

209
00:12:04.020 --> 00:12:08.276
Everything else now that LinkedIn does,

210
00:12:08.276 --> 00:12:13.259
that Uber, that Uber Eats,
the Twitter likes,

211
00:12:13.259 --> 00:12:17.530
that Netflix does with node is just this.

212
00:12:17.530 --> 00:12:21.224
But maybe we're being a little bit more
sophisticated about how we're sending

213
00:12:21.224 --> 00:12:21.994
the data back and

214
00:12:21.994 --> 00:12:25.317
forwards between the computer's
internal features and JavaScript.

215
00:12:25.317 --> 00:12:29.601
Maybe we're being a little bit more
sophisticated about which properties we're

216
00:12:29.601 --> 00:12:31.783
grabbing from the incoming data object.

217
00:12:31.783 --> 00:12:35.018
Maybe we're being a little bit more
sophisticated about where we're getting

218
00:12:35.018 --> 00:12:36.155
our data to send back from.

219
00:12:36.155 --> 00:12:40.808
Probably not local JavaScript memory,
load mini JavaScript data or

220
00:12:40.808 --> 00:12:44.426
maybe from the file system or
from another computer.

221
00:12:44.426 --> 00:12:49.492
But it's all, look at this object,
that's auto created with the property,

222
00:12:49.492 --> 00:12:53.868
look at the function, look at
the object that's auto inserted with

223
00:12:53.868 --> 00:12:58.813
the function that let us set the outbound
message, again and again and again

