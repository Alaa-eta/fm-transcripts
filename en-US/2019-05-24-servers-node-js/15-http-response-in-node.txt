[00:00:00]
>> Will Sentance: Okay in it comes. We have an auto run function but there's two parts to running a function putting parenthesis on the end of it, node does that to execute its code. And what's the other part Michael?
>> Off screen male: Parameters.
>> Will Sentance: I don't know wanna call them parameters. Parameters are what we leave there as place holders to receive what Matt?

[00:00:20]

>> Off screen male: Data.
>> Will Sentance: Yeah known as partially?
>> Off screen male: Arguments.
>> Will Sentance: Arguments. Matt is very attached to the data one, yeah, exactly. But yeah, he's right it's data. Arguments are data, arguments of values, arguments are actual data. Parameters are labels that like variable names without anything stored in them. So we put those in ready for node to create data that gets inserted.

[00:00:44]
Let's create that data. Auto, created, and inserted data, known as everyone.
>> Off screen male: Arguments.
>> Will Sentance: Arguments word on people. Look at that catchy little subtitle there. All right, first one, raise your hand if you can tell me what the first one is created is.
>> Will Sentance: Yeah Sam thank you.

[00:01:10]

>> Off screen male: It's gonna be an object
>> Will Sentance: Yeah.
>> Off screen male: It's gonna contain the url.
>> Will Sentance: It's gonna add a property node did this, and it's gonna look into here and go what's the path? Why do they call it the URL it should be the path? Cuz the URL is the whole thing, isn't it?

[00:01:28]
The domain name plus the. And it's actually just the path which is just the specific bit you need from the server itself. Hm, interesting. Anyway, the URL, which is? I'm gonna do it in orange to represent it literally is grabbed from this message. Yeah, which is turned into a string tweets/3.

[00:01:51]
Everyone see that there? And then what's the other thing that what can anyone guess what other property it gets?
>> Off screen male: Method.
>> Will Sentance: Method, yeah, I mean it's many properties but another important one is method, which is set to, get. There we go, perfect. And before we run the function there's one other object that needs to be auto created.

[00:02:14]
In order that we can access and stick stuff on, this outbound needs to be message. Well, it's that other object, isn't it? So the other object is full of functions like end and write that when they're run from inside of JavaScript will stick stuff on this important response object.

[00:02:40]
I know we've done this three or four times now, but as you see it's complicated.
>> Will Sentance: I always deal with complex and complicated. Complicated has lots of moving parts, complex is it's conceptually abstract in a way the mind doesn't usually think about. I would say this is honestly both complex and complicated.

[00:02:58]
It's complex, in that it's weird to think of someone else running our code for us, as opposed to us. That's complex, that's a conceptually unusual thing. It's complicated, in that what it runs, and what it inserts as the argument, is a bunch of little intricate things. It's actually unfortunate both complex and complicated, which is a shame.

[00:03:19]
All right, so now in the message arrived, nodes done all of its nice setup filled in these very quickly fill them in. Now, it better start running that function, because we didn't do all this setup to try and have to write C++ code to interpret these messages. We wanna have these messages available to us up here.

[00:03:42]
We don't actually get them directly. We get one of them stored all as data on an object, and the other one, a bunch of functions that will give us access to.
>> Will Sentance: When they're run, update this data on the response message. So how do we get access to these?

[00:03:57]
They're auto inserted into the auto run function, so let's get auto run in that function. We are gonna run the function which has what name Muhammad?
>> Off screen male: Do on incoming.
>> Will Sentance: Do on incoming. And I should actually show you my green pen is gonna represent time, this is a day later that this request came in after we set up this code.

[00:04:21]
It's just been running there for a day with nothing, just waiting. This is like a day later.
>> Will Sentance: One day later, here we go. Very precise, very precise whatever. All right, one day later what gets run? It's do on incoming. I'm gonna write it's name, I can't decide whether to do this in black or purple.

[00:04:48]
I certainly know that the a running event is purple because that's added, it's being executed by node. So everybody we just execute a function? Actually no, Sarah Rose, instead of executing a function I create a brand new?
>> Off screen female: Execution context.
>> Will Sentance: Fantastic, everyone together, a brand new?
>> Off screen male: Execution context.

[00:05:08]

>> [INAUDIBLE]
>> Will Sentance: That was beautiful. Everyone online, they like to shout out backpack online they think their very funny. No, it's execution context online audience. There's one of the key word parentheses return. JavaScript really doesn't do much stuff so you have to say the same words again and again.

[00:05:24]
There it is do on incoming. It's got a local memory. Local memory. Everything in purple it's all being done by node. It's a day later we didn't sit there waiting to run this code for a day. It's come in, run the code, no, no, no we're relying on node to do it.

[00:05:42]
And it's got two parts, here's our inserted arguments, the first one is this one, the second one is this one. You know what, I'm actually gonna for once, just because I wanna leave us a nice record for all of us for when we're pairing, I'm actually gonna put them in up here so you can see them actually stored or being inserted.

[00:06:03]
I can hear whispering [LAUGHS] Michael for sure. I knew it. And this is a object full of functions like end and write.
>> Will Sentance: There they are. And they get inserted. They don't get any name so how do we use them? What word allows us, what thing in JavaScript allows us prepare like variable names without data and rely on when we run code inserting the data?

[00:06:36]
What are they known as?
>> Off screen male: Parameters.
>> Will Sentance: Parameters, exactly, place holders, parameters spot on exactly. I call them place holders but they call them parameters. The first one here is everyone together.
>> Off screen male: Incoming data.
>> Will Sentance: Incoming data. And the second one here is?
>> Off screen male: Option setup.
>> Will Sentance: My very, my very long semantic which means, semantic means they have meaning in their words.

[00:07:00]
Semantic star parameter names, so we can't ever lose track of what they're doing. Okay, I mean, everyone getting tired of this at this point? Yes, but Matt, isn't it fun. There we go, URL and method. I'm being extra precise this time so we have a nice record on the whiteboard of exactly, no confusion, no hard to read stuff.

[00:07:24]
End and write, there they are. And there's a bunch of other functions in there and then the data /tweets/3 and get. Lot of progress made here, lot of progress. And so now, we're gonna go into our function being executed. Do on incoming. We're in there, we've inserted our data.

[00:07:57]
Now we're going to investigate this object, which has what label?
>> Off screen male: Incoming data.
>> Will Sentance: Incoming data. And we're gonna use functions on this object, which has what label?
>> Off screen male: Functions [CROSSTALK] data.
>> Will Sentance: And runs with those functions to send the data sent back. Which we're gonna do depending on what is in this incoming data object.

[00:08:20]
So let's see what it says. Let's get going people, so what to do on incoming next line Roman left hand side says to do what?
>> Off screen male: Declare tweet needed.
>> Will Sentance: Yeah exactly, tweet needed and I'm just gonna expand this execution context space so we can really spread ourselves out here.

[00:08:39]
Okay, tweet needed is going to be whatever incomingData.url.slice position eight. Okay, so incomingData.url is what, Sam?
>> Off screen male: /tweets/3.
>> Will Sentance: /tweets /3 fantastic that's that portion here. Slice is a built in JavaScript method that allows us in JavaScript to grab, well whenever we pass it is the character 0 indexed.

[00:09:15]
Zero indexed, on words that we're gonna grab the characters. So if 3 if it's 35 whatever we're gonna grab that final character after position eight. So slice of tweets/3 gives us out the number 3. 3- 1 = 2, and so we're gonna store in tweet needed, we're gonna need tweet 2.

[00:09:41]
We took one off it because, 1 2 3, the 3rd tweet is at position index 2 because JavaScript is 0 indexed, has 0 index arrays. That means the first index, the first position is number 0. 0 1 2. Okay, now we're going to use that to get tweet needed number 2, which is what Michael which string tweets?

[00:10:04]

>> Off screen male: Hello.
>> Will Sentance: Hello, fantastic. Okay and so we're gonna do functionsTosendOutgoingdata. Which function Sam do we need off that object in order to access and set our outbound data?
>> Off screen male: End.
>> Will Sentance: End, and we're gonna pass to it tweet position tweet needed which is 2 which is 0 1 2 is hello.

[00:10:34]
And end doesn't do anything in JavaScript really. Instead it's going to in node set outbound HTTP message data. [SOUND] And add to it the tweet,
>> Will Sentance: Hello. And then we're gonna rely on live NVUB to grab this message, end says to node don't worry we're done with the message, here's the data send it back.

[00:11:07]
Will it fits in? That's not a thing [LAUGH] obviously. Will it fit in and out it comes. I'm joking, obviously that's not a thing. [SOUND] Comes back as the response message to Michael's Mac and there he gets, hello. The exact tweet he needed. We introspected the inbound messages representation in a node in a JavaScript object form.

[00:11:39]
Grabbed the URL specifically, we needed, discover we needed tweet number 3, which was index number 2. Grabbed hello, and attached using the other auto inserted object, the one that gives us access to the response message HTTP message, and added hello to it automatically sent back, so this is a full server.

[00:12:04]
Everything else now that LinkedIn does, that Uber, that Uber Eats, the Twitter likes, that Netflix does with node is just this. But maybe we're being a little bit more sophisticated about how we're sending the data back and forwards between the computer's internal features and JavaScript. Maybe we're being a little bit more sophisticated about which properties we're grabbing from the incoming data object.

[00:12:31]
Maybe we're being a little bit more sophisticated about where we're getting our data to send back from. Probably not local JavaScript memory, load mini JavaScript data or maybe from the file system or from another computer. But it's all, look at this object, that's auto created with the property, look at the function, look at the object that's auto inserted with the function that let us set the outbound message, again and again and again

