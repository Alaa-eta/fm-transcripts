[00:00:02]
>> Estelle Weyl: Next we're going to talk about flex items. We've been talking so far all the properties have controlled the flex items based on the flex container. But you can actually control flex items individually.
>> Estelle Weyl: We have the align self property. Remember we had the align items property? Which will line an item within its line.

[00:00:25]
And they all went to the top, or they all went to the bottom, or they were all stretched. You can overwrite that align items on each individual one. So, here see by default the whole container's going to be the same height as C because C is the one with the most information.

[00:00:47]
And I've aligned all the items in the center, but I said just B I want to stretch. So A and C are both centered, but C looks like it's stretched because it is taking up 100%. And b is not being aligned center, it's actually stretched flex end. You can bring it all the way down to the bottom.

[00:01:11]
I can bring it all the way down to the top. I can do base line. And since it's the only one with base line, it goes all the way up to the top. What does auto do? Someone asked that earlier, right? Auto basically says the line is centered because that's what its parents is doing.

[00:01:34]
That's what the parent is saying to do. And then we have center stretch baseline, so we're good, I could have done the same thing with a.
>> Estelle Weyl: Right? So I'm only moving one. That is the aligned self which overwrites the aligned items property just for the elements on which it's declared.

[00:02:01]

>> Estelle Weyl: So here just the h so this was this previous one here was a single line right? This is a single line of flex items here we have multiple lines of flex items. The letter h is the one where I'm gonna overwrite because it says h align stretch.

[00:02:24]
So all of them on the container, it says align-items flex start. Align content flex end, rather. So align-content flex end means it's all the content is down at the bottom, align-items means that within each line every item is aligned to the top of that flex line. So the difference between align-content, align-content says go all the way down to the bottom.

[00:02:53]
Align-item says within each line go to the top. And then align-self says just for one item on which I'm gonna declare it, flex end. And you see how the eight shift down at the bottom. So FGIJ, ABCDE, and K, they all inherit the line items
>> Estelle Weyl: From the parent, from the container.

[00:03:24]
And that's usually what you wanna do, you want all of your elements to look the same. You don't want one to look different. This does not look good, but even if they were all looking the same, it would still look like crap because I used the pale green, orange, yellow, an icky font cuz we are trying to make things look as ugly as possible today.

[00:03:43]
So, that's the align-self property, then we have the order property. So, by default, every single elements or flex item has the order of zero, there all zero. So, there all would be the order that they were declared, Like every order of value so you can change the order to negative one to negative 50 to 400 whatever you want but every single item that has the flex the order property with a value of negative one will come before all of those that have zero.

[00:04:23]
But all of those within the groups that have the value of 0, will be in order of the markup. And all of those with -1 will be in order of the markup in terms of the ones that have the value of 1. So let's show by example, because explaining it is a little bit hard.

[00:04:38]
So here we already know that these go in alphabetical order, right. So let me just do x and x and it goes alphabet, banana, crayons, dinosaurs, foundation, ghost, happy. It's in alphabetical order. I've put display flex. So it's flex box on the parent and then the flex box says row so it's going to across from left to right and then top to bottom because it's allows to rap but it's not rap reverse, so the cross axis is from top to bottom.

[00:05:11]
The main axis is from left to right. Then I say every third one, give it an order of negative one. So all the dark gray ones came before the medium gray and the white ones, but within the dark grey ones, they're still in alphabetical order. It says, cramped, foundation, igloo, lasso, orange, rancid, umbrella, and xylophone.

[00:05:33]
I have no clue what mood I was in when I came up with these words. And then, so all the ones with an order of negative one come before all of those with an order of zero. Then I'm going to give all of these a positive one, which means they all come after the ones with a value of zero, but they're also in alphabetical order, so that third group is: alphabet, dinosaurs, ghosts, janitors, magic eight ball, petunia, shoelace, and valentine.

[00:06:05]
If I were to do -2.
>> Estelle Weyl: Or -11, they would come before all those with a -1.
>> Estelle Weyl: And then if I were to give all of these, order, -22
>> Estelle Weyl: That's on the parent, it has to be on the child. Ok, that's why it didn't work. So do you understand how order works?

[00:06:44]
Not only does it change the order, if more than one element has the same value for order, it's in the order of the HTML. It'll be in the same order as the code, as the markup.
>> Estelle Weyl: And this is just here because it's pretty. No, it's here because the navigation here I gave it an order of 4.

[00:07:12]
And so it is at the bottom because it is greater than 0, but you'll notice what I did, I gave it both the nav and the footer an order of 4 Because by default, nav and footer both have 0. If I only gave nav an order of 4, footer would still have 0, and would come before the nav.

[00:07:37]
And I definitely want the footer to come after the nav. So by giving nav and footer both a value of 4, they're both last, but they're still in the order In terms of the html, nav can be for footer. Does that make sense to everyone? Okay. So in terms of accessibility, the screen meter is going to read it in the source order I think expect for Mozilla.

[00:08:06]
But that will probably be fixed, but I'm not sure. So don't, I think there's one browser that was like maybe we should read. But the interesting thing is, and the thing to worry about is the tab order. A lot of people access websites using the keyboard not their mouse.

[00:08:24]
So a visual reader look at it and point to something and click. That's fine, ut if you're tabbing and you have the top part for search engine optimization, you know some BS stuff on the top. You know it says baseball, baseball, baseball or actually it would be sex, sex, sex, sex, sex, because that will bring up your order on many more views.

[00:08:47]
And you put that at the bottom and someone starts tabbing through your page they're not gonna see where their mouse is. So realize that you wanna think about the tab order when you're reordering things. And then right to left languages, it's kind of awesome because it will flip it for you and its source order will It will follow the source order.

[00:09:12]
So it'll put your first div to the right and then the second one in the order that they read.

