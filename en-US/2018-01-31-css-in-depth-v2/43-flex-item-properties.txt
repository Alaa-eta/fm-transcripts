[00:00:02]
>> Estelle Weyl: Next, we're gonna talk about Flex Items. So we've been talking so far, all the properties have controlled the flex items based on the flex container. But you can actually control flex items individually.
>> Estelle Weyl: So we have the align-self property, remember we had the align-items property? Which will align an item within its line, and they all went to the top, or they all went to the bottom, or they were all stretched.

[00:00:30]
You can overwrite that align-items on each individual one. So here, see by default, the whole container is gonna be the same height as C because C is the one with the most information. And I've aligned all the items in the center, but I said just B I wanted to stretch.

[00:00:52]
So A and C are both centered, but C looks it's stretched cuz it is taking up a 100% and B is not being align-center, and it's actually stretched.
>> Estelle Weyl: Flex-end, you can bring it all the way down to the bottom, I can bring it all the way up to the top.

[00:01:14]
I can do baseline.
>> Estelle Weyl: And since it's the only one at baseline, it goes all the way up to the top.
>> Estelle Weyl: What does auto do? Someone asked that earlier, right? Auto basically says align center, because that's what the parent is saying to do. And then we have center, stretch, okay, so we're good.

[00:01:42]
I could've done the same thing with a.
>> Estelle Weyl: Right, so I'm only moving one, that is the align-self, which overwrites the align-items property just for the elements on which it's declared.
>> Estelle Weyl: So here, just the H. So this previous one here was a single line, right? This is a single line of flex items, here we have multiple lines of flex items.

[00:02:17]
The letter H is the one where I'm gonna overwrite, because it says h align stretch. So all of them on the container it says aline items flex start.
>> Estelle Weyl: Align contents flex end. Align content flex end means that all of the content is down at the bottem. Align items means that within each line every item is aligned to the top of that flex line.

[00:02:48]
So the difference between align-content. Align-content says go all the way down to the bottom, align-item says within each line go to the top. And then on align-self says just for one item on which I'm gonna declare it. flex-end, op, and you see how the h is down at the bottom.

[00:03:10]
So f, g, i, j, a, b, c, d, e, and k, they all inherit the align item from the parent, from the container. And that's usually what you want to do, you want all of your elements to look the same. You don't want one to look different, this does not look good.

[00:03:31]
But even if they were all looking the same, it would still look like crap. Because I used a pale green, orange, yellow, an icky font cause we are trying to make things look as ugly as possible today. So that's the aligned self property. Then we have the order property, so by default every single element of flex item has the order of zero, they're all zero.

[00:04:00]
So they all will be in the order that they were declared. Every order value, so you can change the order to -1 to -50 to 400, whatever you want. But every single item that has the flex, the order property with the value of negative 1 will come before all of those have 0.

[00:04:23]
But all of those within the group that have the value of zero will be in order of the markup, and all of those with negative one will be in order of the markup in terms of the ones that have the value of one. So let's show by example because explaining it is a little bit hard.

[00:04:38]
So here we already know that these go in alphabetical order, right? So, let me just do x and x, it goes alphabet, banana, crayons, dinosaurs, eggplant, foundation, ghosts, happy, right? It's in alphabetical order. I've put "display flex", so, it's a flex box on the parent and then, the flex flow it says "row".

[00:05:02]
So, it's gonna go across from left to right and then top to bottom, because it's allowed to wrap, but it's not wrap reverse. So the cross axis is from top to bottom, the main axis is from left to right. Then I say, every third one given in order of -1.

[00:05:19]
So all the dark gray ones came before the medium gray and the white ones. But within the dark grey ones they are still in alphabetical order, it says crayons, foundation, igloo, lasso, orange, rancid, umbrella, and xylophone. I have no clue what mood I was in when I came up with these words.

[00:05:39]
And then, so all the one with a order of negative one come before all of those with an order of zero. Then I'm gonna give all of these a positive one, which means they all come after the ones with the value of 0, but they're also in alphabetical order.

[00:05:59]
So that third group is alphabet, dinosaurs, ghosts, janitors, magic eight ball, petunia, shoelace and valentine. If I were to do -2.
>> Estelle Weyl: Or -11, they would come before all those with a -1. And then if I were to give all of these -20, no, order -22.
>> Estelle Weyl: That's on the parent, it has to be on the child.

[00:06:39]
Okay, that's why it didn't work. So do you understand how order works? Now it doesn't change the order If more than one element has the same value for order, it's in the order of the HTML. It'll be in the same order as the code, as the marker.
>> Estelle Weyl: And this is just here because it's pretty, no, it's here because the navigation here.

[00:07:09]

>> Estelle Weyl: I gave it in an order of four and so it's at the bottom because it's greater than zero. But you'll notice what I did, I gave it, put the nav and the footer in order for, because by default, nav and footer both had zero. If I only gave nav an order of 4, footer would still have zero, and it would come before the nave.

[00:07:38]
And I definitely want the footer to come after the nav. So by giving nav and footer both a value of 4, they're both last but they're still in the order in terms of the HTML, nav came before footer. Does that make sense to everyone?
>> Estelle Weyl: Okay, so in terms of accessibility.

[00:07:59]

>> Estelle Weyl: The screen reader's gonna read it in the source order, I think except for Mozilla. But that was probably fixed, but I'm not sure so don't, I think there's one browser that was like maybe we should read. The inherency thing is and the thing to worry about is the Tab order.

[00:08:19]
A lot of people access websites using the keyboard, not their mouse. So a visual reader will look at it and point to something and click, that's fine. But if you're tabbing and you have the top part of search engine optimization, you know some BS stuff on the top because it says baseball, baseball, baseball.

[00:08:42]
Or actually it would be sex, sex, sex because that will bring up your order on many more views. And you put that at the bottom, and someone starts tabbing through your page, they're not going to see where their mouse is. Realize that you want to think about the tab order when you're reordering things.

[00:09:01]
And then right to left languages, it's kind of awesome because it will flip it for you and source order will It will follow the source order. So it will put your first div to the right, and then a second one in the order that they read.

