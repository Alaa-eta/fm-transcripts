WEBVTT

1
00:00:03.564 --> 00:00:04.506
&gt;&gt; Estelle Weyl: But wait, there's more.

2
00:00:04.506 --> 00:00:06.885
Ed Valenti is the one who
did the Ginsu knives,

3
00:00:06.885 --> 00:00:11.096
some of you might be too old to remember
the Ginsu knives but yeah so there's more.

4
00:00:11.096 --> 00:00:15.200
So, we've basically set up a basic flex,
so

5
00:00:15.200 --> 00:00:19.088
let's deep dive now into the properties,

6
00:00:19.088 --> 00:00:24.064
that impact the flex container,
which is the parent.

7
00:00:28.518 --> 00:00:31.478
&gt;&gt; Estelle Weyl: So there are ways where
you can control the flex items which

8
00:00:31.478 --> 00:00:32.573
are those children.

9
00:00:32.573 --> 00:00:35.746
All that things from
bananas to xylophone and

10
00:00:35.746 --> 00:00:39.684
I can't remember what was A,
those are all flex items.

11
00:00:39.684 --> 00:00:42.316
So the flex container is that
box that they were all in, and

12
00:00:42.316 --> 00:00:44.213
that's the thing we put display flex on.

13
00:00:44.213 --> 00:00:48.096
And it can control the appearance
of the children partially,

14
00:00:48.096 --> 00:00:51.167
through some properties
of the flex container.

15
00:00:51.167 --> 00:00:54.546
So there's the justified content property,
and

16
00:00:54.546 --> 00:00:59.132
it has many different values
including flex-start, flex-end,

17
00:00:59.132 --> 00:01:03.488
center, space-between,
space-around, space-evenly.

18
00:01:03.488 --> 00:01:09.010
The justify content property aligns
flex items along the main axis,

19
00:01:09.010 --> 00:01:12.256
which in this case is from left to right.

20
00:01:12.256 --> 00:01:17.135
The align content is on the cross axis,
which is top to bottom.

21
00:01:17.135 --> 00:01:21.013
And, that's why I want to cover cross and
main axis so you'd understand those terms.

22
00:01:21.013 --> 00:01:25.903
So here I have a display flex, and

23
00:01:25.903 --> 00:01:28.702
only three items.

24
00:01:28.702 --> 00:01:30.331
So they don't take up the whole space.

25
00:01:30.331 --> 00:01:35.181
Basically justify content
property deals with

26
00:01:35.181 --> 00:01:40.388
what to do with the space if the sum,
of the widths or

27
00:01:40.388 --> 00:01:45.356
the heights,
the main dimension of the flex item

28
00:01:45.356 --> 00:01:50.107
is not exactly equal to
the parent container.

29
00:01:50.107 --> 00:01:52.460
So, in this case,
we have a lot of free space, but

30
00:01:52.460 --> 00:01:54.661
sometimes remember when
it was over flowing?

31
00:01:54.661 --> 00:01:56.283
What happens if it over flows?

32
00:01:56.283 --> 00:01:57.684
Does it start to the left?

33
00:01:57.684 --> 00:01:58.400
Does it start to the right?

34
00:01:58.400 --> 00:01:59.333
Does it go in the center?

35
00:01:59.333 --> 00:02:04.648
So these are basically
the justified content and

36
00:02:04.648 --> 00:02:08.664
says what to do with the extra space or

37
00:02:08.664 --> 00:02:13.078
the lack of space along the main access.

38
00:02:13.078 --> 00:02:18.153
So here we've put space between,
which puts even amounts, it puts

39
00:02:18.153 --> 00:02:23.688
the first one on the left or at the cross
start, I mean, at the main start.

40
00:02:23.688 --> 00:02:25.855
So number one always goes at main start,

41
00:02:25.855 --> 00:02:28.926
which is important later on
when you have too many items.

42
00:02:28.926 --> 00:02:31.846
When you have too many items,
A is still gonna be in that corner,

43
00:02:31.846 --> 00:02:32.886
It's gonna grow out.

44
00:02:32.886 --> 00:02:38.024
It puts the second one at main end,
and then it puts this

45
00:02:38.024 --> 00:02:42.740
equal amounts of space
every time it adds ones in.

46
00:02:42.740 --> 00:02:47.247
So, that's what space-between does.

47
00:02:47.247 --> 00:02:52.833
Space-around puts the same amount of
space on each side of each element.

48
00:02:52.833 --> 00:02:56.945
So, if there's 20 pixels on the left of A,
there's 20 pixels on the right of A, and

49
00:02:56.945 --> 00:03:00.279
there's 20 pixels on the left of B,
and 20 pixels on the right of B,

50
00:03:00.279 --> 00:03:02.580
and 20 pixels on the right of C and
the left of C.

51
00:03:02.580 --> 00:03:07.786
So that means the space between A and
B is twice as wide as the space

52
00:03:07.786 --> 00:03:12.332
between the start and A,
and that's ugly, all right?

53
00:03:12.332 --> 00:03:13.864
Who here thinks that's ugly?

54
00:03:13.864 --> 00:03:17.940
Okay, everyone's asleep except for
one person, cuz that is ugly.

55
00:03:17.940 --> 00:03:18.962
&gt;&gt; Speaker 2: [LAUGH].

56
00:03:18.962 --> 00:03:22.384
&gt;&gt; Estelle Weyl: So there's also property
called space-evenly and that takes care of

57
00:03:22.384 --> 00:03:25.985
it, and it puts the same amount of space
on the outside than on the inside.

58
00:03:27.867 --> 00:03:31.262
&gt;&gt; Estelle Weyl: Space-evenly is
not in the Flexbox specification,

59
00:03:31.262 --> 00:03:35.420
it's in the positioning specification or
something like that.

60
00:03:35.420 --> 00:03:38.902
So if you don't see it in the Flexbox,
it actually is,

61
00:03:38.902 --> 00:03:43.451
it's just they've stopped the Flexbox and
they've added spacing and

62
00:03:43.451 --> 00:03:46.971
stuff like that, or
whatever that specification is.

63
00:03:46.971 --> 00:03:50.877
So we might get other features,
you have to basically click through

64
00:03:50.877 --> 00:03:54.586
the specification, which is why
this took four years to write.

65
00:03:54.586 --> 00:03:59.525
It actually took more than that,
cuz Eric had written the first, and

66
00:03:59.525 --> 00:04:01.747
second, and third editions.

67
00:04:01.747 --> 00:04:05.701
So he already had this much content,
and we had to add that much more.

68
00:04:05.701 --> 00:04:10.202
Okay, so that's, no let's go a few more.

69
00:04:10.202 --> 00:04:13.821
There's center,
which groups them all at the center.

70
00:04:13.821 --> 00:04:17.455
There's flex start, which is main start,

71
00:04:17.455 --> 00:04:21.397
the main access,
the start of the main access.

72
00:04:21.397 --> 00:04:28.189
There's flex end, and
I think that's it, okay.

73
00:04:28.189 --> 00:04:30.617
Then we have the align items property,

74
00:04:30.617 --> 00:04:33.867
which basically aligns
items along the cross axis.

75
00:04:33.867 --> 00:04:37.214
We just learned main axis,
which is justify content,

76
00:04:37.214 --> 00:04:39.414
aligned as it along the cross axis.

77
00:04:39.414 --> 00:04:46.225
And similarly, we have flex start,
flex end, center, baseline, and stretch.

78
00:04:46.225 --> 00:04:48.237
So, here are three elements that I have.

79
00:04:53.149 --> 00:04:56.289
&gt;&gt; Estelle Weyl: And they are all
centered, that is not the default.

80
00:04:56.289 --> 00:05:01.765
The default which is what
you usually want is stretch.

81
00:05:01.765 --> 00:05:07.534
There is a three column layout,
right, with no work whatsoever,

82
00:05:07.534 --> 00:05:11.767
it's just display flex and
that's it, right?

83
00:05:11.767 --> 00:05:17.783
So, align that in center,
we can also do flex-start,

84
00:05:17.783 --> 00:05:24.699
which puts it at the top,
flex-end which puts it at the bottom.

85
00:05:24.699 --> 00:05:29.269
And when I mean bottom I actually mean
cross-end, it aligns it at cross-end, but

86
00:05:29.269 --> 00:05:31.049
I think bottom is easier to use.

87
00:05:31.049 --> 00:05:37.475
We already showed stretch,
we showed center, so let me show baseline.

88
00:05:39.207 --> 00:05:44.040
&gt;&gt; Estelle Weyl: Baseline is a little bit
weird, but if you actually took something

89
00:05:44.040 --> 00:05:49.304
like a piece of paper and went across
the whole thing, this is another and

90
00:05:49.304 --> 00:05:55.192
header with, are all perfectly aligned,
cuz they are aligned along baseline.

91
00:05:55.192 --> 00:06:00.570
So if I have more padding on the top of
one or more margin on the top of one,

92
00:06:00.570 --> 00:06:04.784
it's one and on baseline,
which is kind of interesting

93
00:06:04.784 --> 00:06:09.356
when you have an aside on one side and
a nav on the other side and

94
00:06:09.356 --> 00:06:14.044
you're main article and
you have an h1, an h2, and an h3.

95
00:06:14.044 --> 00:06:18.074
You can line it all three at baseline,
everything else will just flow in after

96
00:06:18.074 --> 00:06:21.546
that, but the thing is that does
not lead to a three column layout.

97
00:06:21.546 --> 00:06:25.681
I would rather stretch it, right, and

98
00:06:25.681 --> 00:06:32.840
then make sure I made my top padding
the same, but that is baseline.

99
00:06:32.840 --> 00:06:40.040
Okay, so I did say that I would
have the visibility of collapse.

100
00:06:43.373 --> 00:06:50.033
&gt;&gt; Estelle Weyl: It looks like
visibility hit him, doesn't it?

101
00:06:50.033 --> 00:06:54.392
Because that says, align items center,
that's center this way.

102
00:06:54.392 --> 00:06:59.624
The default is flex start,
so if I do justify.

103
00:07:06.042 --> 00:07:08.568
&gt;&gt; Estelle Weyl: Okay,
see I look things up.

104
00:07:08.568 --> 00:07:17.782
If I do,
&gt;&gt; Estelle Weyl: Justify

105
00:07:17.782 --> 00:07:22.933
content flex start,
it doesn't change, because the item

106
00:07:22.933 --> 00:07:28.921
is taking up it's full width,
it's basically visibility hidden.

107
00:07:28.921 --> 00:07:31.063
Okay, then you have
the align-content property and

108
00:07:31.063 --> 00:07:34.064
the values of the align-content
are flex-start, flex-end, center,

109
00:07:34.064 --> 00:07:36.840
space-between, space-around,
stretch, and space-evenly.

110
00:07:36.840 --> 00:07:41.685
Doesn't that sound exactly
like justify-content?

111
00:07:41.685 --> 00:07:45.910
But that only applies to
multi-line containers.

112
00:07:45.910 --> 00:07:48.755
Originally it was just within
its one line, all right?

113
00:07:48.755 --> 00:07:55.101
We were aligning it within one line,
sometimes you have more than one line.

114
00:07:55.101 --> 00:08:00.026
So,
&gt;&gt; Estelle Weyl: So

115
00:08:00.026 --> 00:08:05.941
here we have the align-content property,
and right now the value is flex-end,

116
00:08:05.941 --> 00:08:10.312
so all the lines are at the bottom,
before it was just the flex

117
00:08:10.312 --> 00:08:15.049
items in that one line at the bottom
of their flex line, right?.

118
00:08:15.049 --> 00:08:19.205
Here all the lines are at
the bottom of this container.

119
00:08:19.205 --> 00:08:23.582
So this container is like 400 pixels high,
and it could be anywhere,

120
00:08:23.582 --> 00:08:25.323
it could be at flex-start.

121
00:08:27.576 --> 00:08:29.413
&gt;&gt; Estelle Weyl: All right, so
all of the lines are pushed to the top.

122
00:08:32.405 --> 00:08:33.362
&gt;&gt; Estelle Weyl: We have stretch.

123
00:08:34.942 --> 00:08:39.427
&gt;&gt; Estelle Weyl: And when I said
the example doesn't work for stretch,

124
00:08:39.427 --> 00:08:41.191
it apparently does.

125
00:08:41.191 --> 00:08:45.359
Before the yellow and
red lines would not be in the right spot.

126
00:08:45.359 --> 00:08:49.726
So, no, it doesn't cuz these
are actually taking up the whole thing.

127
00:08:49.726 --> 00:08:52.932
They're stretching, the yellow and
red lines would actually meet.

128
00:08:52.932 --> 00:08:55.331
So when I say this example
doesn't work for stretch,

129
00:08:55.331 --> 00:08:59.083
the lines are actually taking up the full
width, it's just that you can't see it.

130
00:09:00.859 --> 00:09:04.900
&gt;&gt; Estelle Weyl: Then we have baseline,
and

131
00:09:04.900 --> 00:09:09.474
then we have space-between.

132
00:09:09.474 --> 00:09:13.328
And so you see here,
the first line is at the top,

133
00:09:13.328 --> 00:09:17.937
the second line is placed at
the bottom and the third line,

134
00:09:17.937 --> 00:09:21.622
there's spaces evenly
around both of those.

135
00:09:21.622 --> 00:09:26.516
So, we can do space-around and

136
00:09:26.516 --> 00:09:29.966
then space-evenly.

137
00:09:29.966 --> 00:09:34.533
So the difference between this one and

138
00:09:34.533 --> 00:09:38.822
the other one, let me just go here.

139
00:09:38.822 --> 00:09:43.265
So I want all items to flex-start,

140
00:09:43.265 --> 00:09:49.067
I could also do stretch
&gt;&gt; Estelle Weyl: Right.

141
00:09:52.095 --> 00:09:53.910
&gt;&gt; Estelle Weyl: And
that makes all of them stretch, and

142
00:09:53.910 --> 00:09:55.951
then let see what happens
when I do stretch.

143
00:09:57.736 --> 00:10:00.684
&gt;&gt; Estelle Weyl: So remember, I said
the example doesn't work with stretch,

144
00:10:00.684 --> 00:10:04.144
it's the example's actually working,
final stretch is the yellow and

145
00:10:04.144 --> 00:10:05.745
red lines that aren't working.

146
00:10:05.745 --> 00:10:08.007
So you see how A, B, C, D, and

147
00:10:08.007 --> 00:10:12.013
E go all the way from the yellow
line to the yellow line.

148
00:10:12.013 --> 00:10:16.694
And F, G, H, I, J go all the way through
the yellow line to the next yellow line.

149
00:10:16.694 --> 00:10:20.595
And K goes all the way from
the yellow line to the bottom,

150
00:10:20.595 --> 00:10:25.409
because all of the elements
are stretched within their own line, and

151
00:10:25.409 --> 00:10:27.907
the align-content is stretched.

152
00:10:27.907 --> 00:10:36.541
So let's switch this to,
&gt;&gt; Estelle Weyl: Centre.

153
00:10:36.541 --> 00:10:41.615
Okay, so
here they're all grouped in the centre,

154
00:10:41.615 --> 00:10:47.634
they're all stretched,
with the align-items property,

155
00:10:47.634 --> 00:10:55.438
but all the lines are grouped in the
center with the align-content property.

156
00:10:55.438 --> 00:11:00.133
Are you understanding the difference
between align-items and align-content?

157
00:11:00.133 --> 00:11:02.010
I would be surprised if you were,

158
00:11:02.010 --> 00:11:04.971
because this took me forever
to wrap my head around.

159
00:11:04.971 --> 00:11:10.129
Just realize that the align
items is within its own line.

160
00:11:10.129 --> 00:11:13.750
Is it at the top, at the bottom,
in the middle, or stretched?

161
00:11:13.750 --> 00:11:18.628
And the align content is the full line,
like all the lines within the container,

162
00:11:18.628 --> 00:11:22.716
are they all grouped at the top,
are they all grouped at the bottom,

163
00:11:22.716 --> 00:11:24.888
are they all grouped at the center?

164
00:11:24.888 --> 00:11:27.875
Are they spaced out or not?

165
00:11:27.875 --> 00:11:30.124
So let me put this back to flex-start or

166
00:11:30.124 --> 00:11:33.815
I'm gonna put it at flex- end
just to make life more confusing.

167
00:11:33.815 --> 00:11:37.860
And let me go back to the top.

168
00:11:41.517 --> 00:11:45.301
&gt;&gt; Estelle Weyl: Align-content so we did
center and then let's do space-evenly.

169
00:11:48.262 --> 00:11:52.618
&gt;&gt; Estelle Weyl: All right,
so there's this much space

170
00:11:52.618 --> 00:11:57.769
between the main-start in the yellow line.

171
00:11:57.769 --> 00:12:02.285
No, that's cross-start in the yellow line
between the red and the yellow line,

172
00:12:02.285 --> 00:12:06.341
between the second red and yellow line,
and between the third red line and

173
00:12:06.341 --> 00:12:06.876
the end.

174
00:12:06.876 --> 00:12:08.745
Does that make sense to people,

175
00:12:08.745 --> 00:12:12.843
this is one of those things where I
don't expect you to fully grasp it.

176
00:12:12.843 --> 00:12:16.516
Hopefully after we're done with
grids you will fully understand it.

