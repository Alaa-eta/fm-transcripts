[00:00:02]
>> Estelle Weyl: Okay so let's cover some other logical combinators including negation, which you've seen me use, matching, and parent. You've seen me type this a few times, what does it mean? :not. It means not whatever is inside the parentheses. So this matches any element that is not also matched by s1.

[00:00:28]
s1 is a selector., and it's a simple selector. By simple selector, I don't mean easy selector, like E space F, that's actually a combinator, no combinators. A simple selector is like nth of type 27 n plus 3. That's a simple selector. There's no spaces, there's no combinators. So you can say if you want to do everything but the first five with items, you could do E not first of type E, not second of type or nth of type, right?

[00:01:07]
So that would be one way of doing it. So it basically matches any div that does not have the class that exclude me. So it basically excludes everything that says it has a class of excluding.
>> Estelle Weyl: So specificity, the specificity of not is it doesn't have any specific weight.

[00:01:32]
The not itself does not have any specificity. Whatever is inside there is what gives it the weight. So here the .excludeMe, you would have 010 for the exclude me, and 001 for the div, so that would be a 011. If this had been a pound sign, right, it would be,

[00:02:00]

>> Estelle Weyl: 101, because 100 for the ID, and 001 for the div, does that make sense? Okay,
>> Estelle Weyl: And it's been supported for a long time.
>> Estelle Weyl: Not supportive yet or just in Safari is saying many things. So you can put a list of things. So we could have done E not nth of type 1 or nth only of type, that kind of stuff.

[00:02:33]
Still they have to simple selectors so no combinators within them, but you can put as many as you want and that will be supported, Safari is supporting it already. So div, it will match any div except for the ones that have either the classes excludeMe or excuseYou. You could also have written for right now,

[00:02:54]

>> Estelle Weyl: You can do,
>> Estelle Weyl: And string them together, that works.
>> Estelle Weyl: So let's take 60 seconds to just play with this, play with it on your own but I'm gonna do it up here. So all of them have the color blue to start with. And then also I'm gonna change the color red, except for if it's the first child, which would also be the first of type.

[00:03:28]
And here I can put,
>> Estelle Weyl: nth of type,
>> Estelle Weyl: 2n. And that actually matches then every, I basically said don't match any even ones, just match the odd ones. And then I could do +1 here, and it still matches. But I could not do LI that is a child with an LI because that has a space in it and that means that it is a complex selector even though it's a really easy selector, right?

[00:04:06]
An LI that is the descendant of an unordered LI or that is a definite of an ordered list. So you'd think that that would say any LI except for the ones. That is the child of an unordered list but that is complex selector, not a simple selector.
>> Estelle Weyl: And you can actually put an attribute in there so we could say not,

[00:04:36]

>> Estelle Weyl: That's a link within a so I can't do that. Not. So let's just do :not(:nth-of-type(3n)) and then I need to add one more there. Okay, so let's go on to the next one. Now that you've played with that a little bit. [COUGH] We don't have matches yet I don't believe, but matches is going to be cool because it will match a whole slew of things.

[00:05:12]
So you can say LI that matches and have all these things that come after it so instead of, it's basically using SAS selectors without producing all that extra craft because how it just basically it puts it all in one line and it doesn't expand it. It's nicely there, see an LI that matches.

[00:05:35]
It has a title, it has a role, either one, and then an A. So any A that is the descendant of an ally that has a title or a roll. It basically matches this. So, this right here is a very simple example, so the second one is actually shorter than the first one.

[00:05:55]
But can you imagine if you had long class names and 16 of them or added here we have any,
>> Estelle Weyl: Where was I? Here, so let's just put a return in here. So I can see it. So any a that is either focused or active, right? That is nested within a slide that matches, that is either a descendant of home, an element with an ID of home, or an element with the ID of contact, right?

[00:06:31]
So it's one line that matches these four lines.
>> Estelle Weyl: Let me just get rid of all of this and see if there's anything else. It is supported in Safari right now. So you can actually play with it live and you can do it if you're targeting only on iOS.

[00:06:53]
So similar to matches, we actually have something that does match. So this is something you can use. What I just explained and said you can't use, you actually can use with prefix, and I do. This is one of those things where in terms of JavaScript when I want to reach a bunch of elements,

[00:07:14]

>> Estelle Weyl: I can do it this way. So I can use query selector all and match and put this in matches. So in Safari, it's matches. In Chrome and Android, it's -webkit-any, and in Firefox, it's -moz-any.
>> Estelle Weyl: So what does this is not match?
>> Estelle Weyl: Edge, right? We're not targeting, but if you're gonna do mobile, who here has a Windows phone?

[00:07:49]

>> Estelle Weyl: So sad, I feel so bad for them. No, I don't.
>> Estelle Weyl: So you can actually use matches but it's pretty fixed with any for web kit and missile. So,
>> Estelle Weyl: This is basically showing if you just used this which is pretty simple, it expands out to that, which is not so simple, right?

[00:08:17]
So it's a span, that is descendant of bam, bar, or foo of a link that has either of those classes. And so you would actually have to, and you can put the not. So you can say any link other than one that has the class of bam, bar or foo, so match all the links in this entire document, except ones that have these three classes.

[00:08:42]
So you can put a matches inside a not and do really complex things. So the weird things is, let's say we had foo, bar and bam, right? What is the specificity of this? It depends what is matching. So if it matched, it's basically the highest cuz in here would be not.

[00:09:09]
So the specificity would be one ID.
>> Estelle Weyl: One element and one element. So when you have three things in here, I believe and I'm not 100% sure so I would have to double check. But I believe it is the one with the strongest weight when it's not matching and when it is matching it is whatever the weight of the property that is matching.

[00:09:32]
So here, if it was bam it would be matching at 0 1 1. And if it was foo it would be matching at 1 0 1. Does that make sense?
>> Estelle Weyl: So we were going to have the reference combinator and it was removed. So I don't know if it was supported anywhere, but that was basically if you could actually say find an element that is referenced by this other element, which would be really good for inputs and labels.

[00:10:03]
And would be really good for ARIA, because a lot of times in ARIA you say labeled by this other thing. And would be good for data lists. Do you all know what a data list is? Okay, so an input. Have you ever seen a select and it looks like an input and you have all these options and Google Chrome it's what do I want for?

[00:10:29]
And you'd think it'd say Christmas but it really is going to be some inappropriate thing that you can't repeat. Because people search for really weird things online. And most people just fake it when you have those pictures. Have you ever gone to Twitter and you've seen? That's because that's what they search for.

[00:10:46]
Because I don't get the same results that they do. Yeah. They're just basically telling you what they're searching for. So anyway, that's a drop down. It's kind of like it's an input, but there's a drop down with options. There's a native element in HTML that does that. It is the list attribute on the input, so you put list and then you point it to the ID of the data list, and the data list is basically a series of options, but it's not in a select, instead it's in a data list element.

[00:11:19]
And you basically give it all sorts of options, and then when you are on. I'll show you that during the break. It's really cool and you can basically do that natively in the browser without adding any JavaScript frameworks. So anyways, we don't get that, instead, we go on to the parent selector, so originally it was going to be this, and now it is going to be this.

[00:11:45]
Not supported yet, so that could change, but like a header that has an h1, h2, basically a header that has a heading is what this would say. A header that does not have a heading, header not has. So, the reason that we haven't been able to get a parent selector is because when I said earlier that things needed to be prefixed until they were ready to ship, performance of checking every element to see what descendants they have is very slow.

[00:12:16]
So, they've never figured out a performant enough way to do this. And there is something down there. And I can't show it to you or I could, let me just show it to you here, Inspect, and then go to slide. And then increase the slide size. So this is an inspector, I told you I would show you the inspector and what I want to do is I want to increase the size of my slides.

[00:12:45]
So I can actually live change my slides and I just give it a height of 800 and then I lost everything because this is live and that's how my luck works.
>> Estelle Weyl: There we are. Okay, so header contains something that is not a header. So this one says a header that has something, right, it has a child that is not an h1, h2, h3, so you can get really complex with these things.

[00:13:23]
So when you say you can't target something with an ID or a class, yeah, you can. I wouldn't do this in production, this is just too complex, but you can. You can actually do that. And so let's see if the parent selector is supported yet, open in the new window.

[00:13:43]
And no, parent selectors are not selected yet. So okay, so we still have to wait a while.

