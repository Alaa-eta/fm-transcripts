[00:00:03]
>> Estelle Weyl: Let's move on to user interface selectors. So, in HTML, you can have elements that are enabled or disabled. You can have elements that are checked or not checked.
>> Estelle Weyl: So, here it says, can anyone read this to me? Well let me show you how you read it.

[00:00:27]
You read it from the end. So it says, any label, what does a plus sign mean?
>> Speaker 2: Immediately following.
>> Estelle Weyl: Immediately following, very good. So any label that comes immediately after, a checked input of type check box. So right here we have a check box and we have a label and we have a check box and we have a label.

[00:00:49]
So if I check this check box the color changes to red, if I uncheck it it changes back because it is no longer checked. Same thing for here. And because I was thinking about accessibility and I included a label, I don't actually have to check on the checkbox.

[00:01:08]
Check right here on the label and that will toggle it on and off. So that's toggling the checkbox, which is then activating the CSS because this then starts matching.
>> Estelle Weyl: And so when I said earlier, that CSS updates immediately, I just updated a UI feature and this CSS said now I match, right?

[00:01:34]

>> Estelle Weyl: So the UI features that we have are default, valid, invalid, required, optional. In range and out of range, read-only and read-write, placeholder shown, and we're gonna have either user error or user invalid, neither of them are supported right now. It's in the spec, it seems to be influx.

[00:01:54]
I read both of them depending on which version. So I'm not telling you which one it's gonna be. So in this form right here, we have if it's valid, it has a border that's green. If it's invalid, it has a border that's red. If it's required either via the required attribute being present or Aria-required being set to true, it's going to have a border of 5 pixels.

[00:02:25]
If it's optional, which means it's not required, it doesn't have the required attribute. The border will be 10 pixels wide. If it's out of range which means, in those it says 5 to 7, that means 5, 6, or 7. Number between 0 and 10 means 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10.

[00:02:52]
It does not mean 5.2, it does not mean 5.758. Because in HTML when you have a range, you have a min and a max. And right here we have a min and a max. There's a step attribute that we did not include. The step attribute defaults to the value of 1.

[00:03:11]
If I had said step any then it would have been 5, 5.0001 would also have been valid. But I did not include the step so it defaults to the value of 1. In the second one, I put step 0.1, so 0.1 would be valid, 0.11 will not be valid.

[00:03:33]

>> Estelle Weyl: Here, it is invalid because it is required. We see that it's required because it has 5 pixels and I don't have a number in it. So it's matching required equals true of having a 5 pixel border instead of a 10 pixel border. And because it is empty and it is not optional, it is not valid.

[00:03:57]
So
>> Estelle Weyl: And so I've put 4, it is not valid. And it is out of range.
>> Estelle Weyl: If I put 5, it's valid because it is in range. And the background became light green. When there is no value and it's not required, it's in range. So, here if I put -3, it's not valid.

[00:04:34]

>> Estelle Weyl: It becomes valid, if I do 0.1 It's valid if I do 0.5 it's not valid. So that's a mixture of HTML and CSS that you need to understand. So one of the things that is really important is to understand the attributes that you have. So a lot of the CSS that we've seen so far has just been based on selectors and classes, right?

[00:04:55]
That's what we use most of the time. But if you understand HTML and all the attributes that it has, you can really make CSS even more powerful. You had a question.
>> Speaker 2: Does not valid express the same condition as invalid?
>> Estelle Weyl: Yes.
>> Speaker 2: Okay.
>> Estelle Weyl: And you know what, we can test it, let's just double check.

[00:05:15]
So here I'm gonna do not.
>> Estelle Weyl: Yes, so if you want to play around with this for just a minute.
>> Estelle Weyl: Okay so when I was saying that CSS is powerful, if you're in the deck and you're playing with this you're basically playing on a different page. So to move the deck forward just click anywhere where it's pink and then the arrows will work again.

[00:05:52]
So when you're in here and you're editing this, the right arrow will actually make it move right. So it doesn't make the deck break, right? So you have to just click anywhere out and then you can move forward again, yes.
>> Speaker 3: The email address when I'm curious about, cuz as you're typing you know you might be typing the email address and might be frustrating for an end user to see code red.

[00:06:12]
Is there a way around that?
>> Estelle Weyl: You would not make it go red. You would actually like, you do this, it's all over the web right now, but it's so steadily, this obnoxious. So one of the things we're gonna today is we're gonna make really ugly websites. And the goal is if you're make an ugly website, you're not gonna worry about whether it looks good or not.

[00:06:30]
So this doesn't look good but your UI designer will put a little like spinner when it's invalid and then yay, check mark when it's valid. Something less obnoxious than red and green, which we shouldn't be using colors anyways alone because some people cannot see the difference between that red and green.

[00:06:50]
So whenever we do examples it's fine today to make things ugly. Do not put this ugly stuff into production. And so here's a little nifty trick which you should also not put into production but it is kind of cool that you can do it. So, if you see at the bottom, it says you have 0 invalid entries.

[00:07:09]

>> Estelle Weyl: All right? Cuz none of these are required. So this works with the JavaScript but if I put the number 8 and the number 2, I now have two invalid entries. There is no JavaScript in this page. What I'm doing is I'm using the CSS counter. And we'll talk about CSS counters later on but basically saying on the about body we set the counter to 0, and then every time you hit something that's invalid, increment it.

[00:07:42]
And then in a paragraph generate a content that says you have whatever that invalid count is currently. The counter of invalidCount, print that. And the reason that it has to come after, right, it comes after everything, is because I have to actually have those invalid entries for it to count.

[00:08:06]
So that paragraph has to be after those invalid entries. Otherwise, if I put it at the top, right, if I did body,
>> Estelle Weyl: It wouldn't be able to count. If I did,
>> Estelle Weyl: li nth- of-type(2), which we'll cover later on, right? It would only be able to count the first one if I did after.

[00:08:42]
Let's see if this works, I've never done this before, yeah.
>> Estelle Weyl: So you can actually count your errors. This is not the best way to do stuff, this is not best practices at all but I want to show you the power of CSS that you can actually do all sorts of things.

[00:09:00]
If your JavaScript isn't working or if you want to tell user, how many errors they have, that their form isn't filled out and have it continually counting, you could actually do that. Progressive enhancement, don't make it required.

