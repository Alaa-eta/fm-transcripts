[00:00:03]
>> Estelle Weyl: Let's move onto user interface selectors. In HTML you can have elements that are enabled or disabled. You can have elements that are checked or not checked. Here it says can anyone read this to me? Well, let me show you how you read it. You read it from the end, so it says, any label.

[00:00:31]
What is the plus sign mean?
>> Speaker 2: Immediately following.
>> Estelle Weyl: Immediately following, very good. So any label that comes immediately after a checked Input of type check box. So right here, we have a check box and a label and so if I check this check box, the color changes to red.

[00:00:55]
If I uncheck it, it changes back because it is no longer checked. Same thing for here. And because I was thinking about accessibility and I included a label. I don't actually have to check on the check box. You can check right here on the label, and that will toggle it on and off.

[00:01:14]
So that's toggling the check box, which is then activating the CSS. Because this then starts matching. And so when I said earlier, that CSS updates immediately. I just updated a UI feature and the CSS said, now we match, right?
>> Estelle Weyl: So the UI features that we have are default, valid, invalid, required, optional In range, and out of range, read only and read write, placeholders shown, and we're going to have either user error, or user invalid.

[00:01:49]
Neither of them are supported right now, it's in the spec, it seems to be in flux. I read both of them, depending on which version, so I'm not telling you which one it's going to be. So, In this form right here, we have if it's valid it has a border that's green.

[00:02:08]
If it's invalid, it has a border that's red. If it's required, either via the required attribute being present or aria-required being set to true. It's gonna have a border of 5 pixels. If it's optional, which means it's not required, it doesn't have the required attribute, the border will be 10 pixels wide.

[00:02:36]
If it's out of range Which means in those that says 5 to 7 which means 5, 6 or 7 number between 0 and 10 means 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10. It does not mean 5.2 it does not mean 5.758 Because in HTML.

[00:02:56]
When you have a range you have a min and a max. And right here we have a min and a max. There is a step attribute that we did not include. The step attribute defaults to the value of one. If I had said step any then it would have been five.

[00:03:15]
5.0001 would also have been valid. But I did not include the steps so it defaults into the values of 1. In the second, I put step point one so zero point one will be valid and zero point one one will not be valid. Here, it is invalid. Because it is requires.

[00:03:39]
We see that is required because it has five pixels and I don't have a number in it. So it's matching required equals true of having a five pixel border instead a ten pixel border. And because it is empty and it is not optional. It is not valid. So

[00:03:59]

>> Estelle Weyl: If I put 4, it is not valid, and it is out of range.
>> Estelle Weyl: If I put 5, it's valid because it is in range. And the background became light green. When there is no value, and it's not required, it's in range. So here if I put negative 3, it's not valid.

[00:04:34]
It becomes valid if I do point one, It's valid if I do, .5 it's not valid. So that's mixture of html and css that you need to understand. One of the things that is really important is to understand the attributes that you have. A lot of the css that we've seen so far has just been based on selectors and classes, right?

[00:04:55]
That's what we use most of the time. If you understand HTML and all the attributes that it has you can really make CSS even more powerful. You had a question.
>> Speaker 2: Does not valid express the same condition as invalid
>> Estelle Weyl: Yes. You know what, we can test it.

[00:05:12]
Let's just double check. So here. I'm gonna get, I'm gonna do not
>> Estelle Weyl: Yes. So if you wanna play around with this for just a minute
>> Estelle Weyl: Okay. So when I was saying that CSS is powerful. If you're in the deck, and you're playing with this, you're basically playing on a different page.

[00:05:47]
So to move the deck forward just click anywhere where it's pink and then the arrows will work again. When you're in here and you're editing this. The right arrow will actually make it move right so it doesn't make the deck break. You have to just click anywhere out and then you can move forward again.

[00:06:03]
Yes?
>> Speaker 3: The email address one I'm curious about because as you're typing you know you might be typing an email address. It might be frustrating for an end user to see it go red. Is there a way around that?
>> Estelle Weyl: You would not make it go red. You would actually, you'd do this, it's all over the web right now.

[00:06:19]
But it's so subtly, this is obnoxious.
>> Speaker 3: Yeah.
>> Estelle Weyl: So one of the things we're going to do today, is we're going to make really ugly websites. And the goal is, if you make an ugly website, you're not going to worry about whether it looks good or not.

[00:06:31]
So this doesn't look good. But your UI designer will put a little like spinner while it's invalid, and then yay! Check mark when it's valid. Something less obnoxious than red and green. Which we shouldn't be using colors anyways, alone. Because some people cannot see the difference between that red and green.

[00:06:50]
So whenever we do examples it's fine today to make things ugly. Do not put this ugly stuff into production. And so here's a little nifty trick which you should also not put into production. But it's kinda cool that you can do it. So if you see at the bottom, you have 0 invalid entries.

[00:07:09]

>> Estelle Weyl: Right, cuz none of these are required, Estelle Weyl. So this works with Java Script. But if I put the number eight, and the number two, I now have two invalid entries. There is no Java Script in this page. What I am doing is I'm using a CSS Counter.

[00:07:27]
And I think we'll talk about CSS Counters later on. What I am basically saying, on the body reset the counter to zero. Everytime you hit something that is invalid, increment it. And then in the paragraph generate a content that says you have whatever that invalid count is currently.

[00:07:52]
The counter of invalidCount, print that. And the reason that it has to come after, right, it comes after everything. Is because I have to actually have those invalid entries for it to count. So that paragraph has to be after those invalid entries. Otherwise, if I put it at the top, right, if I did body,

[00:08:19]

>> Estelle Weyl: It wouldn't be able to count. If I did,
>> Estelle Weyl: li and Of type two, which we'll cover later on, right. It would only be able to count the first one if I did after. Let's see if this works. I've never done this before. Yeah.
>> Estelle Weyl: So you can actually count your errors.

[00:08:49]
This is not the best way to do stuff, this is not best practices at all. But I wanted to show you the power of CSS, that you can actually do all sorts of things. If your JavaScript isn't working, or if you want to tell someone, a user, how many errors they have.

[00:09:04]
That their form isn't filled it and have it continually counting, you can actually do that. Progressive enhancement, don't make it required.

