[00:00:02]
>> Estelle: Let's move along and talk about alignment. This is gonna be very similar to what we talk about with Flexbox yesterday. We have several properties that are on the parent, including justify items, align items, justify content, align content, grid auto columns, grid auto rows, grid auto flow and grid.

[00:00:21]
And then we have justify-self and align-self, which are properties on the grid items themselves.
>> Estelle: So justify-items has a few new values that we never heard of. One of them is legacy, and then two are safe and unsafe. And I'll go over those in a minute. The default is actually legacy, which is left.

[00:00:52]

>> Estelle: That's what it comes out to, so the only thing that's actually what it means, but that's what it ends up being. I guess it would be right in left to right languages. So justify-items. It aligns items in the inline direction, which for us is horizontal. Let's just go and do it by example.

[00:01:24]

>> Estelle: So when we're doing Flexbox, we sometimes align the whole row and we sometimes align just the item. So when it says justify items, it's actually taking that grid item and aligning just each item individually. But it's doing it globally to all of them, but it's individual within each item putting it at the end.

[00:01:51]
Here, we could put it at the start. What are the other values we have? We have stretch and we have center and we have self-end. So let's do center. Now the thing is, this stuff is really ugly, and I've never used this property, because I've never needed to do this, because I don't find it attractive.

[00:02:16]
But it is important to understand that it's doable. So the new values are safe, which means if it overflows the container,
>> Estelle: If the text overflows the container then you actually still show the content. And unsafe basically says you're gonna crop it. So legacy is basically, you could say legacy left, center, or right.

[00:02:49]
And that's about it. Okay, so then we have a line, column alignment, which we do with align items. So we did justify items, right, which was kinda left to right in left to right languages. Here if we do flex-start, which you'll notice it's a flex property, it's the same thing as it was in flex, right?

[00:03:13]
We could do flex-end. So it's aligning each item within its grid line, right, along the row track. The previous one did along the column track.
>> Estelle: Stretch is nice. I think that's the default. I forgot to highlight which one is the default, but I'm pretty sure it's that.

[00:03:48]

>> Estelle: There's a property called place-items which is basically align-items and then justify items. And it's just a shorthand. We also get order does matter. You have to put align-items first and then justify items. If you only put one property there, if you just include the align items, that value will be given to justified items as well.

[00:04:13]
So let's play with making this hideous just for a minute. So we have align-items,
>> Estelle: Which is aligning items,
>> Estelle: Within its column, right? That's what justify-items does, left or right or center,
>> Estelle: Horizontally. And then align-items is vertical.
>> Estelle: So here we put it at the top, here we put it at the end, here we stretched it.

[00:04:58]
But notice, even though it's stretched in the height, it's still at the flex-end. And we can center, and center. Now, you might wanna actually create this effect. I don't think you do. I don't use these but it's important to know that they exist, right?
>> Estelle: When would you use this?

[00:05:26]
So remember that example with the unicorns? And it was a unicorn, and then a paragraph, and there was space, and then there was a button at the bottom. You would just put the button at the baseline, I mean, at the flex-end. But the way we did it before, was we actually put, what we did with the flex items, we put the image and then we put the button in the third item.

[00:05:53]
And then we'd allow the middle one to grow, and we didn't allow the first one or the third one to grow.
>> Estelle: Okay.
>> Speaker 2: Quick question, if we're using legacy how do we declare that it can inherit.
>> Estelle: You don't even have to use it, you can just omit it, it's legacy.

[00:06:10]

>> Speaker 2: Okay.
>> Estelle: Yeah, basically you just have to overwrite legacy if you want something else.
>> Speaker 2: All right. That's a default value.

