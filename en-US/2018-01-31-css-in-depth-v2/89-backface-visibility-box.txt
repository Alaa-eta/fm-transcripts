[00:00:03]
>> Estelle Weyl: When we did, still, yes, mastery, and we had the snowflakes coming down. The reason that they're going left and right and floating is because the transform origin is actually outside of their center. So they're being translated from top to bottom, but they're spinning, and they're spinning around a point that is not in the center.

[00:00:28]
So they're basically spinning around, going like this, but since they're going down, they're actually going like that. So all of them are doing this, but you can't really see that it's doing that, cuz it's so slow. Kind of cool? So that was the magic of transform-origin. So the keyword positions are left, right, bottom, top, and center.

[00:00:50]
You can use any length, value, or any percentage value. The default is the center at 50-50%. And that should get rid of prefix. It's basically supported, any browser that supports transform supports transform-origin. And you don't need to prefix it, because prefixing is no longer necessary. Then we have transform-style and that is for 3D features.

[00:01:16]
If you have a 3D element on top of another 3D element, it's basically do you want to preserve 3D or do you want to make it flat. It's how to handle nascent elements that also rendered in a 3D space. Oddly, there's a few properties where it won't work that you have to have it at the default value.

[00:01:37]
So if you've declared overflow, clip, clip-path, filter, mask-border-source, mask-image, or mix-blend-mode, which they are all properties that we haven't covered yet, see why this book is so big? Then it doesn't actually do anything. It's set on the parent and I tried making it appear like what it would look like.

[00:02:04]
So basically, the parent is translated in the 3D space and so, is the child, and the child is coming at you. If it was actually flat, it would not. Let's just skip this one, okay, backface-visibility. I was talking about RGP, when you flip it, you don't want to see it, the backwards, cuz you don't want to see it upside down.

[00:02:32]
So basically, here, both of these have translated 180 degrees. And one you can see, and the other you can't. So here, there actually is generated content. If I do 0, you can see both of them. If I do 90, you can see neither of them. If I do 85 degrees, you can see both of them, but barely.

[00:02:58]
But if I do 105, one of them, you can't see it all, because I did backface-visibility hidden. But the first one I did backface-visibility visible and if you can you can't actually read RSVP. So let's actually do it completely upside down.
>> Estelle Weyl: Right? They're both translated in the exact same way or rotated in the exact same way.

[00:03:26]
One is backwards, and I'm saying you can't look at it now.
>> Estelle Weyl: And let me just see if, okay, it didn't show. So when you'll see playing cards or something like that online, you'll have a playing card here and this is the face. And this is the back of the card.

[00:03:46]
And so you rotate both, and you think it's doing this, but really, you can't do this. They're both doing that, they're both rotating. But when it hits this mark, you want this one to be seen and you don't want this one to be seen anymore. You don't want the one in front to show the back of the RSVP.

[00:04:06]
You wanna show the back of the card, you don't wanna show the ace. They're all basically the same, okay, the King. You don't want the K to be backwards. Like if you had a King and you rotated it like this and you saw the card still, the k would be backwards.

[00:04:24]
So you wanna make it look like the face of the card is going behind here and you do that by saying you can do it one of two ways. You can actually change the index or you can just stay back with face invisibility hidden. This isn't supported ED or it's just starting to be.

[00:04:44]
It's in Firefox, it's in Chrome 64, and Opera 51. So it's something I haven't played with yet, but its basically the viewBox, so the transform box property. So in the future, this will be a property. I'm,
>> Estelle Weyl: In the future, transform-box property will have a value of border-box, which means that the border is the box reference.

[00:05:06]
It will have fill-box, which will the bounding box as a reference box. And then viewBox Which is current in SVG. It's kind of like the viewBox on SVG, but it's not yet supported. So I can't really explain it yet, because I don't really know it.

