[00:00:03]
>> Estelle: Then we have background-clip and background-origin property. So the background-clip is where do you start your background? So here the background color on all of these is blue, but the first one has the background-clip of content box. And so, that means the background-color is just starting in the content box, because this has actual padding.

[00:00:27]
There's padding from the inside of the border to the blue area. The padding boxes make the content and the padding have the background. And the border boxes actually include the background even underneath the border. So right here I have a dotted border so that you can see it, but normally you would have a solid border, and you might actually be missing part of your image.

[00:00:55]
So if you have a border on an element and you have an image that is supposed to start in the upper left-hand corner, you would wanna use padding-box, cuz otherwise your background is gonna start up there.
>> Estelle: The background image is missing on this, so I can't actually show you.

[00:01:14]
But it's basically the background-origin, it's when you have what is the origin of your background image? Here, the image would start right up here. In this one, in padding box, the image would start within the padding, and in contact box, the image would actually start in 20 pixels from the upper left hand corner.

[00:01:38]
Unfortunately, this image failed.
>> Estelle: And here we have it, so we can show it to you. So let's play it with it so you get a sense, and you can actually change this to dashed if that is easier for you to look at.
>> Estelle: And let's add a background-color.

[00:02:04]

>> Estelle: Okay, that is hideous. But we're basically saying the background origins started at the border box. Well, why don't we just start it at padding box?
>> Estelle: There is no padding.
>> Estelle: Why is this not working? Where did I do wrong?
>> Estelle: Okay.
>> Estelle: All right, I just couldn't see it, okay.

[00:02:43]

>> Estelle: So, the background-clip is basically the background-color, here I've clipped it at the end of the padding box. Here, I clipped it nowhere, and here, I clipped it at the content box. Now, if I take the origin of that image, and I bring it up into the upper-left-hand corner by changing it to border, part of my image is cut off.

[00:03:07]
Because it's actually drawing the background image where it's not drawing the background.
>> Estelle: Does this make sense to people? So you have background-clip and background-origin. The origin, think of it as an image origin and the clip, think of it as the background color.
>> Estelle: Okay, then we have background-size.

[00:03:34]
I don't know why I chose something so hideous. Yeah, cuz we're making ugly stuff today. But my slide decks are prettier today that they were yesterday. So background-size, we have a few values, we have auto which is the default. It's just make the background-size this size that the image was naturally.

[00:03:52]
In terms of performance, that is the fastest because it doesn't have to,
>> Estelle: I forgot the word for it, I'll figure it out later. Basically it doesn't have to parse it, it parses it once and this is the image. It doesn't have to parse it, recalculate it and that is not the right term but I can't think of the right term right now.

[00:04:14]
So, basically background-size auto is the natural size of it, and then you can also say a length. So if I make the background 150 pixels, well, I basically had a gradient with a circle in it. So it's repeating, the circle is staying the same size
>> Estelle: And this is a bad example, because the circle is actually growing.

[00:04:49]

>> Estelle: We'll do a different one later on. So basically you're saying, I want my background image to be 140 pixels by 140 pixels instead of auto. And so it'll take your 10 pixel by 10 pixel image and it will make it 140 pixels by 140 pixels. If you say I want to make it 10 pixels by 10 pixels and it was actually 150 pixels by 150 pixels, it'll shrink it down.

[00:05:11]
Then we have two other values called cover and contain.
>> Estelle: So here's a shark, this was the original shark from specificity.
>> Estelle: And right now it is auto.
>> Estelle: Here it is contained, what that means is that I've taken the image and I've made it fit into the box, through either shrink or grow.

[00:05:45]
If it was too small it will actually go from end to end, but it will fit one dimension whichever dimension, but it will maintain its aspect ratio. You can also say cover, which will make it grow to take up at least 100% of it, but it will maintain its aspect ratio, right?

[00:06:03]
So here, the ends are cut off.
>> Estelle: Here, it's shrunk. However, if it was too small it would would have actually grown to be bigger. And then this was says 100 pixels by 200 pixels and I've lost my aspect ratio, right? So you can say, if I had just said 100 pixels wide, it would have maintained its aspect ratio.

[00:06:29]
But since I declared two lengths, the width and the height, it just listened to what I had to say and it didn't care what the original image aspect ratio was.

