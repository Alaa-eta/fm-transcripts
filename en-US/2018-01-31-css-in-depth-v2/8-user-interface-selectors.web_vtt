WEBVTT

1
00:00:03.890 --> 00:00:08.040
&gt;&gt; Estelle Weyl: Let's move
onto user interface selectors.

2
00:00:11.500 --> 00:00:15.200
In HTML you can have elements
that are enabled or disabled.

3
00:00:15.200 --> 00:00:19.850
You can have elements that are checked or
not checked.

4
00:00:19.850 --> 00:00:25.150
Here it says can anyone read this to me?

5
00:00:25.150 --> 00:00:26.450
Well, let me show you how you read it.

6
00:00:27.800 --> 00:00:31.350
You read it from the end,
so it says, any label.

7
00:00:31.350 --> 00:00:32.340
What is the plus sign mean?

8
00:00:33.380 --> 00:00:34.400
&gt;&gt; Speaker 2: Immediately following.

9
00:00:34.400 --> 00:00:36.060
&gt;&gt; Estelle Weyl: Immediately following,
very good.

10
00:00:36.060 --> 00:00:44.110
So any label that comes immediately
after a checked Input of type check box.

11
00:00:45.450 --> 00:00:48.900
So right here, we have a check box and

12
00:00:48.900 --> 00:00:53.540
a label and so if I check this check box,
the color changes to red.

13
00:00:55.310 --> 00:00:58.710
If I uncheck it, it changes back
because it is no longer checked.

14
00:00:58.710 --> 00:00:59.699
Same thing for here.

15
00:01:00.720 --> 00:01:04.840
And because I was thinking about
accessibility and I included a label.

16
00:01:04.840 --> 00:01:07.880
I don't actually have to
check on the check box.

17
00:01:07.880 --> 00:01:14.460
You can check right here on the label,
and that will toggle it on and off.

18
00:01:14.460 --> 00:01:19.190
So that's toggling the check box,
which is then activating the CSS.

19
00:01:19.190 --> 00:01:22.130
Because this then starts matching.

20
00:01:22.130 --> 00:01:26.400
And so when I said earlier,
that CSS updates immediately.

21
00:01:26.400 --> 00:01:30.687
I just updated a UI feature and
the CSS said, now we match, right?

22
00:01:33.845 --> 00:01:38.247
&gt;&gt; Estelle Weyl: So the UI features that
we have are default, valid, invalid,

23
00:01:38.247 --> 00:01:43.561
required, optional In range, and
out of range, read only and read write,

24
00:01:43.561 --> 00:01:49.840
placeholders shown, and we're going to
have either user error, or user invalid.

25
00:01:49.840 --> 00:01:53.900
Neither of them are supported right now,
it's in the spec, it seems to be in flux.

26
00:01:53.900 --> 00:01:56.120
I read both of them,
depending on which version, so

27
00:01:56.120 --> 00:01:58.930
I'm not telling you which
one it's going to be.

28
00:01:58.930 --> 00:02:02.820
So, In this form right here,

29
00:02:02.820 --> 00:02:08.860
we have if it's valid it
has a border that's green.

30
00:02:08.860 --> 00:02:11.380
If it's invalid,
it has a border that's red.

31
00:02:13.370 --> 00:02:18.838
If it's required, either via
the required attribute being present or

32
00:02:18.838 --> 00:02:21.580
aria-required being set to true.

33
00:02:22.590 --> 00:02:25.430
It's gonna have a border of 5 pixels.

34
00:02:26.460 --> 00:02:31.450
If it's optional,
which means it's not required, it

35
00:02:31.450 --> 00:02:36.990
doesn't have the required attribute,
the border will be 10 pixels wide.

36
00:02:36.990 --> 00:02:43.145
If it's out of range Which means in
those that says 5 to 7 which means 5,

37
00:02:43.145 --> 00:02:48.005
6 or 7 number between 0 and
10 means 0, 1, 2, 3,

38
00:02:48.005 --> 00:02:51.017
4, 5, 6, 7, 8, 9, 10.

39
00:02:51.017 --> 00:02:56.862
It does not mean 5.2 it does
not mean 5.758 Because in HTML.

40
00:02:56.862 --> 00:03:02.080
When you have a range you have a min and
a max.

41
00:03:02.080 --> 00:03:03.900
And right here we have a min and a max.

42
00:03:05.230 --> 00:03:08.020
There is a step attribute
that we did not include.

43
00:03:08.020 --> 00:03:11.150
The step attribute defaults
to the value of one.

44
00:03:12.480 --> 00:03:15.930
If I had said step any then
it would have been five.

45
00:03:15.930 --> 00:03:17.000
5.0001 would also have been valid.

46
00:03:18.130 --> 00:03:23.120
But I did not include the steps so
it defaults into the values of 1.

47
00:03:23.120 --> 00:03:26.800
In the second, I put step point one so

48
00:03:26.800 --> 00:03:31.610
zero point one will be valid and
zero point one one will not be valid.

49
00:03:34.220 --> 00:03:38.590
Here, it is invalid.

50
00:03:38.590 --> 00:03:39.900
Because it is requires.

51
00:03:39.900 --> 00:03:41.900
We see that is required
because it has five pixels and

52
00:03:41.900 --> 00:03:44.170
I don't have a number in it.

53
00:03:44.170 --> 00:03:47.080
So it's matching required equals true

54
00:03:47.080 --> 00:03:50.110
of having a five pixel border
instead a ten pixel border.

55
00:03:51.160 --> 00:03:54.790
And because it is empty and
it is not optional.

56
00:03:54.790 --> 00:03:55.610
It is not valid.

57
00:03:57.130 --> 00:04:01.292
So
&gt;&gt; Estelle Weyl: If I put 4,

58
00:04:01.292 --> 00:04:05.658
it is not valid, and it is out of range.

59
00:04:09.128 --> 00:04:13.450
&gt;&gt; Estelle Weyl: If I put 5,
it's valid because it is in range.

60
00:04:15.530 --> 00:04:17.460
And the background became light green.

61
00:04:18.750 --> 00:04:25.437
When there is no value, and
it's not required, it's in range.

62
00:04:25.437 --> 00:04:31.000
So here if I put negative 3,
it's not valid.

63
00:04:34.320 --> 00:04:39.230
It becomes valid if I do point one,
It's valid if I do, .5 it's not valid.

64
00:04:39.230 --> 00:04:44.970
So that's mixture of html and
css that you need to understand.

65
00:04:44.970 --> 00:04:49.160
One of the things that is really
important is to understand

66
00:04:49.160 --> 00:04:51.200
the attributes that you have.

67
00:04:51.200 --> 00:04:54.750
A lot of the css that we've seen so
far has just been based on selectors and

68
00:04:54.750 --> 00:04:55.950
classes, right?

69
00:04:55.950 --> 00:04:57.210
That's what we use most of the time.

70
00:04:58.920 --> 00:05:00.360
If you understand HTML and

71
00:05:00.360 --> 00:05:04.390
all the attributes that it has you can
really make CSS even more powerful.

72
00:05:04.390 --> 00:05:05.270
You had a question.

73
00:05:05.270 --> 00:05:09.260
&gt;&gt; Speaker 2: Does not valid
express the same condition as

74
00:05:09.260 --> 00:05:11.160
invalid
&gt;&gt; Estelle Weyl: Yes.

75
00:05:11.160 --> 00:05:12.270
You know what, we can test it.

76
00:05:12.270 --> 00:05:13.120
Let's just double check.

77
00:05:15.650 --> 00:05:16.310
So here.

78
00:05:17.840 --> 00:05:23.311
I'm gonna get, I'm gonna do not

79
00:05:32.076 --> 00:05:33.360
&gt;&gt; Estelle Weyl: Yes.

80
00:05:33.360 --> 00:05:34.704
So if you wanna play around with this for

81
00:05:34.704 --> 00:05:38.140
just a minute
&gt;&gt; Estelle Weyl: Okay.

82
00:05:38.140 --> 00:05:41.310
So when I was saying that CSS is powerful.

83
00:05:41.310 --> 00:05:42.050
If you're in the deck,

84
00:05:42.050 --> 00:05:47.220
and you're playing with this, you're
basically playing on a different page.

85
00:05:47.220 --> 00:05:50.580
So to move the deck forward just
click anywhere where it's pink and

86
00:05:50.580 --> 00:05:51.620
then the arrows will work again.

87
00:05:53.040 --> 00:05:55.360
When you're in here and
you're editing this.

88
00:05:55.360 --> 00:05:59.300
The right arrow will actually make it move
right so it doesn't make the deck break.

89
00:05:59.300 --> 00:06:03.190
You have to just click anywhere out and
then you can move forward again.

90
00:06:03.190 --> 00:06:04.900
Yes?
&gt;&gt; Speaker 3: The email address one I'm

91
00:06:04.900 --> 00:06:09.140
curious about because as you're typing you
know you might be typing an email address.

92
00:06:09.140 --> 00:06:12.790
It might be frustrating for
an end user to see it go red.

93
00:06:12.790 --> 00:06:14.770
Is there a way around that?

94
00:06:14.770 --> 00:06:16.260
&gt;&gt; Estelle Weyl: You
would not make it go red.

95
00:06:16.260 --> 00:06:19.270
You would actually, you'd do this,
it's all over the web right now.

96
00:06:19.270 --> 00:06:22.480
But it's so subtly, this is obnoxious.

97
00:06:22.480 --> 00:06:23.280
&gt;&gt; Speaker 3: Yeah.
&gt;&gt; Estelle Weyl: So one of the things

98
00:06:23.280 --> 00:06:26.760
we're going to do today, is we're
going to make really ugly websites.

99
00:06:26.760 --> 00:06:29.170
And the goal is,
if you make an ugly website,

100
00:06:29.170 --> 00:06:31.130
you're not going to worry about
whether it looks good or not.

101
00:06:31.130 --> 00:06:32.680
So this doesn't look good.

102
00:06:32.680 --> 00:06:37.288
But your UI designer will put a little
like spinner while it's invalid,

103
00:06:37.288 --> 00:06:40.150
and then yay!

104
00:06:40.150 --> 00:06:41.770
Check mark when it's valid.

105
00:06:41.770 --> 00:06:44.140
Something less obnoxious than red and
green.

106
00:06:44.140 --> 00:06:47.250
Which we shouldn't be using
colors anyways, alone.

107
00:06:47.250 --> 00:06:50.410
Because some people cannot see
the difference between that red and green.

108
00:06:50.410 --> 00:06:53.920
So whenever we do examples it's
fine today to make things ugly.

109
00:06:53.920 --> 00:06:56.070
Do not put this ugly
stuff into production.

110
00:06:57.790 --> 00:07:01.170
And so here's a little nifty trick which
you should also not put into production.

111
00:07:01.170 --> 00:07:03.100
But it's kinda cool that you can do it.

112
00:07:03.100 --> 00:07:06.987
So if you see at the bottom,
you have 0 invalid entries.

113
00:07:09.990 --> 00:07:13.880
&gt;&gt; Estelle Weyl: Right, cuz none of
these are required, Estelle Weyl.

114
00:07:13.880 --> 00:07:15.330
So this works with Java Script.

115
00:07:15.330 --> 00:07:17.760
But if I put the number eight, and

116
00:07:17.760 --> 00:07:22.250
the number two,
I now have two invalid entries.

117
00:07:22.250 --> 00:07:23.710
There is no Java Script in this page.

118
00:07:25.500 --> 00:07:27.890
What I am doing is I'm
using a CSS Counter.

119
00:07:27.890 --> 00:07:30.550
And I think we'll talk about
CSS Counters later on.

120
00:07:30.550 --> 00:07:36.540
What I am basically saying,
on the body reset the counter to zero.

121
00:07:36.540 --> 00:07:41.310
Everytime you hit something
that is invalid, increment it.

122
00:07:42.650 --> 00:07:46.190
And then in the paragraph generate
a content that says you have

123
00:07:47.970 --> 00:07:49.850
whatever that invalid count is currently.

124
00:07:52.010 --> 00:07:54.670
The counter of invalidCount, print that.

125
00:07:56.120 --> 00:07:59.840
And the reason that it has to come after,
right, it comes after everything.

126
00:08:01.500 --> 00:08:06.480
Is because I have to actually have
those invalid entries for it to count.

127
00:08:06.480 --> 00:08:09.209
So that paragraph has to be
after those invalid entries.

128
00:08:10.420 --> 00:08:14.383
Otherwise, if I put it at the top, right,

129
00:08:14.383 --> 00:08:19.708
if I did body,
&gt;&gt; Estelle Weyl: It

130
00:08:19.708 --> 00:08:21.220
wouldn't be able to count.

131
00:08:21.220 --> 00:08:27.973
If I did,
&gt;&gt; Estelle Weyl: li and

132
00:08:27.973 --> 00:08:36.390
Of type two,
which we'll cover later on, right.

133
00:08:36.390 --> 00:08:42.840
It would only be able to count
the first one if I did after.

134
00:08:42.840 --> 00:08:43.570
Let's see if this works.

135
00:08:43.570 --> 00:08:44.783
I've never done this before.

136
00:08:44.783 --> 00:08:45.283
Yeah.

137
00:08:46.899 --> 00:08:49.830
&gt;&gt; Estelle Weyl: So
you can actually count your errors.

138
00:08:49.830 --> 00:08:55.140
This is not the best way to do stuff,
this is not best practices at all.

139
00:08:55.140 --> 00:08:56.910
But I wanted to show you the power of CSS,

140
00:08:56.910 --> 00:09:00.060
that you can actually
do all sorts of things.

141
00:09:00.060 --> 00:09:03.960
If your JavaScript isn't working, or
if you want to tell someone, a user,

142
00:09:03.960 --> 00:09:04.760
how many errors they have.

143
00:09:04.760 --> 00:09:08.020
That their form isn't filled it and
have it continually counting,

144
00:09:08.020 --> 00:09:09.750
you can actually do that.

145
00:09:09.750 --> 00:09:11.921
Progressive enhancement,
don't make it required.

