[00:00:03]
>> Estelle Weyl: But wait, there's more. Ed Valenti is the one who did the Ginsu knives, some of you might be too old to remember the Ginsu knives but yeah so there's more. So, we've basically set up a basic flex, so let's deep dive now into the properties, that impact the flex container, which is the parent.

[00:00:28]

>> Estelle Weyl: So there are ways where you can control the flex items which are those children. All that things from bananas to xylophone and I can't remember what was A, those are all flex items. So the flex container is that box that they were all in, and that's the thing we put display flex on.

[00:00:44]
And it can control the appearance of the children partially, through some properties of the flex container. So there's the justified content property, and it has many different values including flex-start, flex-end, center, space-between, space-around, space-evenly. The justify content property aligns flex items along the main axis, which in this case is from left to right.

[00:01:12]
The align content is on the cross axis, which is top to bottom. And, that's why I want to cover cross and main axis so you'd understand those terms. So here I have a display flex, and only three items. So they don't take up the whole space. Basically justify content property deals with what to do with the space if the sum, of the widths or the heights, the main dimension of the flex item is not exactly equal to the parent container.

[00:01:50]
So, in this case, we have a lot of free space, but sometimes remember when it was over flowing? What happens if it over flows? Does it start to the left? Does it start to the right? Does it go in the center? So these are basically the justified content and says what to do with the extra space or the lack of space along the main access.

[00:02:13]
So here we've put space between, which puts even amounts, it puts the first one on the left or at the cross start, I mean, at the main start. So number one always goes at main start, which is important later on when you have too many items. When you have too many items, A is still gonna be in that corner, It's gonna grow out.

[00:02:32]
It puts the second one at main end, and then it puts this equal amounts of space every time it adds ones in. So, that's what space-between does. Space-around puts the same amount of space on each side of each element. So, if there's 20 pixels on the left of A, there's 20 pixels on the right of A, and there's 20 pixels on the left of B, and 20 pixels on the right of B, and 20 pixels on the right of C and the left of C.

[00:03:02]
So that means the space between A and B is twice as wide as the space between the start and A, and that's ugly, all right? Who here thinks that's ugly? Okay, everyone's asleep except for one person, cuz that is ugly.
>> Speaker 2: [LAUGH].
>> Estelle Weyl: So there's also property called space-evenly and that takes care of it, and it puts the same amount of space on the outside than on the inside.

[00:03:27]

>> Estelle Weyl: Space-evenly is not in the Flexbox specification, it's in the positioning specification or something like that. So if you don't see it in the Flexbox, it actually is, it's just they've stopped the Flexbox and they've added spacing and stuff like that, or whatever that specification is. So we might get other features, you have to basically click through the specification, which is why this took four years to write.

[00:03:54]
It actually took more than that, cuz Eric had written the first, and second, and third editions. So he already had this much content, and we had to add that much more. Okay, so that's, no let's go a few more. There's center, which groups them all at the center.

[00:04:13]
There's flex start, which is main start, the main access, the start of the main access. There's flex end, and I think that's it, okay. Then we have the align items property, which basically aligns items along the cross axis. We just learned main axis, which is justify content, aligned as it along the cross axis.

[00:04:39]
And similarly, we have flex start, flex end, center, baseline, and stretch. So, here are three elements that I have.
>> Estelle Weyl: And they are all centered, that is not the default. The default which is what you usually want is stretch. There is a three column layout, right, with no work whatsoever, it's just display flex and that's it, right?

[00:05:11]
So, align that in center, we can also do flex-start, which puts it at the top, flex-end which puts it at the bottom. And when I mean bottom I actually mean cross-end, it aligns it at cross-end, but I think bottom is easier to use. We already showed stretch, we showed center, so let me show baseline.

[00:05:39]

>> Estelle Weyl: Baseline is a little bit weird, but if you actually took something like a piece of paper and went across the whole thing, this is another and header with, are all perfectly aligned, cuz they are aligned along baseline. So if I have more padding on the top of one or more margin on the top of one, it's one and on baseline, which is kind of interesting when you have an aside on one side and a nav on the other side and you're main article and you have an h1, an h2, and an h3.

[00:06:14]
You can line it all three at baseline, everything else will just flow in after that, but the thing is that does not lead to a three column layout. I would rather stretch it, right, and then make sure I made my top padding the same, but that is baseline.

[00:06:32]
Okay, so I did say that I would have the visibility of collapse.
>> Estelle Weyl: It looks like visibility hit him, doesn't it? Because that says, align items center, that's center this way. The default is flex start, so if I do justify.
>> Estelle Weyl: Okay, see I look things up. If I do,

[00:07:17]

>> Estelle Weyl: Justify content flex start, it doesn't change, because the item is taking up it's full width, it's basically visibility hidden. Okay, then you have the align-content property and the values of the align-content are flex-start, flex-end, center, space-between, space-around, stretch, and space-evenly. Doesn't that sound exactly like justify-content? But that only applies to multi-line containers.

[00:07:45]
Originally it was just within its one line, all right? We were aligning it within one line, sometimes you have more than one line. So,
>> Estelle Weyl: So here we have the align-content property, and right now the value is flex-end, so all the lines are at the bottom, before it was just the flex items in that one line at the bottom of their flex line, right?.

[00:08:15]
Here all the lines are at the bottom of this container. So this container is like 400 pixels high, and it could be anywhere, it could be at flex-start.
>> Estelle Weyl: All right, so all of the lines are pushed to the top.
>> Estelle Weyl: We have stretch.
>> Estelle Weyl: And when I said the example doesn't work for stretch, it apparently does.

[00:08:41]
Before the yellow and red lines would not be in the right spot. So, no, it doesn't cuz these are actually taking up the whole thing. They're stretching, the yellow and red lines would actually meet. So when I say this example doesn't work for stretch, the lines are actually taking up the full width, it's just that you can't see it.

[00:09:00]

>> Estelle Weyl: Then we have baseline, and then we have space-between. And so you see here, the first line is at the top, the second line is placed at the bottom and the third line, there's spaces evenly around both of those. So, we can do space-around and then space-evenly. So the difference between this one and the other one, let me just go here.

[00:09:38]
So I want all items to flex-start, I could also do stretch
>> Estelle Weyl: Right.
>> Estelle Weyl: And that makes all of them stretch, and then let see what happens when I do stretch.
>> Estelle Weyl: So remember, I said the example doesn't work with stretch, it's the example's actually working, final stretch is the yellow and red lines that aren't working.

[00:10:05]
So you see how A, B, C, D, and E go all the way from the yellow line to the yellow line. And F, G, H, I, J go all the way through the yellow line to the next yellow line. And K goes all the way from the yellow line to the bottom, because all of the elements are stretched within their own line, and the align-content is stretched.

[00:10:27]
So let's switch this to,
>> Estelle Weyl: Centre. Okay, so here they're all grouped in the centre, they're all stretched, with the align-items property, but all the lines are grouped in the center with the align-content property. Are you understanding the difference between align-items and align-content? I would be surprised if you were, because this took me forever to wrap my head around.

[00:11:04]
Just realize that the align items is within its own line. Is it at the top, at the bottom, in the middle, or stretched? And the align content is the full line, like all the lines within the container, are they all grouped at the top, are they all grouped at the bottom, are they all grouped at the center?

[00:11:24]
Are they spaced out or not? So let me put this back to flex-start or I'm gonna put it at flex- end just to make life more confusing. And let me go back to the top.
>> Estelle Weyl: Align-content so we did center and then let's do space-evenly.
>> Estelle Weyl: All right, so there's this much space between the main-start in the yellow line.

[00:11:57]
No, that's cross-start in the yellow line between the red and the yellow line, between the second red and yellow line, and between the third red line and the end. Does that make sense to people, this is one of those things where I don't expect you to fully grasp it.

[00:12:12]
Hopefully after we're done with grids you will fully understand it.

