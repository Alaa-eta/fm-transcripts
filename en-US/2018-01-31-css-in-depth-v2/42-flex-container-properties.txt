[00:00:03]
>> Estelle Weyl: But wait, there's more! Ed Valenti is the one who did the Ginsu knives, some of you might be too old to remember Ginsu knives, but yes, so there's more. We've basically set up a basic flex, so let's deep dive now into the properties that impact the flex container, which is the parent.

[00:00:28]

>> Estelle Weyl: So there are ways where you can control the flex items, which are those children, all that things from bananas to xylophone, and I can't remember what was A. Those are all flex items, so the flex container is the box that they're all in and that's the thing we put display flex on.

[00:00:44]
And you can control the appearance of the children partially through some properties of the flex container. So there's the justify content property and it has many different values including, flex-start, flex-end, center, space-between, space-around, space-evenly. The justify content properties aligns flex items along the main axis which in this case is from left to right.

[00:01:12]
The align content is on the cross axis which is top to bottom and that's why I want to cover across and main axis so you'd understand those terms. So here, I have a display: flex, and only three items so they don't take up the whole space. So basically, justify-content property deals with what to do with this space if the sum of the widths or the heights, the main dimension of the flex items is not exactly equal to the parent container.

[00:01:50]
So this case, we have a lot of free space but sometimes, remember when it's overflowing, what happens when it overflows? Does it start at the left, does it start at the right, does it go in the center? So these are, basically, the justify-content in, says what to do with the extra space or the lack of space along the main axis.

[00:02:13]
So here we've put space between, which puts even amounts, it puts the first one on the left or at the cross start, I mean, at the main start. So number one always goes at main start, which is important later on when you have too many items. When you have too many items, a is still gonna be in that corner, it's gonna grow out.

[00:02:33]
It puts the second one at main end, and then it puts these equal amounts of space every time it adds ones in. So space, that's what space between does. Space around puts the same amount of space on each side of each element, so if there's 20 pixels on the left of a, there's 20 pixels on the right of a, and there's 20 pixels on the left of b, and 20 pixels on the right of b, and 20 pixels on the right of c and on the left of c.

[00:03:03]
So that means a space between a and b is twice as wide as the space between the start and a, and that's ugly, right? Who here thinks that's ugly?
>> Estelle Weyl: Okay everyone's asleep except for one person cuz that is ugly. So there's also a property called space evenly, and that takes care of it and it puts the same amount of space on the outside and on the inside.

[00:03:28]

>> Estelle Weyl: Space evenly is not in the flex box specification, it's in the positioning specification or something like that. So if you don't see it in the flex box, it actually is, it's just they've stopped the flex box and they've added spacing and stuff like that, or whatever that specification is, so we might get other features.

[00:03:50]
You have to basically click through the specification, which is why this took four years to write. It actually took more than that because Eric had written the first and second and third edition so he already had this much content and we had to add that much more. Okay, so that's just, no, let's go a few more.

[00:04:10]
There's center, which groups them all at the center. There's flex-start.
>> Estelle Weyl: Which is main start, the main axis that starts main axis. There is flex-end.
>> Estelle Weyl: And I think that's it. Okay, then we have the align items property, which basically aligns items along the cross axis. We just learned main axis which is justified content, aligned as it along the cross axis.

[00:04:40]
And similarly we have flex-start, flex-end, center, baseline and stretch. So here are three elements that I have.
>> Estelle Weyl: And they are all centered, that is not the default. The default, which is what you usually want is stretch. There is a three-column layout, right? With no work what so ever, it’s just display flex and that's it, right?

[00:05:10]
So, align-items center, we can also do flex-start, which puts it at top, flex-end, which puts it at the bottom and when I mean bottom, I actually mean cross end, it aligns it at cross end but I think bottom is easier to use. We already showed stretch, we showed center, so let me show baseline.

[00:05:39]
Baseline is a little bit weird, but if you actually took something like a piece of paper and went across the whole thing this is another and header width are all perfectly aligned because they are aligned along baseline. So if I have more padding on the top of one or more margin on the top of one, it's aligned on baseline.

[00:06:05]
Which is kind of interesting when you have an aside on one side and a nav on another side and your main article and you have an H1 and an H2 and an H3, you can align all three at baseline. Everything else will just flow in after that but the thing is, that does not lead to a three-column layout.

[00:06:22]
I would rather stretch it, right, and then make sure that I made my top padding the same.
>> Estelle Weyl: But that is baseline, okay, so I did say that I would have the visibility of collapse.
>> Estelle Weyl: It looks like visibility hidden.
>> Estelle Weyl: Doesn’t it? Because that says a line items center, that's center this way.

[00:06:56]
The default is flex-start, so if I do justify.
>> Estelle Weyl: Okay, see, I look things up. If I do justify content: flex-start; it doesn't change because the item is taking up its full width it's basically disability hitting.
>> Estelle Weyl: Okay, then we have the align-content property and the values of the align-content are flex-start, flex-end, center, space-between, space-around, stretch, and space-evenly.

[00:07:37]
Doesn't that sound exactly like justify-content? But that only applies to multi-line containers, originally, it was just within its one line, right? We were aligning thing within one line, sometimes we have more than one line. So here we have the align-content property, and right now the value is flex-end.

[00:08:08]
So all the lines are at the bottom before it was just the flex items in that one line were at the bottom of their flex line, right? Here all the lines are at the bottom of this container, so this container is like 400 pixels high and it could be anywhere, it could be at flex-start, right, so all the lines are pushed to the top.

[00:08:32]

>> Estelle Weyl: We have stretch and when I said the example doesn't work for stretch, it apparently does, before the yellow and red lines would not be in the right spot. So, no it does't because these are actually taking up the whole thing, they're stretching, the yellow and red lines would actually meet.

[00:08:53]
So when I say this examples doesn't work for stretch, the lines are actually taking up the full width, it's just you can't see it. Then we have baseline, and then we have space between.
>> Estelle Weyl: And so you see here, the first line is at the top, the second line is placed at the bottom and the third line, the space is evenly around both of those.

[00:09:22]
So we can just space-around and then space-evenly.
>> Estelle Weyl: So the difference between this one and the other one, let me just go here.
>> Estelle Weyl: So I lined all items at flex-start, I could also do a stretch.
>> Estelle Weyl: Right.
>> Estelle Weyl: And that makes all of them stretch and then let's see what happens when I do stretch.

[00:09:58]
So remember I said the example doesn't work with stretch, it's the examples actually working fine with stretch, it's the yellow and red lines that aren't moving. So you see how A, B, C, D and E go all the way from the yellow line to the yellow line and F, G, H, I, J goes all the way from the yellow line to the next yellow line and K goes all the way from the yellow line to the bottom.

[00:10:20]
Because all the elements are stretched within their own line and the align content is stretched. So let’s switch this to.
>> Estelle Weyl: Center.
>> Estelle Weyl: Okay, so here they're all grouped in the center, they’re all stretched with the align-items property but all the lines are grouped in the center with the align-content property.

[00:10:55]
Are you understanding the difference between align-items and align-content? I would be surprised if you were, because this took me forever to grok my head around, just realize that the align items is within it's own line, is it at the top, at the bottom, in the middle or stretched.

[00:11:14]
And the align content is the full line like all the lines within the container, are they all the grouped at the top are they all grouped at the bottom, are they all grouped in the center, are they spaced out or not? So let me put this back to flex-start or I'm gonna put it at flex-end just to make life more confusing and let me go back to the top.

[00:11:41]

>> Estelle Weyl: Line content, so we did center and then let's do space evenly.
>> Estelle Weyl: So there's as much space between main start and the yellow line, no, that's cross start in the yellow line. Between the red and the yellow line, between the second red and yellow line and between the third red line and the end.

[00:12:07]
Does that make sense to people? This is one of those things where I don't expect you to fully grok it, hopefully after we're done with grids, you'll fully understand it.

