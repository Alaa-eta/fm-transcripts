WEBVTT

1
00:00:03.000 --> 00:00:05.590
&gt;&gt; Estelle Weyl: I want to talk about
Relational selectors and Combinators.

2
00:00:07.670 --> 00:00:10.510
So, as previously mentioned,

3
00:00:10.510 --> 00:00:15.378
there is the descendant selector,
it's a combinator of a space.

4
00:00:15.378 --> 00:00:18.865
So here, ut says ul li, so

5
00:00:18.865 --> 00:00:23.621
it matches every list item that it is

6
00:00:23.621 --> 00:00:28.389
a descendant of an unordered list.

7
00:00:28.389 --> 00:00:32.233
So here on the right hand side
we have an ordered list and

8
00:00:32.233 --> 00:00:35.340
nested within that we have unordered list.

9
00:00:37.470 --> 00:00:40.920
If I say ol li, it matches everything.

10
00:00:40.920 --> 00:00:45.830
So, I actually added some opacity,
and youâ€™ll see that a,

11
00:00:45.830 --> 00:00:48.030
b, and c were kind of matched twice.

12
00:00:49.790 --> 00:00:54.585
Because the li that is
a descendant of the unordered list

13
00:00:54.585 --> 00:00:58.860
is also is a descendant
of the ordered list.

14
00:00:58.860 --> 00:01:03.700
But the ones that are just a descendant of
the ordered list only match the first one.

15
00:01:03.700 --> 00:01:07.723
So I basically put,

16
00:01:07.723 --> 00:01:12.463
it got the color twice.

17
00:01:15.050 --> 00:01:16.696
&gt;&gt; Estelle Weyl: It got
the color twice from just that,

18
00:01:16.696 --> 00:01:18.610
because it is both a child and
a grandchild.

19
00:01:20.180 --> 00:01:24.252
Here if I click on ol &gt; li,

20
00:01:24.252 --> 00:01:29.623
that means just the list items that

21
00:01:29.623 --> 00:01:34.630
are a child of the ordered list.

22
00:01:35.640 --> 00:01:37.287
So why is a, b and c grey?

23
00:01:39.817 --> 00:01:43.899
&gt;&gt; Estelle Weyl: Because it actually
is nested within a gray parent,

24
00:01:43.899 --> 00:01:45.764
which is the parent li.

25
00:01:45.764 --> 00:01:48.866
So that parent li has been
targeted as being gray, and so

26
00:01:48.866 --> 00:01:51.510
the whole thing has
a background of being gray.

27
00:01:51.510 --> 00:01:55.890
It's not those individual
items that were also targeted.

28
00:01:58.170 --> 00:02:00.870
Then there's the adjacent
sibling selector.

29
00:02:00.870 --> 00:02:06.960
So number 4 has a class of, hasaclass,
I should come up with better names.

30
00:02:08.090 --> 00:02:13.717
So this selector right here says,
find the li that comes immediately after,

31
00:02:13.717 --> 00:02:16.329
basically having the same parent.

32
00:02:16.329 --> 00:02:21.500
It's nested in the same parent,
it comes immediately after an li that

33
00:02:21.500 --> 00:02:28.287
has a class of,
&gt;&gt; Estelle Weyl: That

34
00:02:28.287 --> 00:02:29.062
has a class of hasaclass.

35
00:02:29.062 --> 00:02:31.901
That's why I should have named it
something different because I said that

36
00:02:31.901 --> 00:02:33.740
and then I'm like what did I just say.

37
00:02:33.740 --> 00:02:36.200
That's considered the adjacent
sibling selector.

38
00:02:36.200 --> 00:02:38.266
So, let me see if I can get rid of this,
no I can't.

39
00:02:40.257 --> 00:02:42.816
&gt;&gt; Estelle Weyl: Okay.

40
00:02:44.540 --> 00:02:51.510
&gt;&gt; Estelle Weyl: I have a small problem
which is the last one is not visible.

41
00:02:51.510 --> 00:02:57.216
And it has a tilde, so instead of
the plus right here, it has tilde.

42
00:02:57.216 --> 00:03:01.130
The tilde is the general sibling selector.

43
00:03:02.470 --> 00:03:07.702
So the general sibling selector,
which was new in IE7,

44
00:03:07.702 --> 00:03:12.173
so it's not new anymore,
targets the element.

45
00:03:12.173 --> 00:03:18.691
So if it said li.hasaclass tilde li,
it means match any li that comes after,

46
00:03:18.691 --> 00:03:25.050
not immediately after, but just
generally after, an li that hasaclass.

47
00:03:25.050 --> 00:03:30.350
So here number 4 hasaclass, and five,
six, and seven are general siblings.

48
00:03:30.350 --> 00:03:33.150
They're not the adjacent sibling,
which is the plus sign.

49
00:03:33.150 --> 00:03:36.189
They are the tilde,
which is the general sibling.

50
00:03:40.293 --> 00:03:43.707
&gt;&gt; Estelle Weyl: Just so you know
how I actually did that JavaScript,

51
00:03:43.707 --> 00:03:48.751
I used the Selectors API and I basically,
the reason I'm pointing this out,

52
00:03:48.751 --> 00:03:53.348
is in JavaScript you can say,
query selector and query selector all.

53
00:03:53.348 --> 00:03:58.347
And you can put any CSS
selector that we cover today,

54
00:03:58.347 --> 00:04:02.670
you can put in there and
target that element.

55
00:04:04.030 --> 00:04:06.990
The first one comes back
with just the first element,

56
00:04:06.990 --> 00:04:10.770
the second one which is query select all
comes back with all of the elements.

57
00:04:11.770 --> 00:04:16.918
And then you can do something, you see
this is a little bit more complex, it

58
00:04:16.918 --> 00:04:22.509
says find me all the elements that had the
class of foo that are descendant of bar.

59
00:04:22.509 --> 00:04:27.324
And you can actually get
much more complex than this,

60
00:04:27.324 --> 00:04:36.743
you can put,
&gt;&gt; Estelle Weyl: Any

61
00:04:36.743 --> 00:04:41.970
descendant of var that
also has a type attribute.

62
00:04:41.970 --> 00:04:43.610
So you can put anything in there, and

63
00:04:43.610 --> 00:04:47.420
you can use JavaScript to find
those elements if you need to.

64
00:04:47.420 --> 00:04:55.100
And so I basically used
the Selectors API with a class list,

65
00:04:55.100 --> 00:04:58.230
which is a feature in JavaScript as well,
to add and remove classes.

66
00:04:58.230 --> 00:05:01.280
And that's how I did the JavaScript
that changed, selected those.

67
00:05:01.280 --> 00:05:05.210
So I want you to think about the fact
that you can remove and add classes and

68
00:05:05.210 --> 00:05:08.710
have QuerySelector and
QuerySelectorAll in your JS.

69
00:05:08.710 --> 00:05:12.556
And add and remove classes and
target elements.

