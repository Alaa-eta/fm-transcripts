WEBVTT

1
00:00:02.375 --> 00:00:05.650
&gt;&gt; Estelle Weyl: Next we're
going to talk about flex items.

2
00:00:05.650 --> 00:00:06.640
We've been talking so

3
00:00:06.640 --> 00:00:12.390
far all the properties have controlled the
flex items based on the flex container.

4
00:00:12.390 --> 00:00:14.310
But you can actually control flex items

5
00:00:14.310 --> 00:00:19.223
individually.
&gt;&gt; Estelle Weyl: We have the align

6
00:00:19.223 --> 00:00:20.510
self property.

7
00:00:20.510 --> 00:00:22.730
Remember we had the align items property?

8
00:00:22.730 --> 00:00:25.550
Which will line an item within its line.

9
00:00:25.550 --> 00:00:28.566
And they all went to the top, or
they all went to the bottom, or

10
00:00:28.566 --> 00:00:29.850
they were all stretched.

11
00:00:29.850 --> 00:00:35.820
You can overwrite that align
items on each individual one.

12
00:00:35.820 --> 00:00:38.070
So, here

13
00:00:41.050 --> 00:00:44.950
see by default the whole container's going
to be the same height as C because C is

14
00:00:44.950 --> 00:00:47.170
the one with the most information.

15
00:00:47.170 --> 00:00:50.020
And I've aligned all
the items in the center, but

16
00:00:50.020 --> 00:00:52.880
I said just B I want to stretch.

17
00:00:52.880 --> 00:00:56.570
So A and C are both centered, but

18
00:00:56.570 --> 00:01:00.000
C looks like it's stretched
because it is taking up 100%.

19
00:01:00.000 --> 00:01:07.045
And b is not being aligned center,
it's actually stretched flex end.

20
00:01:07.045 --> 00:01:09.680
You can bring it all
the way down to the bottom.

21
00:01:11.280 --> 00:01:12.990
I can bring it all
the way down to the top.

22
00:01:14.620 --> 00:01:16.400
I can do base line.

23
00:01:19.230 --> 00:01:22.620
And since it's the only one with base
line, it goes all the way up to the top.

24
00:01:22.620 --> 00:01:26.850
What does auto do?

25
00:01:26.850 --> 00:01:28.210
Someone asked that earlier, right?

26
00:01:30.330 --> 00:01:34.300
Auto basically says the line is centered
because that's what its parents is doing.

27
00:01:34.300 --> 00:01:37.580
That's what the parent is saying to do.

28
00:01:37.580 --> 00:01:43.430
And then we have center stretch baseline,
so we're good, I could have done the same

29
00:01:43.430 --> 00:01:48.910
thing with a.
&gt;&gt; Estelle Weyl: Right?

30
00:01:48.910 --> 00:01:50.220
So I'm only moving one.

31
00:01:50.220 --> 00:01:54.670
That is the aligned self which overwrites
the aligned items property just for

32
00:01:54.670 --> 00:02:02.311
the elements on which it's declared.
&gt;&gt; Estelle Weyl: So

33
00:02:02.311 --> 00:02:07.607
here just the h so this was this previous

34
00:02:07.607 --> 00:02:12.660
one here was a single line right?

35
00:02:12.660 --> 00:02:17.410
This is a single line of flex items here
we have multiple lines of flex items.

36
00:02:17.410 --> 00:02:24.480
The letter h is the one where I'm gonna
overwrite because it says h align stretch.

37
00:02:24.480 --> 00:02:28.951
So all of them on the container,

38
00:02:28.951 --> 00:02:33.770
it says align-items flex start.

39
00:02:33.770 --> 00:02:35.080
Align content flex end, rather.

40
00:02:38.610 --> 00:02:42.015
So align-content flex end means it's
all the content is down at the bottom,

41
00:02:42.015 --> 00:02:45.860
align-items means that within each line

42
00:02:45.860 --> 00:02:48.990
every item is aligned to
the top of that flex line.

43
00:02:48.990 --> 00:02:51.056
So the difference between align-content,

44
00:02:51.056 --> 00:02:53.690
align-content says go all
the way down to the bottom.

45
00:02:53.690 --> 00:02:56.646
Align-item says within
each line go to the top.

46
00:02:56.646 --> 00:03:00.379
And then align-self says just for

47
00:03:00.379 --> 00:03:05.920
one item on which I'm gonna declare it,
flex end.

48
00:03:05.920 --> 00:03:10.340
And you see how the eight
shift down at the bottom.

49
00:03:10.340 --> 00:03:15.270
So FGIJ, ABCDE, and K, they

50
00:03:16.950 --> 00:03:21.679
all inherit the line items
&gt;&gt; Estelle Weyl: From the parent,

51
00:03:21.679 --> 00:03:23.400
from the container.

52
00:03:24.830 --> 00:03:26.300
And that's usually what you wanna do,

53
00:03:26.300 --> 00:03:28.240
you want all of your
elements to look the same.

54
00:03:28.240 --> 00:03:30.270
You don't want one to look different.

55
00:03:30.270 --> 00:03:33.900
This does not look good, but
even if they were all looking the same,

56
00:03:33.900 --> 00:03:37.960
it would still look like crap because
I used the pale green, orange, yellow,

57
00:03:39.240 --> 00:03:43.260
an icky font cuz we are trying to make
things look as ugly as possible today.

58
00:03:43.260 --> 00:03:48.050
So, that's the align-self property,
then we have the order property.

59
00:03:50.200 --> 00:03:54.300
So, by default, every single elements or

60
00:03:54.300 --> 00:03:58.330
flex item has the order of zero,
there all zero.

61
00:04:00.680 --> 00:04:06.470
So, there all would be the order
that they were declared, Like every

62
00:04:06.470 --> 00:04:11.280
order of value so you can change the order
to negative one to negative 50 to 400

63
00:04:11.280 --> 00:04:16.440
whatever you want but every single
item that has the flex the order

64
00:04:16.440 --> 00:04:23.310
property with a value of negative one will
come before all of those that have zero.

65
00:04:23.310 --> 00:04:25.930
But all of those within the groups
that have the value of 0,

66
00:04:25.930 --> 00:04:27.940
will be in order of the markup.

67
00:04:27.940 --> 00:04:32.912
And all of those with -1 will be in order
of the markup in terms of the ones that

68
00:04:32.912 --> 00:04:34.301
have the value of 1.

69
00:04:34.301 --> 00:04:38.840
So let's show by example, because
explaining it is a little bit hard.

70
00:04:38.840 --> 00:04:44.210
So here we already know that these
go in alphabetical order, right.

71
00:04:44.210 --> 00:04:48.880
So let me just do x and x and
it goes alphabet, banana,

72
00:04:48.880 --> 00:04:52.430
crayons, dinosaurs,
foundation, ghost, happy.

73
00:04:52.430 --> 00:04:54.340
It's in alphabetical order.

74
00:04:54.340 --> 00:04:56.770
I've put display flex.

75
00:04:58.130 --> 00:05:02.360
So it's flex box on the parent and
then the flex box says row so

76
00:05:02.360 --> 00:05:07.720
it's going to across from left to right
and then top to bottom because it's

77
00:05:07.720 --> 00:05:11.860
allows to rap but it's not rap reverse,
so the cross axis is from top to bottom.

78
00:05:11.860 --> 00:05:13.090
The main axis is from left to right.

79
00:05:14.380 --> 00:05:19.550
Then I say every third one,
give it an order of negative one.

80
00:05:19.550 --> 00:05:23.620
So all the dark gray ones came
before the medium gray and

81
00:05:23.620 --> 00:05:29.050
the white ones, but within the dark grey
ones, they're still in alphabetical order.

82
00:05:29.050 --> 00:05:33.100
It says, cramped, foundation, igloo,
lasso, orange, rancid, umbrella,

83
00:05:33.100 --> 00:05:33.850
and xylophone.

84
00:05:33.850 --> 00:05:37.724
I have no clue what mood I was in
when I came up with these words.

85
00:05:37.724 --> 00:05:42.637
And then, so all the ones with
an order of negative one come

86
00:05:42.637 --> 00:05:46.160
before all of those with an order of zero.

87
00:05:48.170 --> 00:05:51.376
Then I'm going to give all
of these a positive one,

88
00:05:51.376 --> 00:05:55.402
which means they all come after
the ones with a value of zero, but

89
00:05:55.402 --> 00:06:00.922
they're also in alphabetical order, so
that third group is: alphabet, dinosaurs,

90
00:06:00.922 --> 00:06:05.950
ghosts, janitors, magic eight ball,
petunia, shoelace, and valentine.

91
00:06:05.950 --> 00:06:12.043
If I were to do -2.
&gt;&gt; Estelle Weyl: Or

92
00:06:12.043 --> 00:06:16.636
-11, they would come before all those with

93
00:06:16.636 --> 00:06:21.181
a -1.
&gt;&gt; Estelle Weyl: And then if I were to

94
00:06:21.181 --> 00:06:25.663
give all of these, order, -22

95
00:06:36.920 --> 00:06:38.025
&gt;&gt; Estelle Weyl: That's on the parent,

96
00:06:38.025 --> 00:06:39.390
it has to be on the child.

97
00:06:39.390 --> 00:06:41.480
Ok, that's why it didn't work.

98
00:06:41.480 --> 00:06:43.320
So do you understand how order works?

99
00:06:44.350 --> 00:06:49.460
Not only does it change the order, if

100
00:06:49.460 --> 00:06:54.940
more than one element has the same value
for order, it's in the order of the HTML.

101
00:06:54.940 --> 00:06:56.560
It'll be in the same order as the code,

102
00:06:56.560 --> 00:07:01.087
as the markup.
&gt;&gt; Estelle Weyl: And

103
00:07:01.087 --> 00:07:02.950
this is just here because it's pretty.

104
00:07:02.950 --> 00:07:08.388
No, it's here because the navigation

105
00:07:08.388 --> 00:07:12.350
here I gave it an order of 4.

106
00:07:12.350 --> 00:07:17.962
And so it is at the bottom
because it is greater than 0,

107
00:07:17.962 --> 00:07:23.574
but you'll notice what I did,
I gave it both the nav and

108
00:07:23.574 --> 00:07:31.140
the footer an order of 4 Because by
default, nav and footer both have 0.

109
00:07:31.140 --> 00:07:35.331
If I only gave nav an order of 4,
footer would still have 0, and

110
00:07:35.331 --> 00:07:37.130
would come before the nav.

111
00:07:37.130 --> 00:07:41.060
And I definitely want the footer
to come after the nav.

112
00:07:41.060 --> 00:07:46.250
So by giving nav and footer both
a value of 4, they're both last,

113
00:07:46.250 --> 00:07:51.120
but they're still in the order In terms
of the html, nav can be for footer.

114
00:07:51.120 --> 00:07:52.080
Does that make sense to everyone?

115
00:07:54.980 --> 00:07:55.670
Okay.

116
00:07:55.670 --> 00:08:00.670
So in terms of accessibility,
the screen meter

117
00:08:00.670 --> 00:08:06.220
is going to read it in the source
order I think expect for Mozilla.

118
00:08:06.220 --> 00:08:09.390
But that will probably be fixed,
but I'm not sure.

119
00:08:09.390 --> 00:08:13.500
So don't, I think there's one browser
that was like maybe we should read.

120
00:08:13.500 --> 00:08:17.970
But the interesting thing is, and
the thing to worry about is the tab order.

121
00:08:17.970 --> 00:08:24.360
A lot of people access websites
using the keyboard not their mouse.

122
00:08:24.360 --> 00:08:27.606
So a visual reader look at it and
point to something and click.

123
00:08:27.606 --> 00:08:34.360
That's fine, ut if you're tabbing and
you have the top part for

124
00:08:34.360 --> 00:08:39.190
search engine optimization,
you know some BS stuff on the top.

125
00:08:39.190 --> 00:08:43.744
You know it says baseball, baseball,
baseball or actually it would be sex, sex,

126
00:08:43.744 --> 00:08:47.858
sex, sex, sex, because that will bring
up your order on many more views.

127
00:08:47.858 --> 00:08:51.854
And you put that at the bottom and someone
starts tabbing through your page they're

128
00:08:51.854 --> 00:08:54.180
not gonna see where their mouse is.

129
00:08:54.180 --> 00:09:00.860
So realize that you wanna think about the
tab order when you're reordering things.

130
00:09:00.860 --> 00:09:06.366
And then right to left languages,
it's kind of awesome because it will

131
00:09:06.366 --> 00:09:12.520
flip it for you and its source order
will It will follow the source order.

132
00:09:12.520 --> 00:09:16.178
So it'll put your first
div to the right and

133
00:09:16.178 --> 00:09:20.250
then the second one in
the order that they read.

