[00:00:00]
>> Next on the list, we'll cover some details about for loops. And as we discussed at the beginning of class, the loop that does not exist is the do while. But there are some different ways we can use for loops to do some dynamic things within the logic.

[00:00:17]
I'm looking at the for.go file in the basic_syntax directory. Once again, I'll be uncommenting the whole file and starting at the top. So our basic for loop is gonna look super similar to JavaScript. And this is one of the only occasions where you're gonna see semicolons hanging out in Go.

[00:00:37]
And so, if we have an integer assigned to a value of 1, our i assigned to 1, we have the three statements that instantiate a for loop. The first is, if this were not here, we're setting the initial value of i to 1. And then we're saying hey, keep going in this for loop until i reaches 100, is less than or equal to 100.

[00:01:00]
And then for every iteration, increment the variable by 1. If we wanna go ahead and run this code, Open up our terminal. We're gonna go run, we are in basic_syntax code and then our for loop. So when we run Go, you'll see that our for loop has printed out all of the integers to 100.

[00:01:46]
Option two is we can actually kill both of the statements to the left and the right. So in this top one, if we review the conditionals in the middle, for if i is less than or equal to 100. In the second version here, the behavior of this for loop will actually turn out kinda like a while loop.

[00:02:03]
So while i is less than or equal to 100, do the stuff that's in the middle. So even though we don't actually have a while loop syntax, we can make a for loop behave a little bit differently. Save and rerun. And then this last one here, which is my favorite and a really powerful version of our for loop uses the range keyword.

[00:02:30]
And so on line 29, we have a sentence. It is assigned to the value of this as a sentence. And then our for loop takes a couple additional arguments here. So we're kind of circling back to that structure that we saw with the if blocks, where we have a couple different variables on the left.

[00:02:48]
And then we have our shorthand syntax with the colon equal sign, which means that these variables are getting assigned to whatever's on the right hand side. So index and letter is getting assigned to the range keyword, which means I'm gonna iterate over a thing. And then what are we iterating over, we're iterating over mySentence, which is a string.

[00:03:06]
So Go is allowing us to treat a string kind of like a collection of things, like an array. And so, we're iterating over every element, which in this is in this string. So we're iterating over each of the letters. So once we're in the for loop here, I want to use the Println function to print index and then the actual index value and then the letter.

[00:03:25]
And then whatever thing we're looking at within our sentence, I'm gonna save this and run it. I want to call attention to some interesting behavior that we're gonna see here. So we're iterating over the sentence. Our sentence is a series of letters, but you'll notice that the thing we're printing out is actually two numbers.

[00:03:43]
So on the left hand side, we're seeing a series of integers that increment, those are the index values. And then on the right hand side, we're actually seeing integers, not letters, which is surprising.

