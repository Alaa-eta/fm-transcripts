WEBVTT

1
00:00:00.100 --> 00:00:02.810
Next on the list,
we'll cover some details about for loops.

2
00:00:04.140 --> 00:00:06.360
And as we discussed at
the beginning of class,

3
00:00:06.360 --> 00:00:09.640
the loop that does not
exist is the do while.

4
00:00:09.640 --> 00:00:12.290
But there are some different
ways we can use for

5
00:00:12.290 --> 00:00:17.130
loops to do some dynamic
things within the logic.

6
00:00:17.130 --> 00:00:20.530
I'm looking at the for.go file
in the basic_syntax directory.

7
00:00:23.400 --> 00:00:29.280
Once again, I'll be uncommenting
the whole file and starting at the top.

8
00:00:29.280 --> 00:00:32.470
So our basic for loop is gonna
look super similar to JavaScript.

9
00:00:32.470 --> 00:00:35.960
And this is one of the only occasions
where you're gonna see semicolons

10
00:00:35.960 --> 00:00:37.780
hanging out in Go.

11
00:00:37.780 --> 00:00:43.092
And so, if we have an integer assigned
to a value of 1, our i assigned to 1,

12
00:00:43.092 --> 00:00:47.160
we have the three statements
that instantiate a for loop.

13
00:00:47.160 --> 00:00:54.183
The first is, if this were not here,
we're setting the initial value of i to 1.

14
00:00:54.183 --> 00:00:58.845
And then we're saying hey, keep going
in this for loop until i reaches 100,

15
00:00:58.845 --> 00:01:00.760
is less than or equal to 100.

16
00:01:00.760 --> 00:01:03.926
And then for every iteration,
increment the variable by 1.

17
00:01:07.653 --> 00:01:13.518
If we wanna go ahead and
run this code, Open up our terminal.

18
00:01:19.321 --> 00:01:23.300
We're gonna go run, we are in
basic_syntax code and then our for loop.

19
00:01:24.900 --> 00:01:30.963
So when we run Go, you'll see that our for

20
00:01:30.963 --> 00:01:38.421
loop has printed out all
of the integers to 100.

21
00:01:46.323 --> 00:01:52.000
Option two is we can actually kill both of
the statements to the left and the right.

22
00:01:52.000 --> 00:01:56.080
So in this top one, if we review
the conditionals in the middle, for

23
00:01:56.080 --> 00:01:58.129
if i is less than or equal to 100.

24
00:01:59.200 --> 00:02:01.670
In the second version here,
the behavior of this for

25
00:02:01.670 --> 00:02:03.710
loop will actually turn out
kinda like a while loop.

26
00:02:03.710 --> 00:02:07.285
So while i is less than or equal to 100,
do the stuff that's in the middle.

27
00:02:07.285 --> 00:02:10.219
So even though we don't actually have
a while loop syntax, we can make a for

28
00:02:10.219 --> 00:02:11.772
loop behave a little bit differently.

29
00:02:16.252 --> 00:02:17.604
Save and rerun.

30
00:02:24.031 --> 00:02:26.823
And then this last one here,
which is my favorite and

31
00:02:26.823 --> 00:02:30.318
a really powerful version of our for
loop uses the range keyword.

32
00:02:30.318 --> 00:02:33.299
And so on line 29, we have a sentence.

33
00:02:33.299 --> 00:02:36.943
It is assigned to the value
of this as a sentence.

34
00:02:36.943 --> 00:02:40.710
And then our for loop takes
a couple additional arguments here.

35
00:02:40.710 --> 00:02:45.098
So we're kind of circling back to that
structure that we saw with the if blocks,

36
00:02:45.098 --> 00:02:48.189
where we have a couple different
variables on the left.

37
00:02:48.189 --> 00:02:51.737
And then we have our shorthand syntax with
the colon equal sign, which means that

38
00:02:51.737 --> 00:02:55.868
these variables are getting assigned
to whatever's on the right hand side.

39
00:02:55.868 --> 00:02:59.092
So index and letter is getting
assigned to the range keyword,

40
00:02:59.092 --> 00:03:01.457
which means I'm gonna
iterate over a thing.

41
00:03:01.457 --> 00:03:04.975
And then what are we iterating over,
we're iterating over mySentence,

42
00:03:04.975 --> 00:03:06.210
which is a string.

43
00:03:06.210 --> 00:03:09.170
So Go is allowing us to treat a string
kind of like a collection of things,

44
00:03:09.170 --> 00:03:10.230
like an array.

45
00:03:10.230 --> 00:03:14.080
And so, we're iterating over every
element, which in this is in this string.

46
00:03:14.080 --> 00:03:15.952
So we're iterating over
each of the letters.

47
00:03:18.189 --> 00:03:22.879
So once we're in the for loop here, I want
to use the Println function to print index

48
00:03:22.879 --> 00:03:25.829
and then the actual index value and
then the letter.

49
00:03:25.829 --> 00:03:28.824
And then whatever thing we're
looking at within our sentence,

50
00:03:28.824 --> 00:03:30.700
I'm gonna save this and run it.

51
00:03:30.700 --> 00:03:35.322
I want to call attention to
some interesting behavior that

52
00:03:35.322 --> 00:03:37.219
we're gonna see here.

53
00:03:37.219 --> 00:03:38.741
So we're iterating over the sentence.

54
00:03:38.741 --> 00:03:40.381
Our sentence is a series of letters, but

55
00:03:40.381 --> 00:03:43.620
you'll notice that the thing we're
printing out is actually two numbers.

56
00:03:43.620 --> 00:03:46.621
So on the left hand side, we're seeing
a series of integers that increment,

57
00:03:46.621 --> 00:03:47.738
those are the index values.

58
00:03:47.738 --> 00:03:51.257
And then on the right hand side, we're
actually seeing integers, not letters,

59
00:03:51.257 --> 00:03:52.230
which is surprising.

